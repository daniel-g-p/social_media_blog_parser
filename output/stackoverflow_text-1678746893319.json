[{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2023/02/01/announcing-more-ways-to-learn-and-grow-your-skills/","date":"2023-01-31T23:00:00.000Z","tags":["Company"],"title":"Announcing more ways to learn and grow your skills","text":"Today, technology is changing and evolving faster than ever. As a result, we are always looking for opportunities to learn a new skill or sharpen our existing skills. During my session at our first Flow State conference last September, I talked about the expanded direction for Stack Overflow. We want to evolve the platform to empower technical communities to learn, share, and grow together. But learning something new isn’t always easy or straightforward. Our research shows that the first, and often most difficult challenge in a learning journey is figuring out where to start, and then finding appropriate, trusted resources for your needs. As we evolve the Stack Overflow experience , we want to make that process easier and more efficient by providing all the resources you need in one place. This may include helping you discover more trusted, quality content and resources; finding, building, and sharing learning paths; creating more focused, connected communities; and presenting you with opportunities for hands-on learning. We are very excited about our evolution from collective knowledge to collective learning, but it will take time. You’ll see us begin to introduce new capabilities on the platform for you to try, and we’ll update you as we leverage community feedback and user research throughout. Today, we’re pleased to introduce online course recommendations. When you visit question pages on Stack Overflow, you may now see relevant course recommendations from two popular online learning platforms, Udemy® and Pluralsight®. These course recommendations will appear as an ad module on the right side of the page, where the job recommendations used to be, and won’t impact the existing Q&A experience. Based on your cookie preferences, the courses you see will either be tailored to content you’ve visited on Stack Overflow, or courses selected based on the content of the page you’re visiting, or will be trending courses. Through our most recent Annual Developer Survey, we learned that the Stack Overflow community is already turning to Udemy and Pluralsight for online learning. These companies are also committed to making trusted learning opportunities accessible to both professional and aspiring technologists, which aligns with our goal of empowering technical communities to learn, share, and grow together. “We share in Stack Overflow’s mission to empower developers and technologists through learning and skill development in the flow of work and look forward to helping the community take the next step in their educational journey,” says Seth Hodgson, VP of Engineering at Udemy. “The new online course recommendation ad will help Stack Overflow users easily access specialized and relevant courses from our extensive catalog—right when they need them.” “Learning technical skills and keeping them sharp is critical for developers to build better and faster while also growing their careers,” said Chris Tonas, Chief Technology Officer at Pluralsight. “We look forward to partnering with Stack Overflow to provide online course recommendations for our developer communities, so they can discover purpose-built and immersive learning experiences to develop the skills they need to thrive.” Online Course Recommendations is an additional step on our path to providing all the resources technologists need in one place, and we look forward to continuing to share new ways for users to learn and grow on Stack Overflow. Tags: community, education, learning"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2023/01/31/ceo-update-eliminating-obstacles-to-productivity-efficiency-and-learning/","date":"2023-01-30T23:00:00.000Z","tags":["Company"],"title":"CEO update: Eliminating obstacles to productivity, efficiency, and learning","text":"Over the last quarter, we’ve expanded our cloud and edtech partnerships, watched Stack Overflow for Teams become more and more embedded in the developer experience, and made great strides on our path to profitability. We’ve also had many internal discussions as a leadership team about ChatGPT and other generative AI tools as they’ve rapidly entered the mainstream. We’re excited about the possibilities Generative AI may hold for the public platform as it matures, and we look forward to experimentation around it. Overall, it was a busy and successful quarter, so although my first update of 2023 takes place in a fundamentally different environment than my first of 2022, my optimism for the future has not changed. It’s simply joined by a dose of pragmatism. Productivity and efficiency: Twin themes of the new year In today’s economic environment, productivity and efficiency are more important than ever. For many companies, these are the themes of the new year, and our goal is to provide productivity and efficiency to customers through Stack Overflow for Teams, to technologists through our public platform, and to our employees through smarter processes and ways of working. At a recent dinner with senior technology executives in San Francisco, it was clear this focus on productivity is widely shared. Every CIO and CTO present spoke of their need to increase productivity, and most rightly view developer experience as a key lever in that effort. When it comes to dev experience, few initiatives are more impactful than those that encourage cross-org information sharing and reduce toil — the manual, repetitive administrative work that hampers creativity and innovation. One Stack Overflow for Teams customer in the retail space, for example, estimates that its cloud team could free up 20-30% of its time by eliminating the need to answer duplicative questions. This customer recently went through a complex merger and said Stack Overflow for Teams connected employees from the less technologically transformed part of the organization with their new, more tech-savvy peers. Ultimately, more efficient knowledge reuse helped it save nearly 10,500 hours over the last 12 months and drove meaningful progress in unifying and codifying critical institutional knowledge. That’s an enormous boost to developer productivity, which we know drives developer happiness and retention in turn. In fact, happiness and productivity are inextricably linked; our data shows that feeling unproductive is the top driver of developer unhappiness at work — and currently, a team of 50 devs loses between 333 and 651 hours per week on average searching for answers and solutions. Stack Overflow for Teams — “A revolution to IT” As I reflect on the quarter behind us and look forward to what’s likely to be a volatile year ahead, I firmly believe developer experience is one of the most effective ways for organizations to accelerate tech modernization while dealing with tighter budgets, scarcer resources, and greater scrutiny on investments. Anecdotally, it seems technology leaders agree. I am excited about this growing realization and about the many organizations who are using Stack Overflow for Teams as the basis of that experience. With Stack Overflow for Teams, companies are onboarding developers faster. Their employees are avoiding roadblocks by more efficiently finding the answers they need when they need them. And overall, companies that leverage Stack Overflow for Teams are reducing toil and driving innovation by minimizing interruptions and ensuring common problems only have to be solved once. The importance of these attributes cannot be overstated. They’re why Stack Overflow for Teams was recently recognized in G2’s Winter 2023 report as a Leader in the Knowledge Management, Q&A Platforms, and Knowledge Base categories. I’m proud of the Stack Overflow team for their continued impact and grateful they’re being recognized for it. I especially love browsing our G2 review page and hearing from people like Mahbub who called Stack Overflow for Teams “a revolution to the IT world.” More efficiently find the cloud resources you need Our work with Stack Overflow for Teams is one part of our overall vision to become the most valuable destination for the world’s current and next generation of technologists. Our public platform is the other key piece of this vision. In the last quarter, we redoubled our efforts here, with a particular focus on bringing to life our core values of Learn, Share, Grow; Keep Community at Our Center; and Be Flexible and Inclusive. First, we expanded our relationship with the big three cloud providers. Today, AWS, Microsoft Azure, and Google Cloud all have Collectives on Stack Overflow. This is an important step in our long-term evolution to allow users to self-select into smaller communities of practice that can more efficiently learn, share, and grow together. It’s an important moment for our customers, too. AWS, Azure, and Google Cloud (in addition to our other Collectives clients) can now meet their customers where they already are and build a trusted, bilateral connection through which to share accurate, cutting-edge information and updates. That includes announcing new releases, offering direct customer support, endorsing answers to user questions, and reviewing product feedback from the community. Combined, Stack Overflow already has 1.6 million AWS, Azure, and Google Cloud related questions and answers. We’re excited to see that number grow with the new Collectives. Learn and grow via Stack Overflow’s new Online Learning partners With Collectives, we’re making it more efficient for users to find the support and knowledge they need. Today’s launch of Online Course Recommendations has a similar goal. Stack Overflow research found the first and often most difficult challenge in a technologist’s learning journey is figuring out where to start. Our Chief Product Officer, Teresa Dietrich, spoke about this challenge in depth during her Flow State talk, and as Stack Overflow evolves the platform to empower technical communities to learn, share, and grow together, we wanted to prioritize this important community need. “Everything moves so fast and the source of truth changes often and things that are old can just be actively bad to learn.” Anonymous Developer, Stack Overflow qualitative research With today’s Online Course Recommendations launch, you’ll begin to see relevant courses from two popular online learning platforms, Udemy® and Pluralsight®. These course recommendations will appear as an ad module on the right-hand side of question pages on Stack Overflow. We hope this makes it easier for technologists — 70% of whom are learning a new technology at least once a year — to find appropriate, trusted resources. Udemy and Pluralsight were chosen as launch partners for exactly this reason; our 2022 Developer Survey found many respondents are already turning to these providers for their online learning needs. Online Course Recommendations and our new Collectives are additional steps on our path to providing all the resources you need in one place. In the future, we may expand on them by helping the communities on Stack Overflow and the Stack Exchange network discover more trusted quality content and resources; find, build, and share learning paths; create even more focused, connected communities; and have access to hands-on learning opportunities. A year of continuous improvement As we focus on driving productivity and efficiency with all our products, we are doing the same internally. The goal is continuous improvement in the year ahead, and we are constantly soliciting feedback across our public platform and paid products with that in mind. Based on user feedback and our own qualitative and quantitative research, we’re investing in areas where there’s a clear opportunity to solve developer and technology problems. The Staging Ground is a great example. This new public platform feature (which will initially be found only on Stack Overflow) will allow new askers to receive guidance from more experienced community members before posting their first questions publicly. We believe Staging Ground will make our community more welcoming and inclusive by making it easier for first-timers to learn Stack Overflow’s norms and best practices. An expanded beta is coming soon and an MVP later this calendar year. In addition to Staging Ground, we’re also closely monitoring ChatGPT and other generative AI tools, and we’re thinking through their impact on the community and products. Generative AI is evolving rapidly, and new use cases and risks appear each day. The community is certainly engaged on the issue; we saw a 20% year-over-year spike in questions and answers with AI-related tags following ChatGPT’s release, which reversed an overall AI-related tag decline of 12% YoY. We share the community and world’s excitement about the potential of generative AI. Our Product and Engineering teams are exploring all possibilities, and as usual, we will update and find opportunities to bring you into the conversation whenever possible. Stack Overflow has always been built by the community for the world. I want to take a moment to highlight the critical role of our moderators on big issues like ChatGPT and on countless smaller day-to-day occurrences. In 2022, our ten most active moderators (out of 600 total) responded to over 440,000 content flags (requests for moderator action) — and our most active moderator of that group dealt with 104,000 flags alone. Stack Overflow’s success is in a large part due to their tireless contributions, and in this year’s edition of Stack Gives Back, we are pleased to donate over $54,000 on behalf of our moderators to Doctors Without Borders, the Electronic Frontier Foundation, Girls Who Code, the International Rescue Committee, and UNICEF. Our path to profitability The next 12 months will inevitably bring more surprises and disruptive innovations. However, we are well-positioned for FY2024 regardless of what happens in the world around us. The community is strong and growing; our Stack Overflow for Teams product is increasingly mission critical; our company surpassed 500 Stackers for the very first time; and our path to profitability is clear. In fact, at the Prosus and Naspers Capital Markets Day in December, I walked through that path and highlighted the key role of Stack Overflow for Teams on it. That’s not to say our Ads and Employee Branding businesses aren’t important. Rather, it’s a sign of how strong Stack Overflow for Teams’ performance has been. In the first half of FY23, more than 50% of Stack Overflow revenue came from Stack Overflow for Teams — a SaaS product that only launched in 2018. We believe Stack Overflow for Teams is a powerful, sustainable, and all-weather growth engine for this company. 2022 was about investing in that engine and in the company as a whole. 2023 is about the pivot from growth towards becoming profitable again — just as we were in 2018, 2019, and 2020. Despite the economic volatility around us, there will always be a market for organizations who help customers succeed in their technology transformations. We look forward to driving productivity, efficiency, and transformation for our customers and users in the year ahead. Tags: ceo quarterly post"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2023/01/17/microsoft-azure-joins-collectives-on-stack-overflow/","date":"2023-01-16T23:00:00.000Z","tags":["Company"],"title":"Microsoft Azure joins Collectives™ on Stack Overflow","text":"Cloud technologies are constantly evolving and modernization has become an always-on IT endeavor. Developers are central to this journey. As builders and innovators, they need tools to learn and keep their skills sharp as they help navigate their organization’s digital transformation. Cloud leaders, such as Microsoft Azure, understand the importance of empowering developer communities with the knowledge and resources they need to progress through these modernization workstreams. With today’s launch of the Microsoft Azure Collective, there’s now a destination on Stack Overflow for all things Azure. This dedicated space builds upon an already robust set of Azure developer resources that make it easier to find what they need to build on their terms for on-premises, hybrid, multi-cloud, or edge environments, and with best-in-class tools, popular open-source frameworks and languages, and a platform that supports continuous collaboration and delivery. Users who join the Microsoft Azure Collective will find more than 190,000+ questions and other relevant content using 350+ tags, such as azure-functions, azure-storage, azure-active-directory, azure-sql-database, and azure-cosmosdb. Developers and technologists can engage with subject matter experts on all Microsoft Azure products, including Compute, Containers, Identity & Security, Databases, Analytics, web, mobile, and more. “At Microsoft, our mission is to empower every person and organization on the planet to achieve more. Stack Overflow is a trusted platform for developers where they share knowledge and learn from each other. We’re committed to taking their experience to a whole new level by bringing Azure experts and developers together. We look forward to contributing even more to this vibrant community!” says Saloni Singh, General Manager – Azure Modern Support Experience. “Collectives creates a community around specific areas of technical focus, where technologists of all skill levels can contribute, learn, and grow,” says Stack Overflow Chief Product Officer Teresa Dietrich. “We’re thrilled to have Microsoft engage and support the Stack Overflow community to help them build and innovate with its products and technology.” The curated, centralized community resources available through the new collective will help users discover the most up-to-date answers, including those recommended or written by Azure subject matter experts, technical articles such as how-to guides, and Bulletins for upcoming events and releases. Members can keep tabs on where they rank on the leaderboard, and they can be promoted to Recognized Member status based on their contributions. The Microsoft Azure Collective will help the community continue to learn, share, and grow by bringing knowledge and users together. To join the Azure Collective as a member, visit https://stackoverflow.com/collectives/azure To learn more about Collectives on Stack Overflow, visit https://stackoverflow.com/collectives Take a tour of Collectives on Stack Overflow, check out https://stackoverflow.co/collectives Tags: azure, collectives, microsoft"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/10/26/ceo-update-breaking-down-barriers-to-unlock-innovation/","date":"2022-10-25T22:00:00.000Z","tags":["Company"],"title":"CEO update: Breaking down barriers to unlock innovation","text":"It’s time again for a quarterly update. I always like to use this quarterly post to pause and reflect on our impact at a micro and a macro level, but I am especially reflective given I just completed my third year as CEO of Stack Overflow and on the other side of our inaugural conference for technology leaders, Stack Overflow’s Flow State. We’re fortunate to continue to grow at a rapid pace. In dynamic times, whether it be in times of hyper growth or in times of market volatility, we are seeing from our community and customers alike that breaking down the barriers to knowledge is essential for success. As I mentioned, last month we hosted our first conference for technology leaders, Stack Overflow’s Flow State, in New York City and online. It was incredible to see so many people engaged in-person and virtually who are impacted by the work we are doing. Throughout the day, we heard from technology leaders at companies like Capgemini, Etsy, Indeed, and Salesforce about how they’re tackling major transformations, managing distributed environments, and empowering their developers and technologists to be more productive. Through multiple stories on stage, it was clear that creating easier ways for teams to onboard and learn as they work is just as critical on small teams as large teams. Stack Overflow’s suite of products, Stack Overflow for Teams, Stack Overflow Advertising, Stack Overflow Talent, and Collectives on Stack Overflow, are doing just that. I started my opening keynote by discussing major industry challenges like the fact that global talent shortage is expected to reach 85.2 million by 2030. At a macro level, we need to empower non-traditional learning so that the talent pool can expand faster to meet growing market demand. We have an opportunity to help individuals just as much as we help businesses. The average cost for a top 10 computer science undergraduate degree is over $38,000 per year depending on where you live and what school you go to. Yet, the median household income in the U.S. is just under $68,000 per year. At Stack Overflow, we’ve always seen it as our responsibility to ensure technical learning resources are accessible to all. Breaking down the barriers of entry to learn is one of the core reasons I joined Stack Overflow three years ago last month. I truly believe that in times of change, accessible learning will create great opportunities for all. Accessible learning is the birthplace of innovation On the heels of my three year anniversary here at Stack Overflow, I can’t help but think about my career and how I got here. I often reflect back to when my father came home from a business trip decades ago with my first computer: a 286. Basic as it is compared to today’s standards, it represented limitless opportunities to me. It catalyzed my pursuit of a career in technology through exploration and learning. That desire to learn and contribute to something bigger exists in so many throughout the world, especially within aspiring technologists. In order to better our world, we must foster and not hamper that excitement. Stack Overflow’s dedication to making technical resources accessible is one of the core reasons I joined the company. I only wish Stack Overflow existed when I was learning to code many years ago! Over the past year, we took that commitment a step further with Overflow Offline. Announced this month, Overflow Offline is a downloadable version of the public platform created in partnership with Kiwix as a resource for organizations that serve communities with limited access to the internet. We removed perhaps the biggest barrier of entry for technical learning—access to the internet. Whether it’s researchers in Antarctica, students that live in internet deserts, or courses for incarcerated individuals in the United States and the United Kingdom, Overflow Offline extends the impact of Stack Overflow to people previously without access to technical learning resources. We also launched our first Student Ambassador program in partnership with Major League Hacking (MLH) to accelerate learning across the public platform, participate in challenges, earn rewards, and more. We’re on track to reach over 200 universities and connect with over 10,000 students this year. For the 100 million people that already visit Stack Overflow every month, we introduced Saves this month. According to research we conducted in April 2022, we found that 62% of survey respondents use bookmarks to save content for future use. This includes saving a question so that they can reference it later, building a repository, and creating a collection of high-quality content about a specific topic. Beyond bookmarking answers, Saves allows users to create custom lists and private notes on saved posts. Our vision is to become the most valuable destination for the world’s current and next generation of technologists. Breaking down barriers so that the community can grow, learn, and build innovative technologies faster is core to everything we do. Creating opportunities to learn starts within your team Just as developers and technologists are learning in their free time, they spend an incredible amount of time at work evolving their skills. That’s not always easy given a whopping 62% of developers spend over eight hours a month searching for answers, and 46% of developers spend over eight hours a month answering others’ questions. On top of all that, over 50% of devs encounter knowledge silos every week. Breaking down barriers for teams to learn from each other helps our customers scale and optimize so that developers are happy and stay in their flow state. One of my favorite visuals of this is the chart I shared at Flow State (below). With Stack Overflow for Teams, Progressive saw saw two thirds of questions answered by folks in departments different from the person who asked the question. When you eliminate barriers between teams, you can unlock limitless cross-functional learning. You don’t need to have all the answers, and chances are you don’t, not even on a single team. You just need to know where to find the answers you need, when you need them. Sustaining that flow of knowledge between teams is where we focused much of our efforts over the last year. For example, monthly editing activity increased by over 600% in just 90 days among Stack Overflow for Teams customers using Content Health. Ensuring that knowledge remains resilient is the foundation of resilient teams. Last month, we released a study we commissioned from Forrester, The Total Economic Impact™ of Stack Overflow for Teams. It found that with Stack Overflow for Teams, employees saw an overall reduction in interruptions, with 65-85% of employee questions already answered in Stack Overflow for Teams. Forrester’s research concluded that Stack Overflow delivered $14.42 million in benefits to the composite customer over three years and cost $4.95 million over the same time period. This puts the net present value (NPV) of Stack Overflow for Teams just shy of $9.5 million, with a return on investment (ROI) of 191%. We recently shared that Stack Overflow is named as a Sample Vendor in the 2022 Gartner® Hype Cycle™ for Agile and DevOps for Communities of Practice. This is a powerful step forward in enabling organizations of all sizes to build strong internal communities that foster collective learning. Our customers continue to share their experiences on G2, leading to Stack Overflow for Teams being named as a leader by G2 in the Knowledge Management and Q&A Platform categories for the 15th consecutive quarter. To continue powering the flow state, we’ve always allowed people to leverage Stack Overflow’s API to embed tailored access directly into workflows. That also extends to Stack Overflow for Teams, which helps organizations like Spotify and their open source initiative, Backstage. They use the API to deeply integrate Stack Overflow into Backstage to allow both active searching of public and team-only Stack Overflow answers, alongside information held only in Backstage. Stack Overflow for Teams won an API Award for the Communications API category for innovation, adoption, and reception by the developer community. Just another way breaking down barriers leads to innovative solutions for all. Looking ahead We accomplished a lot in the past few months, and we will continue building on recent momentum as we head towards the end of the calendar year. I find it so energizing to see some of these initiatives come to life. Meeting so many users, customers, and technology leaders at Flow State, seeing Student Ambassadors engage through our programs, and hearing about the impact of Overflow Offline are all powerful ways we’re continuing to make an impact. Of course, we cannot stress enough the importance of breaking down barriers to learn without examining how we are doing the same here at Stack Overflow. This month we’re rolling out what we call, “Learn, Share, Grow Days” (LSG Days) so that Stackers have the space and time to learn apart from their daily job tasks. This becomes even more important as we continue to hire across the globe. We accelerated growth during the summer months (summer here in the U.S., I should say), surpassing 200 Stackers hired in the last six months and surpassing over 500 employees for the first time in company history. Thanks to feedback from Stackers, Comparably listed Stack Overflow among the top companies in four categories: Happiest Employees, Compensation, Work-Life Balance, and Perks & Benefits. We’re continuing to hire in core areas. If you’re interested in joining us, check out our careers page! Tags: ceo quarterly post"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/10/07/missed-our-flow-state-conference-catch-up-on-all-the-sessions/","date":"2022-10-06T22:00:00.000Z","tags":["Company"],"title":"Missed our Flow State conference? Catch up on all the sessions","text":"On September 28th, hundreds of technology leaders gathered in New York City’s Financial District for our first conference, Flow State. There they experienced eight sessions from tech leaders at Salesforce, Udemy, Indeed, Esty, and Capgemini. We covered the future of work and the changing landscapes of the developer experience, recruiting, collaboration, and workplace learning. The crowd on site was joined by almost 5,000 virtual attendees who registered from 83 countries around the globe. Our CEO, Prashanth Chandrasekar, kicked things off with a discussion on the state of work and the factors that are key to a developer’s learning journey and success on the job. Drawing on data from our most recent developer survey, he laid out a positive vision for a future of hybrid work and online learning. Next up was our CTO, Jody Bailey, chatting with Chris Kohr, a VP of Engineering at Salesforce. Nearly 70% of developers say they encounter a knowledge silo at least once a week, and 62% spend more than 30 minutes a day searching for answers or solutions to problems. For a team of 50 developers, the amount of time spent searching for critical information adds up to between 333-651 hours of time lost per week across the entire team. The pair discussed strategies for helping developers avoid knowledge silos and context switching and explored some of the keys to getting into a flow state that maximizes both productivity and happiness. The final morning session was a fireside chat between our Chief Marketing Officer, Khalid El Khatib, and the journalist and author, Clive Thompson, whose book, Coders: The Making of a New Tribe and Remaking of the World, is a rich ethnographic study of the programmers who help craft our modern society. The pair had the audience in rapt attention with plenty of laughs as they explored what it takes to be a self-taught developer in today’s tech industry. In the afternoon, Seth Hodgson, VP of Engineering at Udemy, talked about how to approach skills acquisition as a daily habit. As the demands of the workplace change and organizations shift to keep pace and continue to innovate, their workforce requires constant reskilling. In fact, 87% of leaders say they expect to face major skills gaps over the next five years. He discusses an approach that enables real-time, hands-on practice and peer-driven knowledge sharing, which has enabled Udemy’s 54M learners and 12.5K enterprise partners to always be at their best. Next up, Stack Overflow CTO Jody Bailey held a fireside chat with Alex Bulat-van den Wildenberg, Group Technology Director and CTO at Capgemini, discussed how scaling subject matter experts and uncovering domain expertise can ultimately drive team and product growth. After a short break, Stack Overflow Chief Product Officer Teresa Dietrich shared how Stack Overflow builds for the technologist’s holistic learning journey and what updates to expect across all of our products: Stack Overflow for Teams, Collectives™, Employer Branding, and Advertising. Following Teresa, Stack Overflow Chief Marketing Officer Khalid El Khatib spoke with Maggie Hulce, Executive VP, GM of Enterprise at Indeed, and Sally Bolig, Global Head of Employer Branding at Etsy about the ultra-competitive talent market today and the Great Resignation still reshaping our workplaces. How do you attract talent, retain team members, and scale your expertise across your growing team? They discussed how this talent war stands independent from economic trends, the importance of understanding developer workflows in today’s talent climate, and how tools, onboarding, learning, and collaboration will all impact the talent market indefinitely. Finally, Human-Computer Interaction researcher Dr. Gloria Mark delivered the closing keynote speech. While we’re unable to embed her talk, look for her new book Attention Span: Finding Focus and Fighting Distraction out in January 2023. What comes next? This was our inaugural customer conference, and we had the privilege of getting to interact with employees who lead their internal communities on Stack Overflow for Teams. We were also thrilled that many members of our Stack Overflow community attended. We met folks who had started Stack Exchanges and other who had been asking and answering questions on our platform for over a decade. Given the success of this conference, you can look forward to future Flow State events next year. Tags: conference, Flow State, future of work, productivity"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/09/06/work-has-changed-our-upcoming-conference-flow-state-explores-whats-next/","date":"2022-09-05T22:00:00.000Z","tags":["Code for a Living"],"title":"Work has changed. Our upcoming conference, Flow State, explores what’s next","text":"On September 28, we’re hosting Flow State, our inaugural product-focused conference which will be broadcast to developers and technologists everywhere for free. You can register here. Need some convincing? Well, here’s a staggering statistic for you. According to Nick Bloom, a professor of economics at Stanford focused on researching the shift from working in offices to working at home, the trend towards WFH has started to stabilize. It was roughly 5% pre-pandemic, jumped to more than 60% during the height of lockdown, and has now leveled off at around 30%. There has been a six-fold increase, in other words, in people working from home between the start of 2020 and today. In America alone, estimates Prof. Bloom, that translates to saving roughly 200 million hours and six billion miles EACH WEEK. Let that sink in for a second. If we extrapolate across the globe, there may be upwards of a BILLION hours previously spent on commuting that can now be devoted to learning, working, and recuperating for the next batch of productivity. How are employers, organizations, and software developers responding to this tremendous change? That’s just one topic we’ll explore at Flow State on Wednesday, September 28. The event will gather developers, technologists, and technology leaders to discuss some of today’s biggest challenges and how to solve them. For example, let’s say hybrid and remote work has cut way down on employees average time spent commuting each week, but also reduced the ease with which they can meet face to face or find a subject matter expert. Nearly 70% of developers say they encounter a knowledge silo at least once a week, and 63% spend more than 30 minutes a day searching for answers or solutions to problems. For a team of 50 developers, the amount of time spent searching for answers/solutions adds up to between 333-651 hours of time lost per week across the entire team. You’ve got all this time back if you skip the commute, but many teams no longer have the ability to shout across a room or walk down the hall to shoulder tap a subject matter expert. How do you empower a flow state over a state of disruption? Jody Bailey, Stack Overflow’s Chief Technology Officer, will discuss this issue with engineering leaders from companies like Salesforce and Walmart. We’re hosting multiple panels featuring technical leaders with deep experience in the software business who will discuss why redefining productivity means better defining the developer experience. As the workplace evolves, so do the skills developers, managers, and executives need to thrive. Organizations are undergoing a massive shift as they look to keep pace with innovation while navigating vast time zone differences, increasingly asynchronous work and an ongoing battle for relevance which requires constant reskilling. In fact, 87% of leaders say they expect to face major skills gaps over the next five years with a heavy reliance on the developer community. We’ll be hearing from Udemy’s VP of Engineering, Seth Hodgson, who will discuss how developers can increase their operational effectiveness to drive better business outcomes by regularly addressing skills gaps in the flow of work. There will be lots of other terrific talks at the event. Clive Thompson, who wrote the book Coders, will sit down with our own Khalid El Khatib, Stack Overflow’s Chief Marketing Officer for a fireside chat. You can also hear from Dr. Gloria Mark, Chancellor’s Professor of Informatics at the University of California, Irvine, a visiting senior researcher at Microsoft, and author of the forthcoming book Attention Span. She’s the researcher behind a staggering stat we cite often: We spend an average of just 47 seconds on any screen before shifting our attention. It takes 25 minutes to bring our attention back to a task after an interruption. The event is hybrid and every single talk will be broadcast to developers and technologists everywhere. (And if you need a sweetener beyond the great content, anyone who joins will get some Stack Overflow stickers in the mail!) We will gather a very limited number of technology leaders in New York to attend the conference live, where they can select their own Stack Overflow t-shirt with an exclusive design printed on-site and pick up an exclusive copy of Stack Overflow Magazine’s premier issue. If you’re based in New York and interested in attending live, click here. Due to capacity limitations, in-person attendance is limited. Again, all are welcome to attend virtually but you can apply to join us in New York by visiting flowstate.stackoverflow.co and clicking “Request to attend in-person”. See you on September 28th! Tags: conference, Flow State, future of work, hybrid, knowledge sharing"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/08/29/stack-overflow-student-ambassador-program-how-to-apply/","date":"2022-08-28T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow is launching a Student Ambassador Program. Here’s how to apply.","text":"If you’re studying programming now or planning to pursue a career in software development, chances are good that you’ve found your way to Stack Overflow for some help on occasion. Our main site is visited by more than 100 million developers and technologists each month, many of whom visit several times a week to find answers to their coding questions. Stack Overflow has been around for nearly 15 years and has become an ever-evolving encyclopedia of knowledge created and curated by a community of technologists. We’ve always been focused on helping technologists learn, and this year, for the first time, we’re launching a program to work with university students on campuses. Why are we launching this program? We want to learn how you engage with our site, get your input on what we can improve, and work out how to evolve Stack Overflow as a learning tool for the next generation of technologists. We will also offer the opportunity to pursue interesting challenges and earn rewards. To help us with this effort, we’re recruiting our first cohort of Student Ambassadors. These ambassadors will represent us on campus, partner with us to bring more of their classmates on board, and take a leadership role in completing challenges, earning rewards, and helping us plan what future semesters will look like. For this semester, we’re partnering with Major League Hacking (MLH), which has a terrific track record of working with students from a wide range of schools. For now, we are working just with schools that have an MLH presence, but will be exploring options for how to expand in the future. So, what do I need to do as a Student Ambassador? The basic ask of you is simple. Sign up to be a Student Ambassador, create a Stack Overflow account (if you don’t already have one), and help us host some free pizza nights on campus where students will learn about our platform. Really, it is that simple. These events will be part of the MLH Pizza Fund. You can use the pizza nights for study sessions, project work, or hackathons—it’s up to you. For every student you recruit to attend the event or sign up for our public platform, we’ll add on extra treats like soda and dessert. Now, these pizza nights aren’t the only thing we’re doing this semester. If you want to go further, we’re partnering with MLH on three week-long hackathons. Teams that participate get to hear from our engineering staff and can earn rewards for completing various challenges. We’re planning to give away lots of t-shirts and stickers, and for those feeling lucky, raffle off the chance to win your own copy of The Key. OK, so you can earn pizza and snacks, you can take part in challenges, and you can learn from our engineers. What else can Student Ambassadors do with us this semester? For teams that complete challenges during the hack weeks, we’ll shout you out on the Stack Overflow blog, podcast, and newsletter, which collectively reach over three million developers each month and will be featured for a day across every Stack Overflow Q&A page. If you can’t attend any of the three hack weeks but still want to take on a challenge, we’ll work with you to try and find a time for your team to participate this semester. Oh, and one last thing. Students who join us will get access to an instance of Stack Overflow for Teams. Think of it like your own private Stack Overflow, a place to ask questions about this program, learn more about MLH or upcoming hackathons, or simply share knowledge with other students. Thanks for taking the time to consider our Student Ambassador Program. For now, we’re working with schools that have an MLH presence on campus. If you have a campus club or are planning a hackathon that you think would be a good fit, please apply through the Student Ambassador website or email me directly (bpopper@stackoverflow.com) and we’ll get in touch to discuss what’s possible in future semesters. Tags: major league hacking, student ambassador"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/07/27/always-learning/","date":"2022-07-26T22:00:00.000Z","tags":["Community"],"title":"Always learning","text":"Over the last quarter, I got back on the road, speaking at Dublin Tech Summit in Ireland and The Next Web Conference in Amsterdam. I connected with developers, managers, directors, VPs, CTOs, and CIOs at some of the world’s largest organizations. Many of the people I met were community members, like long-time Stack Overflow contributor Jon Skeet. We discussed everything from the overuse of phrases like digital transformation to the impact of machine learning and artificial intelligence across organizations to blockchain to major tech transformations and the challenges of learning in distributed work (and school!) environments. One thread that runs through every conversation is that we’re all always learning. It’s been a busy quarter for the company, too. We celebrated a handful of big milestones over the last three months. We added a new Chief Technology Officer, Jody Bailey, to our leadership team, announced Stack Overflow for Teams entering the Microsoft Azure Marketplace, launched exciting initiatives like Staging Ground, and released insights from this year’s Developer Survey. In our annual survey, we turn to the developer community to learn about what is important to them, what they want to learn, and what trends will impact the future of tech. This year, we compiled responses from over 73,000 developers all over the world. A huge thank you to everyone who shared their experience with us. I learned a lot from this year’s survey results, some of which I unpack below. Context is key This year’s Developer Survey insights included some surprising findings. Median salaries increased about 23% between 2021 and 2022. Interestingly enough, some of the oldest languages command the highest salaries. Why? Context is key. Some of the world’s largest organizations, from financial institutions to NASA, rely heavily on older languages because they still serve as foundational infrastructure. As people get jobs at large organizations, learning older languages will provide them the context they need to code, evolve, and innovate in those environments. This all got me thinking about the low-code, no-code movement, and particularly AI-powered programming assistants like GitHub’s Copilot. There are lots of benefits to low-code platforms. More specifically, it makes building technology more accessible to so many people. As we look towards the future, we’ll see more people developing technology than ever before, but the need for context will undoubtedly remain consistent. No-code tools aren’t actually without code, code is just not required to use it. People learn coding languages and frameworks as they build, because without context, technology will break. Similarly, code suggestion tools, trained on billions of lines of code, will still always require verification and confirmation (just like copying and pasting code found online). At some point, not learning the fundamentals is going to catch up with developers relying on shortcuts. Developers that make the choice to learn will rise to the top. Fueling the next generation of coders Just as the ways people build technology are transforming, the way everyone is learning is shifting as well. Over 70% of developers learn to code from online resources, up 10% from 2021. With more people learning as they build, it’s even more essential to make learning resources accessible at every stage of someone’s learning journey. Getting people the answers they need when they need them. At Stack Overflow, we call it real-time or just-in-time learning. As we welcome hundreds of thousands of people to Stack Overflow’s public platform every month, we recognize we have to continue to invest in making it welcoming and inclusive. Over the last few months, we started working on new projects like Staging Ground to improve the onboarding experience for those new to the public platform and increase the quality of first questions. Testing and research is showing positive signs that this will help coach new users in how to ask great questions while also ensuring that other members of the community taking on some of the burden of coaching and onboarding new members have the tools to do so. It’s been almost a year since we launched Collectives™ on Stack Overflow, which connects developers with technology maintainers and experts to get verified answers. One year later, engagement for users that join a Collective increased about 30% across associated tags. The latest Collective, WSO2, launched in June. Learning at work Opportunities to learn and grow are critical to retaining talent. Over 50% of developers say opportunities to learn are important to them when evaluating current and future employers. This is one of the reasons we have a Learning & Development budget for every single Stack employee that can be used for everything from online courses to in-person conferences. (We’re hiring, too.) The Developer Survey also revealed that nearly half of all respondents report that knowledge silos prevent them from getting ideas from across the organization and that waiting for answers to questions often causes interruptions and disrupts their workflow. One of the costs of lots of questions is that nearly half of respondents spend more than 30 minutes a day answering questions, some more than an hour a day. Frequently, these are questions already asked and answered previously. For a team of 50 developers, that can add up to 278-568 hours of time just answering questions per week. From our Dropbox case study. Similar to the public platform, we’re continuing to invest in ways to ensure we’re helping people get the answers they need when they need them at work. We saw a 229% increase in Microsoft Teams integrations within the Business tier of Stack Overflow for Teams in 2021. Today, 60% of professional developers are using Microsoft Teams or Slack. Our deep integrations with Slack and Microsoft Teams, in addition to joining the Microsoft Azure Marketplace, reduce disruptions and help technologists stay in a flow state. ​​We also introduced an Enhanced Dashboard for Stack Overflow for Teams that gives users a more holistic view of how the knowledge sharing and collaboration platform is utilized within their organization. The new dashboard uncovers what tags are utilized most (or least), what questions and articles have been viewed the most, what this information means in terms of focus areas for your organization, and more. You can use these insights to understand where your organization has potential knowledge gaps, friction points, or opportunities to provide focused training. Learning at Stack Overflow Every three months, we take time to reflect on what worked, what didn’t work, where we need to double down, and where we need to focus as a company. While we’re incredibly fortunate to experience growth and success, it’s also a time for us to learn from others. We are continuing to grow our team and take advantage of available talent. As I mentioned earlier, if you’re interested in learning about any of our open roles, please visit our careers page. As a company, we reserve time to reflect on how we’re empowering learning within our own organization. Learning, to us, is not limited to technologies and tools. Stackers, myself included, gathered for a guest talk from stress and self-care expert Alicia D. Reece, GLAAD board member and inclusion expert Ashley T. Brundage, as well as panels featuring our own Stackers on the topics of allyship, the Asian and Pacific Islander experience, and more. Hearing stories from Stackers and external guests helps us continually learn from those around us and better position us to create tools and features that are inclusive and accessible to all. There is so much work to do, and we have an enormous opportunity at Stack Overflow to influence a more inclusive and diverse tech industry. The way the public platform is democratizing knowledge and Stack Overflow for Teams is doing the same within companies is just the beginning. Scaling subject matter experts across organizations and the broader internet while removing barriers of entry for technical learning is how we’ll win, together. Tags: announcements, ceo quarterly post, collectives, community, developer survey, stack overflow for teams"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/07/01/seeing-is-believing-the-stack-overflow-podcast-now-available-as-video/","date":"2022-06-30T22:00:00.000Z","tags":["Company"],"title":"Seeing is believing: The Stack Overflow Podcast now available as video","text":"For anyone learning to code these days, video instruction is a powerful resource. From tutorials to live coding sessions to more personal vlogs and even short films, coders are creating incredible content across a wide range of genres. In our 2022 Developer Survey, roughly 70% of learners said they turned to online resources when learning to code, a jump of 10% from the year before. Source: Learning how to code Digging a little deeper, we see that learning via video takes the #4 and #6 spots when it comes to online learning. We’ve already got a blog and hey, we’re Stack Overflow, where folks answering questions are providing a form of technical documentation, so video seemed like the obvious place to try and provide more value to our audience. Source: Online resources to learn how to code Starting today, Stack Overflow will be joining the party, publishing a video version of our weekly podcast to our YouTube channel and sharing some highlights and clips on our social media accounts. Below is video to accompany the podcast that was published this morning. Over the last few years, we’ve covered plenty of topics that students and seasoned technologists alike might find useful or intriguing. We’ve met the folks guiding AWS education, chatted with the creator of modern PHP, spoken with CEOs who decided to become ICs, and had wide-ranging talks and debates on issues like burnout, open-source projects, and career growth. We’ve uploaded a total of four videos so far, and plan to share a lot more, both from our back catalog and new episodes, in the future. Are there coders or creators you would like to hear from? Got suggestions for the kind of video content you would like to see from Stack Overflow? Drop us a line by email or leave a comment so we can learn from you. Tags:"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/06/22/asked-and-answered-the-results-for-the-2022-developer-survey-are-here/","date":"2022-06-21T22:00:00.000Z","tags":["Company"],"title":"Asked and answered: the results for the 2022 Developer survey are here!","text":"You’ve been waiting patiently, but now the wait is over: the results of the 2022 Developer Survey are here. Over 73,000 developers from 180 countries each spent roughly 15 minutes answering our questions. This year’s survey was longer than previous years’ as we wanted to follow up on new threads as well as provide a historical throughline with the questions we ask year over year. We are so grateful to you for the time you spent on our survey. Our new questions focused on how coders learn their trade. We found that older code crafters are most likely to learn from books, while the new generation of coders (under 18) relies on online materials and their friends and family. The overall percentage of those learning to code online, however, increased from 60% to 70%. With so many people working remotely after the pandemic—nearly 85% of organizations represented in this survey have some remote workers—it could be that more and more of our daily lives are moving online as well. Additionally, as the pandemic drove us out of the office and into remote work, remote work may be driving us away from full-time employment to more self-directed work. The percentage of professional developers that state that they are an independent contractor, freelancer, or are self-employed has risen by about five points to 16.6%, while the percentage of those in our top five responding countries (United States, India, Germany, United Kingdom, and Canada) who have full-time employment has fallen. Has the switch to remote work triggered a new wave of entrepreneurship as well? Our other new line of inquiry was version control. We had previously included Git in the “Other tools” section, where it took top honors. It was no surprise that Git was far and away the top version control system, especially among professionals, but what was surprising is that 17% of learners do not use a version control system at all. I guess they’ll wait until onboarding at their first job. The big draws with the Developer Survey have always been the technology rankings, where technologists profess their most used, loved, dreaded, and wanted languages, frameworks, and more. The top five languages for professional developers haven’t changed: JavaScript is still the most used, and Rust is the most loved for a seventh year. The big surprise came in the most loved web framework category. Showing how fast web technologies change, newcomer Phoenix took the most loved spot from Svelte, itself a new entry last year. Two years ago we asked how you felt about searching for an answer and finding a purple link. Sparked by that, the team wanted to see how many of us are visiting the same question more than once. Our data experts found that the majority of people come back to an answer over and over: 62% of regular Stack Overflow users visit the same question multiple times in a three-month period.* One of our data scientists tells us he probably visits this question once a month. Why remember everything when you can use Stack Overflow as your second brain? In this year’s survey, we had a special section at the end where we asked professional developers to tell us what impacts their productivity at work, how often it happens, and how much time it takes out of their day. More than 36,000 developers answered. Their responses can help the developer community start to quantify the impacts of the daily, invisible productivity frictions. In short, most professional developers are experiencing some level of decreased productivity every week. 68% of respondents say they encounter a knowledge silo at least once a week. For people managers, often the more experienced developers, 73% report encountering a knowledge silo at least once a week. About 63% of all respondents spend more than 30 minutes a day searching for answers or solutions to problems, with 25% spending more than an hour each day. This productivity impact can add up. For a team of 50 developers, the amount of time spent searching for answers/solutions adds up to between 333-651 hours of time lost per week across the entire team. On the other side, 46% of all respondents spend more than 30 minutes a day answering questions. 32% of people managers spend over an hour each day just answering questions, while only 14% of independent contributors spend over an hour answering questions. Again, this productivity impact can add up. For a team of 50 developers, the amount of time spent answering questions adds up to between 278-568 hours of time lost per week across the entire team. Check out the full results from this year’s Developer Survey here. If you’re interested in digging into the data and finding your own insights, we’ll be releasing the results dataset later this year. And as we have done for a while now, we’ll continue to run smaller, focused surveys on everything from web3 to what makes developers happy at work. Our mission is to empower the world to build technology through collective knowledge. You all have helped make this survey possible, and we hope that the results give you insight into where the world of software and technology is today. Please share the results of this survey and we’ll see you next year. If you have questions about the survey results, you can reach us at press@stackoverflow.com. *activity from Feb 1 through April 30 of this year; “regular users” are defined as those who visited Stack Overflow more than 5 times over the 3-month period – recurring users should mimic a typical employee who attempts to ask any question from a coworker. Tags: developer survey"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/06/14/wso2-joins-collectives-on-stack-overflow/","date":"2022-06-13T22:00:00.000Z","tags":["Community"],"title":"WSO2 joins Collectives™ on Stack Overflow","text":"From inception, WSO2 had a firm belief in the power of open-source software. Its co-founders were early members of the Apache foundation, and their vision for WSO2 always incorporated the innovation and commitment of a global developer community. Over a decade ago, WSO2 helped to popularize the use of open source in the enterprise and proved that software created by a public community could also be used to create tremendous business value. Given this history, it’s only natural that WSO2 is joining Collectives™ on Stack Overflow. Collectives are subcommunities on Stack Overflow focused on a specific platform or ecosystem and defined by tags associated with an organization’s technologies. You will find answers from subject matter experts, relevant resources and information (including questions, recommended answers, technical articles, and bulletins), and a leaderboard to see where you rank based on your contributions. Any user with a Stack Overflow account can join the WSO2 Collective. It brings together experts from within its organization and the Stack Overflow community to share knowledge and collaborate on topics like ‘wso2’, ‘wso2-identity-server’, ‘wso2-api-manager’, and ‘ballerina’. Top contributors can be selected by WSO2 as Recognized Members, users recognized by the company for their contributions and trusted to help nurture the Collective by responding to questions, collaborating on articles, and recommending answers. “The developer community has long been the focus of WSO2. The products and projects we’ve built over the years all had the same goal: to enable development efforts across many industries,” said AJ Danelz, Head of Developer Relations at WSO2. “Collectives supports our goal of fostering a healthy community through open collaboration and feedback to help each developer—as well as our teams—continue to improve.” The information and resources developers need to build with WSO2 technologies have historically existed across numerous forums, help centers, and other avenues. “Centralizing our communities’ communication is important,” said Danelz. “We want to meet developers where they are instead of making them come to us. Collectives on Stack Overflow gives us the tools necessary to foster a community without demanding anything in return.” Going forward, the WSO2 Collective will serve as a dedicated, centralized space to collaborate on the organization’s technologies. “We want to ensure our users can find the help they need, and that will inform others. We intend to focus our public interaction around Stack Overflow questions and plan to leverage the visibility our Collective provides to grow and recognize community members who are contributing.” WSO2 also looks forward to using its Collective as a space to discuss Ballerina. “Ballerina is a new language built for the modern cloud-native application. The team made the programming language 100% open-source with all parts of the project developed openly at https://github.com/ballerina-platform.” says Danelz. “Ballerina is the only modern cloud-native programming language that provides features for easily using, combining, and creating network services for the cloud.” Digital transformation remains a focus for businesses worldwide, and developers are building and innovating with WSO2’s API-first software to meet the demand. “Across WSO2 products, we execute more than 18 trillion transactions, expose more than 200,000 APIs, and manage over 1 billion identities every year. Developers are behind every one of those stats,” says Danelz. “We will continue to foster our relationship with the community by improving the tools and resources they need. By enabling community, the community can enable itself. Stack Overflow is where developers go to learn and grow, and we look forward to further empowering users through our Collective.” Tags: collectives, wso2"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/04/28/agility-starts-with-trust/","date":"2022-04-27T22:00:00.000Z","tags":["Company"],"title":"Agility starts with trust","text":"Top of mind for nearly every leader right now is hiring. Depending on what job board you look at, there are between 100,000 and 300,000 technical roles currently open. It’s an incredibly competitive market for top talent, and when teams are hiring quickly, one of the biggest business risks is agility. Teams can only innovate at the speed of trust. Whether it’s building trust with team members or in answers to technical questions, trust will absolutely dictate agility. We aim to build trust within the developer community, with Stack Overflow, Stack Exchange, and Collectives™, and across organizations with Stack Overflow for Teams. That includes creating a psychologically safe place for people to learn whether they are working or not. Creating a more inclusive place to learn I spoke on a panel about community-based learning earlier this month at one of the world’s largest edtech conferences, ASU + GSV Summit in San Diego. One of the core topics we discussed was the importance of peer-to-peer learning. More than 50% of developers are looking for opportunities to learn at work, and 50% of developers say that growth opportunities contribute to happiness at work. With so many teams faced with talent shortages, it is becoming even more critical for leaders to provide opportunities to learn at work and expand the talent pool to folks from non-traditional educational backgrounds. If we have any hope of making technology more diverse and inclusive, we have to make technical learning resources accessible to all. We need to change the barrier of entry for the tech community whether that’s through publicly available resources or within the workplace. A key learning from growing one of the largest developer communities on the internet is that it can be intimidating for new users, even if they are experienced developers. To address that feedback and help make Stack Overflow more welcoming, we rolled out A/B testing for the beta version of our new question wizard on the public platform. The question wizard makes suggestions and provides helpful tips to new users asking their first question to the community. This helps not only ensure the quality of questions on Stack Overflow and Stack Exchange sites, it also helps increase positive experiences for new users. Since rolling out the question wizard, we saw an 11% decrease in the number of questions that were immediately deleted and a nearly 5% increase in questions closed but not deleted. This is a win for new users and learners, for content quality, and for the knowledge repository overall. Source: https://meta.stackoverflow.com/questions/416322/feature-test-ask-wizard-for-new-users-trial-has-completed Following the launch of our newest Collective™ on Stack Overflow with Twilio, we also released new features and resources to help Collective customers more easily invite and onboard users as Recognized Members. This ultimately helps scale technology-specific expertise across the platform by spotlighting power users, empowering them to share what they know with others, and building trust in answers for users across the broader community. Trusted answers when you need them The water cooler is long gone and so is shouting to colleagues the next desk pod over for answers to real-time questions. To be truly agile, teams need to find scalable ways to uncover subject matter experts across their organization. Stack Overflow for Teams customer Dropbox said it best: “We picked Stack Overflow [for Teams] to grow that Q&A function,” Ju Shin, Product Manager at Dropbox, explained. “To bring conversations out of the various siloed channels where they had been taking place (email, Slack), which were crowded and full of noise, and put them in a form where knowledge was discoverable.” Uncovering SMEs cross-functionally empowers teams to learn, share, and grow together. That must be why leading software marketplace G2 recognized Stack Overflow for Teams for the 13th consecutive quarter as a knowledge sharing and collaboration platform that customers trust as their go-to source of institutional knowledge. If we can only move at the speed of trust, that starts with tackling one of the challenges that has plagued the knowledge management industry for decades–content reliability. Outdated and inaccurate content building up over time in knowledge management tools leads to declining usage and value. We introduced Content Health for Stack Overflow for Teams to eliminate the expiration date that comes with traditional knowledge management tools. It prompts teams to fix or archive inaccurate or outdated content. After 90 days, monthly editing activity increased by over 600 percent among Stack Overflow for Teams customers with the initial, limited release of Content Health. Traditional knowledge management tools have come with a sense of impending distrust for far too long. It’s time that changed. Looking ahead We added over 80 Stackers to the team last quarter, with even more open roles to hire in the months ahead. As we surpassed 400 Stackers globally, we completed our annual engagement survey across the company. Employees are also excited for the future–Comparably named Stack Overflow to its list of companies with the Best Outlook and Best Place to Work NY. While that gives us a lot to celebrate internally, there’s no shortage of work to do. In times when teams are extremely busy and growing, it’s important to take the time to build trust. To be truly agile, you have to trust the people around you. We’re committed to that internally and will continue working towards building inclusive products that developers trust industry-wide. We’re looking forward to experimenting, learning, adapting, and leading an ever-changing market in the next year. Excited to share updates on the horizon soon! Tags: ceo quarterly post"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/01/26/keeping-technologists-in-the-flow-state/","date":"2022-01-25T23:00:00.000Z","tags":["Company"],"title":"Keeping technologists in the flow state","text":"It’s hard to believe we’re already four weeks into the New Year, especially as everything we have to celebrate from 2021 is still fresh in my mind. 2021 was a momentous year—not just for Stack Overflow, but for the tech industry at large. We welcomed over 250 Stackers to the company, added over 750,000 new members to the Stack Overflow community over the last quarter, and our business finished the calendar year by overachieving on our annual sales target with a record number of new logos for Stack Overflow for Teams. We even saw record engagement through our annual Winter Bash (or Summer Bash depending on your hemisphere), which is our end-of-year tradition that rewards users for engaging across the public platform. It was a great year for the company and the community, and we are so grateful to everyone who joined us and for those who continue to contribute to collective learning across the platform. From an industry perspective, the transition to a new year is a common time for folks to reflect on the year they are leaving behind and their hopes for the year ahead. “The Great Resignation” led to some developers seeking new jobs, especially while a record number of companies raised funding and went public, prompting major growth industry-wide. There are over 70,000 technical jobs open while roughly 80% of developers are not actively looking for a new job. At Stack Overflow, we hired over 250 team members in 2021 and are planning to hire close to the same number in the year ahead (check out the roles currently open). Naturally, we turned to the community to see what’s most important when evaluating current and future employers to inform our own recruiting efforts and how we serve the community and our industry at large. Developers are craving flexibility and opportunities to learn at work. If they aren’t getting it, they are looking elsewhere. Developers often set the tone for the rest of the tech industry. As we dive into 2022, all employers need to prioritize flexibility and opportunities to learn. The future of work is the future of continuous learning. We’re living in challenging times, and creativity is required to succeed. Whether it’s addressing pressing problems like employer branding, getting a tricky implementation to work, or simply figuring out who to go to for context, our goal is always to get people the answers they need, when they need them. That means having the solution at the right time where someone is looking for it. That was our guiding light through 2021 and will continue to be our guiding light for the public platform, Stack Overflow for Teams, Advertising, Employer Branding, and Collectives™ on Stack Overflow. Powering the community by empowering the community Stack Overflow was built by the community, for the community. Investing in community health and growth continues to be our number-one priority. In addition to welcoming more than 750,000 registered users over the last three months, the team awarded almost a million virtual hats for engagement across Stack Overflow and Stack Exchange sites during our traditional end-of-year Winter (or Summer) Bash. Special shoutouts to the language communities, which were some of the most active this year. Following Stack Overflow, the next three highest-ranked sites during Winter Bash were the Spanish, Portuguese, and Russian sites. At the same time, 59 Stack Exchange sites graduated out of beta—one of our biggest graduating classes yet—making it easier than ever for people to find communities covering everything from DevOps to AI. Thank you to everyone who participated in Winter Bash and for all those who continue to contribute to the Stack Exchange network! In mid-2021, we launched Collectives™ to connect the community with creators of the world’s most popular technologies. Collectives continued to grow with the addition of the Intel Collective late last year and nearly 40,000 members joining across Google Cloud, the Go language, GitLab, and Intel communities. We also introduced Article Proposals this month—a brand-new feature that allows users to propose and contribute to Articles. This is the first feature that allows users to contribute long-form content on Stack Overflow. Fueling agility by driving the developer experience It was hard to even engage in a conversation about enterprise tech over the last two years without discussing digital transformation (now an arguably overused phrase). Organizations across the globe were propelled into a world where they had to evaluate how their tech stack would adapt to remote work in the face of a pandemic. In 2021, organizations geared up to return to offices, then didn’t, then did halfway, then returned home once again. The last year taught us that agility solves fragility. Nearly every customer I speak with mentions agile transformation as a top priority in the year ahead, particularly when it comes to enabling cross-functional, hybrid teams to accelerate their businesses. We’re doing everything we can to keep developers in their flow state, meaning we’re dedicated to helping teams remove blockers or disruptions and solve problems in real time. We see this with organizations that struggle with scattered systems and channels, distributed subject matter experts (SMEs), undocumented institutional knowledge, or simply preventing disruptions. Insurance giant Progressive shared in a recent webinar how they keep knowledge flowing across teams, leveraging Stack Overflow for Teams’ flexible API to visualize progress and reveal deeper insights into trending topics, questions, and concerns. Similarly, retail analytics powerhouse 84.51° faced a distributed team and a complicated post-acquisition period that made it challenging for their team to find SMEs across the organization. “Stack Overflow broke down the barriers to be a recognized SME as much as it broke down barriers to learn from them.”– Chris Wones, Engineering Lead for Merch Analytics and Operations, 84.51° Shared resources and contextual knowledge at scale fuel highly agile environments. In many cases that means creating a centralized place for teams to ask questions, share institutional knowledge, and collaborate. In 2021, we welcomed more Stack Overflow for Teams customers than any year in our history. It’s incredibly rewarding to hear directly from customers how Stack Overflow for Teams is helping them scale, optimize workflows, and increase agility and innovation. We also made it easier than ever this year to help customers keep content up-to-date and work asynchronously without disrupting workflows. We introduced Content Health, an easy way to identify stale answers and build confidence in the content within Stack Overflow for Teams. Additionally, we released an expanded Microsoft Teams integration to make it even easier to ask questions, search for answers, and solve problems without context switching. Getting recognition for our efforts is the icing on the cake. Thanks to our customer reviews, G2 ranked Stack Overflow for Teams as a leader for the 12th consecutive quarter! And it wasn’t only our products that won awards last year: our company—and the Stackers who power it—was recognized as a great place to work by Built In’s list of Best Remote-First Companies to Work and Comparably’s list of companies with the Best Company Culture. Looking ahead Impactful organizations and healthy communities are successful because they exist in the right place at the right time. Stack Overflow is in the middle of the technology ecosystem, where significant transformation is underway and where technologists and developers are front and center. Our mission is meeting the challenges of this moment as we continue to work hard to empower the world to develop technology through collective knowledge. Our financial growth this past year enabled us to dedicate more resources across the public platform and beyond, contributing to higher moderator and site satisfaction scores. 2021’s hyper growth also means we’re able to continue making significant investments in the community, the tech stack that supports it, and all our products in the year ahead. As an example, our recently hired head of Diversity, Equity, Inclusion, and Belonging (DEIB) will serve in an advisory capacity to our community and product teams as we continue to build and roll out features in the spirit of fostering an inclusive community. I’m looking forward to this next chapter in Stack Overflow history when we will keep community at our center and welcome the next generation of technologists to Stack. Tags: company, winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2022/01/13/stack-gives-back-2021/","date":"2022-01-12T23:00:00.000Z","tags":["Community"],"title":"Stack Gives Back 2021","text":"One of our most loved traditions is Stack Gives Back. Every year since 2009, we’ve surveyed Stack Exchange moderators about charities they would like to support and then donated $100 on behalf of each moderator. This year, we decided to keep the same list of charities we had in 2020 because of the resources, medical care, and awareness these organizations provide in such a difficult time. We are pleased to share that we have completed our 13th Stack Gives Back and donated $55,700 on behalf of our 557 Stack Exchange moderators. Here is how the money was distributed. $5,960 to the International Rescue Committee The International Rescue Committee responds to the world’s worst humanitarian crises and helps people to survive and rebuild their lives. $6,166 to UNICEF The United Nations Children’s Fund provides long-term humanitarian and developmental assistance to children and parents in developing countries $8,427 to Girls Who Code Girls Who Code is a nonprofit organization that aims to support and increase the number of women in computer science by equipping young women with the necessary computing skills to pursue 21st-century opportunities. $14,182 to the Electronic Frontier Foundation The Electronic Frontier Foundation is the leading nonprofit organization defending digital privacy, free speech, and innovation. $20,965 to Doctors Without Borders (Médecins Sans Frontières) Doctors Without Borders is an independent, global movement providing medical aid where it’s needed. TOTAL: $55,700 USD I would like to thank every volunteer moderator for their passion, time, and leadership in the communities that make up Stack Exchange network. Let’s keep moving forward and have a positive impact on the world, online and offline. Tags: community"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/11/17/introducing-content-health-a-new-way-to-keep-the-knowledge-base-up-to-date/","date":"2021-11-16T23:00:00.000Z","tags":["Company"],"title":"Introducing Content Health, a new way to keep the knowledge base up-to-date","text":"We’ve all heard the saying, “the only constant in life is change.” Both humans and organizations face massive change all the time. Change happens with business objectives, strategies, processes, structure…the list goes on. These changes affect not only future projects but your existing documentation and knowledge. How do teams balance learning new skills and identifying content that requires attention? We’re thrilled to announce a new and foundational feature, Content Health, that helps intelligently identify and surface potentially outdated or inaccurate knowledge—content that needs to change. This programmatic approach to updating knowledge will help your teams curate an accurate knowledge base as your business environment evolves. We will build upon and enhance this new feature over the months to come, but we’re excited to share with you an early version that Business plan customers on Stack Overflow for Teams can use immediately. Our Enterprise customers will get access to the feature with our upcoming 2021.3 release. Why do I need Content Health? When your central knowledge base becomes outdated, your employees’ and coworkers’ trust that they can find the right answers erodes. The moment your team members stop trusting the platform is the moment it has lost its reason to exist! Instead, teams find one-off, piecemeal ways to get accurate information, like asking a coworker or burning hours solving an issue that has already been solved by someone else. The trust problem grows exponentially as users stop coming back to the platform to add new knowledge, causing it to become further outdated. Our new Content Health feature gives users total confidence in the accuracy of the information on Stack Overflow for Teams. What the Content Health feature does Existing features such as upvoting, accepted answers, comments, and notifications both on- and off-platform via our out-of-the-box connectors such as our Slack and Microsoft Teams integrations help teams proactively update their knowledge base and identify the best solutions. The collaborative aspect of Stack Overflow for Teams makes it easy to tag Subject Matter Experts who have the most accurate knowledge or tag a department when a policy needs updating. This process works well for new knowledge and organically encountered content when users search for specific knowledge. To proactively maintain knowledge, users must either know or look for out-of-date questions, Articles, and other content as part of their project work or a knowledge base cleanup. Now, we’ve made this process even easier and more streamlined. Engaged users and experts can take action by reviewing, updating, or retiring knowledge that Content Health flags, rather than manually scouring the knowledge base for necessary updates. This feature helps shared knowledge stay relevant so that Stack Overflow for Teams continues to be a useful and valued knowledge base for your organization. You’ll get an assist in bolstering the accuracy and trustworthiness of bite-sized Q&A and long-form Articles. Stack Overflow for Teams can remain your central source of truth. The Content Health feature is specifically useful for experts, curators, engaged users, and Moderators of your Stack Overflow for Teams instance. The Content Health review queue uncovers and prioritizes knowledge that’s due for a second look based on its age and usage. Those with access to Content Health can use Tags to filter the content to divvy up tasks and focus their efforts on verifying areas where they’re knowledgeable. They can verify, edit, or mark knowledge as obsolete. Once a post is verified or edited, it is removed from the review queue. Available actions to keep your knowledge fresh Watch the Content Health feature in action. In conclusion… The initial Content Health feature is now available to Business plan customers, and we can’t wait for our customers to take it for a spin and see the value of this new programmatic and streamlined approach to a healthier knowledge base. And we are just getting started – our teams are already hard at work to enhance this feature in the coming months. Want to learn more or upgrade? Contact us today. Tags: new features, stack overflow for teams"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/11/02/our-new-and-enhanced-microsoft-teams-integration/","date":"2021-11-01T23:00:00.000Z","tags":["Company"],"title":"Our new and enhanced Microsoft Teams integration","text":"It’s been nearly two years since Stack Overflow for Teams launched its integration with Microsoft Teams. As one of our inaugural integrations, we worked closely with Microsoft to form a meaningful partnership that paves the way for future Stack Overflow for Teams integrations. Since that launch, scores of our customers have used it to get faster access to knowledge within their existing workflows. We’ve even seen a 137% increase in the MS Teams usage over the past six months within our Enterprise customers. To make this integration even more helpful to users, we’ve been working hard to update it. Since the original launch, we’ve collected feedback from our customers about the most valuable functionalities within Microsoft Teams. Thanks to our product and engineering teams, we’re updating this integration to make the native Stack Overflow for Teams experience available to users directly within Microsoft Teams. With new features and tweaks to the integration, we’re sure that the new and improved Version 2 will come in handy. Below you’ll find additional context around the evolution of this integration and how it might be useful to your organization! An integration is born According to Harvard Business Review, a “collaborative overload trap” is when people schedule and participate in more meetings to be more productive, but these meetings displace focus time and can make employees less productive. That same study noted that “it can take us as many as 23 minutes to get fully back on task after [an] interruption.” Part of the problem could be too many apps, which can contribute to burnout, wasted time, and a general energy drain that permeates the whole company. When fragments of knowledge are stuck in random chat channels in Slack or MS Teams, or hidden away on Google Drive, employees waste time and energy hunting for the disparate information they need. These interruptions and delays can have real impacts on an organization’s bottom line. IDC estimates that Fortune 500 companies lose around $31 billion a year by failing to share knowledge within their organization. Large organizations use multiple business applications to help teams collaborate and coordinate their work: chat applications,homegrown tools, project management, and code repositories, just to name a few. Once they cross that threshold into too many tools, these platforms that are meant to boost productivity actually become a burden. We created the Microsoft Teams integration to minimize the knowledge-hunting problem that can lead to context-switching and ultimately burnout. “Stack Overflow for Teams integration with Microsoft Teams is nice because this is mostly where I do my day-to-day work. I don’t have to leave Microsoft Teams to go to another site.” – Brandon Camerer, Senior User Experience Designer, CloudFit Software Solving for collaborative overload Microsoft Teams is an integral part of many business operations. Our integration with Microsoft Teams removes interruptions and accelerates development time. Specifically, the Stack Overflow for Teams integration provides quick access to answers and solutions, knowledge retention for future reuse, and awareness of new or updated information. You never have to leave Microsoft Teams to find the information you need. Microsoft uses both Microsoft Teams and Stack Overflow for Teams to improve communication and reduce repetitive and distracting pings. “With the integration between Microsoft Teams and Stack Overflow, I’m just super excited to have one place where I can see my questions in an area where I already do a lot of my work today.” Laura MacLeod, Program Manager, Developer Services Division at Microsoft How it works The v2 of this integration provides the features you already love, with new enhancements that make your workday better. Let’s look at what’s new: Minimize context switching At Stack Overflow, we’ve always emphasized the importance of avoiding context switching. With this integration, you never have to leave Microsoft Teams to access your Stack Overflow for Teams knowledge. Our first version of the integration enabled the channel bot action to search all of Stack Overflow for Teams. Search results were then displayed within the channel for quick access to everyone in the channel. With v2, there’s even less context switching: With the message extension feature, a user can search the Stack Overflow for Teams knowledge base, from within a chat channel in Microsoft Teams. The integration provides the best fitting match, and the user is then free to share it with the entire channel. With the Personal App feature, users can have the native experience of Stack Overflow for Teams without leaving Microsoft Teams. They’ll have the ability to quickly view bookmarked, followed, and personal Questions along with personal Articles. Users can now reuse existing knowledge before tapping into teammates by viewing a list of Questions or Articles within a channel’s tab. This knowledge can be filtered by tags that are applicable to the channel. Search the knowledge base via the message extension Quick access to knowledge from Stack Overflow for Teams within a channel’s tab. Knowledge capture A key facet of the Stack Overflow for Teams integration with Microsoft Teams is the ability to capture knowledge directly from Microsoft Teams. This helps users from having to search through long chat threads for critical knowledge. Users can ask questions in the channel bot and receive the best matching result directly within their Microsoft Teams chat. We also prompt users to ask a question on Stack Overflow for Teams if there are no existing matches to a question they’ve searched. Now, we’ve made the knowledge capture functionality stronger through: Converting posts within Microsoft Teams to a question within Stack Overflow for Teams to reuse the knowledge in the future. An ask modal displays within Microsoft Teams to capture additional detail and help to minimize the need to switch between applications. If a user needs help filling out all of the details within the question, teammates can chime in and finish asking the question. New ask modal Personal application This integration now provides a personal oasis of knowledge tailored to a user within a personal app. The personal app links directly to important knowledge including bookmarks, followed Questions, and a user’s own Questions and Articles. This quick access to solutions helps users resolve technical issues even faster now. A native Stack Overflow for Teams experience with a user’s personal app Automated notifications of new or updated knowledge Our Microsoft Teams integration keeps users up-to-date with automated notifications any time something is updated within the Stack Overflow for Teams instance. Users can set up tag-based push notifications to share new questions, answers, comments, and Articles directly within Microsoft Teams. They can also preview new knowledge related to a Tag without leaving Microsoft Teams. Lastly, users can create new notifications or edit existing notifications quickly by interacting with the channel bot within Microsoft Teams. Want to try version 2 of the Microsoft Teams integration? Download it today or, if you’re not already a customer, contact us to learn more about it. Tags: microsoft teams, stack overflow for teams"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/10/27/strong-teams-are-more-than-just-connected-they-are-communities/","date":"2021-10-26T22:00:00.000Z","tags":["Community"],"title":"Strong teams are more than just connected, they are communities","text":"We’ve officially entered the last quarter of 2021. The three months since my last update have been some of the most momentous since I joined the company as CEO two years ago. We completed the Prosus acquisition, welcomed our highest volume of new customers for both Stack Overflow for Teams and Advertising, launched a new Collective on the public platform, and announced Matt Gallatin as our new Chief Financial Officer. The past two years have been an incredible journey, 80% of which I’ve spent as a fully-remote CEO. When I reflect on the most important moments, I think about our Stackers and Community—I’m truly inspired by their resilience. Given many concurrent issues—the ongoing pandemic, polarized political environments, and challenging social issues—there’s a lot going on in people’s lives. Over the past year in particular, we’ve gotten glimpses into each other’s homes, supported each other through illness and loss, pushed ourselves to have uncomfortable conversations, learned from our failures, and celebrated wins. One of my biggest learnings is that organizations and leaders have a responsibility to ensure people are heard, to build high levels of trust and enable them to show up authentically— all so they can do their best work. I’m a firm believer in the idea that building connections strengthens teams and empowers people to be successful in their roles. I’ve learned that while work connects us, a true team is a living, breathing entity. We must feed and nurture it to build high-trust connections. No one can bring only part of themselves to work and be their best. Companies play a critical role creating an environment that’s supportive. I’m grateful for the resilience of our Stackers and Community through these dynamic times. It’s a true privilege to be entrusted to lead such a passionate team and the community we’re building together. Public Platform and Community As our environments change, so does the community’s approach to technology. We did deep dives into two topics that saw incredible growth of late: cloud computing and cybersecurity. We learned that nearly 90% of surveyed developers say their organization increased usage of the cloud over the last year. On the public platform, we saw about four years worth of average annual growth of cloud questions in the span of just three months at the start of lockdown last year. The pandemic had a similar impact on cybersecurity questions. Our recent research showed that security-related activity across the public platform appeared to be tied to major breaches. That is, until recently. The volume of security-related questions on Stack Overflow at the start of lockdown exceeded that of any year in our history. We also saw exceptional growth in three core areas when it comes to the public platform community. Monthly active users are up 7% over last year at this time, and we’re seeing monthly sign ups tracking ahead of our plan with an increase of 44% over this time last year. Lastly, we’re continuing to invest in improving our moderator experience, and we’re starting to see it pay off. While we continue to focus on making the public platform a welcoming place for all, this is a promising indicator that we’re making impactful decisions. From a product perspective, we updated our Privacy Policy, made changes to Review Queues, and introduced high-contrast mode for people who need a bit more contrast. These are all aligned with our goal of making Stack Overflow a more inclusive community. We also completed our annual Community-A-Thon, where our employees dedicate time to increasing their engagement with the community on the public platform. Finally, we launched our first-ever physical product. It started as an April Fool’s joke. We told everyone that tried to copy and paste on Stack Overflow that their copying and pasting was limited unless they purchased The Key. Panic set in for the 1 out of every 4 users who copies something within five minutes of hitting Stack Overflow. Once people caught on to the joke, we were flooded with requests to actually purchase The Key. The joke is officially over. The Key is real, and it sold out in six hours! We opened pre-orders and nearly 9,000 units have been sold to-date, with the remaining shipping later this year. All our proceeds are going to digitalundivided, a non-profit that leverages data, programs, and advocacy to catalyze economic growth for Black and Latinx women entrepreneurs in tech. It’s amazing to see this impact from our community. Product update We’re also seeing a shift within organizations as teams solidify their remote or hybrid work strategies. We’re hearing from technology leaders more and more that agile transformation is becoming a top priority and onboarding continues to be a challenge as they scale their teams. On top of that, a recent survey also revealed that nearly 70% of U.S. workers said their level of burnout has worsened throughout the pandemic. All of these challenges compounded are creating more urgency for Stack Overflow for Teams. We welcomed our highest volume of new customers for both Stack Overflow for Teams and Advertising in the last quarter. We also had our highest ever gross revenue retention (GRR) for Teams in our mid-market segment last quarter. “Technical teams typically face an adoption hurdle,” said Tzach Zohar, a systems architect at Skai. “But because Stack Overflow is already second-nature for developers, the transition to Stack Overflow for Teams was easy.” As customers onboard, they continue to share their experiences with their peers, earning us recognition on G2 across nearly every segment for the 11th consecutive quarter. We’re continuing to work with customers to build communities on Stack Overflow through our Reach & Relevance products, which consists of banner ads, tag sponsorships, podcast, the newsletter, and blog sponsorships, and finally Collectives™ on Stack Overflow. We launched a new Collective—GitLab—and surpassed 20,000 members across all Collectives. Collectives on Stack Overflow are communities where developers can directly engage with technology organizations and find resources they need when they need them in one place. Our goal is to give developers direct access to the resources they and subject matter experts that can help them find answers when they need them. Our customers can also get deeper insights into who is interacting and engaging with their content and technologies on Stack Overflow. For every technology vendor we work with to launch a Collective, our goal is to do the same with an open source partner. Diversity, Equity, & Inclusion We’ve rolled out a few new initiatives internally over the last few months, including our first DEIB-dedicated (Diversity, Equity, Inclusion, and Belonging) quarterly newsletter, a calendar of important days with educational materials, and new tools to help us measure DEI metrics within Stack Overflow, and DEI-related competencies for our performance reviews framework to help hold us accountable. We’re ramping up regular programming to help scale and replicate the success of the Asian and Pacific Islander and LGBTQ+ panels we hosted last quarter. There’s always work to be done, but we’re making steady progress towards a more diverse and inclusive Stack Overflow within our organization and across our platform. Looking ahead With the Prosus acquisition complete, we’re excited to accelerate our plans for international growth and expansion. We’re cautiously moving forward with optional return to office plans in New York City and London and continuing to hire remote employees all over the globe. This month, Comparably named Stack Overflow as one of the highest-rated companies for overall happiness, compensation, and perks and benefits. We’ve already filled over 180 roles in 2021 thus far and are currently recruiting for over 70 open roles (and more being added daily) across nearly every department and time zone. With more than 80% of Stackers permanently remote, we’re also finding creative ways to stay supportive and connected long-term. As we sprint towards the end of 2021, we’re focusing on the foundational priorities that got us here: operational scale and repeatability, Stacker growth and development, and community health and growth. The Prosus acquisition is allowing us the flexibility and resources to scale our team faster so that we can reinforce our foundation, serve our community at scale, and prepare for takeoff in the year ahead. Tags: ceo quarterly post"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/09/22/gitlab-launches-collective-on-stack-overflow/","date":"2021-09-21T22:00:00.000Z","tags":["Community"],"title":"GitLab launches Collective on Stack Overflow","text":"Today, we’re pleased to announce the launch of the GitLab Collective on Stack Overflow. Collectives™, which launched in June, is a new offering that creates a set of spaces where content related to certain languages, products, or services is grouped together on Stack Overflow. These spaces make it easier for users to discover and share knowledge around their favorite technologies. With the launch of its Collective, GitLab will continue to build on the collaboration that already exists with the community of developers and contributors using its platform. “Community is at the core of GitLab’s mission. With more than 1 million active license users and a contributor community of more than 2,400 people, we have a strong community aligned with our mission – to create a world where everyone can contribute,” said Brendan O’Leary, Senior Developer Evangelist at GitLab. “GitLab’s Collective on Stack Overflow aligns with our mission. This new space will help us to expand our open source collaboration so contributors and developers can share and learn about version control, CI/CD, DevSecOps, and all-remote workflows. We believe the GitLab Collective will be a place where we can discover feedback and create opportunities for the GitLab community to contribute to Stack Overflow’s community.” GitLab’s Collective is defined by a set of specific tags related to the company’s technology such as ‘gitlab’ and ‘gitlab-ci’. Users who join the collective can easily find the best answers and get in-depth technical product information about GitLab’s platform and application through how-to guides and knowledge articles. They can also see how they stack up on the leaderboard, and top contributors can be selected by GitLab as Recognized Members, users the company approves to respond to questions or recommend answers. We launched Collectives on Stack Overflow with Google Cloud and Go Language earlier this summer, and have already seen thousands of community members joining in. The contributions of the Collectives’ community, taken together, can help the millions of curious question askers who visit Stack Overflow, as well as users looking for a solution to a problem or a way to improve their skills. GitLab’s efforts to expand the pool of open source collaborators aligns with our mission, to empower the world to develop technology through collective knowledge. Tags: collectives, gitlab"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/08/02/q3-2021-ceo-blog-post-communities-catalyst/","date":"2021-08-01T22:00:00.000Z","tags":["Community"],"title":"Communities are a catalyst for technology development","text":"In June, I wrote to announce that Prosus, one of the world’s leading technology operators and investors, had agreed to acquire Stack Overflow. Today, I’m pleased to say that the deal has been finalized. This is a tremendous milestone for our company and community, a testament to the hard work and dedication that have built Stack Overflow over the last 13+ years. We’re excited to continue working towards our existing goals and priorities with no changes to our focus on creating and maintaining a vibrant community and our core SaaS business model. With Prosus, we can accelerate plans and be even more ambitious about scaling our public and private platforms. Over the last quarter, we revisited our mission statement to reflect our unwavering commitment to knowledge sharing and consolidated the many versions that have surfaced over the last several years into one: Empower the world to develop technologythrough collective knowledge. We, and Prosus, understand that our commitment to spreading knowledge and building community is the engine of our success. Democratizing information is the only way to empower learners to develop the future of technology. We hope to further invest in the community so an even wider group can benefit from it – technologists in countries around the world who are all on their unique learning journeys. Public Platform and Community Q2 was a time of strong growth for our public platform. We saw more new accounts being created than ever, with April, May, and June trending at or above our highest levels from last year. Part of the credit here certainly goes to our public platform and community teams, which continue to push improvements to the user experience and work to ensure our sites are becoming more welcoming, inclusive, and diverse. But there are also macro trends at work. As we join Prosus’s edtech portfolio, we do so alongside companies like Udemy, Brainly, and Codecademy. The number of people around the globe seeking careers as software developers is increasing. So too is the number of professions, from finance to life sciences to climate studies, where writing code is not the primary task, but is fundamental in transforming those professions to become more automated and to drive innovation. As our community grows, we must continue to invest in supporting it. As I’ve outlined to all our employees, keeping the community at our center is a core value. We’re pleased to announce that we’ve recently hired a new VP of community, Philippe Beaudette. Philippe has a storied career, beginning in the days of AOL chat rooms, through the early days of Wikipedia, and most recently at Reddit. He brings a great wealth of experience in building safe, inclusive communities where users feel empowered to express their curiosity and share their knowledge. We’re thrilled that Philippe, with his deep community background, will be hyper focused on working closely with the community to help make the Stack Exchange ecosystem even more vibrant. You can read his blog post on our upcoming roadmap and listen to a podcast interview with him below. Speaking of hiring, we have over 100 open roles across our company. If you want to be part of a high growth organization that works to accomplish a powerful mission at global scale, take a look and see if there is an opportunity available that speaks to you. “We want to communicate through the work that we’re doing and not create more meetings, more time spent figuring out where to look or who to ask. Stack Overflow for Teams plays a big role in InnerSource because it helps us document all these answers that are needed for engineers to move quicker. Stack Overflow helps on unblocking engineers, and that’s a big thing we didn’t use to have.”Rocio Montes, Staff Software Engineer, Intuit Product Q2 saw the launch of a new product, Collectives™ on Stack Overflow, which aims to increase value for our users, community, and clients by organizing Q&A and Articles around a certain technical topic, for example a programming language or cloud services platform. We had two great customers come onboard to help us launch this product: Google Cloud and Google’s Go Language, and we will be announcing many more Collectives in coming months. Our approach to development is product-led AND community-driven. By learning from and serving our community, we can be a force multiplier for companies that want to empower users of their technology. The two Collectives we’ve launched for Google Cloud and GOLang are reaching hundreds of millions of Stack Overflow users. Statistics from the Google Cloud and GOLang Collectives. August 2021. We’re excited for this new approach to organizing knowledge and community on Stack Overflow, and have already seen over 10,000 users sign up to follow our Collectives. I believe that Collectives will help our community to organize and share knowledge around clusters of technology, for example the wide array of development happening in the blockchain space. We recently ran a survey on this topic, and got some fascinating results. There are Stack Exchanges focused on Bitcoin, Ethereum, Cardano, Iota, EOS.IO, Tezos, and Monero. I’m sure more will emerge as this space continues to grow. Collectives is part of our Reach and Relevance product offerings, and we’ve had an incredible start to this line of business in 2021. Earlier this year we combined our Advertising and Talent products under one umbrella. We moved away from discrete hiring to focus more on advertising and brand awareness. We are seeing tremendous traction in this space, with firms like AWS, JP Morgan Chase, and Accenture coming on board for brand awareness campaigns. Some of Stack Overflow’s recent brand awareness campaign clients Just as there are an ever growing number of new users signing up for the public platform, there is a steady increase in the number of organizations that want to reach developers. Some are looking to hire great talent, others want developers to try their product, and others simply want developers to use their platform, tools, or ecosystem. We can help them do it all, and we do it while respecting developer’s privacy and avoiding invasive tracking. As I’ve written before, Predictable and Reliable Financial Performance is one of our strategic priorities. In Q2 we introduced another new product, sponsored podcasts, and our content marketing business is on track to more than double in size over last year. Put together, Advertising and Collectives delivered an exceptional quarter, the biggest in the company’s history. “The number of daily searches stood out as a healthy sign of people changing their behavior and coming to Stack Overflow for answers. Anecdotal evidence showed that even at this early stage, many actually found what they were looking for and therefore gained value without actively participating. Even the SMEs, who had to put in some extra effort up front, reported noticeable time savings, specifically when a ’hot topic’ had a good SO answer they could just point people to instead of repeating the answer on Slack”Tzach Zohar, System Architect, Skai Q2 also saw continued traction towards our other strategic priority for 2021: Product-led Transformation. After our launch of our Freemium Teams tier in Q1, we saw a steady stream of thousands signups and users trying out the Teams product. From storied innovators like Xerox to rising unicorns like Doctlib, we continue to see an ever growing cohort of organizations leveraging Stack Overflow for Teams in a range of use cases to ultimately innovate faster through knowledge sharing and collaboration. One key metric we focus on as we evaluate how our users see value in our Teams product is something we call Knowledge Reuse. While the number of questions and answers added to a Team are meaningful, we believe the true value is best quantified by understanding how often users are able to quickly find a solution to the problem at hand. On our public site, we note how many people a particular user has reached with their answers. It’s incredible to realize that the contributions of an individual can help tens, even hundreds of millions of others learn and grow. The same outsized impact happens within private Teams. At companies like Xerox, Doctolib, and Unqork, knowledge is reused hundreds of times a month. That’s hundreds of emails or chat messages avoided, time saved for the person asking the question and for their colleagues. One of our most viewed questions on Stack Overflow is a question that asks “What is a NullPointerException, and how do I fix it?” That was asked 12 years and 7 months ago. It has 31 different answers or solutions provided. That question has been viewed 3.2 million times. That’s 3.2 millions times that knowledge was reused. We have one piece of knowledge on our own internal instance that’s had more than 1,000 views in the past two years – How do I submit a Salesforce Case? Another major impact Teams can have is to break down silos within an organization. Great solutions may not come from the teammate or department you expect. We continue to use Teams internally, where it helps us learn, share, and grow. There are great conversations happening across legal, marketing, sales, product, and engineering. Wisetech Global tells us that at their company all hands, Stack Overflow for Teams has been used to help discuss and debate the best ways to implement some of the company’s core mantras and values. “We have recently been running a program where we’re taking a number of the mantras that we hold dear in the business and we’ve been amplifying that to the global audience,” explains Ian Larsen, GM of software operations. “We’ve been using Stack Overflow for Teams as a discussion forum. It’s a place for people to raise questions, get additional clarity, or just discuss the nuances. So I think that has been great.” “We have a highly complex and proprietary tech stack and have recently expanded rapidly. Our senior engineers were spending a lot of their very valuable time answering the same questions to different people. Having our own Stack Overflow (for Teams) setup means they only have to answer it once and can provide code samples, details descriptions etc. It also has the benefit of this knowledge being available outside of our time-zone’s working hours so our engineers in the US and Asia can get quick, detailed answers without having to wait until our UK office opens. It has significantly helped boost our productivity”Global Cyber Security Provider Diversity & Inclusion A year ago I made a commitment to include updates on our diversity and inclusion progress in these quarterly posts. We are making a significant investment in DEI (diversity, equity and inclusion) at the company. We are compiling and preparing to share DEI metrics with employees, evolving our hiring practices, rolling out inclusion training to all employees, and we are in the process of hiring a Director of DEI to lead these efforts. We’ve also committed to a quarterly DEI newsletter compiled by our growing number of affinity groups collectively, which is launching this week. Over the last three months, we’ve also hosted panels featuring employees and external experts open to the full company on issues and experiences facing our Asian & Pacific Islander community and our LGBTQIA+ community. Hearing shared and individual experiences was eye opening, and I truly believe learning about others’ experiences makes us a stronger, more thoughtful organization in the long run. There is so much work to be done, but we’re continuing to take steps towards a diverse and inclusive culture that we believe sets the tone for the community we foster online. Conclusion As we look out to the second half of 2021, there are many big opportunities we are considering. How can we leverage the global scale of Prosus to expand our business and bring a broader cohort of users, from around the world, onto our public platform? How do we enable beginner developers to leverage Stack Overflow so they become engaged participants, not just casual visitors? What kind of strategic partnerships and alliances are possible with other edtech companies, leveraging our scale and their expertise so that Stack Overflow can offer a wider variety of options for finding solutions and learning new skills? The completion of our deal with Prosus isn’t the only exciting news I get to share today. Today we published our annual Developer Survey. It contains many fascinating insights, but one in particular stood out to me. For the rising cohort of coders under the age of 18, online resources like videos, websites, and blogs are more popular than books and school combined, a statistic that doesn’t hold for any of our other age cohorts. Overall the developer profession is full of new joiners, with more than 50% indicating they have been coding for less than a decade, and more than 35% having less than five years in the trade. So much of what drives us is the desire to empower this new generation of developers and technologists. The resources available to us through this acquisition and the continued growth of our product and public platform give me great confidence that we will continue to unlock new potential, and that we will grow Stack Overflow into an enduring global brand with a vibrant community that continues to empower the world to develop technology through collective knowledge. Tags: announcements, community"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/07/26/a-design-deep-dive-into-how-we-created-collectives/","date":"2021-07-25T22:00:00.000Z","tags":["Company"],"title":"A deep dive into how we designed Collectives","text":"Last month, we announced the launch of CollectivesTM, places within Stack Overflow that are a little bit more concentrated, a little bit more specialized. They’re mini communities around certain programming languages, products, or services in Stack Overflow where developers can engage directly with the companies and individuals who know the technology best. Each Collective is smaller than a full exchange, larger than a single tag, and an easier way of narrowing down all of the content on Stack Overflow when working with specific tech. We’re excited that this product is finally live in front of our community of users, and we wanted to take a deep dive into how we designed Collectives, starting from the initial ideation to all the decisions and considerations that led to what it is today. This should give you some insight into how we thought about the product and its use. A public version of our private version Collectives was an idea that had been kicking around for a while. For years, we had seen individuals share knowledge about technical products freely. Some companies even provided unofficial (or official) tech support by answering questions on their products. We had explored the idea of providing a home page for a technology or company within Stack Overflow, but never figured out a good implementation of it. In 2019, at the Stack Overflow meetup in Austin, Texas, the product team did a buildup and tear down of that idea, an exercise where we collectively “tear down” an idea by identifying potential pitfalls and risks, and then build it back up stronger by addressing major concerns and incorporating additional perspectives. One of the biggest problems we found with the idea was that you’d either be moving or duplicating content. Moving content would remove years of curation from Stack Overflow and remove credit from those that helped create the content. Duplicating the content would create two repositories that needed upkeep and add unnecessary cognitive load to users on where to go for the information. In either case, you’d need to create a new user base for this content in the new location. But in the buildup, the folks on the Reach and Relevance team saw this as an opportunity for companies to make a positive contribution to the site without taking anyone outside of the public Stack Overflow site or moving content around. The idea was to organize content and put companies around the already built communities, which is where they want to be. When we got back from the meetup, we started a traditional five-day design sprint: the first day was understanding, the second day diverging, third converging, fourth day prototype, and fifth day test. During this sprint, we came up with the problems that this product would solve: Enable organizations to build relationships with the Stack Overflow community in a way that improves Stack Overflow as a resource for developers. Provide unique data showing trends and insights to companies so they can better understand developer needs, measure impact, and see our unique value. At the end of the sprint, we had a few different ideas, including allowing users to post on behalf of an organization, an organization recommending an answer, a homepage to curate and interact with the organization, and a dashboard for the organization to learn about their community and users. Our initial solutions were presented to a small group of potential clients and users with positive results. It took a few months before we garnered enough interest from customers to justify moving forward. We had to move quickly in order to get the product ready for an upcoming conference. In order to meet this new deadline, we ran research sprints. Every two weeks, research and product design would get together and decide what we wanted to tackle, then research would design a study, run it, and come back with recommendations. Then we would design based off those recommendations. Altogether there were nine research sprints. Some of the biggest takeaways from these sprints were that users didn’t want Stack Overflow to feel like a social network and that they wanted the answer ranking to remain the same. What’s in a name: Recognized members Looking back at the problems we defined during the design sprint, we wanted Collectives and the organizations that took part to improve Stack Overflow. Recognized Members was our first feature planned to solve that problem. This role is intended to increase the quantity and quality of contributions from an organization to the community. This applies not only to employees, but allows organizations to recognize and discover users that already contribute to Stack Overflow successfully. We were trying to get more people to answer the right questions or recommend the right answers. The idea that these subject matter experts of the organization could be new users of Stack Overflow and would contribute high quality answers and recommendations alongside seasoned community members at the same level within the collective was a driving motivator for this project. Originally, the term for “Recognized Members” needed to include both experts within the community and employees of the organization. It started as “Verified;” that was too close to social media. We also tested affiliate, partner, expert, and more. There were terms that the clients really liked, like expert, but then we showed it to users and they disliked it immediately. Users felt that “Expert” was a weighted title that added too much pressure—you’re expected to know absolutely everything about the technology. They also felt it was disrespectful to other experts on the site that wouldn’t have this badge. By the time we went back the fifth time, “Recognized” was one of the original ideas that had tested fairly neutral—it wasn’t picked as a favorite, but didn’t get any negative feedback. We tested it again. That’s the term that best fit the expectation of what we wanted that role to be. So wording was fun. The other challenge was how to highlight these users and their answers in the collective. We started with “Recognized Member” written in bright orange text. When you start peppering that around the site in different areas, it gets very long. Then we paired the user name with an icon that shows up alongside it so that when space is limited, we could display the icon by itself. Originally, it was a checkmark, but that just didn’t fly—too much like Twitter. We tried colored backgrounds, but that felt too bold. We wanted to make sure the weighting was appropriate, but still recognizable. Eventually, we settled on a star as the icon. In our first design sprints, we made the decision to not do employee labels in order to reduce cognitive load and minimize the amount of new user types that we were introducing. However, our potential clients wanted to differentiate between actual employees of the company versus somebody from the community that they’re recognizing. Some potential clients even had this as a legal requirement. We tested this with users, and they agreed that the information should be upfront and transparent so users know who is official and who is a community user that knows their stuff. At this point, some of the nuances around Employees and Recognized Members began to reveal themselves. If someone leaves the company and are no longer an Employee, what happens to the badge on their answer? Do Employee and Recognized statuses stay on the question if that was true when they answered? We don’t want to label somebody as an employee when they’re not—there can be legal repercussions around that as well. Alternatively, if someone was Recognized when they answered a question, we want to keep highlighting that answer because they were still a recognized authority at the time they answered. On top of all this, we had to work around the existing codebase. We had to be mindful of our developers and public users, especially anything that would need extra time from the Public Platform or Architecture team; we couldn’t make large changes. Plus, our engineering team had spent the last three years eliminating tech debt and improving stability; they didn’t want to endanger that by making large codebase changes. Just because we’re introducing this new feature quickly, it doesn’t mean we could disturb existing community functionality. This is supposed to add additional value to Public Platform users, not mess with their experience. A new content type for the community We knew from survey results that Articles were of interest to users, something that we had already been using successfully in Teams. Articles were present in most of the research sessions, and it went through a lot of iteration and discovery. Phase one was pretty easy: port Articles over from Stack Overflow for Teams. We heard very early on in research about our Documentation project and how it was painful for the community when that failed. Along with the designer that originally worked on documentation, we examined why it failed and what went wrong. When that feature first came out, some users flooded the site with low quality documentation in order to inflate their reputation. Much of the design effort here was to make sure that the quality was going to be higher and there wasn’t going to be the same reputation grab. The power of these Collectives isn’t just in the people who run them, it’s in the Members. We want any Member to be able to propose or submit a draft to the Collective for review. In the near future, we’ll launch an Article proposal flow, but we’re still sorting out the nuances of moderation and review. During user research, we heard from a lot of users who don’t want this to become just another blog site. In order to get higher quality Articles, we’ll also want to enable other users to propose edits. Part of this future feature, will allow authors to add any Member as an editor. But we need to put in extra safeguards when a Member goes back and makes edits to their article. This involves another type of approval queue. We want to avoid someone sneaking malicious content into an article without external review. Right now, there’s a lot of research into outdated answers and downvoting on the public site. People just tend to close, delete, or downvote questions if they’re wrong or duplicate. Newer users feel like this poses a barrier to the site—they don’t know why their question was downvoted so it feels a little hostile. Imagine how that feels on an Article that someone put a lot of work into. We’re trying to promote the feedback mechanism on Articles to avoid that. If you’re going to downvote, explain why and help the author. A concern with the feedback mechanism is that the feedback goes to the author in a private section. Only the author, collective Employees, and Recognized Members can see it. There’s definitely moderation concerns because anywhere that someone can send a private message to somebody on the internet usually turns bad. One of our clients was concerned that some of their members might not want to write an article in fear of just getting downvoted or worse because of their gender or their race. They’re opening themselves up to potential backlash just based on who they are, which they’ve seen before in the developer community. Unlike questions, Articles can’t be answered. They still have comments, though comments on questions are for flagging something, edits, or feedback on the question. That doesn’t really make sense on Articles. Typically, people use comment sections to discuss ideas that were written in the Article. We tested calling comments on articles ‘discussion,’ and it tested pretty well. But there’s a lot of new stuff coming with Collectives. So we pulled back on that plan to wait and see how Articles does in the first place. For now, we still want to encourage interaction with these Articles, so instead of the small “Add a comment link,” we auto-expanded the comment text box to give it more visual weight. Collective health Stack Overflow has a heavy gamification component, so we wanted to use that within a collective. When we went to look at designing a Member’s page, we wanted it to be more than a list of members; it should be a little bit more interactive and have a little bit of that competitive spirit. So we pivoted the feature into a leaderboard. We have several leaderboards—the overall one on Stack Overflow, tag-specific ones, ones on Stack Overflow for Teams—so we looked at these and external leaderboards to see what worked and what didn’t. The biggest change is that we highlight where you are on the leaderboard. Not everyone will be on the first page, even the first five pages, but it’s still fun to be able to track your progress as you learn and level up. The top three on the leaderboard will get a trophy beside their user card throughout the collective. Employees and Recognized Members will be competing on the same leaderboard; our research showed that users appreciated seeing these users high up on the leaderboard. It meant that the organization behind the collective was actually engaged and putting something back into the site and into the community. On the client side of things, we still wanted to provide that insights dashboard. We’d heard from users of our Stack Overflow for Teams dashboards that the information in them was great, but that they didn’t know what to do with it. At first, we tried cutting the amount of information down—location, time of day, and other pieces of data got cut. But still, clients ran into the same problem: here’s the info, now what? If my Collective is doing badly, what can I do to make it better? We were constantly prioritizing during the design of this dashboard. The deadline kept moving, so we always felt like we were up against this tight deadline and we constantly needed to prioritize over other items. Sometimes, one thing would be the most important and other times, it was something else. Constant communication, prioritization exercises, and time management were our daily lives. One of our biggest trip-ups was the amount of times that we had to go through and iterate on it. The team was split on whether to do it at all. Just reports and metrics could help prove return on investment with clients. But we wanted something that would ensure that Collectives succeeded, so the insights dashboard evolved into Actions for you, a list of tasks that we think the collective experts should do to make the place successful. It highlights problem areas, so if a Recognized Member has a little bit of time, they know where their efforts will pay off the most. Maybe there’s a lot of unanswered questions. Maybe questions have answers, but those answers need recommendations. Along with these highlights, we included a weekly tasks list, steps that the collective team should take every week to help their space thrive. The collective Recognized Members and Admins know exactly what they need to do—write two articles, answer ten questions—and tick off those boxes as the tasks are completed. Next week, it refreshes. It helps level set what a reasonable amount of effort looks like. In the future, the task list may have more dynamic items supported by data, nudges to invite more Recognized Members or encourage more edits. When we tested that feature with some of the moderators and high rep users, they all really liked it and requested that we bring it to the mod review queue, which was a good confirmation we were on the right path. Getting the dashboards up and running was one of design’s biggest challenges, but it was worth it—it looks great. And we’re just getting started Google Cloud and the Go programming language were the first Collectives to launch and those organizations and their users are seeing the value of the work we put in. More technology providers and more features are on the way. For example, we’re looking at the ability to pin certain content to the top of the list, perhaps as a way for the collective to promote a certain article for a limited amount of time so that everybody can see the official answer immediately. We’re also looking for ways that the organization can ask and discuss topics with their collective Members. But we want to make sure this adds value to users and it remains within the confines of the collective.These are a few of the features that will really make Collectives feel unique. As always, we’re trying to lower the friction between technology workers and the answers that they need to get the job done. Technology companies want to be able to engage with those people directly, and Collectives gives both groups a space to interact and share knowledge. Tags: collectives, deep dive, design"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/06/25/user-research-behind-collectives/","date":"2021-06-24T22:00:00.000Z","tags":["Community"],"title":"Unpacking the user research behind Collectives™","text":"This week we launched a new initiative: CollectivesTM on Stack Overflow. For over a year now, I’ve led our Product Research efforts on this project. In this post I want to share some of the valuable feedback we’ve collected from community members of our site, how their input shaped what we launched, and what we hope to launch in the near future. Before I dive in, here are some key things to know: We’ve collected a lot of feedback from users and moderators on the site, as well as potential customers. We’ve spent over a hundred hours in 1-on-1 interviews with users and potential customers who have generously given their time to research sessions. We’ve also collected thousands of survey responses, and spent a lot of time reading through feature requests and feedback about past projects on Meta. While we wanted a representative set of feedback, we had a focus on engaging with active, highly contributing Stack Overflow members and moderators. In particular we had a panel of 12 users and moderators who met with us consistently for the last year, and whose feedback has been invaluable.This isn’t the end of us collecting feedback – this is still a Beta release. We will continue iterating on these features based on new feedback and insights. I encourage you all to continue sharing feedback, and if you’re interested, to also opt-in to research participation in your email settings so my team and I can contact you for more detailed feedback. Background and context When the idea of companies having ‘public teams’ or ‘spaces’ was first brought up, my mind went to all the ways it could possibly go wrong. But I was also really curious about whether there was any genuine value that organizations could add for our users. So this sparked our first big research and design effort: a 5-day design sprint, attended by a wide range of teams from across the company; product management, community management, product design, engineering, data, product research, and more. While Stack Overflow needs paid products in order to operate, we want to do this by adding value to the community, not changing things for the worse. So we settled on the following mission statement for our design sprint: “How might we enable companies to build relationships with the Stack Overflow community in a way that improves Stack Overflow as a resource for developers?” During the design sprint, there were a few things we settled on early: We should aim to not change the guidelines around what is on topic for Stack Overflow. This means we should be thinking about organizations who are technology providers, and who likely already have technologies with active tags on Stack Overflow.In order for organizations to add value, they would need to directly participate in Q&A in some form – not as a channel for customer support, but as a way for technology providers to share their knowledge in a productive way.While so much of our work has been focused on tearing down the barriers to entry for newer users, this would be an ideal project to also focus on where we can add features for more engaged users: what new ways could they participate? We eventually came to a potential solution (Collectives) which we felt adhered to these criteria, and addressed our initial design sprint mission. The concept consisted of a few parts, including: badges on user cards for verified employees/topic experts, a way for technology providers to indicate an existing answer represented best practice, and some kind of page for an organization to showcase their relevant tags and other pertinent information. Early Feedback The first time we researched these concepts with users (as part of the 5-day design sprint), we learned a lot. One common theme that emerged was that these concepts could help instill trust in an answer, help answer-seekers get to solutions quicker, and potentially help with the issues of outdated answers and identifying canonical answers when it came to duplicates. On the other hand we were cautioned to be careful with not changing things like sort order, so we wouldn’t hurt the democratised nature of the site. A couple of other highlights from these early research sessions included: When it came to verified employees/topic experts, our research participants saw value here, but only if we maintained relevance. It was critical that these badges were scoped; they should only appear when a user participated on tags which they actually had expertise in. We also got positive feedback about the fact this would be a great way to recognize members on the site who continually contribute their expertise to certain topic areas. On the flip side, we learned that the word ‘verified’ had the wrong connotations (thus beginning a near 18 month struggle for us on what to call this role, with at least 15 different potential names…). Verified reminded participants of social media, and we have no desire to become a social media platform.The idea of technology providers being able to mark existing answers on the platform as representing best practice was very popular in research. Some users pointed out that this could potentially be a useful way of designating a canonical answer when handling duplicates. Back then we were calling this concept ‘endorsed answers’, which was not a popular term, and one that non-native English speakers felt was particularly unclear (we weren’t having a good run with copywriting!). So we renamed this to ‘recommended answers’, and this is the one part of the concept that hasn’t changed significantly since our design sprint. At the end of the design sprint, we were still just scratching the surface of what we needed to learn from Stack Overflow users. We had a million questions about how these features may help or hurt the community, what would make a good collective, what additional features might make this idea more complete, etc. So we began a series of what we called ‘research sprints’, which were essentially intensive blocks of focused research, aiming to address our biggest open questions and hypotheses. Key findings: Articles The appetite for longer form content was something we’d heard in the past, but also dug into as part of our research sprints. For example, 23.1% of responses to a survey we ran of visitors to Stack Overflow (n=1010) said they believed how-to guides would be a positive addition to the site. We also know that plenty of contributors have tried to make content that would really be better suited to an article fit into a Q&A format. Overall, the feedback we got through surveys and interviews was that, with the right guardrails, this could be a positive addition to the site. Some users were cautious because of a project that we had sunsetted a few years ago called Documentation. There were several issues we heard about when it came to Documentation, but the ones brought up by our users most often were the influx of poor quality or repetitive content, as well as issues introduced by users unfairly being able to gain reputation. These were, of course, problems we were keen not to repeat. So that brought us to our first key decision on this feature: at the time of launch we are limiting Article creation to Recognized Members of a collective. However, we are planning on launching a review process where any member of a collective can submit Articles that will then be reviewed by the Recognized Members of that collective. In our customer research, something that we discussed was that in order to make this review process successful, customers should be clear about the type and style of Article that would make a good addition to the collective. Hopefully this should go some way to start addressing the first issue we saw with Documentation, helping to raise the bar quality-wise and ensuring that we aren’t just seeing repetition of existing help docs and documentation. The other factor when it came to quality was making sure voting was part of the mix. In our initial designs we only had an upvote-style button to signal good quality. But through research we heard that users didn’t want to see upvotes without downvotes. So we added a downvote option in, mirroring Q&A. Which brought us to the other problem we heard about with Documentation: reputation… I’ll be honest in saying that rep was a topic we got extremely mixed reactions on. Nearly everyone we spoke to had a different take on how we should handle Article rep. So unfortunately, we haven’t found (and probably won’t find) a solution that everyone loves. Some users proposed a new bucket of rep for Article contributions, some encouraged us to offer more rep for Article creation to reflect the added effort it takes to write an Article, and others didn’t think rep should be part of the feature at all. Key findings: Customer research Another topic we discussed at length with users was how organizations would interact on the platform. We spoke to some who had attempted to facilitate developer support on Stack Overflow before, and to users who had seen these efforts unfold. Some of the key things we learned from these discussions were that participation from organizations still had to be deeply technical, not be promotional, and perhaps most importantly, we needed organizations to be consistently active to actually see a positive community impact. This spurred several rounds of research with potential customer partners. We aimed to understand if they would be willing to make this kind of commitment, and if so, how we could facilitate ongoing participation with this initiative. This research led to two things. First, helping our team clearly understand what type of organization we wanted to work with: ones that would take the time to understand the site, ensure they were putting dedicated resources towards participation, and didn’t see it as purely an outlet for marketing. The second was that we would need to build out dashboards to help Recognzed Members target where to participate on the site. There’s obviously a million ways someone could contribute and we wanted to help make sure Collectives would enhance the community, and fill in the gaps. Part of the dashboards we designed include curated lists to help focus participation, e.g. one of the lists is ‘questions over 30 hours old without an answer’. We hope these curated dashboards will help our customers enrich their community on the site. Key findings: Moderation Besides customers and users, there was also another group we were keen to speak to: Stack Overflow Moderators. We were lucky enough to be able to consistently interview several mods throughout our discovery process. These interviews brought a unique perspective to our designs, and helped us consider rules, guidelines, and community health, as well as assess possible abuse vectors. Some key topics we covered with participating Stack Overflow moderators were how moderation of new features should be handled, and whether there should be any new rules. One big takeaway from these interviews was that the mod team should moderate the majority of new features, with the option to pull in a Community Manager from our staff where they feel appropriate. On the topic of new rules, we didn’t end up adding much. It was agreed that the new content types should still adhere to the existing Stack Overflow rules, licenses, and on-topic guidelines. However, the one thing we were encouraged to do was to provide our customers with guidelines and help docs to ensure their expectations about community norms and rules are set. We’ve done many demos and sessions with our launch customers, and have written several new help docs, and will continue adding to this as the product evolves. There were dozens more topics we discussed in research, including: our ongoing saga with what to name the new roles and features, how to handle potentially off-topic questions, how to prevent vote fraud, assessing several new content types, possible incentives other than rep, notifications, and so much more. The time and energy that users and moderators have put into sharing their opinions and giving these concepts careful thought and consideration is amazing. If we had launched this initiative without any feedback it would have looked very different, and I am personally really happy about just how much we have learned from community members over the last year and a bit. Check out the Go Language Collective and the Google Cloud Collective. For those who want to understand what Product Research looks like at Stack Overflow: Through qualitative and quantitative research, we work to understand the needs, motivations, and pain points of the community and of customers to help guide the direction of our products. This is both in terms of what products should be built, but also how they should be executed. We see ourselves as advocates for the users, and often partner with Community Management, Product Management, Product Design, and Data. Tags: collectives, community, user research"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/06/23/collectives-stack-overflow/","date":"2021-06-22T22:00:00.000Z","tags":["Company"],"title":"Announcing the launch of Collectives™ on Stack Overflow","text":"When I joined Stack Overflow in early 2020, one of the things that drew me to the role was the tremendous depth and breadth of our technical community. We know that getting specific, expert knowledge about a technical product or service is challenging. We also know that building communities, engaging with developers and supporting them at scale can be a challenge for organizations. Over the past year, our Reach & Relevance team has been heads down working on a new initiative to enhance the experience on Stack Overflow for both our users and organizations (specifically open source organizations and companies that build products and services for technologists). Creating and managing relevant content while attracting users, both initially and on an ongoing basis, are challenges that we believe Stack Overflow has spent nearly a decade working to solve. By helping organizations address these challenges, we help our Community access the specific in-depth knowledge of the people directly building and supporting these technologies. We believe that we are uniquely positioned to help technology organizations and their users engage directly while identifying where and how to best engage to deliver value to those users. Today, I’m happy to announce the Beta release of a new product called Collectives™ on Stack Overflow, launching with Google Cloud and Google’s Go Language as our first customers. Our users leverage questions and answers millions of times a day. This product empowers the organizations connected to these technologies to more directly support the communities that have grown around various topics, bolstering the quality and health of our content in a way that benefits our users as well. Product Led: What problem are we solving? We know that engineers at tech organizations have a wealth of knowledge about their technologies and, while some currently participate on Stack Overflow, we identified an opportunity to incentivize, simplify and highlight that participation. An organization’s expertise, when included with the community’s knowledge, can provide a more in-depth and complete understanding of how to better use a language, leverage a service, or troubleshoot a technology so that others with the same issue have a higher level of confidence in the solution provided. When talking to organizations already represented on Stack Overflow via tags of their technologies, we’ve also learned that there is a strong appetite to contribute their specific knowledge to Stack Overflow. Organizations want to have deeper interactions and provide a better experience to current and potential users of their products and services—something they can’t do with any of our existing products. Through the last year, we have conducted extensive product research with moderators, users and potential customer organizations to identify new ways to add value for each to our existing platform while limiting the change to how things already work on Stack Overflow. We found that users and moderators want to hear from and engage with experts at the organizations who build and support the technologies that they use regularly, and we learned how they want to engage with those experts. Collectives features Collectives is a new set of spaces on Stack Overflow where content related to certain technical languages, products, or services can be grouped together. It’s a place for users who regularly interact with this content to collaborate, and for the organizations who help build or maintain this technology to share their expertise. Collectives are defined by a set of specific tags relating to the technologies that an organization builds, supports and has an authority over. It aggregates all content for those interested in these technologies and gives them some special handling of content posted in those tags. This content includes questions and answers as well as new long-form content related to the organization’s products and services. The technology organization doesn’t own the tag, but it has the ability to organize and highlight information it feels is valuable. Each participating organization will have a Collectives page, which acts as its “home” on Stack Overflow. Questions and answers will continue to belong to the Stack Overflow community, but the Collectives page will aggregate all of the relevant content from the associated tags. Users can join any Collectives page, participate in its leaderboard based on their contributions to its associated content, and find the users that are Admins or Recognized Members of a Collective. With this launch we are creating a new Collectives-specific user type: Recognized members are either employees of an organization, part of its Developer Recognition Program, or users selected by the organization from within the Stack Overflow community that are knowledgeable about the organization’s technologies. These users will have a badge identifying them when they post/edit a question, provide an answer, or write an Article that is associated with a collective through its tags. They will also have the ability to recommend an existing answer within their Collective, highlighting that, from their perspective, this is a recommended way of solving the problem. Recognized Members of a collective will also have the ability to contribute a new type of content to our network. They can create longer form content within a collective which we call an Article. We first introduced this feature within our Teams product last year where we have seen strong adoption and usage. Articles give Recognized Members the opportunity to provide deeper knowledge and insights through how-to-guides, knowledge articles, or announcements. Initially Articles can only be posted by Admins and Recognized Members of a Collective, but we’re planning to release a feature that would allow any member of a collective to submit an Article to the collective for review in the near term. Our launch customers We knew early on that we wanted to balance our Collectives between open source and commercial technologies to reflect the diverse landscape that our users work within everyday. Our target was to launch with an organization of each to demonstrate our commitment to that balance from the start. I am so pleased to announce that our first two Collectives are Google Cloud and Google’s Go Language. “The technical community is the heart of our Google Cloud mission and everything we build and create is grounded in helping them quickly build technologies that push the boundaries of their imaginations,” said Amr Awadallah, Vice President of Cloud Developer Relations at Google. “Ensuring that Google Cloud developers have the information they need to build is embedded in everything we do. Google Cloud’s Collective on Stack Overflow will help us make information more accessible and ignite our technical community so we can all innovate faster.” “Go was born from the idea that modern open source programming languages should make it easier to build simple, reliable, and efficient software,” says Steven Francia, Product and Strategy Lead for Go Language at Google.” As more developers adopt Go to build their ideas and contribute to its iterations, it feels only fitting to take the same open source approach to technical knowledge sharing with Stack Overflow. Collectives™ will change how we are able to help technologists understand, implement, and scale Go, as well as collaborate with their peers.” We designed Collectives to be a win-win for our clients and our community. Organizations get an opportunity to help improve the health and detail of content being created around their technologies, and users have more opportunity to find relevant and accurate information they can use to solve problems and be recognized for their contributions. Tags: announcements, company"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/06/16/state-of-the-stack-q2-2021/","date":"2021-06-15T22:00:00.000Z","tags":["Company"],"title":"State of the Stack Q2 2021","text":"We have had an exciting couple of months here at Stack Overflow. As you know, earlier this month we announced that Prosus intends to acquire the entirety of Stack Overflow the company, which includes Stack Overflow, Stack Exchange, and all of our paid products. You can read more details in Prashanth’s blog post. I have been fielding questions from our team and our community about what changes as a result of the acquisition. Our 2021 product and community strategies, our roadmaps, our hiring and financial plan will not change; we will continue what we set out to do this year. Stack Overflow will continue to operate independently after the acquisition closes, and I don’t expect much will change day to day for our teams or our users. As we begin planning our 2022 product and community strategies and identifying opportunities to invest and innovate, I am excited to collaborate with Prosus to increase the value we deliver to our public platform (Stack Overflow and Stack Exchange) and Stack Overflow for Teams users. We will leverage our user research, backlog of product ideas, and feature requests to define opportunities for deeper impact for all our users and customers. We are excited about the possibility of working with Prosus companies like Codecademy, Udemy, Skillsoft, and Brainly. As these opportunities develop into plans, we will share them through our blog posts and roadmap updates. I have read a number of concerns and predictions, both around the acquisition and beyond, which I wanted to specifically address: In my one and half years at Stack Overflow, we have never discussed putting a paywall in front of the content that the community has created and curated over many years. We have no intention of ever doing this and understand just how damaging this would be for everyone.We also have no intention of limiting the number of copy and pastes for users from our public platform sites. Yes, we did this as an April Fool’s joke, but only because that is just how ridiculous we think this possibility is.We have conservative and restrictive advertising and third-party data usage policies because we understand how important this is to our users. Though we ran an experiment on real-time bidding for ads in 2019, we do not use it currently and have no plans to in the future, and all of our advertisers buy directly from Stack Overflow to ensure quality and relevance. We have limited the level of animation and distractions that advertising on our sites creates for our users and investigate any ads reported by users to ensure we maintain high standards. We have no intention of changing these strategies or policies. We believe that democratizing technical information empowers the world to develop better technology and innovate faster. Keeping the site open to all has always been core to our values and to our business, and an acquisition doesn’t change that. The team and I are really energized by the impact we have made in the last year and what the future holds for our products, community, customers, and company. Public Platform We kicked off Q2 with our April Fool’s Day prank claiming that in order to copy and paste from Stack Overflow you needed to purchase “The Key.” The content and screenshots around this prank were widely shared and hopefully enjoyed as much by our users as it was by our staff. It also taught us some interesting things about how people use our site. In May, we launched our 2021 Dev Survey which streamlined both the questions we ask as well as the process to analyze and share the results. As the second quarter ends, we are wrapping up the final phase of our large investment in improving and updating our Review Queue functionality. We have been working on improving content health through research and data collection on closed questions and outdated answers. I look forward to potential improvements based on our learnings which we will share in future roadmap blog posts. We are in the planning phase of user and product research on improving the new user onboarding and overall experience. Community Management We have been focused on growth and renewal in Community Management this year through investment in people and tooling. We have welcomed three new team members who have been introduced to the community on Meta. We have kicked off the search for a VP of Community Management and just recently welcomed a former team member back from within the company. We currently have two additional open positions on Curator Support and Community Operations. The team transitioned into three sub-teams earlier this year: Community Operations, Curator Support, and Trust and Safety. The creation and focus of these teams enable us to ensure we are on track to meet the fundamental needs of our community. Everyone is settling into their more defined roles and responsibilities, and with the addition of the new team members, we are making real progress on delivering more timely support to our users and reducing our backlog of improvements. Reach & Relevance We are focused on building and operating product features that address real user needs while giving technology vendors and employers the ability to build awareness and engage with interested users on our sites. We have invested months of user and customer research over the last year to innovate and inform how we build new features and functionality. The entire company is excited about what we have been working on and looking forward to sharing more with you; stay tuned for more news later this month. To support this, we are focusing more on customer employer branding and company awareness needs, and moving away from job slots and direct hiring. We have begun to wind down the sale of some of our Talent products, namely job listings. We will give our users and customers plenty of notice before we sunset products. More details on this change can be found here. Teams We launched our freemium Stack Overflow for Teams product in March after months of planning and hard work across our company. User response has exceeded our expectations! In Q2, we have surpassed 25,000 free teams created, which nearly meets our goal for the entire year. Our previous investments from creating product onboarding, messaging, and work within the product and engineering to build high performance and efficient scaling were instrumental in enabling us to launch our Freemium Teams product tier. We are continuing to invest in our product-led growth and SaaS transformation through improved analytics and ongoing engagement with users to inform and educate them about the product. We are just getting started with user research on our Basic and Free Teams tiers to understand how we can provide more value to smaller teams and organizations. We are continuing to investigate how and where Public Platform content can be integrated into the Teams experience. We just launched Unified Search on our Enterprise Team tier to allow each customer to decide whether they wanted an integrated search experience or not while ensuring users knew whether they were leveraging internal or public content to help them solve problems. Conclusion Taking a broad view, I see some important themes are emerging in our work. We are investing deeply in research across many areas to understand where our users and customers see the most value and how we can make the greatest impact across the communities, products, and platform that make up Stack Overflow and Stack Exchange. We are seeing real impact in the areas we have focused our investment. The announcement of our planned acquisition means we can lean into the strategies we committed to in our roadmaps for this year with increased confidence and speed. We remain committed to building an open, public platform that allows anyone to share and find knowledge. We’re building for our users and customers so they can build for the world. Please share your thoughts with us on the MSE feedback post. Tags: announcements, state of the stack"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/06/02/prosus-acquires-stack-overflow/","date":"2021-06-01T22:00:00.000Z","tags":["Company"],"title":"Prosus’s Acquisition of Stack Overflow: Our Exciting Next Chapter","text":"As you may have seen in the news this morning, Prosus (AEX:PRX) has announced its intention to acquire Stack Overflow for 1.8 billion dollars. This is tremendously exciting news for our employees, our customers, our community members, and for our shareholders, and I will share a bit more about what it all means in this post. Prosus is one of the world’s leading technology investors with stakes in companies such as Tencent, Brainly, BYJU’s, Codecademy, OLX, PayU, Remitly and Udemy. Their massive scale and reach improves the lives of around a fifth of the world’s population. Prosus’s mission is to build leading companies that empower and enrich communities, as demonstrated by the many community-focused and EdTech companies they work with. This makes Prosus the perfect company to acquire Stack Overflow, and Stack Overflow the ideal investment in their focus on the future of workplace learning and collaboration. It allows us to continue to operate as an independent company with our current team and with the backing of a global technology powerhouse. Once this acquisition is complete, we will have more resources and support to grow our public platform and paid products, and we can accelerate our global impact tremendously. This might look like more rapid and robust international expansion, M&A opportunities, and deeper partnerships both on Stack Overflow and within Stack Overflow for Teams. Our intention is for our public platform to be an invaluable resource for developers and technologists everywhere and for our SaaS collaboration and knowledge management platform, Stack Overflow for Teams, to reach thousands more global enterprises, allowing them to accelerate product innovation and increase productivity by unlocking institutional knowledge. Prosus is a long-term investor and loves what our company and community have built over these last 13+ years. They are impressed by the SaaS transformation the company has been on since the launch of Stack Overflow for Teams and especially over the last two years. Prosus recognizes our platform’s tremendous potential for impact and they are excited to launch and accelerate our next phase of growth. How you use our site and our products will not change in the coming weeks or months, just as our company’s goals and strategic priorities remain the same. As the acquisition is finalized, and we continue to partner with Prosus, I will keep you all posted through my regular quarterly blog posts and Teresa Dietrich, our Chief Product and Technology Officer, will do the same in her quarterly community blog posts. I want to conclude by thanking all of you for your contributions over the years. Whether you asked or answered a question on our site or simply copy and pasted code, whether you once found a job on Stack Overflow or you’re one of the hundreds of thousands of users of Stack Overflow for Teams. We could not have achieved this milestone without you. This milestone is just the beginning. Since 2008, our public platform has helped developers and technologists over 50 billion times. That’s just us getting started, and I can’t wait to continue to update you on what’s next. Tags: announcement, company, prosus, stack overflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/05/03/find-knowledge-faster-new-articles-features/","date":"2021-05-02T22:00:00.000Z","tags":["Company"],"title":"Find knowledge faster: New Articles features","text":"In the second half of 2020, we launched Articles on Stack Overflow for Teams in the Business and Enterprise tiers, which introduced a new first-class content type intended for users to proactively share long-form knowledge. Within Articles, users can easily create knowledge documents, announcements, how-to guides, and policy notices. Since that initial launch, we have listened to customer feedback and have incorporated the top three requested features into a new release. With this new release, users can now: Find Articles alongside Questions when searching for particular tags.Save a draft of an Article before publishing later.Earn reputation points by creating an Article or responding to an Article. With these new features, knowledge becomes even easier to find, content becomes better, and the experience becomes more enhanced. We think users will find these new features make creating, interacting, and discovering Articles easier and more fun. Knowledge discoverability Articles are now easier to find. No longer are Articles and Q&A treated as separate items; search queries will return both. Search and uncover long-form content by topic or subject with tags. Also, when users follow specific tags or ignore specific tags, Articles will either show or not show in their feed or digest. This makes it even easier for users to find the most fitting content when they need it. Better knowledge sharing experience Articles now have enhanced edit capabilities that are similar to Questions. We listened and now users can start an Article, save it as a draft, and come back to it before publishing to the team or organization. Improved recognition Articles now contribute to reputation points, rewarding users for contributing to the knowledge base. Similar to Questions & Answers, reputation points can now be earned for performing functions. For example, users can earn +10 points for upvoting an article. Bonus: early adopters of Articles will receive reputation points retroactively. Explore all of the features of Stack Overflow for Teams or explore all of our plans. Tags: se-all, new features, stack overflow for teams, se-stackoverflow Tags: new features, stack overflow for teams"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/04/29/vote-for-stack-overflow-in-this-years-webby-awards/","date":"2021-04-28T22:00:00.000Z","tags":["Company"],"title":"Vote for Stack Overflow in this year’s Webby Awards!","text":"It’s award season again and that means all the glitz and glamour you come to expect, all the stars in their fancy clothes, and tearful speeches. We’re ironing our finery too, since we’ve been nominated for a Webby this year in the Web Services & Applications category for Websites. This is the second year in a row we’ve been nominated—last year, we won the People’s Voice Award! You like us, you really like us! I mean, we knew that. Our April Fool’s joke ended up showing us how much you all value the knowledge shared and reused on our site. Almost one in four visitors copied something from a question or answer, whether it was to use code in a project or correct something for a better answer. The web has always worked best when it is open and shareable, and we’re proud to be the source for knowledge shared among coders and technologists. We’re honored to be nominated again. It shows just how valuable people find us. Last year, we were nominated in the Community category, so we’re looking to shine in a new category. Competition is stiff—we’re up against GIPHY. Words alone can’t express how we feel. This is the 25th Webby Awards, which means they’ve been picking the best of the internet since the days before JavaScript and HTML 5—just look at 1997’s best film and TV website, IMDB. Their slate of awards covers everything, from websites and apps to podcasts and games. The only qualification is that it has to appear on the internet. It’s the internet’s most prestigious award, beating out the badges and internet points we distribute by just a hair. While the Webby is picked by the members of the International Academy of Digital Arts and Sciences, the People’s Voice award is selected by you, surfers of the net, browsers of the web. You drove us to digital glory last year, and we’re hoping we can muster enough virtual muscle to get us the nod again. Head over to their site and vote for Stack Overflow as the best Web Service & Application. Just think, there might be people who have never heard of Stack Overflow. Help us win, and there will be a whole new audience who will copy and paste your code! The votes will be tallied and presented live and virtually on Tuesday, May 18th, so don’t wait to vote. Then tune in for the stream—hosted by the talented Jameela Jamil—and see who the internet crowns as the people’s champion. Tags: webby award"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/04/28/a-technical-deep-dive-on-unified-search/","date":"2021-04-27T22:00:00.000Z","tags":["Company"],"title":"Access broader knowledge with Unified Search","text":"Customers have told us that they want to avoid context switching. If they are searching for an answer on Stack Overflow for Teams, they want to be able to see answers from across the public Stack Overflow as well. Until today, that ability was available on our Free, Basic, and Business tiers, but not for Enterprise customers. Today we released Unified Search, which allows Enterprise plan customers of Stack Overflow for Teams to search for answers from both their private instance and public content from stackoverflow.com. Now all customers, regardless of their plan, have access to this robust searching capability. This means you can find answers to your engineering questions even if your engineers haven’t answered them in your private collaboration and knowledge sharing platform. This post will take a peek under the hood of this new feature and explain how we built this and which architectural trade-offs we dealt with along the way. Most of our visitors find questions on Stack Overflow via their search engine of choice and not by using Stack Overflow’s internal site search. While it’s hard to beat professional search engines at their game, our site search still offers a few advantages: First, it allows you to narrow down your search queries via advanced search operators. Second, our internal site search is the only way to search for private content as you’d have on Stack Overflow for Teams. Teams content is yours and most often contains confidential information that we never want to expose to public search engines. Searching for answers Our site search is powered by Elasticsearch. Our Elasticsearch cluster contains one index per site on the Stack Exchange network: stackoverflow.com has an index, superuser.com has an index, bicycles.stackexchange.com has an index, you get the idea. This Elasticsearch cluster is running on our own infrastructure in our own data center next to our web servers, SQL databases and Redis instances. Each Teams instance has it’s own private Elasticsearch cluster that’s completely separate from our public search cluster. If you’re an Enterprise-tier Teams customer, for example, you’ll have your own Elasticsearch cluster for your private content. That cluster would be running on the same infrastructure where we (or you, if you self-host your Enterprise instance) host your Stack Overflow for Teams instance. For Teams, we offer different hosting models. Some of our Teams are hosted on stackoverflow.com (you’ll get a fancy URL for your team like stackoverflow.com/c/myteam). Those teams are running on the same server infrastructure and in the same data centers that we use to run stackoverflow.com and the entire Stack Exchange network. If your Team is hosted on stackoverflow.com, you’ve always had the option to run a mixed search when using our site search: You could run the same query against your Team’s content as well as the content on stackoverflow.com and the results would show up neatly grouped by origin: For larger Teams, we also offer hosting your stuff outside of our own data centers: on Azure or—if you’re an Enterprise customer and prefer this—even on your own infrastructure. In both of these cases searching content from stackoverflow.com becomes a little more tricky. We can’t just run a search query against Stack Overflow’s Elasticsearch database as we do on Teams that are hosted on our own infrastructure. Elasticsearch is simply not accessible from your hosting environment. Larger Teams customers kept asking us for a way to search their own private content and content from Stack Overflow in one swoop. Sometimes you’re looking for information that might have been answered within your Team just as much as it might’ve been answered on stackoverflow.com. Being able to query both data sources from a single place would be comfortable. However, we didn’t have a trivial way of allowing this. We can’t just open up our data center for incoming connections from the cloud or our clients’ own infrastructure to allow them to access Stack Overflow’s Elasticsearch. So we needed to come up with a different way. The discarded option: Searching via our public API Stack Exchange sites offer a public API that you can use to fetch information from a site on the Stack Exchange network. The /search/advanced endpoint looks like a reasonable candidate for unified search. Whenever a user runs a site search on their Team we could send an extra HTTP request to our public API, pass the search query and show the results side by side with your local Team results. There are several benefits to using the public-facing API. First: We’d be eating our own dog food. Using your own public-facing APIs within your product is a great way to make sure that your API is in fact useful, reliable, and actively maintained. Another benefit is low coupling. The only communication between our Teams instance and stackoverflow.com would go through a well-defined public API. We would end up with two systems—Teams and public Stack Overflow—that could each live and be useful on their own without relying on intimate knowledge of each other. Each system could change independently and we wouldn’t have to worry about breaking the other as long as we handle changes to the public API in a thoughtful and non-breaking way. Unfortunately, we had to take a different approach. Mostly for two reasons: Confidentiality vs. abuse prevention: The content in Teams is confidential. And if you try to search for it, you’re likely using search queries that are confidential, too. Our users store private knowledge about their organisation, their products, or whatever else is important to them. We don’t want to see that information—ever. Our public API, however, needs to have a couple of mechanisms in place to prevent abuse. We see a lot of jokers out there trying to slam our API or hit it with nonsense requests. Diligent logging is a necessity to deal with these scenarios. If we sent Teams users’ requests to our public API, we’d risk having their confidential search queries end up in our logs. Sure, we could come up with ways to exclude those queries from ever being logged. But what if we accidentally missed an edge case and ended up with confidential queries in our API logs? This was a risk that was unacceptable to us and opposed to the confidentiality we promise to our customers.Lack of information & simplicity: The data returned by our /search endpoint is limited (Here’s all the data we include). While this is great for most applications, for our site search we rely on more information than we expose via our search API. Of course, we could go and expose all those required data points on our public API, but this would be bad for the API’s simplicity and usability—some data points are highly technical and related to our underlying Elasticsearch. Exposing these data points only for our own search queries would be possible but completely undermine the idea of having a public API. Software architecture is about trade-offs. You’ll often face multiple options with different flaws and have to pragmatically decide for the one that sucks the least. Using the public API would’ve come with some convincing benefits and part of me is still sad that we didn’t get to use this approach. But ultimately we decided to do something else: The winning option: Setting up a new Elasticsearch cluster After coming to terms with the fact that the public API was not the right way to go, we found a different approach: We’d spin up a new Elasticsearch cluster that holds Stack Overflow’s questions and answers. This cluster would be queried by all cloud- and on-premise-hosted Enterprise and Teams instances for the purpose of unified search. For private content, they would query their local private Elasticsearch instances respectively. Thanks to flexible cloud hosting, setting up a new Elasticsearch cluster is not nearly as daunting as it would be if we were to host one in our own data center. Since we’ve used Elasticsearch before, we got a lot of pieces in place that we need to shove our questions and answers into an Elasticsearch instance, so with a few modifications, we could reuse a lot of the data transfer code we already had. We saw a few key benefits to spinning up a separate Elasticsearch cluster for unified search. Most importantly this approach solves the risk of accidentally leaking confidential search queries into our server logs. The unified search cluster is set up in a way that we don’t store query information, only operational metrics like the number of requests, query duration, index size, and anything else we might need. Secondly, directly querying Elasticsearch without going through a higher-level API allows us to use the same logic for querying your private Elasticsearch content as well as public stackoverflow.com content stored in the unified search cluster. It’s all just a bunch of queries to Elasticsearch’s REST API. Another benefit is a little more fundamental: With a new search cluster in the cloud, we avoid having a dependency from our cloud infrastructure into our own data center. This way we can continue to keep the most of our data center infrastructure within our perimeter without exposing it to the public internet. There were two more than welcome side effects to this approach. The first one was rather pragmatic: Currently, we’re in the process of moving a bunch of our infrastructure into the cloud. A new Elasticsearch cluster was a self-contained and low-risk piece that we could use to gain experience with what it takes to define, provision, and maintain cloud infrastructure. The second one was more product-focused: A new search cluster allows us to do some experimentation when it comes to how we store our data without affecting our existing site search for our Stack Exchange sites. We used this to sneak in a new way of presenting search results that we’ve started experimenting with a long time ago but never fully completed: Showing search results as nested questions and answers. Experimenting with nested search results Public search results in unified search look different than regular search results—they look a little better if you ask me but hey, I’m obviously biased. Imagine you’re using our site search to figure out how to maneuver yourself out of this mess you made in your local git branch. You enter git undo commit into our search bar and see a bunch of search results coming up: That’s what our site search looks like today. You’re likely to get reasonable results. But one thing stands out: We’re showing questions and answers as separate results. See the first and the third result? Both belong to the same question. The first one (prefixed with Q:) points to the actual question while the third result (prefixed with A:) points to one of its answers. There are moments where this works well and there are other moments where this is pretty confusing. A good while ago we came up with an idea to group search results that belong to the same question. All answer results would be displayed in the context of their respective question in a nested way. We’ve run a few internal experiments but never really got this new approach shipped because it was quite a drastic change not only to the visual representation of our search results but also to the way we store and query our data in Elasticsearch. Now that we’re moving a bunch of stuff around with unified search anyways, we decided that this might be a good occasion to get this experiment out of the door and to display the new public search results in unified search in a nested way. Our designers came up with a really neat way of presenting this information so that the relationship between questions and answers becomes much more obvious. Here’s what the new nested search results look like: This is not only a new way of displaying search results. We changed the schema of our data stored in Elasticsearch to properly represent the relationship between questions and answers via nested document structures. We used to have a flat document structure with a separate document for each question and answer before. The nested document structure allows us to always fetch information about the question that an answer is referring to alongside the answer in a single query. This way we can display answer search results in the context of its question without having to do an extra lookup. Our hypothesis is that this new structure should give us a better search relevance but this is something we’ll have to carefully monitor and verify. Chances are that this new way of querying and presenting search results is a good candidate to be used in our regular site search. Before we can do that, we have to look at query performance, relevance and number of successful searches and see if this proves to be an actual overall improvement. A smoother search experience For the longest time, finding content from Stack Overflow when searching for answers on Teams has been exclusively available to Teams instances hosted on stackoverflow.com. The way our architecture is set up made it trivial to provide this feature to Teams customers but impossible for the more isolated hosting models that some of our Enterprise customers require. We’re happy that unified search can bring a similarly smooth search experience to our Enterprise customers and help them find questions and answers from stackoverflow.com right within their cloud or on-premise hosted Teams instances. Tags: deep dive, stack overflow for teams"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/04/26/accelerating-stack-overflows-transformation/","date":"2021-04-25T22:00:00.000Z","tags":["Company"],"title":"Accelerating Stack Overflow’s transformation","text":"Here in the US there’s optimism around our ability to recover from the COVID-19 pandemic this year, thanks to our vaccination efforts. We are also seeing positive momentum in the UK, where we have our second office. After seeing vaccination sites around the city in which I am based, and reading about companies safely bringing portions of their staff back to the office, I can’t help but hope I will get to reunite face-to-face with some of our Stackers before the end of the year. But there is still considerable work to be done, especially around the world in countries like India and Brazil which continue to experience the devastating impact of COVID-19. There is optimism within Stack Overflow right now as well. We are continuing to build momentum as the company grows. We just closed out the first quarter of 2021, and thanks to the hard work of Stackers across the board, we surpassed our most optimistic financial projections. I want to thank everyone for the effort that made this possible, and talk a little bit about what comes next. We went into this year focused on two strategic priorities. Along with our mission and our core values, we let them guide us in all that we do. They are Product-led Transformation and Predictable and Reliable Financial Performance, both of which add value to our community and our customers by allowing us to continue to support and resource them better, and ultimately continue to make this a rewarding place to work. I am going to focus the majority of this quarterly blog on those priorities. Like we did last quarter, our chief product and technology officer Teresa Dietrich will soon share a blog post on updates to Community Health and Growth—one of the key foundations these priorities are built upon, as well as updates on our products. Continuing our Product-led Transformation A lot of SaaS-focused technology companies talk about being product-led. What does that mean? It means putting your product and user at the center of all you do, and leveraging your product to attract, activate, and retain your customers. At Stack Overflow, that means more than continuing to invest in our Stack Overflow for Teams product. It means ensuring that our focus, whether it’s on Teams or on the public platform, solves problems for our core users: developers and technologists. In March, we announced a big milestone in our product-led transformation: a new freemium tier within Stack Overflow for Teams. Users who create a new instance of Teams can grow it up to 50 seats without paying anything, and they get access to most of the product’s key features, such as integrations with Slack and Microsoft Teams. We hoped to sign up about 2,000 new Teams during our first month of freemium, but saw over 10,000 new Teams created instead. This is a phenomenal validation of the product and the strategic work that went into this decision. Teams growth from March 15th to April 15th For many of the top companies using Stack Overflow for Teams, interest started with individual contributors, with developers who wanted a better tool to collaborate and share knowledge. We hope that making Stack Overflow for Teams totally free for up to 50 users enables more developers to experiment with our product and prove out its value, eventually leading to broader adoption within an organization. Freemium isn’t the only product-led development we’ve made over the last few months. If a user within a free Team is looking to graduate to the next tier, we’ve made it easier than ever to do so. Since late last year, we’ve made it easier for users to educate themselves about the product and take action, such as changing tiers or activating new users within their organization. We offer them useful onramps to learn about the product, its additional tiers, and how to activate users within an organization. We’ve also created an easy path to self-serve upgrade to our Basic and Business tiers for companies who are looking for additional features (such as SSO and GitHub, Jira, and Okta integrations) as well as dedicated support. Adopting a product-led strategy doesn’t mean every instance of Teams needs to become a paying customer to be successful. There are many small startups and nonprofits that will benefit from our tools without needing to go beyond the free tier. We also hope it will be an invaluable tool to developers and cohorts of developers who are learning to code, for example. We’re eager to see what happens when educational institutions and open source projects have access to tools that allow them to build a knowledge base, craft great documentation, and collaborate asynchronously with peers around the globe. There are already millions of developers from the open source communities surrounding Linux, Python, and JavaScript learning on Stack Overflow. We hope Teams will allow contributors to better collaborate and accelerate software development for everyone. Delivering Predictable & Reliable Financial Performance These investments in Stack Overflow for Teams are paying off. Looking forward, we are excited by our sales pipeline, which signals that the stronger than expected growth we saw during the first three months of the year is poised to continue through this year. We have also seen growth in our annual recurring revenue (ARR) and increases in our net renewal rates (NRR), two key metrics for measuring the health of a product-led SaaS company like Stack Overflow. As we evaluated the success of Stack Overflow for Teams and our existing Advertising business, I worked with our board and senior leadership team to make a difficult decision. As I wrote recently, we have realigned our Talent business to simplify it overall and focus on areas where we have strong differentiation and tremendous potential for growth. This means focusing on employer branding and company awareness and moving away from job slots and direct hiring. It ties the product closer to what we offer through Stack Overflow Advertising and is part of what we’re calling our “Reach and Relevance” strategy, allowing companies to reach and engage meaningfully by sharing relevant information with millions of developers and technologists. As I’ve said, this change unlocks greater value for our users and helps our customers better achieve success. The recent change to Talent means we have less transactional and more recurring revenue products, something that will increase the value we can deliver to customers and users in the future. It also makes it easy to answer a question we’ve been asked many times over the years, “How does Stack Overflow make money?” The answer is much easier than it’s been historically. We have two high growth businesses: 1) our hyper growth Teams business and 2) our high growth Reach & Relevance business. To illustrate the opportunity in front of us with Stack Overflow for Teams alone, I want to share a quick customer story with you. We began working with Progressive Insurance in September of 2020. It was piloted with 450 seats. Since then it has grown to 1460 seats. “Stack Overflow has proven invaluable in democratizing access to information and improving cross-team collaboration within our IT organization. We’ve found that over 62% of questions asked on Stack Overflow have been answered by someone from a different team and that most questions are answered by a subject matter expert within three hours,” said James Morgan, Developer Advocate. “Our most popular questions and answers have reached well over 25% of our user base, preventing repeat questions from being asked in the first place—a huge productivity boost over the interruptive direct-message approach to answering questions we’ve traditionally employed.” Progressive Insurance is just one of many new and recent customers. As you can see from the refreshed logo section of our Teams page (which represents a small portion of the companies we work with), many of the world’s leading companies use Stack Overflow for Teams. To 2021 and beyond I’m very optimistic about our path forward. Our Stack Overflow for Teams business and Reach & Relevance business are both growing quickly, but they also will play an important role in the year ahead. As companies continue to navigate a dynamic work environment, which is sure to include hybrid and distributed work, they will leverage our products to keep developers and technologists engaged and productive. As a company, this puts us on a positive and high value trajectory, giving us the ability to deliver clear value to our users with our Product-led Transformation and ensure that we have Predictable & Reliable Financial Performance. It’s important to mention that those two priorities are built on three key foundations: Community Health & GrowthOperational Scale & RepeatabilityStacker Growth & Development Put simply: we would not be a growing and successful company without our community. We are making progress on all of those fronts as well. When it comes to the community, we averaged 200k signups per month in Q1, which is up 14% year-over-year.”. We are also making progress when it comes to our site satisfaction score, a metric the Public Platform Team tracks on a recurring basis. Like I said at the start of this post, Teresa Dietrich will be sharing more updates on the community and product front soon. Given our outstanding performance in Q1 and increasing momentum, we have a great year ahead. Just like I call out our community above, this growth wouldn’t be possible without all our amazing Stackers who work together from around the world to serve our users. And our continued growth won’t be possible unless we continue adding to our team. There’s so much exciting work ahead. Few companies allow you to impact millions of people around the globe with your work. In our case, the work is democratizing access to all technology related knowledge so developers and technologists can innovate, build, and support the world’s technology. It’s this opportunity that personally excites me every day. We’re hiring on virtually every team, and if you’re interested, you can check out our open roles here. I look forward to keeping you updated as our company continues its high growth journey. Tags: ceo quarterly post"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/04/07/an-update-on-our-product-led-saas-transformation/","date":"2021-04-06T22:00:00.000Z","tags":["Company"],"title":"An update on our product-led SaaS transformation","text":"I’m writing this blog post to share an update on our product-led SaaS transformation, which I’ve discussed in a series of posts over the course of the last year. It’s been a year of transformational change for all types of companies, Stack Overflow included. We are fortunate to have seen great growth from Stack Overflow for Teams, which allowed us to raise our Series E last July. We have seen steady growth from Stack Overflow Advertising. Even our Talent business—our oldest paid product, which was our only line of business negatively impacted by the pandemic—has continued to deliver value to customers looking for developer talent and developers looking for work, career changes, and more. As we continue to navigate the pandemic, we try to use our mission as our compass. Our mission is to serve developers and technologists, and we want to ensure our public platform and our paid products are doing that always. In the spirit of continuing on our product-led transformation and realizing our mission, we are making some changes to Stack Overflow Talent. We are realigning the Talent business to focus more on customer employer branding and company awareness needs, and moving away from job slots and direct hiring. This will tie the product closer to what we offer through Stack Overflow Advertising and is part of what we’re calling our “Reach and Relevance” strategy, allowing companies to reach and share relevant information with millions of developers and technologists. At the end of the day, this change unlocks greater value for our users and helps our customers better achieve success. We are continuing to support all of our existing Talent products and these changes won’t affect any of our customers leveraging job slots or direct hiring products in the near-term, only their point of contact will change. As these products evolve or are sunset, customers will be notified well in advance. These changes, however, impacted a small portion of employees within our Sales & Customer Success organization. We are highly appreciative of the hard work that went into the past decade to launch, support, and grow the Talent business. We would not be where we are today if it wasn’t for their dedication and drive, and we are doing what we can to support their transitions. We hope our users and customers will continue to see and reap the benefits of our product-led transformation, which includes Teams’ freemium that launched just last month and new, upcoming launches as part of our Reach and Relevance strategy. We are grateful for your support over these last 12 years and look forward to continuing to serve you as best we can. Tags: company"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/03/31/the-key-copy-paste/","date":"2021-03-30T22:00:00.000Z","tags":["Code for a Living"],"title":"Introducing The Key","text":"Good artists copy. Great artists steal. Greatest artists copy, then paste. Simplicity. Elegance. Form. Function. Today marks a new beginning for programmers around the world. Stack Overflow is proud to unveil our first venture into hardware, The Key™. They say good artists copy, but great artists steal. They were wrong. Great artists, developers, and engineers copy. Then they paste. Every day, millions of innovators and creators across the globe move society and industry forward by copy-pasting code from Stack Overflow. But for too long, this process has been stuck in the past. Say goodbye to cramped fingers, sore wrists, and wasted movement. Say hello to The Key™, a device built from the ground up to make copy-pasting code from Stack Overflow fast, painless, and fun. Our keyboard is made of 100% machine milled plastic sourced from the rarest polyurethane plants. The switches underneath each keycap have been rigorously tested to ensure the optimal finger feel and smooth action. What happens when you press a keyboard? It clicks. Every day you’re working on a computer, you’re hearing thousands of clicks. Millions of clicks shape your experience each year. Our click’s volume and tone were crafted by sampling the natural wonder of song bird chirps. We run that audio data through cutting edge deep learning systems to produce a sound that is optimized to improve productivity and mood. Each key cap has been precisely etched using industrial grade lasers normally reserved for diamond cutting and quantum fusion drives. The Key™ is compatible with virtually any computing device. From a Raspberry Pi to a high end gaming rig, cutting edge copy-paste is within your reach. For now, The Key™ is a stand alone device, but in the future, it will unlock an ecosystem of creativity. Our R&D department is already at work on incorporating virtual, augmented, and uncanny reality into the roadmap. The Key is available for pre-order now! Be the first to get yours. UPDATE: There has been a lot of interest in purchasing a real life version of our prank. The good news is we anticipated this might happen and we’ve been working on something along these lines. Stay tuned for more! UPDATE 2: The Key is actually, for real available for pre-order. Our original production line sold out in six hours, so please be patient. Tags: April 1, double take, pasta"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/03/17/stack-overflow-for-teams-is-now-free-forever-for-up-to-50-users/","date":"2021-03-16T23:00:00.000Z","tags":["Company"],"title":"Stack Overflow for Teams is now free forever for up to 50 users","text":"I’m excited to announce the launch of our Free plan on Stack Overflow for Teams starting today. What you need to know Our private knowledge sharing and collaboration platform, Stack Overflow for Teams, is now free for up to 50 users. No credit card is required to start your Team, and it’s free forever.Our Free plan includes ChatOps integrations to Slack and Microsoft Teams.We have invested in a guided onboarding process to help admins and users experience value quickly and efficiently.Our Basic customers now get access to single sign-on (SSO) for an easy and secure login experience. If you aren’t familiar with Stack Overflow for Teams, it combines the best features of the public Stack Overflow platform with features tailored for companies who need a private knowledge sharing and async collaboration platform. Check out our Product Tour page to learn more about these features. With Stack Overflow for Teams being a flexible platform, we’ve seen customers use it for everything from helping onboard new employees, driving innersource initiatives, enabling cloud or platform migration efforts, a self-serve help center to reduce tickets, and so much more. Since launching Teams in 2018, we have added thousands of customers ranging in size and use cases including Microsoft, Expensify, Box, Instacart, and Unqork. Developers and technologists love our Teams platform because they spend less time answering the same questions over and over again and can unblock their colleagues while reducing their own disruptions. The open source ethos that is foundational to this network was an inspiration for our new free offering. We’re excited to enable those who are working towards a common goal to develop a collective knowledge base. I truly believe those in our technology community will find value from our free, private environment. Whether it’s in a startup, a side project, user group, open source project or hackathon, these communities can now ask questions that might be off-topic to our public site, but are essential to their knowledge base. We know that sharing knowledge and collaboration is critical to companies and teams of all sizes. We also know people need a large enough group and time to see the impact and value of a knowledge sharing and collaboration platform like Stack Overflow for Teams. Our previous 30 day free trial of our Basic tier wasn’t long enough. Now, anyone can experience Stack Overflow for Teams free with a significantly sized group for as long as they need. With the roll out of our new Free plan, we’ve enriched our Basic plan to now include a single sign-on (SSO) without changing the current price. SSO allows users seamless and secure access to our critical platform anywhere, anytime across all of our paid products. If you want to know more about all of our plans, learn more here. Start your free Team Create a free Team by following the link, and invite with your colleagues or a group of people you’re looking to collaborate with. Tags: announcements"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/03/10/state-of-the-stack-community-product-q1-2021/","date":"2021-03-09T23:00:00.000Z","tags":["Company"],"title":"State of the Stack: a new quarterly update on community and product","text":"January 14, 2021 marked my one-year anniversary at Stack Overflow. When I stepped into this role leading Product, Community, and Engineering, I couldn’t have imagined how 2020 would go. There have been incredible challenges, but I’m so proud of the work our teams did to help developers and technologists everywhere, and I’m excited about our plans for 2021. In just one year, I’ve learned so much about Stack Overflow, Stack Exchange, our Teams product, and our Talent and Advertising businesses. I want to express my thanks to my colleagues, our community, and our users. I’m so grateful for the honest and transparent feedback that gave context to our data, insights, and history. In the quarterly blog post that follows, which is the first of an ongoing series, I’ll elaborate on what I’ve learned, what we’ve accomplished, and what we’re focused on in the future. I want to ensure we’re always keeping community at our center, and that means updating you all regularly with what we’re working on. What I’ve learned in my first year In the last year, I have learned two fundamental concepts that I believe are key to why Stack Overflow and the Stack Exchange sites are successful but we don’t really talk about much (at least lately). First, when I think about the reasons why a Q&A site became integral to developers, technologists, and other learners, I believe it’s because we empower the efficient building of context around code, applications, services, etc. This knowledge is sourced from our community’s expertise. In technology, documentation and error codes cannot cover all the use cases, dimensions, and complexities that we encounter every day and often requires huge effort from a handful of folks to keep up to date. I think this paradigm extends to our non-technical sites. So much of the information and advice in most technical articles is written for a broader audience. Q&A allows for more specific and nuanced content. Additionally, the value of Stack Overflow and the Stack Exchange Network for the vast majority of users is the reusability of existing Q&A content. The best case scenario is that I find a question that has been asked and answered well. There are a lot of discussions and debates around content quality, but I think we can all agree that perfect content doesn’t have much value if it sits on a shelf where no one uses it. A high-quality question is specific not just to increase the chances of a good answer, but also so that others can quickly determine if the question is applicable to their problem. Great answers are clear, accurate, relevant, and complete. Anyone who finds the answer should be able to leverage it, not just the original asker. The questions and answers that are created and refined on the platform become a common good, shared and ideally beneficial to anyone who visits the site. These fundamental understandings are important to both helping us improve and evolve the Public Platform, but are also foundational as we grow and scale our Teams product. We have to understand which features, functionality, and norms are worth transfering from a huge, public, largely anonymous platform to a private platform shared with your colleagues where you are identifiable. For example, in Teams, we found little to no use of the public site’s downvote feature. User research informed us that colleagues are unwilling to downvote each other’s content but are willing to give private feedback. For our launch of Articles, we replaced the downvote with a “Feedback” capability that allows private feedback to express to colleagues when you feel the information is incomplete, inaccurate, or out of date. Q4 2020 highlights and updates Here are a few of the updates we made in the final months of 2020 across the Public Platform and Stack Overflow for Teams, all of which helped inform the insights above and how we’re approaching 2021: Within the Public Platform and across the community: We added moderation capabilities to the Teachers’ Lounge chat room (where our mods hang out), a priority for our community managers.We started delivering pieces of a big overhaul of our long untouched Review Queues which direct users to what needs their attention and possible action.  You can now include tables in markdown language, a much-requested feature request. We announced that we are bringing back swag for users and are hard at work right now making that a reality. And finally, our Winter Bash this year had more participation than in the last several years and we even created a new hat on the fly to recognize users that found and shared ways to cheat at Hat Dash or who could pass a Stack Exchange trivia challenge. Within Stack Overflow for Teams, our SaaS knowledge management and collaboration product: We launched the new Stacks Editor because many of those users are unfamiliar with Markdown. This work is the foundation of the alpha test we are doing on the Public Platform. We expanded and updated our Slack integration, which has great adoption across the Teams users. We also invested a lot of time into improving and expanding our self-serve capabilities across signups, onboarding, and product support.Just after the new year, we launched For You, a personalized feed highlighting actions to take and content that might be of interest to a user. This work has only been possible thanks to a hardworking and dedicated team, and we’re continuing to add more people there. Last year, we kicked off recruitment to add folks across Product, Community, and Engineering (and across the rest of the company). We’re excited to be growing and adding new colleagues with diverse experiences, fresh perspectives, and the people power to drive our plans and deliver impact to our users. We’re lucky to have an overwhelming response to our open roles and are hard at work on the hiring process. You have probably started to see some new Stack folks on the platform. Say hello if that’s the case! When it comes to new faces on the Community Team, we’re also in the process of dividing the team into more specialized sub-teams as we grow. This will improve focus and reduce the context switching for our existing CMs. As we grow our team, bringing new community managers into a more focused team reduces their initial scope of learning and more quickly allows them to support and deliver impact to our Community. If you are interested in joining us, check out our Work Here page for more information and open roles. Looking Ahead: 2021 and Beyond In January, we published a deeper dive into our 2019 security incident, which got a lot of attention and was highly shared. In continuing our commitment to transparency and communication we shared our Q1 Community & Public Platform Roadmap as both a blog post and a meta post. We continued our annual Stack Gives Back program where we donate towards a set of charities on behalf of our moderators based on their votes as a way to thank them for their contributions for the previous year. This year, we are going to continue to explore social impact initiatives in hopes of having an impact on developers and technologists everywhere, but also on making the world a better place. And finally, a quick update on our annual Dev Survey. Last year, we opened the Dev Survey on February 5, 2020 and released the results on May 27, 2020. As you well know, an awful lot happened during that stretch and we learned our lesson around needing a faster turnaround between the two milestones. This year we plan to launch the 2021 Dev Survey in or around June and have results back to everyone within 1-2 months. We’re focused on shortening the window from when the survey runs to when it’s released given how rapidly the world is changing right now. Look out for more soon. I hope you’re looking forward to our future initiatives as much as I am. I am grateful for our many users across all our products and the opportunity to provide value to you all. This is an exciting period of growth for Stack Overflow, and we wouldn’t be here if it wasn’t for our incredible community. Tags: community, community update, product, stack overflow for teams"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/01/27/building-momentum-in-our-transition-to-a-product-led-saas-company/","date":"2021-01-26T23:00:00.000Z","tags":["Company"],"title":"Building momentum in our transition to a product led SaaS company","text":"I’ve just wrapped my first calendar year with Stack Overflow, through which I’ve experienced the excitement and energy of a full fourth quarter, typically the busiest and most important period for the business. 2020 was a year full of challenges unlike anything we’ve seen in a century, and I’m proud to say that we met the challenge at hand. Despite the global headwinds, we saw impressive growth in our Stack Overflow for Teams Enterprise and Advertising businesses. Our Stack Overflow for Teams Enterprise business experienced our strongest quarter in the history of the company in new customer additions and new annual recurring revenue. Advertising had its best growth year in the history of the company and its best quarter ever. Talent, which was heavily impacted by the shock of the pandemic, stabilized in the last two quarters of the year, positioning itself well for a rebound when the economy begins to more fully reopen. Stack Overflow for Teams continues to broaden its customer base and forged new partnerships with the tech sector. As an example, Box, a customer that I elaborate on below, brought on Stack Overflow for Teams to improve collaboration in the “new normal” of remote, asynchronous work. And some of the world’s largest banks and telecom companies signaled their belief in the value of our product by significantly expanding their investment in their private instance of Stack Overflow. Stack Overflow for Teams ‘Business’ tier user growth. We are thrilled that our Stack Overflow for Teams product continues to drive developer and technologist productivity through rapid sharing of key internal information. Customers using Stack Overflow for Teams tell us how it’s reducing the time it takes to onboard new developers and technologists – for some by as much as 40% – and giving time back to all the people who support the new hires. Q&A is also a powerful tool for everyday productivity, and several customers have told us that their support engineers see 20-30% reduction in help tickets, allowing them to focus more on solving the root cause of the issues people are asking about. Customers have seen a 40% reduction in the time it takes to onboard new developers I make it a point to speak to our enterprise customers on a weekly basis and I’m energized by the excitement CIOs exhibit around the acceleration of their plans in today’s fever pitched technology environment. Developer productivity in a distributed work environment, cloud transformation, DevOps, cloud security, and big data are top of mind for technology executives. There is a wealth of knowledge on these topics across Stack Overflow’s public platform, and we have seen interest in these sites continue to expand. On average, monthly signups in 2020 consistently increased by at least 20% over the year prior. Knowledge on these same topics is populating instances of Stack Overflow for Teams and driving productivity within companies all over the world. To illustrate what’s happening with our tools, let me share a little more about our story with Box. The company went public in 2015 and has around 2,000 employees and several hundred engineers. It provides modern cloud capabilities with enterprise grade security and compliance to companies like AstraZeneca, Nationwide Insurance, Morgan Stanley, and GE. A Teams customer saw a 20-30% reduction in help tickets, allowing their support engineers to focus In 2019, Eddie Flaisler, the company’s head of enterprise engineering, decided there was a challenge Box needed to address. “The biggest issue we had as an engineering organization was knowledge transfer and searchability of knowledge. I think it is very common in engineering organizations that you find people have a lot of institutional knowledge, a lot of things that they keep in their head. Either it is not documented anywhere, or it is in a collection of Box notes, Google docs, Confluence pages, just all over the place.” Over the last year and a half, 650 users at Box have provided over 900 answers which have been searched and viewed thousands of times on their Stack Overflow for Teams instance. “Stack Overflow is heavily used at Box as the interface for engineering teams, in terms of how other teams, be it support, product, or marketing, can communicate with them,” explains Flaisler. It was important that employees be able to get answers to technical questions, but engineers also needed time for focused work. Avoiding context switching was key. “If you have a question, if you have some clarification that you need, instead of overwhelming everyone on Slack or an email, there’s a queue. Questions are created, somebody is monitoring the questions and responding, and this has improved productivity across the board.” New products and processes Starting with this blog post and going forward each quarter, we’ll be making a slight shift to the content. Community members have shared their feedback, and asked for more detail on what Stack Overflow is doing in regards to the public site, moderation, and user experience. We want to deliver that, so we are planning a new series of posts written by Teresa Dietrich, our chief product & technology officer, who thinks deeply about these topics every day. My quarterly blog posts will focus more on what’s happening with our company, our paid products and overall business. Here are several of those updates. This month we released For You, a new personalization feature for Teams that involved collaboration across Product, Engineering, and Marketing in order to launch successfully. This feature helps customers rapidly share solutions within their organizations by keeping information fresh and prompting users to engage in building a knowledge community. We have lowered the barrier to entry for Stack Overflow for Teams, offering customers the ability to sign up for our Basic or Business tier through a self-serve portal we launched last quarter. That led to a more than five fold increase in interest for these products in December. That same month, Stack Overflow for Teams was also presented with a Stratus award for outstanding product in the cloud collaboration category. We continue to invest in and innovate on this product, for example launching version 3 of our popular Slack integration earlier this week. In December of 2020, we announced a new partnership with Times Bridge of India. They became an investor in our latest funding round and are working with us to expand our Stack Overflow for Teams product to the fast-growing SaaS market in India, which is expanding around 30% a year. We join a great group of Times Bridge partners, including Coursera, Airbnb and Uber, and we’re excited to begin working with entrepreneurs and innovators across this region. In December, we also soft-launched our new process for employers with ad hoc hiring needs (companies hiring five or fewer roles, for initially shorter than six months, and with no need for more complex hiring and branding products). The new process consisted of a streamlined purchase flow for these customers that should get them on the platform and hiring fast. After a successful pilot, we began a phased launch in the United States in January. Crafting a Strong Culture Stack Overflow has always focused on our culture and we are thrilled to be recognized by Built In in their Best Places to Work rankings across four different categories! Over the December break, we were also recognized as one of the Best Work-From-Home companies by PowerToFly, a women-led recruitment platform. I want to give a big thank you to our people team for their work, which made these awards possible. I also want to give a warm welcome to Debbie Shotwell, who joins our senior leadership team as the new Chief People Officer. As we enter Stack Overflow’s next phase of growth, Debbie will partner closely with me and our leadership team to lead the company’s people strategy. Debbie, who was previously Chief People Officer at Saba Software, has 20 years of experience delivering business transformation and creating innovative cultures aligned with the rapidly changing needs of the workforce. We continue to bring on top talent from the SaaS industry and have lots of open roles. What Comes Next Looking forward, we have some exciting announcements planned for the first half of this year. We are envisioning ways for companies to better support their tools and technologies through our public platform, driving value for the creators, but also for the consumers, who will have an easier time finding high quality answers to their questions. We are also excited to find new ways to get Stack Overflow for Teams into the hands of more customers with a wider variety of use cases. What began as a product used solely by engineering teams has expanded to include product, product marketing, data science, product design and customer success. We want to create a version that would provide immediate value to the tens of millions of developers and technologists who visit our public sites each month. Stay tuned for some exciting news here in the coming weeks. With the rollout of vaccination campaigns underway in many parts of the world, I am hopeful that we are turning a corner towards a brighter, healthier 2021. Remote work will continue to be the norm for most technical workers through the next several quarters, and we believe that a fundamental shift has occurred during the last year, with many companies having a far greater percentage of remote workers for the long term. Stack Overflow was created to help people from across the globe share knowledge, improve their productivity, be more agile, and drive the speed of innovation. Our mission matches the moment, and I’m excited for Stack Overflow to continue empowering developers and technologists with the tools and information they need to succeed. Tags: company"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/01/26/stack-overflow-for-teams-slack-integration-v3/","date":"2021-01-25T23:00:00.000Z","tags":["Company"],"title":"Announcing the launch of our Slack V.3 integration","text":"In 2018, we released an integration between Stack Overflow for Teams and Slack. It’s now one of the most popular ways for users to interact with our platform, and we have been steadily upgrading it with new functionality based on feedback from customers. We’re pleased to announce that we’re releasing version three of our Slack integration with plenty of new features to reduce context and tool switching while streamlining the developer workflow. With this release (available for Basic and Business today, for Enterprise in the 2021.1 release), we wanted to dig into some of the technical details of what we did. There’s a lot of great new features, and a lot of work behind the scenes to make them a reality. For reference, the integration that most people use was version two; version one was a bare-bones integration that just supported notifications (and is still used by a small fraction of Teams). This version brings several new features that will improve your overall experience: A more secure and configurable authorization experience.Org-wide installs, so organizations with multiple Slack workspaces can add our integration to all of them at once. Ask questions directly from Slack with /stack ask. A one-click autoupdater that uses a modal dialog to make sure the app is current on all associated workspaces. Additionally, our previous integrations were built on functionality that has since been deprecated. So the work we’ve done here sets us up to provide even more functionality in future versions. We had originally worked with Slack to be one of their launch partners in implementing their workspace apps. When the developer preview for the feature ended, they recognized that this was the wrong path for them, and they deprecated workspace apps. While we had been planning to include features that built on workspace apps, Slack was such an incredible partner on this that we were able to pivot smoothly.They reached out and gave us a shared support channel and were incredibly responsive to our support questions. We wouldn’t have been able to implement the features in this release without them. We had to do a fair bit of work to make sure that the new granular bot version had feature parity with what we had previously. Asking you all to upgrade only to lose functionality would have been a hard sell. In this article, we’ll talk about how we built this new version and the path we took to ensure our new bot useful, usable, and secure. Authentication and permissions for the granular bot One of the primary features of the Slack integration is notifications. You can configure Stack Overflow for Teams to send a notification for a channel whenever there’s activity you are interested in. Previously, the mechanism were used for notifications was incoming webhooks. These are URLs that we could post to whenever we wanted to send a notification to a channel. These URLs were automatically generated, so that Stack Overflow for Teams had easy access to post to any channel. We decided to stop using incoming webhooks for a good reason: improved security. If one of these URLs returned an error, that has potential to get logged on our side. Now we (and anyone who got a hold of our logs) could spoof whatever messages they want to corporate Slack channels. For some of our more security conscious customers, this was a big no-no. They had actually asked us to disable this feature because it opened a new angle of attack. With these updated scopes and without the incoming webhooks, we made some InfoSec teams quite happy and they were green-lighting our applications. But we still had to figure out how to get notifications sent to the right channels. Without the incoming webhook URLs, we were restricted to scopes available to our Slack bot. For public channels, this wasn’t much of a problem. The bot just has to join all of the channels that one might want to send notifications to. We give workspace admins an opt-in setting that instructs the bot to automatically join all public channels, which has to be done one by one. It’s kind of a pain in the butt, but it worked fine on our testing environments. Once we decided to dogfood the app and try it out on our own workspace, it broke completely. On our testing workspace, we have maybe ten channels. On our company’s workspace, we have something like 350. In stepping through these one by one and joining them, not only did it take a long time, we hit Slack’s rate limits. So we had to build a background queue on our end, which would send join messages until we saw a failure, then stop processing the queue and wait a few seconds. But for private channels, this meant that the bot had to be manually added to a channel by a user before anyone could consider interacting with it. This may seem like an extra hassle, but it’s actually a good thing. Imagine you’ve been invited to a private channel to discuss an upcoming feature. Just revealing the name of the channel could be a massive information breach. There’s another side effect to having to manually add the bot to channels. Imagine you have a channel with hundreds of people, something like #engineering, and you don’t want it clogged by bot spam. Admins can now exclude a bot from a channel, preventing everyone else from targeting it with notifications, no matter what their permissions, even if the channel is public. As a result of these changes, we had to build a channel selector drop-down in Stack Overflow for Teams. This is not something we wanted to do; previously, when you were choosing which channel to send a notification to, we would send you to your Slack instance. Slack would then show you a channel selector based on your privileges. Instead, we had to create an external component that should only have access to what the bot has access to, and nothing more. Unfortunately for us, that type of scope is not currently supported by the Slack API. Our options were to request all public channels or all private channels—separate and complimentary scopes. But both scopes are all of nothing. As we talked about earlier, just displaying some of those private channel names could be a huge problem. We don’t want to do that, and our customers don’t want us to do that. So our channel browser only has the scope to access public channels. We need to do a second check on these channels to make sure that the bot has access. Once we configure this, we can then access the bot directly to post notifications. One install to rule them all It’s becoming more common for large companies to have multiple Slack workspaces—one workspace for C-level execs, one for the engineers, one for sales, etc. Each of those workspaces may have their own administrator. But if you’re installing an integration with an enterprise-level piece of software like Stack Overflow for Teams, you’ll likely want that to work on every workspace in your organization. If you have ten workspaces, that’s ten installs coordinated with ten admins. Org-wide installs help to reduce the administrative burden that comes with delploy app integratiosn across multipel workspaces. But it was worse than that. Our Enterprise customers have the option of installing our software on a local or organization-controlled server, which means the endpoint that the Slack integration interacts with will be at a different URL than normal. Admins on Enterprise installs would have to manually edit this URL in the app; we provide instructions on how to do this, but still, this makes ten edits to apps to make, ten installs on ten workspaces with ten admins. That’s exhausting. With this release, we’re introducing org-wide installs. One person—the organization admin—can install the integration on all workspaces. If Enterprise customers need to edit the endpoint, they do so on one integration app and then install that. If the organization needs to create new workspaces, then they can make it installed by default so it already has the application baked in. Now a single Teams user can be associated with multiple Slack workspaces, including multiple unconnected workspaces. Because of this, we had to change our database schema to support more than one workspace per user. Previously, we had one Slack access token associated with each Stack Overflow for Teams user. But now we store as many tokens as the user has workspaces in a single grid. This can get complicated (and annoying) with a lot of workspaces in an org. In order to send notification DMs to Slack users when they are tagged in a question or otherwise need to be directly notified, we have to store a mapping of these users in addition to the access tokens. This is based on the email address, which lets us automatically map any users that match. If a user has a different email address on Slack and Stack Overflow for Teams, then you can use the new `/stack connect` command in Slack. This gives you a link that will take you to the workspace’s associated team and allow you to link your user accounts. On the one hand, it’s not great for notifications because it adds a new requirement to map users. On the other hand, you can mention people on Slack when you create a question and that’s going to properly tag them on Stack Overflow for Teams. Security-minded Enterprise customers have some additional new options. Those worried about storing more PII on their installation or exposing their entire company mailing lists to us can turn off the mapping feature—notifications will still work. It’s as simple as a checkbox during the install process. Some might be protective of their internal information and firewall their Enterprise environment away from the rest of the internet. For them, we allow restricting their instance to outgoing-only traffic. Only notifications will work, but it still gives us the opportunity to integrate with strictly controlled environments. Ask directly from Slack For this release, we also wanted tighter—and two-way—integration between Slack and Stack Overflow for Teams. To compliment notifications, you can now ask questions directly from Slack to help reduce context switching. As you can see, this command displays a modal dialog where you can create a question with all the features as if you asked it on Stack Overflow for Teams. We had to write new code to support modals, but this modal is essentially a dumb layer that interacts with Stack Overflow for Teams APIs. The only part that is doing real time work is an autocompleter for tags. Both of these functions were part of the prep code we put in place before implementing the feature; once they worked, most of the `/stack ask` feature was easy to write. We were able to keep most of the functionality on our side and reuse the existing post insert and post validation logic. On submit, we have the barest basic validation in the modal, checking that required fields are filled in and that they have the appropriate content lengths. Despite being able to entirely reuse the existing post validation functionality, it turns out that the solution wasn’t so simple. At one point, one of the automated unit tests failed in a weird way. Like a lot of mysterious errors, it worked on the dev machine. However, the dev machine was set up for developing against Teams Basic and Business, while the failing test was being run against an Enterprise environment, which is code-wise closer to the public Stack Overflow site and therefore has much stricter rules around what a valid question is. In this case, the test was periodically failing because the “duplicate post” checks were triggering a warning if the unit tests were run in a specific order. The validation logic that checks word counts, grammar, and more has to work inside of the modal. And any errors that come back from failed validations have to be visible in the modal. Those errors have to be one-to-one with what comes back from the Teams instance. Not to brag, but we did such a great job matching the behavior on both sides that it messed us up with a later automated test. Nice job, us. Reducing friction now and forever Chat programs like Slack are an integral part of the contemporary workplace—especially remote workplaces—so we want to make sure that the Stack Overflow for Teams experience integrates seamlessly into Slack. Requesting and providing information should be frictionless, and with this latest iteration of our Slack integration, we think the experience is even easier than before. Even with the challenge of building towards a changing paradigm, this is a better integration than before. Of course, this won’t be our last version. The work that we put into 3.0 will pay off in future versions, and we’ll be in a better position to implement new features. For example, we’re looking at expanding on the base functionality written for modal support to add more features within Slack, such as creating and managing notifications. We hope you enjoyed this peek under the hood of what goes on with Stack Overflow for Teams development. It’s a product that we think will make a lot of people more productive, and we look forward to making collaboration and knowledge sharing easier than ever."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2021/01/25/a-deeper-dive-into-our-may-2019-security-incident/","date":"2021-01-24T23:00:00.000Z","tags":["Company"],"title":"A deeper dive into our May 2019 security incident","text":"Back in May 2019, we had a security incident that was reported on this blog. It’s been quite some time since our last update but, after consultation with law enforcement, we’re now in a position to give more detail about what happened, how it happened, and what we did to address the underlying issues that allowed the incident to occur. Setting the scene On May 12th, 2019, at around 00:00 UTC, we were alerted to an unexpected privilege escalation for a new user account by multiple members of the community. A user that nobody recognised had gained moderator and developer level access across all of the sites in the Stack Exchange Network. Our immediate response was to revoke privileges and to suspend this account and then set in motion a process to identify and audit the actions that led to the event. After initial discovery, we found that the escalation of privilege was just the tip of the iceberg and the attack had actually resulted in the exfiltration of our source code and the inadvertent exposure of the PII (email, real name, IP addresses) of 184 users of the Stack Exchange Network (all of whom were notified). Thankfully, none of the databases—neither public (read: Stack Exchange content) nor private (Teams, Talent, or Enterprise)—were exfiltrated. Additionally, there has been no evidence of any direct access to our internal network infrastructure, and at no time did the attacker ever have access to data in Teams, Talent, or Enterprise products. Walking in the attacker’s shoes In order to understand how the privilege escalation and subsequent exfiltration of source code occurred, we needed to be able to trace the attacker’s accesses to our sites prior to the culmination of the attack. Fortunately, we have a database containing a log of all traffic to our publicly accessible properties—this proved invaluable in identifying activity associated with the attacker. Using the account identifier that had been escalated, we were able to use the IP address and other identifying information to correlate traffic to a candidate set of rows. This amounted to well over 75,000 rows of data that we then set out to categorise. Based upon that categorisation, we were able to further filter out rows to those that were deemed “interesting.” Coupled with other information from our customer support team and various other sources of log data, we came up with a timeline of events. This is quite detailed but it’s here because we’d like to bring attention to the amount of time the attacker took to understand our infrastructure and gradually escalate their privilege level to the point at which they could exfiltrate our source code. Timeline Tuesday April 30th, 2019 The attacker starts probing our infrastructure, in particular parts of our build/source control systems and web servers hosting some of our development environments. Wednesday May 1st The attacker continues probing our public network and attempts to access employee-only rooms in Stack Exchange Chat—notably our SRE room. They get “access denied.” Additionally a person claiming to be one of our Enterprise customers submits a support request to obtain a copy of source code for auditing purposes. This request is rejected because we don’t give out source code and, additionally, the email cannot be verified as coming from one of our customers. It is flagged for further investigation by our support team. Next, the attacker creates a Team on Stack Overflow on one device and sends an email invite to another account, which is accepted using another device. Thursday May 2nd The attacker visits a number of Meta posts associated with our Teams product and publicly available case studies related to Enterprise published on stackoverflow.com. Another support ticket is raised following up on the previous one, but this time with a spoofed email address of an actual customer. Details were apparently harvested from the case studies above. An automated reply is sent to the customer (because of the spoofed address), and we are quickly notified that it is not a legitimate request. Friday May 3rd Support request is denied. Attacker continues probing public facing infrastructure, including viewing user profiles of support personnel dealing with their support ticket. Saturday May 4th Attacker accesses a URL to attempt to download a ZIP file containing Stack Overflow source code from our GitHub Enterprise instance but is redirected to login. We later discover that the repository URL is inadvertently referenced in a public GitHub repo containing some of our open source code. Sunday May 5th This is a busy day. Attacker starts with further probing of our dev environments and a little later a login request is crafted to our dev tier that is able to bypass the access controls limiting login to those users with an access key. The attacker is able to successfully log in to the development tier. Next, the attacker starts probing a number of internal URLs that we later find are documented in our Enterprise support portal but is unable to access many of them due to an insufficient level of privilege. Our dev tier was configured to allow impersonation of all users for testing purposes, and the attacker eventually finds a URL that allows them to elevate their privilege level to that of a Community Manager (CM). This level of access is a superset of the access available to site moderators. After attempting to access some URLs, to which this level of access does not allow, they use account recovery to attempt to recover access to a developer’s account (a higher privilege level again) but are unable to intercept the email that was sent. However, there is a route on dev that can show email content to CMs and they use this to obtain the magic link used to reset credentials. This is used and the attacker gains developer-level privileges in the dev environment. Here they are also able to access “site settings”—a central repository of settings (feature flags) that configure a lot of functionality within the site. Monday May 6th Another busy day—the attacker resumes with access to the dev tier. While they are browsing around and understanding what their new found privilege gives access to, they are also browsing production to harvest more information about the Stack employees that work on the Teams product. In addition, they use their freshly created Teams instance in production to try some admin-level functionality in a “safe” environment as well as trying to use impersonation on production. Impersonation is not compiled into production binaries, so all of these requests result in HTTP 404 responses. After some time spent investigating URLs on dev, the attacker accesses site settings again and stumbles upon a setting that contains credentials of a service account with access to our TeamCity instance. Historically, this was used for accessing the TeamCity REST API from within the Stack Exchange Network’s code base and, while the functionality was removed a long time ago, the credentials remained and were still valid. Using the credentials the attacker attempts to login to TeamCity (which at the time was accessible from the internet) and is granted access. This user has never logged in interactively before and a misconfiguration with role assignments means the user was immediately granted administrative privileges to the build server. A significant period of time is spent investigating TeamCity—the attacker is clearly not overly familiar with the product so they spend time looking up Q&A on Stack Overflow on how to use and configure it. This act of looking up things (visiting questions) across the Stack Exchange Network becomes a frequent occurrence and allows us to anticipate and understand the attacker’s methodology over the coming days. While browsing TeamCity, the attacker is able to download build artifacts containing binaries and setup configuration scripts for our Enterprise product. From here, they browse more questions on Stack Overflow—including configuring IIS and migrating data from our Teams product to an Enterprise instance, among many other questions related to our Teams products. For their final act of the day, the attacker attempts to gain access to a build agent within our data center but is unable to connect because they would need VPN access to do so. Tuesday May 7th Attacker browses questions related to setting up and configuring Enterprise, and they investigate more site settings. Wednesday May 8th Attacker immediately logs into TeamCity and continues browsing the administrative sections of the site. They stumble across a diagnostics section that allows browsing of the build server’s file system—this yields a plaintext SSH key used by build agents to obtain source code from GitHub Enterprise. Within minutes, this was used to clone several key repositories (gathered from VCS roots configured in TeamCity). This process of gradually cloning continues throughout the day, and the attacker browses questions on Stack Overflow related to the build of .NET projects. Over the course of the day, they manage to get their hands on our local development setup scripts (called `DevLocalSetup`) and wikis related to operating our production environment. Later, they attempt to directly login to GitHub Enterprise using the web interface and the service account credentials that were used to access TeamCity. Fortunately, login to our GitHub instance is protected by 2FA and the service account is not in the relevant AD groups that permit access to it. Thursday May 9th Attacker pulls latest copies of all the repositories they had previously cloned. The attacker attempts to use an Azure-based VM to connect to our VPN using the service account credentials that were used to access TeamCity, but the attempts to login fail because service accounts are not permitted to access the network in this way. They continue to browse Stack Overflow for details on building and running .NET applications under IIS as well as running SQL scripts in an Azure environment. Friday May 10th Attacker pulls latest copies of all repositories they had previously cloned and browses configuration settings in our TeamCity builds. They continue viewing Stack Overflow and Server Fault questions around IIS and .NET applications. Saturday May 11th This is the day that the attacker manages to escalate their privileges across the Stack Exchange Network. Once again, the attacker pulls the latest copies of source code and immediately starts to investigate build logs and configurations. From an Azure VM, the attacker changes Git username mappings in TeamCity to make it look like the build service account (which the SSH key is mapped to) is another account in audit logs. They then create a project in TeamCity, switch off versioned settings for that project (which audits changes to Git), and starts to configure the project with build configurations. Several different builds are attempted. Initially, they attempt to create a copy of databases that are used to configure our local environments from a network share but are unable to upload to any externally accessible locations. After that they attempt the same thing with some of our internal NuGet packages, but this attempt also fails. After failing to upload files they create a public gist on GitHub that contains the SQL needed to elevate permissions across the Stack Exchange Network. After several attempts, they are able to craft a build that executes this as a SQL migration against the production databases housing data for the Stack Exchange Network. Immediately they attempt to clean up any evidence of the attack by removing builds and history. Fortunately, we have a “trash can” for TeamCity configuration and are later able to recover these builds to understand what aspects of the attack each build was responsible for. Sunday May 12th Shortly after execution of the SQL, we were notified of the odd activity by the community and our incident response team started investigating. At this point, we did not know the extent of the attack so initial remediation focused on removal of privileges and credentials. Further investigation led us to the builds that ran on TeamCity and the compromised TeamCity account which was immediately disabled, followed by bringing TeamCity offline entirely. Once we discovered that the escalation path involved dev and the use of site settings to acquire credentials, we committed code to remove those paths—notably, the tool used to view an account recovery email and the site settings used to compromise the TeamCity service account. Additionally, all affected accounts were removed or had their credentials reset. At this point, the initial incident is considered to be dealt with and emails are sent to engage a secondary response team for forensics and further fixes on Monday. Meanwhile, the attacker attempts to access user impersonation on production (functionality isn’t present in production builds) and also tries to access TeamCity (which is now offline) but both attempts fail. However, they continue to be able to pull source code (at this time we were not yet aware they had access to Stack’s source code). Monday May 13th Attacker pulls source code again. Whilst doing this, they are viewing questions on Stack Overflow on how to publish and consume NuGet packages, how to build .NET codebases, and how to delete repositories on GitLab. They attempt to access TeamCity repeatedly, but it is still offline. Secondary response team starts work. We start by pulling traffic logs to understand what happened. Given that the attacker had access to dev, we rotated the access keys used for that environment and began rotating any secrets that were exposed from site settings or TeamCity. In order to allow us to build fixes to production, the TeamCity service is brought online but, this time, only inside the firewall. We ascertained that dev access checks were missing from some login routes, allowing the attacker to replay a login from prod and successfully gain access to dev—these checks are then added. Additionally, we add write-only access to secrets on site settings, closing the vulnerability that enabled the attacker to retrieve credentials from this UI. We also discover that many secrets stored in the build server are not marked as secrets (this obfuscates them in the UI)—so anybody could view them. These are updated appropriately as part of the rotation process. Meanwhile the attacker continues to pull source code—at this point, we’re still unaware that they have a valid SSH key for GitHub. They keep trying to access TeamCity—we can see this because the traffic is still hitting our load balancer and landing in our logs. They continue viewing Stack Overflow questions, this time related to refreshing many Git repos programmatically (surprise!) and creating SQL databases. Secondary response team investigation continues into the following day. Tuesday May 14th Early in the day, the attacker pulls the latest source code again and continues trying to access TeamCity (now available from inside our network only and inaccessible to the attacker). During our continued analysis of the attacker’s traffic, we find evidence of access to the SSH key used by the build server. We immediately revoke the key and investigate any attempts to use it. We were able to dump all SSH and HTTPS traffic logs from GitHub and found indications that the key was used outside of our network. We make the decision to immediately move GitHub behind the firewall in case the attacker has more than just SSH access. It’s worth noting that once an SSH key has been added to a GitHub account, if the raw key material is exposed, the key can be used without any form of 2FA involved. The same is true for personal access tokens which are provisioned when cloning using HTTPS + 2FA. We begin auditing for any commits that were not pushed by a Stack employee, but find nothing untoward. We also begin an audit of all repositories for any secrets that are not injected at build time and instruct the team that owns each repository to move secrets into the build process and to rotate them. Additionally, we begin auditing all third party systems for unauthorised access (we find no evidence of access). We contract an external security vendor to audit and double check our methodology and all available data as well as assist us in the investigation. Thursday 16th May Auditing continues and secret rotation propagates across the various affected systems. We start to categorise traffic that resulted in inadvertent PII access—we don’t see any evidence that the attacker was actively seeking personal data, but want to be able to notify affected users if we can. A blog post is published notifying our community of the breach. Attacker has little activity today, limited to viewing Q&A around SQL databases in Azure. Friday 17th May Attacker continues viewing Q&A, this time around SQL and certificates. No other activity of note. We continue to categorise the traffic to find any PII access. A blog post is posted with an update, including intent to notify an estimated 250 users who had their PII accessed. Saturday 18th May Attacker continues viewing Q&A, this time around removing git remotes. No other activity of note. Wednesday 22nd May Users affected by PII leaks are notified. Thursday 23rd May Our secondary investigation concludes but we produce a set of remediations to address underlying issues that led to the attack happening; more details on that below. Remediations This incident brought to light shortcomings in how we’d structured access to some of our systems and how we managed secrets, both at build time and in source code. During the investigation, we made a number of short-term changes to address some of these shortcomings: Move build and source control systems behind the firewall, requiring valid VPN credentials to access. Most of our engineers are remote so these systems were originally on the Internet for ease of access. Our GitHub Enterprise instance was already using 2FA.Removal of default group assignments from TeamCity. This was an accidental misconfiguration from many years ago that was never reverted and meant all newly created users inherited administrative privileges. Administrative privileges in TeamCity can browse the server’s file system where things like SSH keys are stored in plain text.Bad secret hygiene—we had secrets sprinkled in source control, in plain text in build systems and available through settings screens in the application. We made sure all secrets were removed from source code, rotated, and then securely added to build systems or made available at runtime to the application. All secrets are now write-only—once set, they cannot be read except by the application or specifically authorised employees behind the firewall.Access to support documentation for our Enterprise product was limited to authorised users of that product.Metrics and alerting around privilege escalation in production. Any escalation to developer level access now notifies a group of people that can validate the escalation is legitimate.Hardening code paths that allow access into our dev tier. We cannot take our dev tier off of the internet because we have to be able to test integrations with third-party systems that send inbound webhooks, etc. Instead, we made sure that access can only be gained with access keys obtained by employees and that features such as impersonation only allow de-escalation—i.e. it only allows lower or equal privilege users to the currently authenticated user. We also removed functionality that allowed viewing emails, in particular account recovery emails.All employees were made to change their passwords in case of a compromise of those credentials. This was a “just in case” safety measure—no employee credentials were found to be compromised or used during the incident. We also made plans for some slightly longer term projects to address larger issues that were brought to light by the incident: We gave higher priority to an existing project to replace our VPN with a system that mandates 2FA and restricts access to secure zones within our network based upon role membership. Although this was not an attack vector during the incident we wanted to further harden ingress points into our network. This has been put in place since last year.Moving away from secrets that are injected at build time to using a runtime secret store. This is part of a larger project to better handle configuration management in our data center environments. In our Azure environments, we already use KeyVault and AppConfig to do this.Migrating our CI/CD pipeline to break apart the build and deploy components. This is an on-going effort to migrate away from a TeamCity process that builds and immediately deploys our code to using GitHub Actions to create artifacts and Octopus Deploy to manage deployment. This allows us to have deterministic builds and better manage deployment permissions.Moving to use SSO and 2FA on as many third-party systems as we can. We’re actively moving to Okta Workplace Identity and using it for any third-party systems that our employees need to access.Better role-based access control—one of the things we discovered was that diagnosing why a particular user gained privileges in a specific system was made difficult by the culmination of years of group nesting and difficult to understand security group assignments. We have tooling being built to better manage this process.On-going training to ensure employees are aware of and can identify phishing techniques. This is especially important for our Customer Success team that routinely deals with support emails. Advice to others This incident reminded us about some fundamental security practices that everyone should follow: Log all your inbound traffic. We keep logs on all in-bound connections. This enabled all of our investigations. You can’t investigate what you don’t log.Use 2FA. That remaining system that still uses legacy authentication can be your biggest vulnerability.Guard secrets better. TeamCity has a way to protect secrets, but we found we weren’t using it consistently. Educate engineers that “secrets aren’t just passwords.” Protect SSH keys and database connection strings too. When in doubt, protect it. If you must store secrets in a Git repo, protect them with git-crypt or Blackbox .Validate customer requests. The more unusual a request from a customer, the more important it is to verify whether or not the request is legitimate.Take security reports seriously. We’re grateful that our community reported suspicious activity so quickly. Thank you! Wrap-up There’s a lot to digest here, but we wanted to give a good overview of how an incident like this starts out and use it as an opportunity to inform other companies and sites on how these things unfold. The more that we are prepared for and anticipate events like this, the better protected we all will be against future events of this nature. We are not able to comment on any other details related to the attacker due to ongoing investigations. If there is anything that you would like to discuss please do so on our Meta Stack Exchange feedback post. Thanks for listening! Stack Engineering Team <3 Tags: security"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/10/28/communities-and-connections-will-power-our-growth-in-2021/","date":"2020-10-27T23:00:00.000Z","tags":["Community"],"title":"Communities and Connections will power our growth in 2021","text":"This is my fourth in a series of quarterly CEO blog posts. As I reflect on my first year at the company, I’m more excited than ever about our path ahead and the transformation that is underway at our company to realize our full potential and mission. I came across an interesting question on MathOverflow recently. It asked for examples of mathematical models to explain the structure of spider webs. One of the key properties of these beautiful creations is that they can avoid concentrations of stress, even when some of the threads are broken. Spider webs are a remarkable example of resilience. This month marks my one year anniversary since joining Stack Overflow as CEO. When I left Texas in October and spent months working from our headquarters in New York, I never could have imagined the road ahead; for myself, for this company, and for the entire world. Our office in New York is empty today, our global team is working remotely, and I’m back in Texas. But our mission continues. Through all the challenges, one of the things I have observed with admiration is just how adaptable and resilient we can be as an organization and as a community. To our employees, our customers, and our community, I want to give my thanks for your perseverance. There is a lot for our company to be proud of and we have some exciting work ahead of us. We completed an important round of fundraising while navigating an ongoing pandemic. We have seen significant growth in our Stack Overflow for Teams business as remote, asynchronous work becomes more critical to success, and we enter Q4 with record amounts of interest in the product. We’ve found that our customers want to be able to create a Team quickly, which is why we’ve now enabled a self-serve option for our Business plan of Teams. Starting this week, you can create a new Team, invite folks, and start sharing information within minutes. During my first quarter with the company, we all met up in Austin, Texas to connect and plan for the upcoming year. This year, we held a company-wide virtual meetup to lay out our 2021 strategic goals and unified product strategy and vision. We have followed a unique path and approach, one that started with establishing a community, coalesced around a brand, and is now focused on building products based on what we have learnt from our users to make their lives more efficient and productive. Below is a slide I shared with the entire company during our virtual meetup that highlights our two strategic priorities and three foundational pillars for 2021. As I look ahead to my second year at the company, my team and I are focused on helping our global community of users and customers build and maintain connections. At Stack Overflow we are focused on creating platforms and products that help users and customers to share information, build their knowledge, and collaborate more efficiently. Whether it’s Stack Overflow, our technical Stack Exchange sites or Stack Overflow for Teams inside organizations, we are in the business of building digital communities, and the connections one finds in these groups are more essential in this increasingly remote world than ever. Building Bridges in the Community The challenges we face today as a result of the pandemic are acutely felt by students and recent graduates who are trying to complete their education or find a start to their careers. We know from our Developer Survey and social media that our public site is utilized actively by students learning to code, and we wanted to learn from them as well. New York City’s Summer Youth Employment Program (SYEP) is the nation’s largest youth employment program, historically connecting NYC youth between the ages of 14 and 24 with career exploration opportunities and paid work experience each summer. Stack Overflow recently took part in SYEP’s Summer Bridge 2020, helping a cohort of young learners to get first-hand experience with the tech industry. Many of these young learners have visited our sites when they needed help with a technical problem, but not as many had taken the next step of contributing their own questions and answers. We asked them to form groups and present us with ideas for how to increase participation. We are considering their suggestions for educational content and working to make the rules of our communities more transparent and accessible. We continue to focus on improving our working relationship with the community and to address long standing issues. We have read the letters, meta posts, and comment threads from passionate users who sincerely want to help improve our sites and to make this a place where everyone feels safe and welcome to contribute. Our users had also been asking for us to move our editor over to highlight.js. It’s open source and actively maintained, so we thought it would be a better bet for the long term than Prettify, which was discontinued in April. This is a nice example of work from our Stack Overflow for Teams group migrating over and making a difference on our public Stack Overflow website. You’ll see more interplay and mutual benefit between these two products in the future. Our community team also put tremendous effort into a Ticket Smash event, working our way through a backlog of requests, bugs, and fixes. We made it through all 631 tickets in those two weeks. The team worked on issues that our moderators escalated and got a much better understanding of what our moderators face every day. Their tireless work on behalf of the network is always awe inspiring. We are also working hard to make our community more diverse and inclusive, and that means prioritizing racial equity efforts and taking steps to help fight racism in the tech community and beyond. On that front, our leadership team has continued to make good progress in close partnership with the company’s Black and Brown Affinity Group (BnB). The BnB group has identified a short list of companies with which we hope to partner in order to assist them in their work through in-kind contributions of our products. Internally, we are making more resources available to our employees, and we recently published a formal Diversity, Equity, and Inclusion Policy that includes an update to the company’s hiring policy. Look out for more updates in these quarterly CEO blog posts and across all of our channels. Investing in Stack Overflow for Teams and Transforming into a Product-led SaaS Company What does it mean to be a product-led company? To us, it means focusing on solving users’ problems to drive adoption and engagement, creating viral growth for our products. Rather than relying heavily on sales and marketing, we deliver value to our users and provide natural avenues for them to expand their interaction with our products, in a self-serve manner. We’ve been user focused as a company since our public platform was launched over a decade ago, so this is an extension of that thinking into our product portfolio. Being product-led means solving real problems for our users within the product and allowing data on product usage to guide our next steps on our roadmap. Putting the user journey front and center lets us leverage the strength we have as an organization – learning and feedback from our public community. We want to push the solution closer to the user, giving them the choice and allowing them to decide when it’s time to level up and add more features. One of the best ways to understand where you can improve your products is by working to adopt them into your own daily use. Since my last quarterly blog post, we have rolled out a new powerful feature in Stack Overflow for Teams called Articles. The goal is to provide a new content type—long form prose (with Stack Overflow’s familiar principles) — that can sit side by side with shorter Q&A for developers and technologists to share policies, how-to guides, product launch retrospectives, and more. Teams can then organize Articles and Q&A into Collections, providing a single source for all knowledge on certain topics. This combination of Q&A and longer form content is a powerful mechanism for efficiently sharing comprehensive technical knowledge within organizations. You can check out these features for yourself on the new Stack Overflow for Teams Tour page for our Business tier. Within our company, our teams have been working to migrate information from wikis, FAQs, and other forms of documentation into our own instance of Articles. It’s given us a new perspective on how we can be most efficient and supportive when onboarding new employees, drive distributed teams to collaborate and engage employees irrespective of their location or function —- and how that process can actually result in high value documentation that helps the entire team be more connected and aligned, asynchronously. For example, Josh Duffney, a site reliability engineer, joined the company in June of this year and began asking lots of questions on our internal instance of Stack Overflow for Teams. Through this process, something that in the past might have been done with shoulder taps, lunchtime chats, email threads, or casual messages in a work chat, he was transforming something intangible into digital artifacts that everyone on the team could use and improve. “A lot of what I have been learning and committing to Stack Overflow for Teams is institutional knowledge. A good example is how to test our Terraform modules. I can ask that question, record the answers, and then bring a bunch of Q&A together to create an Article that documents the difference between my assumptions and the reality.” Our clients have created hundreds of Articles, and the feedback we have been getting from them will be invaluable as we work on the next version of this product. We are especially excited for what’s to come. Our Series E investment means a large investment in our Stack Overflow for Teams product, so it can be more useful to current users and much more widely adopted. We have many exciting product innovations and announcements to come through the end of the year and into 2021, like a deeper partnership with Slack that was teased a bit at Slack Frontiers earlier this month. We are partnering with them on their Org-Wide app, which is available now for select enterprise-level customers and will be rolling out more widely soon. We are excited to continue deepening the integration between our workplace toolkits. The combination of leading synchronous collaboration tools like Slack with leading asynchronous collaboration tools like Stack Overflow is a powerful efficiency driver for developers and technologists. At the beginning of October, we also announced the completion of our SOC 2 Type II audit for our Enterprise tier of Stack Overflow for Teams. This reinforces that the controls we put in place match trusted requirements, including international security, and that our Enterprise customers using Stack Overflow for Teams have their data well guarded. Finally, we released Enterprise 2020.2 for Stack Overflow for Teams (Enterprise tier) which included a power-packed set of features for our Enterprise customers including Articles, Collections, User Groups, Dark Mode and Question Following. Advertising and Talent The third quarter saw the highest number of ads transactions on our platform in the company’s history. One of our clients during this period was Twilio, which used our Direct to Developer program to get their technical blog posts in front of programmers searching for similar topics on Stack Overflow. Following the launch of their campaign, traffic to many of these articles doubled or tripled, with the monthly readership in some cases increasing by a factor of ten. “There is tons of content that before wasn’t really getting much attention and now we see a lot of traction,” says Troy Blanchard, a senior manager on Twilio’s marketing campaign. With Stack Overflow, Twilio was able to reach developers on their second screen, the knowledge base visited by over 100 million developers and technologists each month, many of whom visit the site multiple times a week to find help with coding questions. “It’s been this smooth journey from looking up a question on Stack Overflow to finding interesting content to learning more about Twilio. It’s hitting home with the developer audience.” I think one of the reasons Twilio’s campaign worked so well on Stack Overflow is that we share the same values when it comes to advertising. Stack Overflow ads continue to be simple. You won’t find animated GIFs, videos, or pop-ups. But for Twilio, that’s not the point. Relevance, reach, and respect for the audience are the keys to success when trying to reach programmers. The key is to have share of mind on the site most developers visit multiple times a week. “Our chief product officer asked me, are we doing stuff on Stack Overflow?” explains Blanchard. “As the product officer, he’s not asking to see a Twilio billboard every time he goes to the airport. He’s thinking, I want people to see Twilio when they are in the act of building something with code.” Regarding our Talent business, while there is still uncertainty around companies hiring in the midst of the pandemic, we have been seeing consistent and steady month-over-month growth from our low point in March. The volume of interest is increasing, a strong early indicator that the market is improving. Our team continues to find new ways to adapt to our changing market conditions. We added new features to our reporting toolkit so Talent customers can track their follower growth and new products so that companies without immediate hiring needs can continue to invest in building overall awareness and mind share for their brand among developers. And new features, like Company Awareness, allows brands to stay top of mind with developers and strengthen their candidate pipeline even when they aren’t directly listing openings. When I think about what’s happening with workplaces these days, it’s becoming increasingly clear that office life for most knowledge workers is unlikely to return until the summer of 2021, and even then, many big tech companies have declared that workers who have moved remote during this period can continue to operate far from cities or campuses. A recent piece in the New York Times found that a growing number of companies are delaying the reopening of their offices or allowing employees to remain remote indefinitely. According to a recent study, 73% of U.S. employees fear that returning to an office would pose a significant risk to their health. Our senior staff have been contributing to the blog, sharing advice on hiring, communication, and professional development for a distributed workforce in a remote world, sharing our own experience with these tectonic shifts across industry and labor. Luckily we have experience building communities online. The New York Times cited us as a place to learn, network, and search for new employment opportunities. And speaking of jobs, we have a new Careers page up and lots of open positions we are hiring for here at Stack Overflow. Looking to the Future Stack has always been about enabling asynchronous collaboration, and the visitors who rely on us for answers come from every corner of the world. That approach is becoming increasingly valuable in a time when so many offices are closed and colleagues are working remotely from home. We have seen the move to remote reflected in usage of our sites, with many companies expanding their use of cloud services and remote deployments. For example, May, June, and July saw the highest number of new questions being asked for AWS, Microsoft Azure, and Google Cloud Platform, with some months reaching as high as 50% more questions than the same time last year. I am also so excited to see the interest in transformational technologies continuing to accelerate on Stack on sites like Quantum Computing Stack Exchange, Artificial Intelligence Stack Exchange and Open Source Stack Exchange. Our public site has now reached a tremendous milestone, with over 20 million questions asked and answered on Stack Overflow alone. It was designed from the ground up to enable users from anywhere in the world to collaborate asynchronously in order to build a powerful repository of information. With Stack Overflow for Teams, companies like Bloomberg, Box, and Microsoft are building incredible knowledge bases within their own organizations. I’m excited about our ongoing research into creating new meaningful and thoughtful ways for developers and technologists to connect with each other and more directly with technology companies that are building sub-communities on Stack Overflow. We have seen companies like Snowflake and Sencha move developer support from internally developed forums to Stack Overflow, an effort to meet programmers in their workflow, at the place they already visit several times a week. There is a lot more potential we can explore when it comes to helping companies support their platforms and technology by connecting their experts with the users seeking information on our sites. Since Snowflake switched their technical Q&A to Stack Overflow in 2019, questions with its tags have grown substantially. Source: Stack Overflow Tag Trends Traditionally, a company would start with a product, build a brand around that, and see a community form around the use of their product or the spirit of their brand. At Stack Overflow, we have done just the opposite. We began with a community and a mission to democratize access to information on code. Over time, collaboration and knowledge sharing became the core of our brand. Last but not least, we built products that grew out of the foundation our community had created and out of what we learned from crafting great Q&A systems for them to use. When people ask what our story is these days, I tell them it’s quite simple: we are in the business of building great technology communities. As developers and technologists increasingly find themselves sharing knowledge and collaborating in a remote and asynchronous environment, our mission has become more important than ever. Thank you for continuing to support it. We are happy to hear your comment below or in our discussion post on Meta Stack Exchange. Tags: announcements, ceo quarterly post, community update, stack overflow for teams"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/09/28/migration-wiki-documentation-articles/","date":"2020-09-27T22:00:00.000Z","tags":["Code for a Living"],"title":"How Stackers ditched the wiki and migrated to Articles","text":"Developers’ distaste for documentation, especially among independent contributors, is a well weathered meme in the world of software. Even Stack Overflow is not immune to this tension. “For management, an age old problem is that engineers hate to write documentation. It’s a check box on the process, something that takes time to write but that you feel no one will read it. There is this black hole syndrome where you spend hours working on something and get no feedback. I’ve heard people joke that documentation is where ideas go to die,” explains Tom Limoncelli, head of SRE. “Sometimes it feels performative. Why are we writing this? Because our policy is that we will document every service? That hurts morale, no one wants to feel like their time is wasted.” In an effort to rethink how documentation work, we recently introduced Articles, a new type of content inside Stack Overflow for Teams that is meant to pair with our traditional questions and answers. Articles allows for longer-form documentation and prose that can sit side by side with shorter Q&A. The goal is to build a system for documentation that can be both proactive and reactive, flexible and on-demand. We decided to sit down with team leads from across Stack to learn what it’s been like to drink our own champagne, be among the first to use our own product, and how it has changed their approach to documentation. Migration and meaning on SRE Chris Hunt, a site reliability engineer at Stack, had actually begun a process of reworking his team’s documentation several months before we introduced Articles. His team found itself with a fractured system that had stopped working well in several areas, a condition that often befalls documentation, even with the most well-intentioned coders. “We have three different wikis, and two of them were broken, so we couldn’t update them at all.” The SRE team prides itself on a culture of continuous improvement. After all, it’s responsible for ensuring that Stack Overflow and our network of exchanges stay up 24 hours a day, 365 days a year. When there is even a brief outage, we hear about it, from millions of developers across social media. “In SRE, we have a culture of ‘leave things better than you found it.’ If you have an alert that’s noisy, fix the things causing the fires. If you found documentation that wasn’t helpful, update it for the next person.” “The author of 90% of our documentation doesn’t work here anymore!” So how did Hunt and his team wind up with three wikis, two of which were broken? Often, with documentation, the issue is about the transition between different systems or different employees. “I see two common issues,” says Hunt. “One, maybe they wrote it to the best of their ability, but it hasn’t been updated in a while, and it’s no longer accurate given changes in other systems. Two, the author of 90% of our documentation doesn’t work here anymore! Now, I could take on the task of updating and migrating that information, but as every developer knows, that means I am now the owner, and I may be hesitant to take on that responsibility, especially if I’m not familiar with how and why it was originally written.” The SRE team wasn’t alone. Erwin Alberto, who heads up our IT team, was also in the process of trying to design a new system for documentation when he learned we were creating Articles. “We had stuff all over the place. Some were in wikis, some in Google Docs, some in email. Sometimes it was on a work drive, sometimes on a personal one. At that point, even though we had hundreds, maybe thousands of pages, it’s really like having no documentation at all, because the whole point is having something that anyone on your team can find and access when they need it.” Migration Alberto had already put in the hard work of auditing existing content with his team. His advice? Start with your worst pain points first. “We were in a position where there was a lot of great expertise on the team, but a lot of it was hidden in peoples’ heads.” So, how do you decide what’s worth migrating and what’s no longer relevant? Erwin and his team looked at what would be the most common support tickets and the Q&A on Teams that had the most engagement and traffic. This allowed them to identify the most pressing topics, and then divide them up, with team members committing to write pieces as part of their next sprints. The IT team assigned one author for each piece on the sprint, with at least one other team member assigned to check the Article immediately after for quality control. “In a way, part of the audit of content happened in Articles.” Alberto remembers, “It was the easiest way to get visibility into the different fragments. We put them up and then edited them.” Another way this problem is being addressed is as part of the onboarding process for new hires. Josh Duffney, another site reliability engineer, joined the company in June of this year. He began asking lots of questions on our internal instance of Stack Overflow for Teams. He was transforming something intangible into digital artifacts that everyone on the team could use and improve. “A lot of what I have been learning and committing to Teams is tribal knowledge. A good example is how to test our terraform modules. I can ask that question, record the answers, and then bring a bunch of Q&A together to create an Article that documents the difference between my assumptions and the reality.” “It really reduces the friction around contribution.” Duffney sees a big difference between the existing wikis and the system of documentation the SRE team is now working towards with Articles. “As someone who was recently onboarded, the pain points with the existing systems was that it was fractured across three wikis, and it’s in a hierarchy that is tough to navigate. As someone new, I don’t know the context of the directory structure.” With Teams, a query will surface any Q&A, Articles, or collections tagged with a topic like SRE, Talent, or legal. “Relying on search and tags is a natural fit for how we operate on the internet anyway. It really reduces the friction around contribution.” Level Zero Support Having done the heavy lifting of content auditing, Alberto’s team is now migrating everything to Articles. He says that he sees the combination of long form pieces and Q&A as a new level of support. “We used to have level one, which was sending a ticket to the help desk, and it was something we could easily resolve for you. Level two was a more complex problem that maybe required an engineer or specialist from a certain team to figure out. I look at this new system as a level zero.” Before sending us a ticket, folks can search Teams. If they find a question that solves the problem, great. If they need more details, they can follow links to in-depth articles or collections that bring together Q&A and article with the same tags.“ This activity is both generous and selfish. “One motivation is great support for our colleagues, call it great customer service. But another is to avoid having to answer the same question—How do I reset my password? How do I install and set up OpenVPN?—a dozen times a month,” says Alberto. “If we can teach people to look to our knowledge base first, and if the results they get are helpful, they will learn that habit, and that will free my team up for the bigger challenges that require our personal attention.” Integration as Innovation Dean Ward, a senior developer on our architecture team who heads up work on billing systems, says he looks at Articles as a chance for a fresh start. “Normally I would be getting a ping in group chat apps or I would get an email thread. Very little of that information exchange makes its way back as productive additions to the original documentation.” “I think the fact that Articles are linked to Q&A, it can drive you to keep everything fresh. It’s the little nudge. There are a lot of two way links between things,” explains Ward. For a developer, a wiki isn’t a place they want to spend time very often. “Articles, and traditional documentation, is not something you use everyday. For developers, Q&A can be something they touch every day, or a few times a week, and so that means your documentation has a much better chance of staying up to date.” Ben Matthews, the engineering manager on Talent and Ads, says that even after a year on the job, he would ask a question and be directed to a piece of documentation that he never knew existed. Because knowledge was scattered across so many different platforms and so frequently exchanged in ephemeral conversations on chat or in person, he never felt confident that an answer existed or needed to be created. Giving users the chance to enter text into a box and search with tags isn’t exactly breaking new ground when it comes to functionality. But that’s not the point. “In some ways it’s obvious. It feels like table stakes,” says Matthews. “But when you layer on the connection to Q&A, the integrations so you can search, ask or answer from within a work chat or email thread, and the gamification that adds just a little more incentive to the writer, overall it adds a lot of momentum and removes a lot of friction around content creation.” Tags: articles, documentation, stack overflow for teams"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/08/12/how-we-built-it-articles-feature-stack-overflow-teams/","date":"2020-08-11T22:00:00.000Z","tags":["Code for a Living"],"title":"How we built it: our new Articles feature for Stack Overflow for Teams","text":"This post offers a technical perspective on how Articles – our brand new content type – came to life. We’ll explore some of the challenges, trade-offs, and implementation details of this exciting new feature. But first, let’s take a look at articles from a product perspective, briefly describing its features and what they look like. Articles allows for the creation and sharing of long-form content within Teams. While we believe that questions and answers are still the best mechanism when soliciting “in the moment” knowledge, Articles allow users to share information with fellow team members proactively and in much greater detail. Sometimes, the narrative of how and why decisions were made adds another layer of understanding to the creation and maintenance of software. And having your longer form content in the same place as your Q&A means less context switching. Articles and Q&A share a lot of functionalities: they have tags, comments, voting scores, and are included in your Team search results. Additionally, Articles have a piece of information that we call “types”. When creating a new article, users can give it a specific type that best suits the kind of content included in that article. We highlight article types in the different contexts where articles may appear: search results, collections, or the list of articles itself. In the future, we may also use article types for enabling different behaviors and functionalities. For example, we could allow users to create custom templates for certain article types or add special notifications when articles of a particular type are created. Currently, we support the following choices for article types: Knowledge ArticleAnnouncementHow-To GuidePolicy Creating a new article (also a sneak peek into our new editor for Teams) Example of an article. You can see the article type above its title, some stats about its creation and engagement, tags, and comments. Implementation Articles data model Our first major implementation decision was the data model. Where are articles going to be stored and how are we modeling their relationships with other system entities? It was clear early on that we wanted articles to fully integrate into existing Stack Overflow for Teams features and pages. That means articles should show up in search results alongside questions and answers, be visible in users profile pages, get picked up in tag subscription digests, support comments and tags, appear in our external integrations, and generate inbox notifications. Whew! Currently, all questions, answers, and wikis are stored in a single table called Posts (if you’re interested, you can check out our database schema and even run custom queries on https://data.stackexchange.com/). Adding articles to the existing Posts table was thus the obvious choice. This decision is particularly beneficial when you want to combine articles, questions, and answers on search results; since they’re all Posts, the logic is quite simplified. Articles thus became a *new type of post* rather than a unique entity of their own. However, unlike Q&A, articles had an additional piece of information we needed to build and integrate into our data model somehow: article types. Article types: special kind of tags Our main challenge for building this feature was deciding where article types should be stored. We considered different approaches, like creating a new table and even leveraging our brand-new Collections feature for modeling types as new, pre-seeded collections. In the end, however, we settled on a simpler solution that would require less code intervention and work as-is with our existing Elasticsearch posts index: articles types as tags. Sounds simple, right? Well, not just regular content tags, but *special* tags: because we needed to be able to tell, from a list of tags, which one was the article type. We also needed to make them required when creating articles and protect them from deletion. Our solution involved adding a new column to the Tags table for indicating they are an “article required tag” and creating the new article tags on-demand when articles are enabled on a given Team. The interesting bit here is that article types are only special when rendering an article: they are treated like regular content tags both in our posts search index and when denormalized in the Posts table. Therefore, searching for all articles of a given article type is as simple as running a custom tag search. We also added support for the is:article operator, which filters search results coming from our Elasticsearch index to articles-only. If a user wanted to search for all policies of a Team, for example, they would use the query is:article [policy] Another big advantage of adding articles as posts and types as tags is that we didn’t have to add any new fields to our post’s search index. The code that runs the public Stack Overflow service and sites is largely the same as the code that runs our private Teams. Therefore, whenever we make changes to the structure of indexed documents, we need to rebuild our indexes across all sites and Teams – a process which may take a significant amount of time and risk downtime for search. We all know how the developers react when the public Stack Overflow website is down, and we want to avoid any outages with our paying customers as well. Last but not least, adding a special field just for article types would be wasteful and confusing on sites that don’t have Articles enabled. An indexed article in the posts index. Notice the article type alongside content tags. The PostTypeId field is set to “9”, which indicates this post is an article. The big win here was not having to change the structure of indexed documents in order to accommodate articles. Searching for all articles with the announcement type Voting and feedback Just as we allow users the ability to vote on questions and answers, we felt users should have a way to provide feedback to article authors – both praise and suggested improvements. In addition to upvotes, users can give contextualized and private feedback to the authors and editors of an article via a feature we call suggestions. We built suggestions on top of our comments data model. Suggestions are very similar to regular post comments except that they 1) are private and 2) can have one of two types: ”article needs more details” or “is outdated”. We rewrote part of our post comments code to reflect those requirements and added new functionality so article authors could “resolve” suggestions. We spent a decent amount of time considering different design approaches – should suggestions have their own table? Should we add them as custom flags? Adding support for private comments seemed to be a good idea, but how can we make that change in a way that makes sense across the codebase and can be reused for other things in the future? These considerations were key for reaching our final design – adding the concept of types to regular post comments, creating two comment types for the two different kinds of suggestions, and filtering those out of all SELECT queries touching the post comments table. It looks simple in hindsight, but this change alone saved us a lot of time testing, measuring and writing code that would have been necessary had we decided to create a brand new suggestions table. Final thoughts: simplicity is key When I started writing this article (see what I did there?), I admit I was a bit afraid of not having many intricate, complicated things to explain. But the beauty of designing this new feature was in its simplicity. We spent a lot of time considering different possibilities, thinking about the right architecture, and making sure it was thorough, reusable, and easy to plug into all of our subsystems. Articles had to be a special content type within our existing infrastructure, not a custom foreign entity. Taking the time to carefully think that design choice through also meant less time spent building, testing, measuring, and debugging. We started thinking about Articles from a technical perspective back in March 2020. We knew from the beginning that we wanted to keep things simple so we could iterate and incorporate feedback progressively. We could have easily fallen into the scope creep or over-engineering traps had we not taken the time to design these features with simplicity and reusability in mind. We applied the same principles of careful thinking for designing the product itself. We knew the most important thing would be to get articles out there as soon as possible, and observe how it was being used before adding tons of new features. With that in mind, we have been dogfooding articles internally for a few weeks now, which has been a lot of fun. Many teams have migrated procedures, guides and policies from wikis and external documents into articles already, and having a single place to search and find relevant content has been a huge win and true time saver for us. Most importantly, it validated our decision to start with a simple, well rounded feature, built in a way that was easy to maintain, extend, and evolve.PS: there’s another major win that I deliberately didn’t mention here because it deserves its own blog post: articles are launching with a brand new, revamped editor. Moving all posts to CommonMark was a big part of developing this new editor, and you can learn more about it on this amazing meta post from our developer Ham. Stay tuned for more updates on the new editor and the challenges and decisions we faced while building it. Tags: product, stack overflow for teams"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/08/10/stack-overflow-for-teams-articles-content-collaboration-knowledge/","date":"2020-08-09T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow for Teams has a new kind of content – Articles","text":"Today, we’re excited to announce the first-ever new content type to Stack Overflow for Teams, our knowledge and collaboration SaaS product. We know that developers and technologists are often searching across multiple tools or pinging colleagues on chat to find the information they need – and even then, they’re often left with outdated or incomplete knowledge. Articles is a game-changing functionality in Stack Overflow for Teams. It brings all formats of knowledge into one place for easy building, searching and sharing. This means that team members are now able to proactively and reactively create and share knowledge. This is a major release for us – we’re no longer relying solely on questions and answers to share knowledge. We know that the most productive teams need to share information proactively to help speed up onboarding and learning new technologies as well as provide a transparent way for members to ask questions and give answers. We believe the addition of Articles rounds out the knowledge-sharing landscape for Teams. So how can Articles within Stack Overflow for Teams be used? There are many possibilities, as Articles allows longer-form content like documentation, policies and procedures, how-to guides, and much more. You can also link multiple questions into an Article, much like a Collection. Anything that a technical team member needs to do their job can now be stored in Teams as an Article, a Collection (of Q&As or Articles), or an individual Q&A. Now it would have been easy for us to just enable the ability to create longer-form content and call it a day. But given our strong focus on building a product that excels at creating useful content while keeping information fresh and relevant, we believed it necessary to have some of those pieces be a part of this first Articles release. To strengthen this new content type, we have, for the first time in 12 years, updated our markdown editor to a more WYSIWYG style editor for Articles only, backed by the open source CommonMark parser, and preserving the formatting from any rich text content sources. Based on feedback from our Teams users and usage data, we have updated our content voting mechanism on Articles, to allow users to provide highly contextual, actionable and private feedback to the owners and editors of the post. All in all, this release paves the way to a lot more exciting updates around content management and creation for our Teams users. With the addition of Articles, you can search for more types of information within Stack Overflow for Teams, find it, and get back to building great things. We know it doesn’t mean the need for chat apps goes away. In fact, we continue to invest in and support our integrations with tools like Slack and Microsoft Teams as we know how valuable those tools are for the developer and technologist workflow. Articles within Stack Overflow for Teams should make your experience within each of those platforms even better. Stack Overflow revolutionized large scale knowledge sharing 12 years ago and Stack Overflow for Teams is doing the same for collaboration and internal knowledge within companies every single day. For now, Articles will only be available on Stack Overflow for Teams, Business & Enterprise. We believe that there are interesting potential use-cases worth exploring for public Stack Overflow for both Collections and Articles. We are planning to start with one feature very soon, stay tuned. We will conduct user research and solicit feedback on these use cases and communicate our plans as they progress, since it is vital that an eventual rollout isn’t disruptive to the Public Q&A experience. In the meantime, if you want to see Articles for yourself, read more and reach out to our team to set up a demo. Tags: articles"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/07/28/ceo-quarterly-blog-post-3-series-e-funding/","date":"2020-07-27T22:00:00.000Z","tags":["Company"],"title":"Our Series E Funding – An Inflection Point to Accelerate the Realization of our Mission","text":"This is an exciting inflection point in our company’s history as we accelerate the realization of our mission: to help write the script of the future by serving developers and technologists. We will do this by investing in our ecosystem of communities and products used by our customers, to solve their difficult problems as they write the next generation of digital applications. I am thrilled to start this quarter’s blog post with the very exciting news that today we announced $85 million in Series E funding for the company. This is an exciting inflection point in our company’s history as we accelerate the realization of our mission: to help write the script of the future by serving developers and technologists. The financing round was led by GIC with participation from new investor Silver Lake Waterman with participation from our longstanding, institutional investors that include Andreessen Horowitz, Index Ventures, Spark Capital, and Union Square Ventures (USV). We are excited to partner with some of the world’s best technology investors as we embark on this next phase in our journey. A special note of thanks to our team, led by Jerry Raphael, our Chief Financial Officer, for the significant hard work that was invested in this process. Stack Overflow has been a venture backed company for 12 years and our last funding round was in 2015. This investment will allow for a continuation of the work we are doing to establish the foundation for Stack Overflow’s next phase: a leader in products for developers and technologists to collaborate and share knowledge as they build the next generation of applications. As the world’s companies go through an intense and accelerated phase of digital transformation, Stack Overflow is at the heart of this movement. The change, which ranges across almost all industries, is being propelled by the massive shift to the cloud, a focus on agility via the DevOps movement, and access to talent from around the world through distributed and remote work. This funding enables our company to add additional resources to the ecosystem of products and communities that we build to help solve difficult problems for developers and technologists. “Stack Overflow for Teams makes it easy for our developers to find the information they need quickly. It reduces the repetition of questions internally and eliminates cross-functional silos,” said Chris Thomas, Managing Director at Moody’s Analytics, a customer of Stack Overflow. “Stack Overflow for Teams helps us drive more collaboration and innovation at Moody’s Analytics, especially as we’ve gone fully remote.” Our public community and commercial products are symbiotically linked. One cannot succeed without the other, and the more one prospers, the more it can propel the success of the pair. With this funding, we will be able to invest in more people and tooling on our public platform and community management teams; in the tools, features, and platforms that support our community managers, moderators, and users. We’ve shared our roadmap for the community, and I am confident that this funding will allow us to deliver on and expand that commitment. What we learn from these communities will help us to build better, more useful products for developers, technologists, and the companies that rely on them. While celebrating this news, I also want to acknowledge that these are difficult, turbulent times for many. While some areas of the world now seem to be on a path to containing the COVID-19 pandemic, other regions, including our home base in the United States, are still grappling with a rapidly growing number of cases. There is reason to have hope. New York, where Stack Overflow was founded and is headquartered, has suffered tremendously, but now seems to be on a better path. As a company, we have also experienced disruption, but have now found our footing. This is thanks to the tremendous efforts of our community, our employees, our customers and the 120 million monthly developers and technologists who continue to turn to us as a trusted source of knowledge to help them to do their jobs. Community In Q2, there was significant focus from our Community team, led by Teresa Dietrich, our Chief Product Officer, to improve the foundation for our moderators. Earlier this month, we introduced a new moderator agreement, our first update to this document in many years. We’re glad to see it has been well-received by the community, and we listened to moderator feedback as we worked to build a strong consensus around this document. We also launched several new avenues to engage with and enable our moderators: including a moderator council, moderator townhalls, and a moderator training platform. We have also worked to update our approach to Creative Commons licensing. We have clarified a number of longstanding open questions relating to how the CC BY-SA licensing applies to content, and have added the ability to easily determine the applicable license version for each post revision (based on its creation date) on the site and through the API. We continue to see positive metrics around our community. April saw the largest number of new signups (260K) in Stack Overflow history, and the second quarter saw the highest number of engaged users on our platform since January of 2019. This quarter saw growth spurts on exchanges like Ask Ubuntu and 3D printing. I am personally excited by the activity in our communities around topics like machine learning and cloud computing. Engaged users on Stack Overflow 2011-2020 Finally, internally at Stack Overflow, we just wrapped our first ever company Community-a-thon. The goal was to familiarize all Stack Overflow employees with the platform, to have them experience firsthand what it’s like for the average Stack Overflow user to ask and answer questions and to provide their own feedback to our Product organization. Stackers contributed over 400 questions and answers on a range of topics. We’ll be doing this again in the future, as it helps to generate a lot of great ideas across departments and strengthens the feedback loop between users and employees. When you’re building, marketing, or selling a product connected to our community, it pays to understand the foundation with high levels of empathy for users. Product Our long term product vision is to build an ecosystem of communities and products that enable developers and technologists to solve their hardest problems — to find the solutions they need as they build the world’s next generation software applications. As a product-led company, we look at meaningful and repeatable ways to deliver value to our community of users. The foundation of our company is our public platform, visited by over 120 million unique people from around the world each month. On top of that, we have built a suite of products: Teams, Advertising, and Talent. The pandemic has radically reshaped the way in which people around the world do their work. For many companies, when the option is available, remote work has become the norm. In this environment, we have seen a surge in demand for our SaaS collaboration product Stack Overflow for Teams. As an example, our Basic Trials for Stack Overflow for Teams have increased 10X since 2019. Employees across Engineering, Product Management, Data Science, and even Customer Success organizations need a way to ship products faster, accelerate onboarding, improve customer experience, and drive innovation by communicating and collaborating asynchronously, no matter where in the world they are working from. G2 and the DevOps Periodic Table have recognized Stack Overflow for Teams as a consistent leader in this space. Great collaboration and knowledge sharing comes from breaking down silos between teams and departments. As an example, for our Teams product, we launched the Custom Awards feature, which is a great mechanism to build high levels of engagement within the internal communities our customers create within their companies and organizations. The feature allows customers to reward and recognize employees based on achievement of specific goals that the company cares about. Our Advertising business, which allows companies and enterprises to showcase their platforms and tools to developers and technologists, has also seen increased demand over the past quarter. We also expanded our Direct to Developers advertising to our technical Stack Exchange websites, allowing companies to reach and engage a much larger audience. This also means companies looking to reach developers and technologists who specialize in Amazon Web Services (AWS), Microsoft Azure, Google Cloud, cybersecurity, Android, or iOS, can communicate with talented technologists on sites dedicated to sharing knowledge around those specific topics. For our Talent product, we have redesigned navigation on our Jobs board, leading to a major increase in usability and click through rates. Job listings can now be found across all our technical Stack Exchange sites, not just Stack Overflow, furthering our goal of integrating our main site with the plethora of highly active and engaged communities around other technical topics like Cloud, DevOps and Machine Learning. We will continue to invest in Jobs as developers and technologists look for work in record numbers. For both our Talent and Advertising products, we have focused on improvements that benefit developers and technologists—making it easier to discover and find jobs and new tools and services, both of which are so vital during the current situation. Next Steps Along with COVID-19, another major force reshaping our world over the last three months but for the better is the Black Lives Matter movement and growing awareness around the United States and the world that more must be done to combat and dismantle systemic, structural racism. The Black and Brown (BnB) affinity group at Stack Overflow has been leading the creation of short and long term plans for our response to these issues. You can read more about that here, and you can listen to Ian Allen and Syeeda Briddell, Stack employees and co-chairs of our BnB group, who recently came onto the Stack Overflow podcast to discuss these issues. Looking to the future, I would like to detail some of the plans we have for building on our recent growth and for putting our new funding to work. Our vision for Stack Overflow for Teams is to create the world’s most powerful product for asynchronous collaboration and knowledge sharing. The foundational approach Stack Overflow built for our public sites that has served our community for over the past decade has proven to be just as effective when deployed inside of enterprises and companies large and small. Stack Overflow for Teams is a powerful alternative to traditional approaches to documentation and Wikis, a more organic and democratic approach to organizing and sharing the information and experience that exists inside your co-workers’ minds. The feedback users get from earning reputation and badges creates a flywheel effect, encouraging fresh content creation and effective moderation by incentivizing users to level up and earn expanded privileges when they contribute knowledge and curation to the system. With so many organizations today focused on digital transformation and business continuity, the ability to quickly organize information, connect questions and answers and to collaborate on solutions is becoming increasingly valuable. Video calls via Zoom and Google Meet, emails, and chat apps like Slack and Microsoft Teams are now our primary means of communicating synchronously inside of information and technology companies. These trends were already in place when I joined Stack Overflow as CEO in October of 2019, but they have accelerated dramatically during the shutdowns and quarantine that have rippled across the globe. We believe it’s going to be critical for companies and enterprises to leverage asynchronous collaboration products like Stack Overflow for Teams to improve productivity and minimize distraction. We will continue to focus on making the product an even more indispensable part of the developer and technologist workflow while working cohesively with the above synchronous collaboration tools. The vitality and variety of our products is a reflection of the health and breadth of our community. It’s inspiring to see the diversity of thought and technical knowledge being shared on our network — knowledge that is foundational to the world’s next generation of software applications. The more our community succeeds, the easier it will be for us to scale Stack Overflow the company. As we grow, we can hire and invest in the products and people our community needs to thrive. Neither side can prosper without the other. My commitment today is to continue down the path of transparency and accountability with our community, so that they can continue to scale Stack Overflow and our Exchanges, and we can continue to grow our business, a relationship that allows for greater collaboration and knowledge sharing across companies and communities that span the globe. Tags: announcements, ceo quarterly post, community, company, funding, mission, product"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/05/07/the-way-forward/","date":"2020-05-06T22:00:00.000Z","tags":["Company"],"title":"A message from our CEO: The Way Forward","text":"Three months ago, I wrote a message to our Stack Overflow customers and community, the first of what will be regular, quarterly posts. At the time, I reflected on the fact that we were entering a new decade, a period where tremendous technological forces are reshaping the world. Since then, we have entered a new era, and societies in every corner of the globe face a historic challenge. We are reminded that for all of our advances as a civilization, nature can be a powerful force which we must adapt and innovate around. Every Friday, since I started in October 2019, I’ve sent the company an email and brief “Fireside Chat” video with my observations on the week and our progress as we transform into a leading SaaS company. Since we went fully remote in early March, these company-wide communications have provided updates on how we are navigating the COVID-19 pandemic. Below are some of the thoughts I shared: This is a key moment in our company’s history, as the whole world is dealing with significant uncertainty. Know that you are not alone. We are facing this situation together. Reflect on other challenging times as it relates to your life and how it ultimately passed and made you into who you are as a person today. I’m confident that with your help and daily leadership, we will figure it out, solve the various problems in front of us with an agile and growth mindset, and WE WILL come out of this crisis as a stronger company. My ask is that you stay focused on living our core values and actively connect with your team, our community, and customers. I want to share the same sentiment with our community, our customers, and the millions of developers and technologists who visit our network from around the world: Let’s all continue to take care of each other. Since late February, our newly formed leadership team has met three times a week in COVID-19 related standups. In these meetings, we ensure that we are evaluating all available data, problem solving with an agile approach, and making timely decisions on a variety of topics. We cover everything from the health and safety of our employees to how we can best support our community given our remote DNA, to how to best serve our customers with our SaaS collaboration products. This has been a tough week at Stack Overflow, and taking care of each other is more important than ever right now. Like companies large and small, we have had to make difficult choices in order to reflect the market conditions. This week, we reduced our global workforce by approximately 15%. Most of the affected employees were furloughed, except for employees and contractors in regions where furloughs were unfortunately not an option. These actions primarily affected sales and customer success teams within our Talent business, which is dependent on the hiring environment. We made these decisions with great care and only after assessing and leveraging all other options. We’ve paused all non-critical hiring, suspended our travel budget for all of Q2 and Q3, and cut marketing and software costs significantly. Reducing our headcount was a painful but necessary decision, of no fault of the employees affected, and one that I take full accountability for as the CEO. We did this in order to ensure that we can serve our customers and community in the long-run. Despite the impact to our Talent business, we are seeing significant growth in our core SaaS business, Stack Overflow for Teams, and our Advertising business. Our Stack Overflow for Teams collaboration SaaS business is seeing strong interest from enterprises and mid-market companies to raise their remote and distributed team preparedness via collaboration and knowledge sharing software. Our Advertising business continues to show strength. As the 41st most visited website in the word, we attract over 120 million unique visitors every month, and companies want to showcase developer and technologist-centric products in an era when technology is top of mind. So our priority moving forward is to rapidly accelerate the growth of these businesses in order to welcome our colleagues back as soon as possible, and in order to help developers, technologists and teams around the world achieve new levels of collaboration and knowledge sharing. I heard some wise words recently: with a crisis like this, you can’t go around the problem, you have to go through it. As a new leadership team and rapidly transforming organization, it’s been inspiring to see us come together in a very challenging time and be highly transparent in our approach to move the organization forward. Given that, I want to focus a bit on what we are doing, as a company and community, to respond to the COVID-19 pandemic. Core Values, Mission, and Vision With COVID-19 now a world-wide pandemic, it’s a moment in our history where humanity will step up yet again and come out stronger. Our newly defined core values have allowed our company to stay grounded as we navigate these challenging times. Adopt a customer first mindsetBe flexible and inclusiveBe transparentEmpower people to deliver outstanding resultsKeep community at our center Learn, share, and grow Our mission of helping write the script of the future—by serving developers and all technologists—guides all our initiatives across the company and is so critical during this pivotal time in history. The community of users across the entire network of Stack Exchange sites, and the content that they author and curate, serve as the foundation for all of our products and highlight the importance of having active and engaged users on a platform that encourages easier and more comprehensive knowledge sharing and collaboration. Companies and organizations around the world are rapidly accelerating their own digital transformation journeys and Stack Overflow is at the heart of that transformation. We’re humbled to play a meaningful part in that transformation as we help solve the most difficult technology problems through our ecosystem of technical communities and SaaS collaboration and knowledge sharing products. Community While commuting and socializing has dipped in recent months, traffic to a number of our Stack Exchange sites has surged during this period, a reflection of people’s need for great answers to pressing questions. Beyond Stack Overflow and our technical Stack Exchange websites like DevOps, ServerFault (for SysAdmin and Cloud-related topics), Software Engineering, some of our other Stack Exchange websites are growing for obvious reasons. Our Biology and Medical Science sites have seen a wave of interest as people seek to understand the nature of viruses and what we can do to stop them. And there has been a massive jump in traffic on Meta Academia, up 245%, as students and teachers work to navigate this new world of remote learning It’s also a testament to the Academia community, which responded by putting together an amazing list of resources for people whose academic workflow has been disrupted by COVID-19. We are seeing similar efforts across numerous Stack Exchanges, as digital communities that have existed for years—or in some cases, over a decade—come together in this moment of crisis. As these groups discussed how to tackle the new challenges facing employees, families, individuals, and organizations, they created a new chat room where users from across the Stack Exchange Network can come to to discuss issues or emotions related to the ongoing crisis. In addition, we have worked on initial experiments aimed at adding potential content sharing and integration between Stack Overflow and other technical sites on the network, to reflect the converging technology environment as it relates to full-stack engineering, Cloud, and DevOps. Along with the surge in traffic to our sites, we have also seen an encouraging lift in new users signing up for accounts. You can see the spike and continued lift that has been happening in 2020. Product Despite our focus on navigating COVID-19, I do want to use this quarterly letter to highlight a number of positive, notable product releases we made during the first quarter of 2020. These are the building blocks that will help our company, community, and customers to weather this storm and to rebuild when it passes. As many regions around the globe have asked citizens to shelter at home and companies focus on business continuity, there has been a huge spike in demand for collaboration and remote work tools—both synchronous and asynchronous. We have seen this change reflected in a spike in demand for Stack Overflow for Teams, our leading asynchronous collaboration and knowledge sharing SaaS product. As a highly-remote company, we have been using Stack Overflow for Teams at Stack Overflow for many years—to rapidly launch new products and features by breaking down silos across Product, Engineering, Sales, and Marketing. March was our best month ever for Stack Overflow for Teams deal volume in the history of the four year old product, with growth hitting 188% of our goal and with major enterprises joining the fold. This week, we signed a landmark multi-year Stack Overflow for Teams customer agreement, the largest commercial agreement in the history of our 12 year old company, with one of the world’s largest financial institutions to enable collaboration and knowledge sharing across 30,000 users in their global enterprise. We have heard from many customers that Stack Overflow for Teams has become a critical asynchronous collaboration tool for their companies as they shifted their workforce entirely remote during this pandemic. “Having a well-run online community where Unqork no-code software creators can share knowledge and seek out expert advice is critical to our growth and success. We’re finding the Stack Overflow for Teams platform particularly valuable with the current remote work environment,” said Olga Gomonova, Unqork’s Head of Client Enablement. “Stack Overflow has helped make it even easier to create applications without code, and our Stack Overflow community has become an important part of our enablement and employee onboarding processes, as well as our overall knowledge management strategy.” We also made the basic tier of Stack Overflow for Teams free until at least the middle of this summer. It was the right thing to do for big and mid-sized companies that are struggling to go remote and for companies of every size facing business continuity challenges. Within the hundreds of companies that are leveraging extended trials of Stack Overflow for Teams, we were especially excited and encouraged by the hospitals and healthcare and telemedicine companies that signed-up. With so many new customers of all kinds, one of the key things we want to do is make sure that the products we are building integrate seamlessly with developers’ and technologists’ existing workflow to ensure high levels of productivity. In the first quarter, we announced new integrations with Github, Jira, and Microsoft Teams. On the public platform side, we have made a number of important updates. We released a beta version of a feature that will give users more control of what they experience on our network by allowing them to report ads they don’t like, and we launched version 2.0 of our Unfriendly Robot which automatically flags unwelcoming comments. We made it possible for users to follow questions and answers that they did not author, giving folks an easy way to stay up to date with changes to posts that they are interested in. We are excited to share plans for a long-awaited overhaul to review queues. And we shipped the first in a series of changes to the “close question” experience that we hope will make life easier for moderators and more pleasant for users. Teresa Dietrich, our Chief Product Officer, published the Q2 edition of our public community roadmap. A few highlights: We have finished the process of creating the first Pro Tempore Moderator Council. We plan to update the Moderator Reinstatement policy in May to potentially include the Moderator Council’s proposed involvement in the process. Our Community Managers have been hard at work creating content for moderator training which we have shared for feedback on the Mods Teams instance. The plan is to incorporate the feedback and then select and implement a platform for delivery of the training, which should launch in May. In June, we plan on running a Community@thon event that will encourage and provide guidance for all Stack Overflow employees (of all experience levels on the network) to spend time using our sites, posting content, and interacting with the Community. And of course, when it comes to changes to our Stack Overflow public site, we introduced a feature that has long been among our most requested, the ability to view Stack Overflow in dark mode. This feature has proved incredibly popular, delivering our best month of blog traffic ever, and led to a significant boost in the number of people signing up for new Stack Overflow accounts. Along with our roadmap, we have had in-person meetings with several veteran moderators and learned a lot. We recently had a pair of moderators on the podcast to share what they are seeing in their community. We hope to continue this kind of positive dialogue with our community. During this trying time, we have seen record traffic to our blog and podcast, and we have doubled the number of podcasts and newsletters released each week to try and share important information and stay in touch with current events as the crisis continues. Later this month we will launch the results of our 2020 Stack Overflow Developer Survey. Thank you to over 65,000 people who took this year’s survey; I know you’re anxious to dig into the findings. COVID-19 Partnerships We recently announced that Stack Overflow is forging new partnerships to help tackle the COVID-19 crisis. We are supporting IBM by helping to promote and judge their annual Call For Code, a hackathon which will work to build tools for citizens, companies, and government agencies. We have also featured IBM staffers on our podcast and in our newsletter who are working to help educate coders in COBOL, a 60-year-old programming language that is now in high demand from government agencies trying to meet unprecedented demand for unemployment insurance. We are partnering with the World Health Organization (WHO) to highlight some of their soon-to-launch COVID-19 technologies and platforms within our blog, newsletter, and podcast. We are also continuing to create content that is useful for anyone looking for work right now. Whether it’s a guide for learning to work asynchronously, handling remote interviews, or a list of companies that offer free online training and certification. We’re sharing that content with individuals and organizations who are going through tough times, and partnering with organizations like Pursuit to share best practices for new and recent coders on finding work during this difficult time. Moving Forward It has been nearly two months since New York City, where Stack Overflow is headquartered, mandated shelter-in-place. Since then, so much has changed, so many have suffered, and so many have shown incredible courage and selflessness in battling COVID-19 and to save the lives of those infected. We are beginning to see glimmers of hope. Countries and cities that were badly impacted have started to flatten the curve. Scientists and researchers are pushing vaccines into early trials, tests that can be done rapidly and at scale are going into production, and companies large and small are finding ways to adapt to this new way of working. The COVID-19 pandemic is a reminder that we are all connected as inhabitants of this planet and that human nature is to persevere in the face of even the most extreme adversity. I want to thank our employees who have demonstrated tremendous initiative, collaborated, and worked tirelessly to support and serve our customers and community through this difficult time. I know that the road ahead will continue to be hard for many, but I feel confident that humanity will recover. We will use technology to break down barriers, come closer together, and find better days ahead. I’m optimistic because I’ve seen every day that we are stronger as a global community than we are as individuals, and that we all have the capacity to adapt and move forward. I believe this moment will ultimately teach us that we are resilient, together. We appreciate hearing your thoughts and feedback in the comments below. Update 5/12: A mention of Academia was changed to Meta Academia, where the surge in traffic occurred, and a Y-axis was added to daily signup chart for further clarity. Tags: announcements, company, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/04/29/more-than-qa-how-the-stack-overflow-team-uses-stack-overflow-for-teams/","date":"2020-04-28T22:00:00.000Z","tags":["Company"],"title":"More than Q&A: How the Stack Overflow team uses Stack Overflow for Teams","text":"The majority of companies are now working remotely and asynchronous collaboration is more important than ever. Companies around the globe use Stack Overflow for Teams to do just that (including those that newly adopted the platform since we made it free through June 2020). But only one company has been using Teams since its inception: us. Here’s a look at how Teams came to be, and how our whole company leverages the tool to collaborate, share and retain knowledge, and succeed in a 100% remote environment. Stack Overflow was founded 11 years ago to help professional programmers find answers to their coding questions for free. This spawned a network of 170+ communities across a wide range of topics. Over the years, we developed tools and systems to help these communities grow and thrive, to incentivize collaborative behavior and ensure the knowledge is captured and easily found – regardless of when or where someone needed it. Once we built out this platform, we realized it could be a useful tool for companies to enable knowledge retention and sharing, foster internal communities, and streamline collaboration. Customers like Bloomberg and Microsoft, who were long time advertising and recruiting customers of ours, were the first to see the value of bringing a tool like this into their company. A few years ago, we formalized this idea by launching an Enterprise version of Stack Overflow for Teams. We refined the product into different tiers to meet the needs of companies of all types – Enterprise is for those who need configurability and scale or have serious security compliance needs; Business is for those who need SSO capabilities and invoicing; Basic is for those who are growing and don’t yet need advanced administrative or security features. Today, over 1,500 organizations of all sizes use Stack Overflow for Teams. Some companies use Teams for their engineering organization while others have product teams, marketing teams, and more on the platform. Nearly every employee at Stack Overflow uses Teams, and here’s how. Five ways our whole company uses Stack Overflow for Teams In day-to-day workflows: Get answers faster. It’s the ultimate proof of concept when our Teams instance helps our employees support our customers more efficiently. Jedd Marcus, a Sales Executive on our Enterprise team, told us of a time when a question around an integration with a customer’s homegrown identity provider (IDP) solution came up. “I asked the question on our internal Stack Overflow for Teams instance. Within 15 minutes, I had the answer from our Solutions Engineering team and was able to follow-up quickly with the client.” Marcus stressed that his first impulse had been to ask a manager. But they would have been a bottleneck, and with back to back meetings, Jedd would have waited a day for the reply. Through sales onboarding and beyond: Continuously share knowledge on the team. We build out questions that contain all the information that someone would need to get up-to-speed. The Product Marketing team, which is responsible for sales enablement, relies heavily on Teams to communicate information with sales team members. “We have a training kit that contains links to documents, decks, and videos that cover everything from simple product knowledge to more advanced legal contract training,” says Joy Cicman Liuzzo, Director of Product Marketing. Conversations with prospects, especially in a complex sales environment like we’re in now, require dynamic resources that speak to highly-specific concerns. So the sales organization at Stack Overflow uses questions and tags to build a library of useful resources, like studies and research, to stay up on trends and provide the best insights. Kevin Montrose runs our Data team and shifted request submissions to Teams early on. “We moved requests, reports, and the scheduling thereof from mailing lists and Slack to our Teams instance. It’s made it easier to collaborate with non-engineering teams, produced more durable and discoverable artifacts, and made it easier to measure our impact.” Vasudha Swaminathan, Director, Product Management Teams, pointed out that it makes it easier to track, respond, and update information. And the ultimate benefit for the person answering a request: “It’s transparent, searchable, and you only need to answer a question once!” During explorations: Get stakeholder input across departments Instead of sending our colleagues yet another email, Teams lets us run internal campaigns to socialize changes or get stakeholders and experts involved in a project. When engineer Max Horstmann’s team recently rebuilt the internal product fulfillment API from scratch, they proactively fed bite-sized information into the platform. “We started with basics like ‘Why are we rebuilding our fulfillment API?’” Horstmann told us. “Relevant experts across product and engineering started chiming in, asking for more details and posting their follow-up questions. Some of the conversations in comments also revealed hidden obstacles, which then could get addressed early on.” Horstmann said. Rolling out the new API was anticlimactic and uneventful, just as everyone had hoped. Early knowledge sharing and collaboration was key to our success. Source and cascade customer stories: Voice of the Customer. Liuzzo, our Product Marketing leader, tells us about another time we used Teams as a transparent way of sourcing input. “Collecting input from teammates who were speaking to customers every day was a challenge.” Customer requests or feedback would be shared over email, Slack, or in our support portal. But this was a black box for the frontline teammates. Their feedback disappeared without any indication that it got passed on or was being acted on. “So we standardize the process with templates for submissions. All of it lives on Stack Overflow for Teams, so it’s transparent to everyone in the organization.” Full circle: Evolving the Teams product with feedback through Teams. The team working on Stack Overflow for Teams is geographically spread out, so Product Leader Swaminathan says collaboration and knowledge sharing are essential. She appreciates the luxury of working on a team that doesn’t need any nudging to test its own product: “Stack Overflow for Teams continues to sit right at the center of all of it and has truly made a difference to how we operate and disseminate information.” New features get beta testers at Stack Overflow excited. “It has become such a natural part of our way of work, that the minute we release new beta features to test, we get almost instant feedback without any prompting!” Want more tips and tricks for asynchronous collaboration and communication? Tune in to a live webinar on Tuesday, May 5 at 2pm EDT for a discussion on the full tech stack our company uses to collaborate and thrive in a remote environment. Tags: bulletin, stack overflow for teams, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/04/08/q2-community-roadmap/","date":"2020-04-07T22:00:00.000Z","tags":["Company"],"title":"Q2 Community Roadmap","text":"Back in February, we shared our Q1 Community Roadmap with you. In that post, we described our four roadmap themes which will continue throughout the year. In our commitment to provide transparency, we will continue to share our roadmaps each quarter. So without further ado, here is our Q2 Community Roadmap: Q2 2020 April May June Understand community Publish feedback matrix Site Satisfaction Survey Q2 Community @thon Engage with community Convene pro-tem moderator council CC license round 2 Update moderator reinstatement Training launch Suicide prevention Moderator Town Halls Improve community feedback metrics Collect new user feedback Increase User Engagement Dark Mode (beta) & Ultra Dark Mode Email drip campaign Review queue phase 2 updates Understand community This month, we built out our Community Feedback Matrix to help us evaluate all the types of users and types of feedback that we collect. We will be sharing this in our April The Loop post. In May, our quarterly Site Satisfaction Survey will go out to some of our users. In June, we are planning a Community@athon event within our company to encourage employees to interact with our network and communities more. Our goal is to ensure that we have balanced, consistent feedback from across the different segments of our community and that we continue to improve community interactions and understanding throughout the company. Engage with community While we had hoped to have our new version of the Moderator Agreement ready to go in March, between the impact of the current Covid-19 crisis and our desire to get it right, this release has been delayed. We have had multiple rounds of feedback from internal stakeholders and a group of moderators, and we will be sharing it with the larger moderator community this month. Currently, we are soliciting nominations for the Pro-Tem Moderator Council and will shortly move into the selection process. The members and their initial responsibilities will be announced by the end of April. We will plan to update the Moderator Reinstatement policy in May to include the Moderator Council’s proposed involvement in the process. Our Community Managers have been hard at work creating content for Moderator training which we have shared for feedback on the Mods Teams instance. The plan is to incorporate the feedback and then select and implement a platform for delivery of the training, which should launch in May. In June, we plan to start a series of moderator town halls to create additional opportunities for our moderators to meet with CMs and other staff in a casual way to talk about specific issues or get to know each other better. Sometimes our moderators will come across content by a user where something is shared that indicates that the user may be considering taking their own life. As you can imagine, these are some of the hardest moments for anyone to encounter. Our moderator team desires to show compassion and care, and this quarter, we’re going to set aside some time to work with organizations that specialize in these interactions. Our goal is to provide a mix of tools, support, and education to ensure that the moderators have the proper guidance and options to hand these situations off to lessen the burden on their shoulders. Improve community feedback metrics Through the development of the Community Feedback Matrix, we realized that we are not sufficiently collecting feedback from new users to our sites. In May, we plan to implement a process to solicit feedback from new users to better understand their pain points and needs. This feedback will be incorporated along with the rest of our qualitative and quantitative feedback to build our roadmap, features, and programs for the future. Increase user engagement Due to the global Covid-19 crisis, we chose not to launch our normal April Fool’s Day prank on our users. We did launch our Beta version of Dark Mode and made what would have been our prank, Ultra Dark Mode, that was available for users for a limited time. Dark mode has been our most asked for feature for years, and we were so excited to share it with you all. We had to push the launch of a series of educational email campaigns for new users, non-active users, question askers, and question answerers due to a technical integration bug on the vendor side for which we are still waiting for resolution. These series will be designed to take a proactive approach in providing guidance and support for all users at various stages. In June, we plan to begin work on a series of backend and UX updates to review queues to improve the user experience for our curators in addition to backend improvements that will help us make updates more easily in the future. You will also see test improvements to the question close experience and iterations on the recently shipped Question & Answer Follow feature. We are sharing our roadmap to create transparency with our users. As with any product development, unanticipated complications may cause our dates to slip on occasion, but we are committed to delivering these initiatives and features to you as soon as we can. We are happy to hear your thoughts and feedback on MSE. Tags: announcements, company, roadmap, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/03/30/introducing-dark-mode-for-stack-overflow/","date":"2020-03-29T22:00:00.000Z","tags":["Community"],"title":"Introducing Dark Mode (beta) for Stack Overflow","text":"Ed. note: Dark mode is officially out of beta! Thanks for everyone’s feedback. Update: Check out our article on how we made dark mode a reality. For many years now, people have been asking us for the option to view Stack Overflow in dark mode. We know from user surveys that lots of developers visit our site multiple times a week and folks working their way through a tricky coding problem sometimes have a Stack Overflow window open all day next to their IDE. In fact, a request for Dark Mode is the 12th most upvoted question on Stack Overflow’s Meta community (out of 41,785 questions) and the #1 most upvoted on Feature Request overall. There are a lot of challenges to implementing dark mode across a platform like ours. We are among the 40 largest websites in the world in terms of monthly unique visitors. We also have hundreds of communities with different design aesthetics. On top of our public Q&A platform, we also have our developer profiles, job listings, product pages, and many other surfaces. Despite the challenges, this opportunity was too big to be ignored. Today, we are proud to announce the release of Dark Mode in beta for Stack Overflow. We want to share it with our community, especially our power users, and gather feedback so we can improve, iterate, and expand Dark Mode in the future. You can opt-in Dark Mode through your user preferences. You must be logged into your Stack Overflow account to get this option. For now, we have no plans to bring dark mode to the many sites across the Stack Exchange network. Many of the designs on our sites have been around long enough that converting them to dark mode would require redoing the artwork completely. We would prefer to avoid giving anyone across our network a substandard experience and we don’t want to change those elements without the input of these communities. Tomorrow, we will publish a blog post from Aaron Shekey, our design systems lead, detailing the process behind the creation of this new feature. And if you really, really like dark mode, stick around. We have something to share on Wednesday as well… Ed note: If you’d like to provide feedback, please see this Meta question. Tags: announcements, dark mode, new features, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/03/24/report-this-ad-beta-provides-more-control-over-your-advertising-experience/","date":"2020-03-23T23:00:00.000Z","tags":["Ads"],"title":"Report this Ad [beta] provides more control over your advertising experience","text":"Editor’s note: You can discuss this post on Meta. Last month, we shared our first quarter 2020 community roadmap that provides visibility into the themes our work would be based on for the year, as well as what we are working on now. Today, we want to share the release of Report this Ad, a new beta feature that gives you even more control over your advertising experience by allowing you to easily flag an ad on our network. While we enforce strict guidelines on the types of advertisers we work with and the types of ads you see on Stack Overflow and our Stack Exchange sites, Report this Ad will: Provide an easy way to flag an ad that you feel doesn’t meet our guidelines. Click the “Report this Ad” link, select a reason for flagging it, and include a screenshot. Deliver an alert to our advertising product team so we can quickly investigate ads reported by our users.Consolidate all of the advertising feedback from the community. While we won’t reply to individual flags, we will review them, take any necessary action, and use the feedback to evaluate and improve the advertising experience across all of our sites. This new beta feature is now available on Server Fault, Database Administrators, Arqade, Game Development, and Unix & Linux. Look for an updated communication from us when Report this Ad is generally available on Stack Overflow and all of the Stack Exchange sites. Tags: advertising, new features, public Q&A"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/03/11/building-a-jira-integration-for-stack-overflow-for-teams/","date":"2020-03-10T23:00:00.000Z","tags":["Company"],"title":"Building a Jira integration for Stack Overflow for Teams","text":"We just released our integration between Jira and Stack Overflow for Teams. This integration will bring your Stack Overflow questions and answers closer to your Jira workflow by allowing you to find content from your Stack Overflow Team directly within Jira as well as give you unfurled previews of Jira issues right within your Stack Overflow Team. In this post, we take a look behind the scenes and explore how we approached building our Jira app. We’ll discuss some of the challenges, pitfalls, and lessons we learned from building this integration and look at the inner workings of our Jira app. Let’s briefly look at the features of our app to understand its functionality before discussing how we build these things: Show related questions within Jira – When you look at a Jira issue, we’ll search your Team on Stack Overflow for questions that might be relevant to the issue you’re looking at and display these questions in the right sidebar of your issue view: Related questions shown within a Jira issue Unfurl Jira links in Stack Overflow for Teams – When posting a link to a Jira issue, we’ll show an unfurled preview of that issue right within your question or answer: An unfurled preview of a link to a Jira issue in Stack Overflow for Teams Getting the foundations right When we started investigating how to build a Jira app, we found different approaches we could take: Use Jira’s REST APIUse the Atlassian Connect framework Jira’s REST API is pretty extensive and gets you quite far. For our link unfurling feature, reading from the REST API would have taken care of everything we needed. However, we knew early on that we wanted to extend Jira’s user interface to show related questions from your Stack Overflow Team within Jira issues. Extending Jira’s user interface is something only Atlassian Connect supports, and so we decided to build our app on top of Atlassian Connect. Atlassian Connect is a framework to extend the functionality of Jira and other Atlassian products. It solves some of the tricky challenges like authentication, user interface integration, communication with Jira’s REST API, and event-based collaboration. Using Atlassian Connect, you can host your Jira application anywhere as long as Jira is able to send HTTP calls to it. It doesn’t matter if you build your Jira app as a dedicated app or as part of a bigger application. You can host it in a datacenter, on serverless functions, or on a bunch of Raspberry Pis glued to your desk. We built the Jira integration as part of our core Stack Overflow application. This is the application powering Stack Overflow’s public Q&A as well as our private Stack Overflow for Teams offering. At the foundation of every Atlassian Connect-based Jira app is the app descriptor, a JSON document defining things like: The name and description of your appThe app’s permissionsWebhook listenersUser Interface extensions This app descriptor needs to be hosted by your application so that Jira Cloud can find it. This is what Stack Overflow’s app descriptor looks like: { \"name\": \"Stack Overflow for Teams\", \"description\": \"Integrate with your Stack Overflow Teams\", \"key\": \"com.stackoverflow.teams\", \"baseUrl\": \"https://stackoverflow.com/\", \"vendor\": { \"name\": \"Stack Overflow, Inc.\", \"url\": \"https://stackoverflow.com\" }, \"authentication\": { \"type\": \"jwt\" }, \"lifecycle\": { \"installed\": \"integrations/jira/installed\", \"uninstalled\": \"integrations/jira/uninstalled\" }, \"modules\": { \"postInstallPage\": { \"url\": \"integrations/embedded/jira/post-install\", \"key\": \"post-install-page\", \"name\": { \"value\": \"Stack Overflow for Teams - Get started\" } }, \"jiraIssueGlances\": [ { \"icon\": { \"width\": 48, \"height\": 48, \"url\": \"https://cdn.sstatic.net/Sites/stackoverflow/img/icon-48.png?v=b7e36f88ff92\" }, \"content\": { \"type\": \"label\", \"label\": { \"value\": \"Similar questions\" } }, \"target\": { \"type\": \"web_panel\", \"url\": \"integrations/embedded/jira/search-glance\" }, \"name\": { \"value\": \"Stack Overflow for Teams\" }, \"key\": \"so-issue-glance\" } ] }, \"scopes\": [ \"READ\" ] } Whenever a user installs or uninstalls our application, Atlassian Connect sends a request to the respective callback URLs we define in our app descriptor. The payload of this request contains some information we need to identify your Jira instance and to ensure that future incoming requests are trustworthy. Extending Jira’s user interface is a matter of declaring `modules` within the app descriptor. Each module includes a URL and a description of where the user interface element should be located within Jira. This way, Jira can simply include the HTML views rendered by the URLs we defined in an iframe to allow us to flexibly extend Jira’s user interface. App installation The first thing we built for our Jira app was the app’s installation process. As this is fundamental for everything our app does, this is a natural starting point. From building previous integrations, we’ve learned that spending a lot of attention and care on the installation process will pay off early on. Getting this foundation right makes building more features on top far easier. Installing the Stack Overflow for Teams app in Jira is a two step process. First you need to install the app in Jira, then you need to connect the app to your Stack Overflow Team. After you’ve installed the app from Atlassian’s marketplace, Jira doesn’t know which Team on Stack Overflow it should connect to, and your Team doesn’t know about it’s association with Jira. So we had to build a way to establish this connection. Whenever someone installs the Jira app, Jira will send us a notification via the `installed` webhook we registered in the app descriptor. This request will include the `SecurityContext`,an identifier for your Jira instance along with some other information used for secure communication later on.We take the `SecurityContext` and cache it in Redis for a while. After that, our Jira app will show you a prompt to Get Started with the Stack Overflow for Teams app. On this screen, we explain that you’ll need to connect your Jira Cloud instance to a Team on Stack Overflow. We take you over to a connect page on stackoverflow.com and let Jira pass a valid and signed JWT to our site. The connect page lets you connect Jira to one of your Stack Overflow Teams Once you are on stackoverflow.com, we read the JWT and try to match it to one of the `SecurityContext` objects we cached in Redis. If we find a matching one, we can be certain that there was an installation initiated in your Jira instance and you can continue connecting one of your Stack Overflow Teams to your Jira instance. Clicking the Connect button will take the Jira `SecurityContext` we had cached in Redis before and store it in your Team’s SQL Server database. This way, the information we need in order to talk securely between Jira and your Stack Overflow Team will be persistently stored within your Team’s database. The sequence of installing the Stack Overflow Jira app Whenever we receive an incoming request from Jira in the future, we’ll grab the JWT from the request’s `Authorization` header and verify that it has been signed with the shared secret we stored in your Team’s `SecurityContext`. If this is the case, we can be certain that the incoming request is trustworthy, and we can continue rendering our HTML views in Jira via an iframe. When we’re sending a request to Jira’s REST API, we will fetch your Team’s `SecurityContext` and generate a valid and signed JWT that we attach to the outgoing request. Jira will do the same verification process on their end. With this mechanism in place both parties can make sure to only ever respond to requests coming from a trusted source. Search your Team from within Jira To show related questions from your Stack Overflow Team within a Jira issue, we had to build an endpoint that receives a search query, searches your team’s instance, and returns an HTML view with questions from your team that match this query. We would then let Jira display this HTML view in an iframe as part of the issue Glance. Building an endpoint that returns an HTML view is our bread and butter when building a web application like Stack Overflow. We could pass the search query via a query parameter and then run a search against your Team’s ElasticSearch index to find questions that match the given query. Telling Jira to render our HTML view in the issue sidebar was as easy as providing the URL of our new view in the app descriptor. This would make Jira take the given URL and render it in an iframe at the desired user interface location. There was one obstacle building this feature. When Jira is resolving our HTML view, we cannot make it pass any data as part of the request. The naive approach of letting Jira pass a search query as a query parameter wouldn’t work, unfortunately. To bypass this limitation, we came up with a two-step approach. When Jira embeds our view in an iframe, we would render a placeholder HTML view that embeds some JavaScript. When this HTML view is rendered in an iframe in Jira’s issue view, the JavaScript will fetch additional information about the issue we’re looking at using Jira’s REST API, build a search query, and send an AJAX request back to Stack Overflow with that search query. When the AJAX request returns successfully, it will take the response body — a list of matching questions rendered as HTML — and insert it into the placeholder HTML view. Unfurling Jira links Another main feature of the Jira integration is that your Teams instance will show you an unfurled preview of your Jira issues. After you’ve activated the Jira integration for your Team, you can post a raw issue URL on a single line within a question or answer and Stack Overflow for Teams will unfurl this link for you and everyone who’s viewing this question. To make unfurling work, we detect links on a single line when you’re writing a question or answer. We match links on a single line against a set of matchers to see if a given link is something we can unfurl. At the moment, we don’t support unfurling arbitrary links; only certain sources, like Jira or GitHub. When you’ve installed the Jira integration for your Stack Overflow Team, we’ll save the base URL of your Jira instance as part of the installation process. Using this information we can detect if a given link is to an issue on your Jira instance and try to unfurl it. We parse the link to your Jira instance and try to find an `issue key` within the link URL. An issue key is a unique identifier for issues within a Jira instance. You might have seen those, they usually look like this: STACK-247. If we’ve found an issue key, we have everything we need to make the unfurling magic happen. We take the issue key and send it over to Jira’s REST API to fetch some details for this issue. Once more, we’ll generate a proper JWT and attach it to the request to handle authentication properly. Once we receive a response from Jira that includes the issue’s details, we can then generate an HTML representation of the unfurled link and show it as part of a question or answer. Takeaway Using Atlassian Connect, we were able to build a Jira integration that goes beyond the limits of interacting with a third-party service via a REST API. UI integration via iframes doesn’t come without headache as you’ll easily run into issues around cross-origin communication. Once we had solved these issues, Atlassian Connect’s building blocks of extending Jira’s UI, consuming their REST API and listening to events based on webhooks allowed us to put together an integration that seamlessly integrates Jira and Stack Overflow for Teams. Tags: bulletin, integrations, jira, stack overflow for teams, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/03/09/a-message-to-our-employees-community-and-customers-on-covid-19/","date":"2020-03-08T23:00:00.000Z","tags":["Company"],"title":"A Message to our Employees, Community, and Customers on Covid-19","text":"As we work as a community to prepare for the impact of COVID-19, I wanted to share how Stack Overflow is addressing the current situation and the proactive steps we are taking to minimize any negative repercussions to the realization of our mission. The safety of our employees, community, and customers are our primary concern. There are a number of measures we’re taking to ensure we manage to safely get through this situation while continuing to serve our community and customers effectively. For our employees across our three main offices in New York, London, and Munich, we’ve asked them to begin working from home starting today, March 9th, and we have asked all employees to curtail non-essential travel for the time being. Stack Overflow was born remotely. It began as a discussion across blogs and a podcast conducted on Skype. We’ve had employees working across continents for over a decade. Today, roughly one third of our employees work in locations where we don’t have a large team or physical office. What that means is that for Stackers, much of our day to day work on Slack, GitHub, Stack Overflow for Teams, Google Docs, and other collaboration tools will be conducted as normal. We can continue to push projects forward and be in constant contact with one another. But we recognize that not everyone has the ability to work remotely. For our staff whose work involves maintaining our offices and preparing meals, we will continue to pay and support them, and they will devote this time at home to online professional development. For our customers, we are committed to keeping our services up and running. As many of you shift to more remote work, we hope our SaaS product— – Stack Overflow for Teams, will be a valuable tool to share knowledge, find information, and collaborate effectively while remaining safely at home. To our community, please know that our community managers will be available if there are issues you want to discuss or challenges that arise. Let’s all work together to ensure the information and discussion across our Stack Exchange network is based on facts and science. These are challenging and sometimes frightening times, but we feel confident that as a company and community, we can get through this together. Tags: announcements, covid-19, remote work, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/03/03/critical-tools-united-for-a-better-developer-workflow/","date":"2020-03-02T23:00:00.000Z","tags":["Company"],"title":"Critical tools united for a better developer workflow","text":"Thousands of you, developers and technologists around the world, work at organizations that use Stack Overflow for Teams to collaborate, harness knowledge, and share information. (And if you don’t, why not? You can try it for free!) Our Teams product was built in response to companies like Microsoft, Zapier, and Bloomberg asking for a way to give their technical teams a platform to share information that doesn’t get lost in email, chat threads, or wikis. When I joined Stack Overflow earlier this year, I joined an organization that is passionate about streamlining and improving the developer workflow. Hence the focus on bringing key integrations to Stack Overflow for Teams like Okta, Microsoft Teams, and Slack. Today, I’m happy to announce that we’re integrating Teams with two more critical tools in the modern workflow: Jira and GitHub. Stack Overflow for Teams is the central source of truth for tech knowledge within an organization. By integrating with key tools, teams are able to find answers regardless of where the information lives. By creating a centralized knowledge management ecosystem, companies are able to build a natural and sustainable culture of transparency, encouraging collaboration by improving access to information. GitHub and Jira just made sense to bring on board as we work to help developers avoid context switching and get stuff done. We look forward to enhancing our current integrations and providing more ways for teams to collaborate, share knowledge, and find information when it’s needed most. If you haven’t already, check out Stack Overflow for Teams and our integrations with Microsoft Teams, Jira, Slack, Okta, and GitHub. Tags: announcements, integrations, jira, stack overflow for teams, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/02/25/sharing-our-first-quarter-2020-community-roadmap/","date":"2020-02-24T23:00:00.000Z","tags":["Community"],"title":"Sharing our first quarter 2020 community roadmap","text":"Editor’s note: You can discuss this post on Meta here: https://meta.stackexchange.com/questions/344178/the-q1-2020-community-roadmap-is-on-the-blog/344209 As we work to improve our relationship and communications with our users, we want to share with you our community roadmap each quarter, so once every three months. Even though we are halfway through this quarter, we wanted to share with you what we are working on currently. In March, we will share our roadmap for the second quarter so that you can see what is coming. After talks with employees, community managers, and community members, we chose four themes for our roadmap this year: Understand our community We will seek to better understand our community and the user segments within it. We will work to identify the pain points and needs of our users and deliver solutions to them through our features and initiatives.By being increasingly transparent, we aim to regain trust with everyone—from brand new users to you, our most dedicated community members. Engage with our community As we better understand our community, we will share these learnings with the teams within the company whose decisions and actions impact you.The employees at our company come from a variety of backgrounds and seek to grow with the community. We commit to helping everyone in the company learn about all of you and the site to empower them to make better decisions.We will develop a community language, segmentation and metrics to educate the company and bring them along on the journey. Improve feedback metrics Our users have shared that they don’t feel heard by Stack Overflow. We will define a dashboard for the various types and methods of feedback and dedicate time to processes and outreach that identify ways we can be serving our users better and facilitating better two-way communications. Increase community engagement Though our active user base continues to grow, our engagement has remained the same. What this means is that while more users are coming to the site every month, the number of users who engage meaningfully in the site does not increase proportionally.To change this dynamic, we will balance investing in improving our tools and features that benefit our long-term users with initiatives that convert new users into engaged ones.We want to build long-term impact for as many of you as we can by providing useful features that deliver value to you. If engagement is not growing with the overall user base, a lower percentage of you are getting value from these interactions each year.Working directly with targeted groups through UX research, we will identify and invest in features and tools that will improve the experience. Understand community In January, we launched our quarterly site satisfaction survey. This month, we launched our annual Developer Survey. Next month, we will be building out our Community Feedback Framework to identify all the various methods and data sources we will use to collect and analyze feedback from our users. Our goal is to ensure that we have balanced, consistent feedback from across the different segments of our community. Engage with community In January, we launched our monthly blog series “The Loop” to share research and feedback insights and methodology. Here you can find January and February’s posts. This month, we updated our privacy policy and shared an update on Meta. This week we will be sharing our commitment to responding on SO Meta, SE Meta, and to our moderators through the publication of our new Meta engagement policy. Next month, we will be launching an internal company newsletter to share community knowledge and updates with our colleagues across the whole company. We will also be working with our moderators on our updated Moderator Agreement in March. Improve community feedback metrics Elements of the improved question asking experience that was shipped to Stack Overflow last year will be rolled out to the international and network sites this week and next. This new UX provides a better question-asking flow that unifies the traditional and guided (“Ask Question Wizard”) modes and works equally well for users of all reputation and experience levels. The goal is to help users write better questions and set expectations once their question is posted. This should positively affect the question asking experience across the network, as well as give us a solid platform for potential future improvements in this area. We are making fundamental changes to how our close question system works so that it’s a friendlier experience and more educational for post authors, while making it easier to edit and reopen closed questions, and reduce the burden on curators. Questions that get voted to be closed will be hidden, giving authors the opportunity to improve their questions in private. Our hope is to make it easier on everyone by providing clearer guidance and encouraging better questions. This project is broken down into a series of improvements that will be rolled out iteratively over the next few months, during which time we’ll be measuring to ensure each change contributes to overall question quality and to improved reopened questions. We are hard at work putting together content for our moderator training and finding the right way to deliver our MVP version. For more details, check out the “Working with and supporting our moderators” section of February’s The Loop. Increase user engagement We are launching a series of educational email campaigns for new users, non-active users, question askers, and question answerers. These series are designed to take a proactive approach in providing guidance and support for all users. Next month we will release our Follow Questions capability (something that has been discussed by the community for years). This feature will allow users to “follow” or “unfollow” questions. You’ll be notified on new activity for questions you follow and have the ability to silence questions you no longer want to be notified about to reduce the noise you receive in your inbox. We are sharing our roadmap to create transparency with our users. As with any product development, unanticipated complications may cause our dates to slip on occasion, but we are committed to delivering these initiatives and features to you as soon as we can. Tags: announcements, community, roadmap"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/02/17/community-working-group-updates-february-2020/","date":"2020-02-16T23:00:00.000Z","tags":["Company"],"title":"Community working group updates: February 2020","text":"Last year, we announced The Loop as a way for us to share more about our product development process. You can see the subsequent updates here and here. In this post, we’d like to talk about some of the initiatives that are happening internally at Stack Overflow aimed at addressing and repairing our relationship with our community. We’ve shared some of the things we are doing in order to better our communication with our community, but we haven’t said much about what’s going on behind the curtain at Stack HQ and around the world. It’s important to us that you know we’re working hard on improvements and to provide you with regular updates, even when we’re not ready to officially “ship” things. Behind the scenes, we’ve established some internal working groups to work on the problems that we’ve identified. We’ve recruited people from many different areas of the company, making sure that we involved the people with the experience and knowledge needed to come up with sustainable solutions to the problems that you’ve helped us identify and prioritize. These problems share the following four common themes: How we work with community stakeholders on MetaHow we work with and support our volunteer moderatorsHow we can more effectively and consistently gather feedback from as many different types of users as possibleHow we can keep you all updated on the progress of these initiatives and other community-related plans Before we dive into that, however, we want to clarify that these groups aren’t formed to make unilateral decisions and “ship” whatever they decide on into the wild. In some cases, the deliverables they have are pretty well-defined (e.g. The Loop blog posts), but in others, the goals are really more about coming up with proposals for new solutions where all of the knowledge, resources, and specialization required to execute comes together in one place. Think of them more as highly-specialized advisory groups than product teams. So with that said, what have we been up to? Setting a course and expectations for Meta We’ve got a broad group of folks looking at the problem of how far out of alignment we’ve become with our meta community. The folks in this group have worked with us for the longest, and many have a long history of working both with and within our meta communities. While we’re aware that meta needs attention at the functionality level, this group’s priority is getting us back into alignment with the community. This project has unearthed a lot of very strong feelings and opinions, both internally and externally. Many in this group have close ties to people in the Meta community and feel strongly that we should be reaching out to them more and making them a bigger part of our decision making. Others have had experiences that cause them to fear the feedback they receive there. Some of them feel like they just can’t succeed in having conversations with our meta community and worry about how they’ll get their jobs done. Opinions and feelings about the best way forward are extremely valid things to consider, but the devil is in the details data, too. We’ve spent a lot of time re-examining how we look at engagement on meta in terms of the ways people participate, and how that correlates to their participation on the main site. Looking at data about meta that’s eluded us until recently (we promise we’re not ever going to call it metadata), it’s clear that our focus there needs a lot of work and better resourcing. We all need to be on the same page about the role that meta plays in decisions, and expectations need to be set and consistently met. We’re close to being done with a plan to move forward and we’ll be sharing it with you soon. The key takeaway for now is that we’ve heard you, and we want to work our way to a place where all of us feel trust and cooperation again. Working with and supporting our moderators There are two teams that are exploring a couple different approaches here. Folks primarily from our community management team have been working on putting together more in-depth training for moderators. The goal of the project is to provide moderators with short courses that dive into issues that they’re likely to face as moderators. From best-practices and guidelines for identifying and handling PII (personally-identifiable information) to conflict management and resolution in online communities, our objective is to set moderators up for success and provide them with a continued path of learning. Completed Discovery & research: consult with active moderators and find out what kind of materials would be most helpful.Discovery on module format, use cases for discovering the availability of training content.Review of our moderator agreement to include updates surrounding our privacy policy, moderator reinstatement process, and clearer wording (currently being reviewed by legal). Upcoming Initial drafts of training modules and proposed moderator agreement shared with all moderators for feedback and discussion. Additionally, in a recent blog post, we mentioned that we are forming a moderator council. We have determined the structure of the council, but are still working out all of the details. We are going to kick off the process soon by creating a pro-tempore council. The moderators on the pro-tempore council will help finalize and shape the permanent council’s structure. They will also help build the lines of the communication with all of the internal teams who are interested in hearing from the moderators across the network. Completed Discovery & research: we’ve gathered a lot of feedback from moderators around the network in large and small group settings. Upcoming Draft charter for council structure and function to be shared with all moderators for feedback and discussion. Gathering diverse feedback We’re putting a good deal of effort into making sure that we gather and analyze feedback in a way that gives us a better understanding of everyone’s perspectives, frustrations, and specific recommendations for improvement. We’re very excited with what we’re learning, even though we’ve got a ton of work left to do. Completed An in-person meeting with one of our Stack Overflow moderators, with many very helpful takeaways. Upcoming Fast coding of free-form responses from all surveys. Problems talk to us with data much faster with more accuracy.Initial discovery for a format to facilitate more face-to-face communication between a diverse group of users and people working on community-facing products across a variety of teams.Initial discovery for a format to hold regular group conversations between folks in our community, product, and senior leadership teams with our community moderators. We want to say a huge thank you to all of you that have participated in our surveys and interviews so far. Your feedback has been extremely valuable and we look forward to being able to interact with many more of you on a more regular basis! Keeping you updated It’s this post! As mentioned before, we are planning to post these updates periodically. In our view, being consistent and dependable in this area is important, so some of these updates might not have a lot of meat to them as some initiatives or projects take time. But we want you to know that these initiatives are on our radar and taken seriously. In Closing So this is a broadly unfiltered look at where we are, directly from behind the curtains at Stack HQ. While we will always share the outcome of the important conversations and debates, we want to include you by letting you know what those conversations are. This is especially true if what we’re discussing is how we listen to and support you. We hope we can continue moving forward here and that 2020 brings some much-needed relief and clarity to our community efforts. Tags: announcements, community, the loop"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2020/01/21/scripting-the-future-of-stack-2020-plans-vision/","date":"2020-01-20T23:00:00.000Z","tags":["Company"],"title":"Scripting the Future of Stack Overflow","text":"As we enter a new decade, there are tremendous forces converging—cloud computing, big data, AI, ML, and an increasingly diverse group of young coders from around the world. Every day, millions of developers visit Stack Overflow to find information they need as they push these exciting new technologies forward. There has been a massive shift since my days as a computer engineering graduate. I was fascinated by the power of languages like Perl, but had only my teachers, classmates, and a few small web forums and mailing lists as a community to support my learning. The numbers below really put into perspective the impact that our community generates and the opportunities that lie ahead: Across Stack Overflow and the Stack Exchange network, we saw around 10 billion page views from 100+ million unique visitors over the course of 2019.In 2019, Stack Overflow added over 2.8 million answers and 2.6 million new questions, with over 1.7 million new users joining the community. There are now over 18 million questions and 27 million answers on Stack Overflow, and over 150,000 people sign up for a Stack Overflow account each month, 12 years after we started.Every day, users answer thousands of questions on topics like cloud technology, container orchestration, and machine learning. There is an ever growing trove of knowledge on Amazon Web Services, Google Cloud Platform, and Microsoft Azure.Our community members and volunteer moderators handled almost two million flags to keep inaccurate, abusive, unwelcoming, or inappropriate content off the site and in line with our updated Code of Conduct.Hundreds of thousands of engineers leveraged the power of Stack Overflow for Teams to better collaborate and ship products faster.Over 40,000 jobs were posted on Stack Overflow Jobs in 2019. We now have over 1,000,000 searchable profiles of developers who are interested in being contacted about a job on Stack Overflow Talent.Almost a million developers found new and useful tools after seeing a company advertise on one of our sites. There are a handful of companies that are indispensable to the world of software and to our evolution to a digital society. Stack Overflow is privileged to be in this group of disruptive companies. Thanks to our founders Joel and Jeff, our employees all over the world, and the millions of community members who have contributed so meaningfully to our mission and laid the foundation for our future. The work we do would not be possible without the contributions of our incredible community. Across Stack Overflow, hundreds of thousands of users, supported by hundreds of moderators, helped to review questions, triage answers, propose new tags, and keep the discourse respectful and on topic. The little actions taken on a daily basis add up to millions of important contributions. Alongside this tremendous activity, nuanced discussions about topics like cybersecurity, cloud server architecture, and data science are happening across our network of Stack Overflow and Stack Exchange sites. Learning from the company and community — and evolving the organization During my first three months at the company between October and December of 2019, I connected with all our employees around the world and spent a significant amount of time outside the office speaking with customers and community members. What became apparent in my conversations is that software development has evolved rapidly, and successful companies are evolving their own cultures and practices to keep pace. For the modern developer, the lines between programming languages, software frameworks, cloud infrastructure, and DevOps are blurring. Developers and organizations are trying to keep up and compete (as the incumbent) or disrupt and take market share (from the incumbent) in an as-a-service digital economy. Every significant developer technology relies on coders finding answers by asking questions on Stack Overflow. But while Stack Overflow has played a massive role in empowering and enabling developers around the world to learn, write code, and build products faster, we as an organization have not kept up with the evolution of the industry. It is critically important that we evolve our platform, community infrastructure, and culture to be more useful to our community so we continue to be a core part of a developer’s workflow. Of the ~90,000 respondents to our 2019 Stack Overflow Developer survey, 80% tagged themselves as hobbyist programmers, 60% wrote their first line of code before the age of 17, and only 10% were women. Statistics like these have significant implications on how we think about making our community more welcoming, engaging, and inclusive. The key to Stack Overflow’s future and growth are the millions of developers from around the world who find the site useful, but who haven’t yet been welcomed into the community. We need to expand our reach and engagement to ensure these developers join the conversation and push their own learning to new heights. A key part of great product development is to stay close to customers, listen, and take a thoughtful, data-driven, and research-oriented approach to building products. In our case, it is critical that we work closely with our community to listen, change, and evolve rapidly. As an example, over the past several months, we had a lot of dialog with our community about how best to enforce and evolve our code of conduct. We learned that we needed much better channels to listen to our moderators and community members. We have not evolved the existing channels of engagement for power users in our community, like Meta, or articulated how we intended to make improvements going forward. This has caused friction as our user base and business have rapidly grown. We acknowledge these issues, apologize for our mistakes, and have plans for improving in the future. In the fourth quarter of 2019, we created a large task force made up of passionate community advocates from across the company to propose solutions to this core problem. The team’s mission is to improve our feedback loop and working relationship with our community. We added a member of our Community team to our leadership team and restructured the organization to invest in Product leadership to build Community-centric features. We are also forming a moderator council, which will include a group of users with diverse experience levels and backgrounds who can help guide our processes. We’re making hard choices and treating no assumptions as sacred in considering ways to evolve the community. Most importantly, we kicked off a key large scale community survey named Through The Loop and invited our entire community to share their suggestions, product feature requests, and ideas for how Stack Overflow should evolve more broadly. We’ve heard consistent feedback from you regarding key topics like question and answer quality, welcomingness and inclusion, and discovery for relevant questions and answers. All of this is in pursuit of new and more productive ways to work with and listen to our community in the next era of the company. We want to serve all of the millions of people who use Stack Overflow, not just those who know the most about how the site has worked in the past. To be clear, this does not mean channels like Meta will go away, but they need to grow to ensure that users are heard and responded to in a timely fashion. We’ve completed the process of defining how our moderator council will be structured, shared an internal framework for asking coworkers tough community questions, defined the important functions that would be best served by more scalable solutions than Meta, and built outlines of our new moderator training modules. By the end of this quarter, all of these initiatives will be shared publicly with you, our users. Community engagement and inclusion is a top priority for Stack Overflow in 2020. Already, the team has established and released a plan for improving communication and empowering our users internally. We are experimenting to improve in areas we know need work: encouraging more question asking, reduce user to user friction, expanding inclusion, and creating a more integrated experience between Stack Overflow and other technical sites on Stack Exchange. The results of all of this work is being shared publicly through our new Loop series on the Stack Overflow blog and by subscribing to our Stack Overflow newsletter and podcast. We have seen some encouraging results: more people are asking questions, we cut the number of negative comments nearly in half, and December was our best month ever for new user signups! Our latest podcast is a conversation with Prashanth on our plans for 2020. Give it a listen. Building a business and serving every team At the same time, Stack Overflow continues to grow and evolve as a business. We began with our Advertising product and then expanded to our Talent product. My first quarter helping to manage these businesses has convinced me that Stack Overflow is an underestimated and perhaps even under recognized platform for helping developers connect with companies directly either to understand their developer-centric products or to find their next role at those companies. There’s a lot we can do to raise the awareness of these capabilities. Our third line of business, Stack Overflow for Teams, is our flagship SaaS product and lets development and technical teams use the power of Stack Overflow internally to answer questions about their own code and technology. It’s becoming an invaluable part of the toolset for developers and technical workers at tech giants like Microsoft, which has over 70,000 users. It’s also used by small startups like Osso VR, which has a few dozen developers using the platform. The Enterprise version launched only two years ago and our mid-level Business tier just six months ago. Within this short period of time, Teams became the fastest growing product in our portfolio. We’re also expanding partnerships within the product. Stack Overflow for Teams integrates with lots of your favorite tools—Slack, Microsoft Teams, and Okta. Key developer workflow tools like GitHub Enterprise and Jira are coming shortly. The way companies use Stack Overflow for Teams is fascinating, including one that hits close to home: development teams looking to ship product faster and be more responsive to their customers. This requires Engineering, Product Management, Product Marketing, and other teams to collaborate closely to not only build and ship products but also enable Sales and Customer Success teams to present accurate and up-to-date feature updates and roadmaps to prospects or customers. We recently made Stack Overflow for Teams available for free for the first 30 days, so everyone can experience the power that comes with this collaboration and knowledge sharing tool. What I hear time and again in conversations with our customers and community members is that the tools we built to discuss writing code can be extremely useful across many areas of an organization—in Engineering, Product Development, Product Marketing, and even People, Business Operations, Legal, Customer Success, and Sales organizations. I know developers love data so I wanted to share highlights from a study we commissioned from Forrester Consulting to assess Teams’ TEI (Total Economic Impact). They sat down with four of our enterprise-sized customers and dug deep. After weeks of interviews and number crunching, the findings prove an incredible 179% return on investment. The full study also revealed some other surprisingly huge impact for companies that use Stack Overflow Teams: $224,000 in question-asking time savings in the first year$1.1M in question-answering time savings in the first yearDecreased time to marketMore efficient onboarding for new team members These numbers are exciting and give everyone at the company a lot of confidence that we can continue to help developers and technical workers all around the world do their daily jobs better and more efficiently. Growing Stack Overflow In 2020, in order to continue to fuel our growth, we’re expanding and diversifying company leadership. Just last week we announced the addition of Teresa Dietrich, who joined as our Chief Product Officer and brings great technical leadership experience from companies like McKinsey New Ventures, Namely, and WebMD. We’ve also added Adrianna Burrows to our Board. In addition to being a Stack Overflow alum, Adrianna has been a marketing leader at great companies like Microsoft, Cornerstone on Demand and is currently CMO of Payscale. I’m grateful to have their expertise to help drive the company forward. Stack Overflow is already an indispensable part of the developer workflow from the perspective of our public community, but there is so much more to do for developers as they ship code. Many of the product innovations we’re excited to explore under Teresa’s leadership are the opportunities at the intersection of private and public Stack Overflow. Developers want us to be a more active part of their daily workflow. Coders already leverage public Q&A several times a day to answer their most pressing development questions, but want a more integrated and more enriching experience, especially when combined with our private Teams product. We are already seeing many companies leverage our community infrastructure to better support their own developer communities. Sencha, Snowflake, and Mapbox have all announced efforts to use Stack Overflow as a platform for helping programmers to use their products. “We want to make it easier and faster for anyone to find answers to their questions, especially questions that others have raised without needing to wait for a reply from our team,” wrote Yaniv Markovski, head of support at Mapbox. “As a bonus, joining in on this community conversation creates a feedback loop that allows us to create better documentation and learn how we can improve our product.” We are currently exploring how we can create an exceptional experience for developers and companies to interact more directly on Stack Overflow— i.e., by creating more curated channels and spaces on Stack Overflow to interact more directly with specific communities. Stay tuned for more ideas here! As we look forward to 2020, we plan to invest in public Q&A, expand our community, and continue to cement our place as a pillar of the software industry and broader knowledge economy. We also know that we have work to do on improving how we engage with our community, as well as continuing to strive for more diversity, inclusion, and approachability. This is a big mandate. So as we embark on the journey this coming year, I’ve asked everyone at Stack Overflow to maintain a growth mindset (through hard work, openness to feedback, and resilience), to always operate with our “why” at the center, and to conduct every meeting as if there is a community member and customer in the room. What I ask of you—anyone reading this post—is to continue to grow with us, to give us feedback through our new feedback loops, and to continue to rely on Stack Overflow and the Stack Exchange network as the essential resource for exchanging ideas and information on technical topics. Visionary companies are guided by a mission, not just a sustainable business model, and seek out challenges that can help move humanity forward. We have the opportunity to do that at Stack Overflow, to realize our profound mission of helping write the script of the future by serving developers and technical workers. Let’s answer the most important questions in this great new era of technology, together. Tags: bulletin, community, company, stackexchange, stackoverflow, vision 2020"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/12/11/the-loop-1-how-we-conduct-research-on-the-community-team/","date":"2019-12-10T23:00:00.000Z","tags":["Community"],"title":"The Loop #1: How we conduct research on the Community team","text":"Hello! I’m Donna, the Community Design Lead at Stack Overflow. Welcome to CHAPTER #1 of The Loop, a new blog series from the Stack Overflow Community team. This post is a deep-dive into our research approach: what it used to be, what it is now, and how it continues to evolve. Learn more about The Loop in CHAPTER #0 (yes, our chapters are zero-based). If you work on a product that’s ever benefited from research – whether that’s talking directly to users, analyzing experiment data, or any number of other research methods – you know how indispensable these inputs are for making the right decisions. But how do you decide which methods to use and when? How do you know if you’re spending the right amount of time on research? How do you know when it’s time to change your research methods? These are questions that the Community team has been grappling with, particularly in the last year. While we certainly don’t have all the answers, I’d like to share: What our research used to beWhat it is nowHow it continues to evolve The early days If you’ve been with us for a long time, you may remember when our research process looked something like this. Meta feedback involved direct exchanges between users and staff members on Meta, a site where users discussed the site, shared ideas, gave feedback, and talked to staff. These conversations led to the Stack Overflow that many of us are familiar with, and we learned a lot while working with this small group of highly motivated users for many years. Our current approach: scrappy and mixed-method As our community has grown, our research needs have become more complex. With 50 million people coming to the site every month – all with unique needs and backgrounds – our team and its research approach have evolved to keep up with this ever-growing complexity. We’ve added folks to the team with specialized research skills, like UX researchers and data scientists, while people like product managers, designers, community managers, marketers, and developers contribute research as well. Together, we conduct mixed-methods research that helps us create a holistic picture of how we’re doing. This collective research seeks to answer questions like: What do users need?What do customers need? Are our ideas and decisions on the right track?How are our products and features performing? This mixed-method approach allows us to hear from a variety of inputs throughout the life cycle of a product or feature, from early conception to post-launch. However, our small team can’t always conduct all of the research we’d like – which is where the “scrappy” element of our research approach comes in. Generally, the greater the cost and impact of a project, the more research energy we’ll devote to it. This matrix visualizes how we might decide the amount of research that goes into a project. Today, our research process might look something like this for a high-impact, high-cost project. Think of each method as a puzzle piece, and the outcome as the completed puzzle. I’ll talk more in detail below about our methods and why we use them. Method #1: surveys Surveys are one of our favorite sources of both qualitative and quantitative feedback. We currently use surveys for: General site satisfaction. This is used to gauge trends in satisfaction and helps us identify directional improvements. We use this data to inform our roadmap. The beginning of a project. This helps us vet early ideas and point us in the right direction. We use survey data, as well as other inputs, to help us identify requirements and design.The end of a project. Once we ship, we can see how people are feeling about the new feature and identify changes for future iterations. Why surveys? Surveys are a great way to get a high volume of qualitative feedback, which we can use to understand macro trends as well as micro issues for things like usability and copy. We can also target surveys to specific audiences, so that we are gathering data from people who’d be affected by the outcome of a particular project. Method #2: user research Qualitative research helps us understand the why and how of user behavior, allowing us to get deeper insights than we might through other methods. Generally, these are semi-structured discussions that take place by video call or in writing – where we’ll talk in-depth with users about a specific topic, feature, or design. We generally conduct these throughout the beginning and middle phases of projects. We use a few different sub-methods, depending on the project: User interviews. We have conversations with people who may be affected by a given change. Since Stack Overflow is an online community where groups of people interact with each other, our conversations are not limited to the end user. For example, if we are updating the question asking form, not only do we talk to people asking questions, but also those answering and moderating questions. Meta feedback. We monitor Meta for bug reports and small usability/copy issues after shipping changes to the site. Note that this may change based on what the next iteration of Meta looks like, as mentioned in the previous chapter of The Loop. Why user research? We get deeper insights than we might through other methods. Like surveys, we can target user research to specific audiences, and will talk to a range of groups affected by a given product change. Method #3: quantitative data While qualitative data helps us understand why, quantitative data helps us understand how many. We use data analysis and A/B tests to provide insight into how our decisions scale, as well as how changes we make contribute to site usage and overall performance goals. Sub-methods include: General data analysis. This is used to understand patterns in site usage across various user segments. A/B tests. We test as much as we can, particularly areas that impact core interactions on the site. Why quantitative data? Statistical analysis allows us to see how (or if) earlier research insights scale and how the changes we make impact top-line performance goals. Method #4: secondary research Today’s Stack Overflow doesn’t exist in a vacuum. When we consider changes to the site, we want to understand the broader contexts of our users, as well as any historical insights that led us to the current state of the site. This helps ensure that we’re not reinventing the wheel or ignoring hard-learned lessons from the past. Sub-methods include: Comparative site analysis. We look at other sites to understand patterns and standards that users are learning offsite. This awareness helps us understand how to make a user’s entry into Stack Overflow as seamless as possible. Archive research. We scour Meta and talk to various staff, particularly community managers and developers, to learn how and why a feature arrived at its current state. Why secondary research? We can learn from broader offsite patterns as well as research from previous iterations on the product. Reflection How we talk to and learn from our users has changed a lot over the years. By broadening our research approach, we’ve lost some of the trust and familiarity of regular, frequent exchanges with a small, passionate, and generous group of people on Meta. At the same time, we’ve brought more rigor and precision into our research approach, which means we have more confidence when making decisions. Our research approach is constantly evolving. As Sara and Juan wrote in their latest blog post, we’re expanding our research toolbelt to include a working group (a hand-selected group of folks we’ll gather feedback from regularly). We want to continue not just listening to our users, but improving how we do so. How does your organization conduct research? How has your organization’s research changed over time, and what have you learned from these changes? Opt-in to our Research email list (must have a Stack Overflow account). You’ll receive invitations to participate in surveys, user interviews, and more. You’ll receive up to a few emails per year and can opt-out at any time. Read CHAPTER #0 of The Loop, where Sara and Juan talk about our plans to improve how we listen to users. Tags: announcements, community, company, insights, stackoverflow, the loop"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/12/09/tis-the-season-for-hats-join-us-for-winter-bash-2019/","date":"2019-12-08T23:00:00.000Z","tags":["Company"],"title":"‘Tis the Season for Hats! Join Us for Winter Bash 2019","text":"Around the globe, we look forward to celebrating traditions that are unique to us, our families, and our communities. The season gives us a chance to reflect, makes us smile, and helps bring us all together. This year is a special one for the Winter Bash tradition. A hectic end of the year (that included a company-wide Meetup and a ramped-up focus on delivering improvements across other parts of our Q&A experience) means this year’s Winter Bash theme is the same as last year’s. But don’t despair, last year’s theme was awesome! We’re continuing to bring the fun. Winter Bash 2019 showcases a wild retrospective of hats that have been featured over five years, from 2014 to 2018. You can upgrade your avatar with some of the favorite hats from the past, as well as discover a couple of changed triggers for secret ones. We wish you luck finding them all! Join us December 9 through January 1 for Winter Bash 2019. Last year, we awarded more than 297,000 hats on Stack Overflow. This year could be the year that we hit 300K! Whether you’re new to Winter Bash or need a quick refresher, here’s how it works: Ask, answer, vote, edit, and chat to unlock fun hats and accessories you can wear on your avatar when you complete challenges on participating sites. Once you complete a challenge, a hat will appear on your profile. Click the hat and you’ll be taken to your hat box. Select one of the hats you’ve earned, customize it to fit your avatar, and start sporting it around the site. Don’t forget to change your hats. After all, nobody likes to be seen wearing the same thing twice! Have questions? Check out our Winter Bash FAQ page for answers and more helpful information. Ready, set, go find some hats! Tags: bulletin, stackoverflow, winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/12/04/introducing-subject-matter-experts/","date":"2019-12-03T23:00:00.000Z","tags":["Company"],"title":"Introducing Subject Matter Experts","text":"One of the great secondary benefits of an open knowledge base like Stack Overflow for Teams is that anyone can contribute. When exceptional answers get voted to the top, your organization gets to identify subject matter experts. Today we’re excited to announce our new subject matter expert feature that allows domain experts to be easily recognized and acknowledged within your organization. The new feature, available on the Business tier of Stack Overflow for Teams and coming to the Enterprise tier in 2020, allows your Team to associate a subject matter expert (SME) with a tag. Multiple Team members can be designated as SMEs for any given tag by your Team Admin. Any Team member can quickly understand who the SME(s) is for a particular tag by viewing more details about the tag. Get the information you’re looking for faster by directing your question towards the domain expert in a particular area or topic. Designated SME(s) for a tag will receive a cap icon next to the name of the tag on their profile page for their Stack Overflow for Teams instance. Curious to know when your question has been answered by an SME? Answers from one of the SMEs associated with a tag will be called out as: We’re really excited about this new feature since we believe it’s important to acknowledge those with special skills or knowledge in a particular topic. Subject matter experts are a wealth of knowledge, and there is so much to learn from them. This new feature makes it even easier to determine who the experts are throughout your organization. Not currently on the Business tier of Stack Overflow for Teams? Learn more about Stack Overflow for Teams and our different plans here. Tags: new features, stack overflow for teams"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/10/21/interview-stack-overflow-ceo-prashanth-chandrasekar/","date":"2019-10-20T22:00:00.000Z","tags":["Company"],"title":"An Interview with Stack Overflow CEO Prashanth Chandrasekar","text":"“We make a huge difference in people’s lives, and it’s not to be underestimated.” – Prashanth Chandrasekar Last week the Stack Overflow podcast crew sat down with our new CEO to chat about his background in computer science and his vision for the company’s future. What follows is a lightly edited selection of that conversation. To hear the full thing, you can listen to the podcast here. Don’t forget to subscribe for future episodes! Ben Popper: Welcome to the Stack Overflow podcast for the week of October 15th I’m here with my co hosts. Say hi everybody. Sara Chipps: Hi everybody. Paul Ford: Hello. Ben: And we’ve got a very special guest today, our new CEO. Can you introduce yourself? Prashanth Chandrasekar: Thank you so much. I am very, very happy to be here and excited to join the Stack Overflow family. Quick introduction about myself. I grew up in Bangalore, India until I was about 17 years old. Grew up in a very blessed situation with my mom, who was a medical doctor and my dad, who was originally an engineer and then became an academic over time. I’m grateful that they really exposed me to technology very early on, not only through both of them, but also just by virtue of living in Bangalore, which is known as the Silicon Valley of India. So technology has been part of my DNA for the longest time. When I was about 17, I really felt this yearning to explore my horizons and my perspective and I decided that I wanted to go abroad to continue my learning and my education and just my life in general. Very, very fortunately, I received a scholarship to study in the United States, otherwise I would not have been able to make the move. I ended up at the University of Maine in Orono, Maine, which is a very, very small town and very different from Bangalore to say the least. Ben: I’m going to kick things off here because I know a little bit of this backstory, but let’s talk about that first computer that your dad brought home. He went on a trip to Hong Kong. He brought home a 486. Prashanth: Actually, it was not even a 486. I think it was a 286. I clarified that with him. Sarah: 286 Club. Prashanth: Yeah, so it was a very old computer, but he lugged that thing all the way from Hong Kong on one of his trips and he’s a fairly global traveler and he does a lot of work in national development. Fortunately for my younger brother and myself, he brought that all the way from there, and he brought a bunch of five and a quarter inch floppy disks, which had business software along with obviously, what would get us going, which were video games. Ben: Defender! Prashanth: Defender was my first exposure to a computer game and I was completely hooked. It took a long time to run things of course, but it was really eye opening. The great thing about Indian education is that they expose to kids technical topics really early on, whether that’s calculus in middle school or computer science. They started teaching Logo and so that was the first programming language that I ever knew. I then quickly moved onto BASIC. My mom was a doctor, she had a private practice and she had lots of patients. So for my 10th grade project, I had the opportunity to build a computer program application in BASIC, and I chose to build sort of a hospital management system- Paul: That’s fun. Just a fun cool kid thing to do. (everyone laughs) Prashanth: Yeah. Prashanth: There is something addictive about building something that actually delivers a very specific outcome with the customer that is going to benefit from it. Sarah: My big question for you is what kind of product manager was your mom? How was she as a client? Prashanth: As a client, she is very driven and knows exactly what she wants so is not shy about sharing requirements. Very clear on exactly what the specs are. It’s great having clear direction from customers. Ben: No scope creep in this house. Prashanth: Yes. Anyway, that was just a great, great introduction to computer programming somewhat early, I suppose, in my life. That obviously continued heavily into college when I studied computer engineering and got into, C, C++, and Perl and all the other languages. Sarah: When you were using Logo, what were you using it for? Prashanth: It was completely for drawing, really. That’s all it was. I think it was just to say how do you actually control movement of the turtle? Paul: Well, it gives kids a reaction. You get to see the computer do something. Prashanth: This is that addictive part that I mentioned earlier on, because it gives you this sense of control, of creative control to say, I’m actually controlling this thing in a very, very binary zero-one kind of way. “Hey, move forward by 50 steps.” Okay, here you go. It actually moves forward by 50 steps. “Turn right.” Okay. That, in itself, gets you going, and I see a similar look in my kids’ eyes now, when they are actually learning how to code. My daughter’s nine years old, my son’s six years old, and they’re big code.org fans. She loves to draw and sketch. You can see the reaction in her face when she’s able to do that. I think it teaches you to be somewhat of a perfectionist and to be detail-oriented, that I think that the kids can also gain from, I think, by being exposed to it very early on, because if you are frustrated by the fact that your command actually didn’t result in the outcome that you hoped for, then you are going to keep pursuing until you actually get to the end zone, until you actually are perfecting the outcome. It’s very easy to get stuff wrong too, in computer programming, as we all know. Sarah: Researchers call the phenomenon that you’re talking about with your kids, they call it eu-stress, which is euphoric stress. They call it that when it comes to gaming as well. It’s the idea of stress where you know there’s a solution and you know you can find it, so it’s not distress, which is something where you easily get discouraged. It’s euphoric stress that gets you more excited until you solve that problem, and then you’re like, “Yes!” And you get all this dopamine, this flooding in of, “Yes, I did it!” It’s really neat. Prashanth: Sara, you’ve taught me something new. That’s amazing. Paul: So we are talking to the Stack audience, they’re going to want to know things. What can we tell them? What can you tell them? Prashanth: I’ve kind of had the privilege of learning about this company for almost since its inception, because all the teams that I’ve led, especially at my time at Rackspace, have always used Stack Overflow. It’s always the default place for any engineers on our team to go get their answers quickly. So if they want to understand something about Kubernetes, they expect the answer to come from Stack Overflow. So I’ve followed the company very closely by the impact that it has very broadly for a long time and the tremendous impact that it has. There are probably a handful of companies in the world, in our era, that has such a large impact around the world. We’re really, really blessed to have a phenomenal community of people that are willing to share so much and be open about the knowledge that there is resident in their heads and really to promote truly borderless sharing of information around these topics. That number one that makes me super excited. So we want to make sure that people actually know about us holistically in a 360 sense, because I think people identify us as a community. I think that always, it is the heartbeat of the company. We are community first. That’s why we exist in many ways, because of our community. However, I don’t know if many people understand that we actually do so much more than provide what we do in our community. There’s so many products that hopefully our customer base and our community can leverage to make their lives better and to accelerate what they want to accomplish. When my appointment went public thousands of people reached out to me, either commenting on the appointment or direct messaging me or emailing me. A bulk of them were people from the community that were all so grateful for what Stack Overflow has done for them, for their lives. I was blown away. These are folks from all around the world, all around the world. India, Africa, South America, North America. I remember this chart that made me fall in love with the company when I first saw it, which is the chart about our community across the world. 50 million community members that come every month are literally all around the world. And it’s that chart that is so high impact. I think we make a huge difference in people’s lives, and it’s not to be underestimated. Tags: bulletin, podcast, Prashanth Chandrasekar, stack overflow, the stack overflow podcast"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/10/15/the-stack-overflow-podcast-is-back/","date":"2019-10-14T22:00:00.000Z","tags":["Company"],"title":"The Stack Overflow Podcast is Back!","text":"Before there was a Stack Overflow, there was a Stack Overflow podcast. The founders of this community and company started spitballing ideas for how to build it on weekly calls while the site was still in private beta. As Stack Overflow grew and changed over the last decade, the Podcast was a constant. That is, until May of last year, when it went on hiatus. Stack Overflow gives employees a sabbatical after five years of service, so I’m going to assume the podcast was just calling in a much needed vacation.Since I joined as Director of Content earlier this year, community members and colleagues kept asking me if it would ever be possible to bring the podcast back. Even though a new episode hasn’t been published in over a year, over a thousand people were still listening to our SoundCloud each week. It seemed clear the audience and the appetite for this ongoing conversation was still strong.So today, with a renewed energy, we’ve decided to bring it back. We’ve got three new hosts:Ben Popper, the director of content here at Stack (that’s me)Sara Chipps, the director of Public Q&A at Stack, a veteran developer, and Stack user number #4140Paul Ford: a writer and technologist who serves as CEO of Postlight, a digital product studio We’ll be chatting about what it’s like to work in software development, how folks can learn to code, and the way in which computer programming is influencing business, culture, and society. You can find and subscribe to the show on all the big audio platforms out there and we’ll be publishing a new episode each week. It went live early this morning, but it may take a little while to populate across various platforms. For now, you can find it on Spotify and Overcast. It should be everywhere soon. You can find the RSS feed here.We plan to bring on lots of interesting guests. This week, for example, we got the chance to sit down with Prashanth Chandrasekar, Stack Overflow’s new CEO, to hear about how he got into computer science and his vision for this community and company. Each week we’ll publish show notes here on the blog with links to topics we discuss. If we’re picking up where things left off, this would be episode #124. Hope you enjoy! SHOW NOTESIs it legal for source code containing undefined behavior to crash the compiler?True, you’re the boss, and the compiler works for you. But that doesn’t mean it always behaves just as you instructed. And that’s not necessarily a bad thing. Understanding the “as if” rule.What is Logo, you ask?And what about NetLogo? More wolves vs zombies please.William Chipps’ golden years – so close, and yet so far – the website.Shoutout to all the fine folks who came before us – Joel Spolsky, Jeff Atwood, Jay Hanlon, David Fullerton, Alex Miller, and Ilana Yitzhaki. Tags: bulletin, podcast, stack overflow, the stack overflow podcast"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/10/10/iterating-on-inclusion/","date":"2019-10-09T22:00:00.000Z","tags":["Community"],"title":"Iterating on Inclusion","text":"Last year, we wrote about our important work to build a more welcoming and inclusive community. This summer, I wrote about how we are evolving our product to encourage better interactions and guidance. While there’s still a lot more to do, we’ve begun to take concrete steps toward a better coding community for everyone. This is the most important work we’re doing in our community, and our first wave of improvements are starting to show results. Here’s one concrete example: For some time, we’ve been using machine learning to flag comments that might be potentially troublesome in the community, especially if they could be seen as hostile to new users. (Our tool for evaluating and flagging those comments, called the Unfriendly Comment Classifier, is pretty great! We’ve got details on how it works here.) After we tuned the flagging tool to ensure it was reliably detecting troublesome comments, we used it to measure the impact of the new policy and product changes we’ve been making to improve community health. Those changes, along with thousands and thousands of you working to make the Stack Overflow community more friendly, have cut the number of troublesome comments in half. Our moderators are the front lines of this, and they’ve helped to ensure this place is more welcoming for everyone. We appreciate all their hard work, and we’ve seen a reduction in the odds of a new comment being detected as abusive go from 2.6% of new comments down to 1.3% in the past 18 months. All our analysis indicates this is a real decrease in unfriendliness in our community, not just an artifact from how the model is trained or other effects. Now, we’re not declaring victory here. There’s still a lot of work to do—but we want to acknowledge the incredible work that the community, our moderators, and our product teams have been able to accomplish together to make meaningful improvements. We’ve also been learning a lot through this process, such as clarifying policy, setting explicit expectations, and empowering the community to raise the bar. All of these changes make Stack Overflow more welcoming. And as you’d expect, that means we’re going to do more of it. What’s Next Following on this work, we’ve begun our next community initiative to make improvements specifically designed to make Stack Overflow more welcoming. This takes the form of another similar clarification and setting of expectations, this time around a different section of the Code of Conduct. Since a lot of our readers are developers, here’s a diff: Our original text says:Be kind and friendly.Avoid sarcasm and be careful with jokes — tone is hard to decipher online. If a situation makes it hard to be friendly, stop participating and move on. “Be inclusive and respectful” Our new tenet is:Be inclusive and respectful.Avoid sarcasm and be careful with jokes — tone is hard to decipher online. Prefer gender-neutral language when uncertain. If a situation makes it hard to be friendly, stop participating and move on.This section:No bigotry.We don’t tolerate any language likely to offend or alienate people based on race, gender, sexual orientation, or religion — and those are just a few examples. When in doubt, just don’t. “No bigotry” is now:No bigotry.We don’t tolerate any language likely to offend or alienate people based on race, gender, sexual orientation, or religion — and those are just a few examples. Use stated pronouns (when known). When in doubt, don’t use language that might offend or alienate.In software, we release, learn, and iterate to make our products robust and effective. Though people are not code, this is one place where the analogy holds: learning and improving as we go will help us reduce errors and makes it more likely information will get accurately transmitted. On a more human level, it’s a kind and respectful thing to do.By adding this update, we want to make it clear that the Code of Conduct requires people to use the correct gender pronouns when someone shares their pronouns or makes them public. It also means that respecting anyone less because of their gender identity or pronouns is off limits. This has always been true of our Code of Conduct and we are making it more explicit with this language. This isn’t a new rule or a change to our policy. We found there was confusion, and we’ve clarified the language to make things abundantly clear. We recognize using different pronouns can sometimes be challenging for people who don’t speak English as their first language. There are lots of great resources online to help guide folks with questions, including this. We will also be sharing FAQs with our moderators and community, and are here to answer your questions. The goal here is an obvious one: we want to build a better culture, where community members don’t have to justify who they are or explain why their identity is worth respecting. Stack Overflow and the Stack Exchange network are here for everyone to be who they are. Running the Code Now that we’ve got an updated Code of Conduct, it’s time to put the code into production. This is a good chance to practice being mindful of people’s pronouns, and, as there are people who may be new to this kind of consideration, it’s also a great opportunity to support other community members learning to get this right.The key thing is, this goes for all of us. Whether we’re regular users, moderators, or even employees at Stack Overflow, we all work together to make sure the community is welcoming. When we see violations of our Code of Conduct, we’ll work with users to ensure that they follow the same clear expectations as everyone else in the community. Though it’s very rare, it’s worth saying explicitly that in cases where the Code of Conduct is willfully violated by someone after we’ve addressed the issue to them before, that user will be removed from the community—even if they’re a moderator or a user with a lot of rep. It’s especially important that new or returning community members who are building (or rebuilding) trust in the community see that everyone—users, moderators, employees, everyone—is held to this standard.That way, we all work together to look out for people who may need protection in online communities the most, like our transgender, non-binary, and gender non-conforming members. Going Forward We’re excited about the things we’ve released in the first phase of helping our community get to a place that is more welcoming and inclusive. How can we tell if we’re succeeding at this? Well, there are a few ways. Metrics like “number of comments flagged” and “users that come back to ask a second question after their first experience” help us. In Q2, we released a Site Satisfaction Survey that polls a sample of anonymous and logged in users on Stack Overflow. In the survey, we specifically asked what we could be doing better and report against how many people tell us they don’t feel included or welcome. This is what we’re watching closest. Over the next few months, you’re going to see a lot more of this from us. As part of this next phase of work, we’re going to work to fix features that make people feel like they’ve been publicly shamed, and reduce some of the social friction that is built into our product. Soon, there will be no more big yellow boxes that say “these five people voted your question is bad,” because nobody likes that feeling! Instead, there will be clear guidance on how to improve questions when they need more information or better formatting.Think of the difference between how great it feels when you get a really good code review or pair programming session as compared to that terrible feeling if you make a code commit or pull request and someone slaps it down. Stack Overflow should feel as good as the intentions of those who help each other in the community.We’re also working on providing more help and support to our moderators and plan to continue to improve the tools they use every day. Our team is developing clearer guidance around how to detect when someone is being excluded and what to do about it. Each of them should feel valued and accepted. These stewards of the community are the backbone of what we do and we greatly value the time they put in evaluating flags, questions, and comments in service of making this community a better place. We’re thankful to them for continuing to improve Stack Overflow, and especially thankful to our community for pushing Stack Overflow to be every bit as welcoming as it is informative. Tags: announcements, bulletin, community, company"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/10/08/adding-static-code-analysis-to-stack-overflow/","date":"2019-10-07T22:00:00.000Z","tags":["Company"],"title":"Adding Static Code Analysis to Stack Overflow","text":"As of September 23rd, 2019, we’re applying static analysis to some of the code behind public Stack Overflow, Stack Overflow for Teams, and Stack Overflow Enterprise in order to pre-emptively find and eliminate certain kinds of vulnerabilities. How we accomplished this is an interesting story and also illustrative of advancements in .NET’s open source community.But first… What did we have before static analysis? The Stack Overflow codebase has been under continuous development for around a decade, starting all the way back on ASP.NET MVC Preview 2. As .NET has advanced, we’ve adopted tools that encourage safe practice like Razor (which defaults to encoding strings, helping protect against cross site scripting vulnerabilities). We’ve also created new tools that encourage doing things the Right Way™, like Dapper, which handles parameterizing SQL automatically while still being an incredibly performant (lite-)ORM.An incomplete, but illustrative, list of default-safe patterns in our codebase: Automated SQL parameterization with DapperDefault encoding strings in views with RazorRequiring cross site request forgery (XSRF) tokens for non-idempotent (ie. POST, PUT, DELETE, etc.) routes by defaultHMACs with default expirations and common validation codeAdopting TypeScript—an ongoing process—which increases our confidence around shipping correct JavaScriptPrivate data—for Teams and Enterprise— is on separate infrastructure with separate access controls We were safe, at least in theory, from most classes of injection and cross-site-scripting attacks.So, … What did static analysis give us? In large part, confidence that we were consistently following our pre-established best practices. Even though our engineers are talented and our tooling is easy to use, we’ve had dozens of people working on Stack Overflow for 10+ years—inevitably, some mistakes slipped into the codebase. Accordingly, most fixes were just moving to doing something “the right way” and pretty minor. Things like “use our route registration attribute instead of [HttpPost]” or “remove old uses of SHA1 and switch to SHA256.”The more “exciting” fixes required introducing new patterns and updating old code to use them. While we had no evidence that any of these were exploited, or even exploitable in practice, we felt it was best to err on the side of caution and address them anyway. We added three new patterns as part of adopting static code analysis:We replaced uses of System.Random with an equivalent interface backed by System.Security.Cryptography.RandomNumberGenerator. It is very hard to prove a random number being predictable either is or isn’t safe, so we standardized on always hard to predict.We now default to forbidding HTTP redirects to domains we do not control, requiring all exceptions be explicitly documented. The concern here is open redirects, which can be used for phishing or other malicious purposes. Most of our redirects were already appropriately validating this, but the checks were scattered across the codebase. There were a few missing or buggy checks, but we found no evidence of them being exploited.We strengthened XSRF checks to account for cases where users move between unauthenticated and authenticated states. Our XSRF checks previously assumed there was a single token tied to a user’s identity. Since this changes during authentication, some of our code suppressed this check and relied on other validation (completing an OAuth flow, for example). Even though all cases did have some kind of XSRF prevention, having any opt-outs of our default XSRF checking code is risky. So we decided to improve our checks to handle this case. Our fix was to allow two tokens to be acceptable, briefly, on certain routes. Our checks run on every PR for Stack Overflow and, additionally (and explicitly), on every Enterprise build—meaning we aren’t just confident that we’re following our best practices today, we’re confident we will keep following them in the future.In terms of Open Web Application Security Project (OWASP) lists, we gained automatic detection of: SQL injection attacks [2017 #1]XML external entity (XEE) attacks [2017 #4]Cross site scripting (XSS) attacks [2017 #7]Insecure deserialization [2017 #8]XSRF attacks [2013 #8]Open redirects [2013 #10] That wraps up what we found and fixed, but… How did we add static code analysis? This is boring because all we did was write a config file and add a PackageReference to SecurityCodeScan.That’s it. Visual Studio will pick it up as an analyzer (so you get squigglies) and the C# compiler will do the same so you get warnings or errors as desired. Not real code. By the time I thought to take a screenshot, we’d already fixed everything. Far more interesting is all the open source stuff that made this possible: In 2014, Microsoft open sourced Roslyn, their C# and VB.NET compiler.Visual Studio 2015 ships with support of Roslyn analyzers.The authors of Security Code Scan start work in 2016.I contribute some minor changes to accommodate Stack Overflow peculiarities in 2019. If you’d told me six years ago that we’d be able to add any sort of code analysis to the Stack Overflow solution trivially, for free, and in a way that contributes back to the greater developer community, I wouldn’t have believed you. It’s great to see “the new Microsoft” behavior benefit us so directly, but it’s even greater to see what the OSS community has built because of it.We’ve only just shipped this, which begs the question… What’s next with static code analysis? Security is an ongoing process, not a bit you flip or a feature you add. Accordingly there will always be more to do and places we want to make improvements, and static code analysis is no different.As I alluded to at the start, we’re only analyzing some of the code behind Stack Overflow. More precisely we’re not analyzing views or tracing through interprocedural calls—analyzing both is an obvious next step.We’ll be able to start analyzing views once our migration to ASP.NET Core is complete. Pre-Core Razor view compilation doesn’t give us an easy way to add any analyzers, but that should be trivial once we’re upgraded. Razor’s default behavior gives us some confidence around injection attacks, and views usually aren’t doing anything scary—but it will be nice to have stronger guarantees of correctness in the future.Not tracing through interprocedural calls is a bit more complicated. Technically, this is a limitation of Security Code Scan, as there’s an issue for it. That we can’t analyze views reduces the value of interprocedural analysis today, as we almost always pass user-provided data into views. For now, we’re comfortable focusing on our controller action methods since basically all user-provided data passes through them before going onto views or other interprocedural calls.The beauty of open source is that when we do come back and do these next steps (and any other quality of life changes), we’ll be making them available to the community so everyone benefits. It’s a wonderful thing to be able to benefit ourselves, our customers, and .NET developers everywhere—all at the same time. Tags: bulletin, code-analysis, engineering, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/09/19/our-advertising-principles/","date":"2019-09-18T22:00:00.000Z","tags":["Company"],"title":"Our Advertising Principles","text":"Visit Stack Overflow or any Stack Exchange site and you may notice advertising on the site. Companies partner with us to advertise their products, services, specific jobs, and the benefits of working for them. We want these ads to be as relevant to you as possible and to make you more effective at work and beyond.So for all our advertising offerings, we are following the Interactive Advertising Bureau (IAB)’s guidelines as a starting point. We will always aim to do better than these guidelines and run ads in a unique Stack Overflow way. For example, we’re working on two new ways for our registered users to control their experience: Control the types of ads you see. We’ll categorize the different advertising offerings and you’ll be able to select the ones you want to see.Report specific ads you don’t like and we, together with our ad partners, will make sure you don’t see them again. As we grow, we’ll continue to build out our advertising offerings for companies and their evolving needs. And throughout our growth, we’ll always comply with or exceed industry standards while listening to your feedback."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/07/25/introducing-custom-filters/","date":"2019-07-24T22:00:00.000Z","tags":["Company"],"title":"Introducing Custom Filters","text":"I’m excited to announce the public release of Custom Filters, a new way of navigating Stack Overflow and discovering questions that are relevant to you. In the past, you had a few predetermined options on question list pages to discover content relevant to you: Newest, Active, Bounties, Votes, and Frequent. In addition to these options, we also had the Unanswered questions tab for people looking to answer questions. These options have gone untouched for a long time, leaving search as the remaining option for any non-trivial needs. These tools left a lot be desired: it was unclear what the predetermined options meant, our search syntax wasn’t easily understood by many of our users, and our tools for question discovery weren’t unified. We knew we could do better. That’s where Custom Filters comes in. We’ve been iterating on this feature and getting feedback from users in public alpha. Today, we’re thrilled to be taking this feature out of alpha, and you can use it immediately. Here’s what you can expect: Unified options for question discovery You now have a single unified location within the question list interface to discover questions. We’ve updated the user interface for question list pages so that our previous options for question discovery like Newest, Active, and Bounties are all in a single place. This user interface also brings in the most-used options from the previous Unanswered tab. Fine-grained control over question discovery In addition to making it easier to discover questions by consolidating predetermined options in one spot, we’ve also surfaced the filter and sort combinations that power these options. You can see exactly what’s going on under the hood when choosing the predetermined options. Now filters, sorts, and even tag options are available for you to adjust and modify. Not only is it easier to view the predetermined options, these different filters and sorts give you more control over what questions you see in ways that weren’t possible before. Saved Filters and Notifications With your ability to customize searches based on filters and sorts, you can save the combinations you use most frequently with a feature called Saved Filters. Once you pick the combination of options you want, you can name it and save the filter for future use. You can access your Saved Filters on the right hand sidebar of question list pages and you will be notified when there are new questions added to your custom filters. We’ve been working hard on this feature in partnership with the community and our alpha testers, and we want to thank everyone that has been involved during the development and feedback process. Custom Filters are available to public Stack Overflow users today, and our Stack Overflow for Teams customers will see the feature later in the year. This rollout is part of our continuing efforts to make the core Q&A experience on Stack Overflow better, and we’re looking forward to improving this feature and many more with your help. Enjoy! Tags: announcements, company, engineering, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/06/18/adios-to-unfriendly-badges-ahoy-lifejacket-and-lifeboat/","date":"2019-06-17T22:00:00.000Z","tags":["Community"],"title":"Adios to Unfriendly Badges! Ahoy, Lifejacket and Lifeboat","text":"Sometimes it’s helpful to look back at past decisions and reconsider them in a new light. As part of our ongoing efforts to make Stack Overflow more welcoming and inclusive, we’ve been looking at how our incentive systems, including reputation and badges intended to encourage positive contributions, may be building discouraging barriers instead. In this new light, two badges stood out to us as different from the rest: Tumbleweed and Reversal. In this post, we share the reflection that led to our decision to retire the Tumbleweed and Reversal badges and introduce a pair of more encouraging badges: Lifejacket and Lifeboat. Eradicating Tumbleweeds The Tumbleweed badge is awarded to questions with zero score, no answers, no comments, and low views for a week. Recently we questioned if it was serving its purpose as a light-hearted consolation prize. Back in 2009, it was originally intended to be “sort of fun” and also kinda rare. Unfortunately, we have anecdotal evidence (including my own experience) that Tumbleweeds are not fun and, on Stack Overflow, they are no longer all that rare either: I included the Scholar badge for reference since it’s awarded the first time a user asks a question and accepts an answer. In other words, the system is working for about 200,000 users a year and failing for about 150,000. That’s sobering. What’s worse, the badge reminds people a week later that their question came up empty. Still, it could be that the badge still serves as a consolation prize. Maybe it communicates “Dust yourself off and climb back on that horse.” I suggested to Dr. Julia Silge, our resident data scientist, that we might be able to show the badge is working by looking at all questions that received one (and only one) interaction over the last year: InteractionNumber of Examples Tumbleweed badge\t152,422 Got a comment\t30,017 Got an answer\t17,733 Got a downvote\t4931 Got an upvote\t407 As you can see, getting an upvote and only an upvote is far less common than getting a Tumbleweed. Upvoted (and downvoted) questions are likely to either get a comment or an answer as well. Obviously getting a downvote discourages an asker and other interactions encourages them. If the Tumbleweed badge is successful as a consolation prize, we’d see people who get it asking more questions on the whole. The data does not support that hypothesis; instead, people who get a Tumbleweed badge are much less likely to ask a question ever again. So the Tumbleweed badge seems to be a worse consolation prize than if the system just gave out a downvote. Now you might wonder if Tumbleweed askers just have a knack for asking uninteresting questions. The data doesn’t bear out that hypothesis either. Askers who get one upvote tend to ask better subsequent questions and those who get a downvote tend to do worse. But people who “earn” a Tumbleweed do about as well as people who get an answer or a comment. In summary, the Tumbleweed needlessly discourages askers who might very well be asking good and interesting questions. After looking at the data, we decided to retire the Tumbleweed badge on Stack Overflow and the Stack Exchange network. That means everyone keeps the badges they have, but we won’t be awarding any new ones. Lifejacket and Lifeboat to the rescue Once we started thinking about badges and what purpose they serve, we considered behavior we’d like to recognize. As it happens, we test badge ideas in our annual Winter Bash event in which people pursue temporary hats to decorate their avatar. Like badges, hats can only be earned by doing something positive on the site and are triggered automatically. One hat trigger stuck out as really interesting: Red Baron. We even reused the idea a few years later and called it Maverick. The requirement was: “answer +5 a -3 question that goes to +3”. In other words, find a misunderstood question that has promise and answer it. But that’s not always enough. Sometimes the people earning the hat also edited the question in order to help it get upvotes. (Read about how one of our users, Air, went above and beyond to get the hat.) Instead of one badge, we decided to introduce two related badges: Lifejacket and Lifeboat. These badges reward reversing the score of a negative question by answering it in a way that sheds new, positive light on the question, raising its score. It’s an answer so good it makes the question look good by association! You can think of it as like someone finding a diamond in the rough and putting a little bit of work into showing the world its hidden value. Conceptually, it’s similar to Reversal, but with a more encouraging twist in that the question itself goes from negative to positive rather than staying negative. NameLifejacket TriggerA user posted an answer to a question with a score of <= -2 at the time The answer has a score of >=5 The question goes on to get a score of >=2 Don’t count the user’s votes on the question TierSilver Short descriptionPosted answer of +5 to question with a score of -2 that then increases to +2. CategoryAnswer Badges Can it be awarded multiple times?Yes Is it retroactive?Yes The gold version of the new badge pair is identical in concept to the silver tier; it’s just a lot harder to obtain. NameLifeboat TriggerA user posted an answer to a question with a score of <= -3 at the time The answer has a score of >=20 The question goes on to get a score of >=3 Don’t count the user’s votes on the question TierGold Short descriptionPosted answer with a score of +20 to a question with a score of -3 that then scored +3. CategoryAnswer Badges Can it be awarded multiple times?Yes Is it retroactive?Yes We’re retroactively awarding these badges so if you’ve rescued any questions in the past, that achievement will be recognized within about 24 hours. Again, this is for all sites on the network. Reversing Reversal Replacing Tumbleweed then brought us to reflect on the Reversal badge. The criteria for the Lifejacket and Lifeboat badges are tweaks of Ben Voigt’s suggestion for replacing Reversal from 2014. (Better late than never, right?) Reversal has nearly the opposite problem from Tumbleweed: it’s only been earned 304 times and takes real skill to pull off. Getting a score of 20 is not easy (there’s a separate badge for getting 25) , but it’s more difficult when the question has been downvoted to -5. Reversal rewards exceptional answers, but often the question gets deleted (along with the answer) after the badge is awarded: Reversal badges on Stack OverflowQuestion result 118Deleted 92Still negative score 66Zero or positive score For a badge named “Reversal”, it’s odd that the fortunes of just 22% of those questions were turned around. And 39% of those great answers are not even available anymore. One quirk of the Reversal badge is it’s more common on Meta Stack Overflow. A typical scenario is someone suggesting an unpopular feature in a question (which gets downvoted) followed by an explanation of why the feature is a bad idea (which gets upvoted). Unfortunately, the outcome for those meta questions is much worse: Reversal badges on Meta SOQuestion result 963Deleted 119Still negative score 31Zero or positive score It’s an interesting badge to earn, but it’s not at all positive for the asker and I’m not sure it always encourages productive behavior. Certainly the new badges will result in all-around better content than most of the answers that trigger Reversal. As a result, we’re retiring Reversal everywhere. You’ll keep your legacy badges, of course, and if the question has been upvoted enough, earn Lifejacket and Lifeboat too! Badge retirement home With two badges going out of service, the list of badges that are no longer awarded has grown: Analytical Documentation badgesTumbleweed and Reversal One of the purposes of badges is to let users show off their achievements. So we don’t want to hide retired badges. But another reason for badges is to suggest things for people to try out. Since none of these badges serve that second purpose, we’re going to place them in a “Retired Badges” section on the Badges Help Center page You’ll also see a note at the top of each retired badge’s page. Thank you! I’m excited to announce these changes because they represent a collaboration between many people over several years: Julia Silge’s analysis demonstrated that the Tumbleweed badge wasn’t serving its purpose.Meg Risdal is our Product Manager who led us to make these changes.Jane Willborn wrote the code.Nick Craver made sure the Lifejacket and Lifeboat triggers don’t break the site.Ben Voigt suggested the trigger we used first for Winter Bash hats and now for two new badges.A bunch of people tested those triggers on our sites and prodded us to keep considering something like these new badges. We also got a bunch of feedback about Reversal and especially Tumbleweed that helped us understand how they worked in practice. We’ve got an amazing community here! Lead image credit – “Whitstable Lifeboat. The Oxford Town and Gown.” by andrew simon uk – licensed under CC BY-NC-SA 2.0"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/05/17/update-to-security-incident-may-17-2019/","date":"2019-05-16T22:00:00.000Z","tags":["Company"],"title":"Update to Security Incident [May 17, 2019]","text":"Update (May 23, 2019): The affected 184 public network users have been notified via email. While we continue to investigate the recent attack to Stack Overflow, here is an update on what we’re able to share today. The intrusion originated on May 5 when a build deployed to the development tier for stackoverflow.com contained a bug, which allowed an attacker to log in to our development tier as well as escalate their access on the production version of stackoverflow.com. Between May 5 and May 11, the intruder contained their activities to exploration. On May 11, the intruder made a change to our system to grant themselves a privileged access on production. This change was quickly identified and we revoked their access network-wide, began investigating the intrusion, and began taking steps to remediate the intrusion. As part of our security procedures to protect sensitive customer data, we maintain separate infrastructure and networks for clients of our Teams, Business, and Enterprise products and we have found no evidence that those systems or customer data were accessed. Our Advertising and Talent businesses were also not impacted by this intrusion. While our overall user database was not compromised, we have identified privileged web requests that the attacker made that could have returned IP address, names, or emails for a very small number of Stack Exchange users. Our team is currently reviewing these logs and will be providing appropriate notifications to any users who are impacted. UPDATE: We can now confirm that our investigation suggests the requests in question affected approximately 250 public network users. Affected users will be notified by us. Our team has taken, and continues to take, a number of steps as part of our response to this incident, including: Terminating the unauthorized access to the systemConducting an extensive and detailed audit of all logs and databases that we maintain, allowing us to trace the steps and actions that were takenRemediating the original issues that allowed the unauthorized access and escalation, as well as any other potential vectors that we have found during the investigationIssuing a public statement proactivelyEngaging a third party forensics and incident response firm to assist us with both remediation and learningsTaking precautionary measures such as cycling secrets, resetting company passwords, and evaluating systems and security levels We will provide more public information after our investigation cycle concludes."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/05/16/security-update/","date":"2019-05-15T22:00:00.000Z","tags":["Company"],"title":"Security Update","text":"Over the weekend, there was an attack on Stack Overflow. We have confirmed that some level of production access was gained on May 11. We discovered and investigated the extent of the access and are addressing all known vulnerabilities. We have not identified any breach of customer or user data. Our customers’ and users’ security is of the utmost importance to us. After we conclude our investigation cycle, we will provide more information. Update: We shared a post on 5/17/19 with new information."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/04/30/announcing-a-new-tier-of-stack-overflow-for-teams/","date":"2019-04-29T22:00:00.000Z","tags":["Company"],"title":"Announcing a New Tier of Stack Overflow for Teams","text":"TL;DR If you’ve been using our Stack Overflow for Teams product and are part of a growing company, we’ve got exciting news. Today we’re launching a new tier, Stack Overflow for Business, that includes a lot of features customers have been asking for. You can learn more here. If you’re not familiar with what the private version of Stack Overflow can do to help your organization work smarter, read on. It’s been nearly two decades since Tim O’Reilly coined the term inner sourcing, which advocated for applying the principles of open source development beyond the IT department, leveraging those ideas to improve communication and collaboration across corporations of varying sizes and industries. Since then software has become a critical piece of nearly every business, and in order to succeed the best companies need to draw on ideas from across their organization and find ways to ensure that the best contributions bubble to the top. How do you crowdsource great information from within your own workforce? Stack Overflow learned a lot about community building and knowledge management in the decade we spent building our public facing website. It became a living compendium of great questions and answers for software developers. A few years ago we realized that this same structure might be valuable if turned inward, and so we began to launch private instances of Stack Overflow for clients like Microsoft and Bloomberg. That product grew into Stack Overflow for Enterprise, now used by Fortune 500 companies across tech, finance, and telecom. A year ago we launched Stack Overflow for Teams, allowing smaller organizations to tap into this same offering. Since then we’ve signed up 1,500 customers and 30,000 users ranging from startups to universities. At Expensify, one of our early customers, our Q&A offering has become an indispensable tool for the engineering team, but it has also been adopted by the entire company in order to access knowledge on topics such as customers success and data collection. It originally started as a place just for engineers because engineers were kind of used to it with the original Stack Overflow. But as we started to use it and see how nice it was to have a repository of information we started to see it spread to other teams so our customer support team started using it, our people success team started using it. Next thing we knew we had integrations all over the place and Stack Overflow being used across the company. As Teams and Enterprise have grown, we’ve begun to see a few areas where we could improve the fit. In classic Goldilocks fashion, there were some customers for whom Enterprise was a bit too big, and Teams was a bit too small. So today we’re rolling out a third tier, Stack Overflow for Business, which will sit in between those two. We think it’s best suited for organizations with 50 to 1,000 users, but we’re happy to chat with anyone who is interested. At a high level, the product will remain the same, but there are a couple of key features to note: Single Sign On (SSO) Invoice or Credit Card Analytics dashboard Priority Customer Support Stayed tuned! We’re working on lots more features geared to Business users When it becomes simple for anyone in your organization to share questions and answers, and when great ideas are rewarded and recognized, it’s like creating a giant incubator that exists to grow your business. A living dialog of this kind gives managers superpowers, the ability to see around corners and anticipate what problems need fixing and what products might be used in ways the original creators never imagined. If you’re interested in learning more about your own private version of Stack Overflow, get in touch here."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/04/09/the-2019-stack-overflow-developer-survey-results-are-in/","date":"2019-04-08T22:00:00.000Z","tags":["Company"],"title":"The 2019 Stack Overflow Developer Survey Results Are In","text":"We’ve been working hard for months, and today the Developer Survey results for 2019 are live. This year marks the ninth year we’ve published our annual Developer Survey, and nearly 90,000 developers took the 20-minute survey earlier this year. See the results for yourself! What are some of this year’s key results? Python, the fastest-growing major programming language, has risen in the ranks of programming languages in our survey yet again, edging out Java this year and standing as the second most loved language (behind Rust). Over half of respondents had written their first line of code by the time they were sixteen, although this experience varies by country and by gender. We asked respondents to think about the last time they solved coding problems with and without our site. The data indicates that Stack Overflow saves a developer 30 to 90 minutes of time per week! Dig into the full report to learn more about developer salaries, how optimistic developers are, the best music to listen to while coding, and more. Stack Overflow’s annual Developer Survey is the largest and most comprehensive survey of people who code around the world, but our results don’t represent everyone in the developer community evenly. We have further work to do to make Stack Overflow the welcoming, inclusive, and diverse platform we want it to be, and this is reflected in our survey sample. We are committed to building on steps we’ve taken in the past year and improving in this area this year and beyond. Some of these survey results directly guide those efforts. To address these characteristics of our survey sample, we often summarize results by country or gender, highlight results for underrepresented racial/ethnic groups, or use survey weighting to correct for demographic skew. Be sure to check out where we’ve pointed out these kinds of differences. We’ll make the anonymized results of this year’s survey publicly available under the Open Database License (ODbL) in May. Until then, you can access the data sets from previous years. Have questions or feedback? Head over to Meta and use the [survey-2019] tag."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/03/28/the-next-ceo-of-stack-overflow/","date":"2019-03-27T23:00:00.000Z","tags":["Company"],"title":"The Next CEO of Stack Overflow","text":"Big news! We’re looking for a new CEO for Stack Overflow. I’m stepping out of the day-to-day and up to the role of Chairman of the Board. Stack Overflow has been around for more than a decade. As I look back, it’s really amazing how far it has come. Only six months after we had launched Stack Overflow, my co-founder Jeff Atwood and I were invited to speak at a Microsoft conference for developers in Las Vegas. We were there, I think, to demonstrate that you could use their latest ASP.NET MVC technology on a real website without too much of a disaster. (In fact .NET has been a huge, unmitigated success for us, but you kids go ahead and have fun with whatever platform you want mkay? They’re all great, or, at least, above-average).It was a giant conference, held at the Venetian Hotel. This hotel was so big that other hotels stay there when they go on vacation. The main ballroom was the size of, approximately, Ireland. I later learned there were 5,000 developers in that room.I thought it would be a fun thing to ask the developers in the room how many of them had visited Stack Overflow. As I remember, Jeff was very much against this idea. “Joel,” he said, “That is going to be embarrassing and humiliating. Nobody is going to raise their hand.”Well, I asked it anyway. And we were both surprised to see about one-third of the hands go up. We were really making an impact! That felt really good.Anyway, I tried that trick again whenever I spoke to a large audience. It doesn’t work anymore. Today, audiences just laugh. It’s like asking, “Does anyone use gravity? Raise your hand if you use gravity.”Where are we at after 11 years? Practically every developer in the world uses Stack Overflow. Including the Stack Exchange network of 174 sites, we have over 100 million monthly visitors. Every month, over 125,000 wonderful people write answers. According to Alexa, stackoverflow.com is one of the top 50 websites in the world. (That’s without even counting the Stack Exchange network, which is almost as big.) And every time I see a developer write code, they’ve got Stack Overflow open in one of their browser windows. Oh and—hey!—we do not make you sign up or pay to see the answers.The company has been growing, too. Today we are profitable. We have almost 300 amazing employees worldwide and booked $70m in revenue last year. We have talent, advertising, and software products. The SaaS products (Stack Overflow for Teams and Enterprise) are growing at 200% a year. That speaks to the fact that we’ve recruited an incredibly talented team that has produced such fantastic results. But, we have a lot of work ahead of us, and it’s going to take a different type of leader to get us through that work. The type of people Stack Overflow serves has changed, and now, as a part of the developer ecosystem, we have a responsibility to create an online community that is far more diverse, inclusive, and welcoming of newcomers. In the decade or so since Stack Overflow started, the number of people employed as software developers grew by 64% in the US alone. The field is going to keep growing everywhere in the world, and the demand for great software developers far outstrips supply. So a big challenge for Stack Overflow is welcoming those new developers into the fold. As I’ve written:One thing I’m very concerned about, as we try to educate the next generation of developers, and, importantly, get more diversity and inclusiveness in that new generation, is what obstacles we’re putting up for people as they try to learn programming. In many ways Stack Overflow’s specific rules for what is permitted and what is not are obstacles, but an even bigger problem is rudeness, snark, or condescension that newcomers often see.I care a lot about this. Being a developer gives you an unparalleled opportunity to write the script for the future. All the flak that Stack Overflow throws in the face of newbies trying to become developers is actively harmful to people, to society, and to Stack Overflow itself, by driving away potential future contributors. And programming is hard enough; we should see our mission as making it easier.The world has started taking a closer look at tech, and understanding that software and the internet are not just tools; they are shaping the future of society. Big tech companies are struggling with their place in the world. Stack Overflow is situated at the right place to be influential in how that future develops, and that is going to take a new type of leader.It will not be easy to find a CEO who is the right person to lead that mission. We will, no doubt, hire one of those fancy executive headhunters to help us in the search. But, hey, this is Stack Overflow. If there’s one thing I have learned by now, it’s that there’s always someone in the community who can answer the questions I can’t. So we decided to put this announcement out there in hopes of finding great candidates that might have been under the radar. We’re especially focused on identifying candidates from under-represented groups, and making sure that every candidate we consider is deeply committed to making our company and community more welcoming, diverse, and inclusive.Over the years, Fog Creek Software created several incredible hits and many wonderful memories along the way. It is great to watch Trello (under Michael Pryor) and Glitch (under Anil Dash) growing into enormously valuable, successful, and influential products with dedicated leaders who took these products much further than I ever could have, and personally I’m excited to see where Stack Overflow can go and turn my attention to the next thing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/02/14/recapping-stack-overflows-first-ever-make-a-thon/","date":"2019-02-13T23:00:00.000Z","tags":["Company"],"title":"Recapping Stack Overflow’s First Ever Make-A-Thon","text":"After an exciting end to 2018, we kicked this year off with the first “hackathon” in Stack Overflow’s 10-year history. Unlike a traditional hackathon, it wasn’t just for our developers. Any employee working on our products or directly with the Stack Overflow community was encouraged to participate, which is why we dubbed the event a “Make-A-Thon.” Employees from our engineering, design, and support teams spent a full week working on projects outside of their typical day-to-day responsibilities. For our inaugural Make-A-Thon, participants brainstormed improvements to our power user and moderator experience on Stack Overflow. Here’s a recap of what we hoped for when we announced the Make-A-Thon, what the outcomes were, and what we learned from the experience. A Make-A-Thon with “Anti-Goals” While hackathon participants often hope to create working prototypes, that wasn’t a goal for our first Make-A-Thon. In fact, Design Manager and Make-A-Thon organizer Kristina Lustig used the term “anti-goal” to describe the overall sentiment towards shipping anything after the end of the week. “We wanted to avoid giving people at the company or anyone in our community the sense that we’d only focus on these products during a Make-A-Thon,” she said. “We were really intentional about not turning it into a ‘Wild West’ product development sprint.” Because this was Stack Overflow’s first attempt at a hackathon, Lustig told us that there were two primary goals for the event. “The hope was to learn where the issues were and see how we might work them out for the next one,” she continued, “but we were also excited to give people at the company the chance to tackle the power user experience on Stack Overflow, which they had been eager to do for quite a while.” Accomplishments Already Affecting the Stack Overflow Experience There were 13 Make-A-Thon teams with names like The Ergonomic Toadstools and The Hot Dogs. Each team presented on a wide variety of projects on January 11th, ranging from overdue bug fixes to site-wide improvements for power users such as responsive review queues. Aaron Shekey, Design Systems Lead at Stack Overflow, said that he was pleasantly surprised by how much the teams were able to accomplish during the Make-A-Thon. “I had some healthy skepticism at the beginning of that week but was shocked at how many quick wins we had,” he told us. “We were able to test our design system, delete a lot of old CSS, and ship some better moderator experiences all within a week.” Another team worked on code fences, which allow developers to render something as code on Stack Overflow using backticks or tildes. We’ve received many requests from our community over the years to make our code syntax more consistent with other sites, many of which use CommonMark. When the team shipped code fences at the end of the week, it was widely celebrated by the community. Additionally, the Make-A-Thon turned out to be a revelation for other participants. “There were parts of the site that I had never heard of,” Lustig said. “For example, I had no idea how complicated translation and localization were on our sites until I saw improvements during the demos.” Lots of Learning to Drive Our Next Make-A-Thon Everyone involved with our first Make-A-Thon felt that it was a success, but Lustig tells us that the issues she hoped to discover were abundantly clear by the end of the week. “I think people needed more advance notice about the Make-A-Thon,” she continued. “It was difficult for people like product managers to participate because they couldn’t spend a week away from upcoming releases.” Lustig also says that she hopes for increased participation from non-technical employees that work on the product. “I’m sure there are projects that involve no code at all, that people just haven’t had the chance to think about,” she said. “We’ll be even more outspoken in the future about how the Make-A-Thon is a great opportunity to work on those things.” Want to participate in future Make-A-Thons? We’re hiring for roles across the company! You can check out our open positions and apply here."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/02/07/how-the-2019-stack-overflow-developer-survey-came-to-be-and-your-last-chance-to-take-it/","date":"2019-02-06T23:00:00.000Z","tags":["Code for a Living"],"title":"How the 2019 Stack Overflow Developer Survey Came to Be (And Your Last Chance to Take it!)","text":"For nine years, we at Stack Overflow have fielded a survey, asking people who code about their opinions on a variety of topics, from whether they prefer a dark or light theme in their IDE to how their challenges change with experience. This is a huge project for us each year, with contributions in 2019 from product managers, our UX researcher, designers, community managers, web developers, marketers, and me, Stack Overflow’s data scientist. We learn so much each year from our Developer Survey, both from the results and the process of fielding it; right now, we have a massive Google Doc of things to do better! One lesson that stands out is how important careful preparation is. Looking back at past years, we haven’t always been as successful at this as we’d like, but we’re proud of our progress on some challenging issues including survey design, data analysis reproducibility, and using language that connects with a broader population of developers. There were three main folks involved in the planning of the actual survey questions and how you as a respondent engage with them. The first is Anita Taylor, a product manager here at Stack Overflow who is leading the 2019 Developer Survey. “We try to incorporate as much feedback as we can from two audiences, the external developer community and internal Stack Overflow stakeholders,” Anita says. “Internally, we get input on proposed questions from dozens of Stack Overflow employees and then ask our engineers to take the survey and give us feedback. On the developer side, we did three things: reviewed direct feedback from last year’s survey, took suggestions for new questions, and got input from 1,600 developers who took a test version of the survey.” Anita also is responsible for managing the technical details of how respondents interact with our survey. We experienced a few hiccups in this area because of the third-party survey platform we use, such as geographical challenges and ad-blocker issues, and we are exploring options for future surveys. The second main person involved in planning the Developer Survey this year is Beth Devine, Stack Overflow’s UX researcher. Beth’s deep user research experience has contributed to some significant improvements in question and survey design this year. “I was lucky to come on board with a great survey from 2018 to work from, but one of our biggest priorities this year was trimming the survey length,” says Beth. “Last year people overwhelmingly said it was too long.” It turns out this was harder than those of us planning the survey expected! “It’s a delicate balance between respecting that feedback and trying to make room for all the questions we’d like to ask,” Beth shares. “One solution was to identify questions and topics that had very consistent responses over the past few years. We realized that we weren’t learning a lot of new information, and that asking them every other year might be a better use of space. It still allows us to track trends in the data over time.” Last years’ median time to finish clocked in at almost 30 minutes. We successfully shortened it this year, without sacrificing too much, and as of today, this year’s respondents are finishing with a median time of 23 minutes. The third main person involved in planning the 2019 survey is me, Stack Overflow’s data scientist. I worked with Beth in detail on question writing, so that our expectations for data analysis were aligned. I also used data from last year’s survey and trends in tags on our site (such as those visualized in our Trends tool) to choose which technologies to include on the survey. We wanted to include the most popular and fastest growing technologies without overwhelming the respondent with an extremely onerous list to scroll through. I used the write-in options from last year to check out technologies we may have missed, and we carefully considered which smaller or shrinking technologies we would be comfortable leaving off this year. If we cut one of your favorite technologies, a) I’m really sorry and b) please do write it in the text box! So the 2019 Developer Survey is live now but for only a few more days — take it before it closes! The final question on the survey this year is, “Do you have any feedback or thoughts you’d like to share?” What are people saying so far? We’re doing our best to capture the opinions of everyone who codes, everywhere, so if you have a friend, family member, or colleague who codes but isn’t a registered Stack Overflow user, or is just getting started with coding, please send the survey their way!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/01/23/our-2019-developer-survey-is-open-to-coders-everywhere/","date":"2019-01-22T23:00:00.000Z","tags":["Code for a Living"],"title":"Our 2019 Developer Survey is Open to Coders Everywhere!","text":"What languages do you want to work with next year? Are you more productive in an office or working from home? When did you write your first line of code? We want to hear from you in our annual developer survey! The survey, now in its ninth year, launches today and anyone who codes is encouraged to participate. Take the 2019 survey! This year’s survey questions are designed to gain insight into developer career paths, programming languages and tools, working preferences, and overall opinions and feedback. There are some fun questions, too (like previous years’ tabs vs. spaces and gif vs. “jiff”)! We heard you loud and clear last year when you asked for a shorter survey. We did our best to deliver without sacrificing valuable insight, and we shaved off about five minutes from last year’s survey. The survey should take about 25 minutes to complete. Survey results are used by Stack Overflow, as well as our community, and are picked up by media outlets around the world. Accordingly, we want to make sure we’re putting our best foot forward. If you have feedback as you take the survey or once you complete it, we’d love to hear it! Keeping with tradition, anonymized survey results will be available publicly under the Open Database License. You’ll be able to download and analyze the dataset later this year, just like we explored last year’s data in our interactive widget below to glean user feedback. If you use security or ad-blocking plugins, you may see error messages Our third-party software provider, Qualtrics, does not work well with certain ad blockers and security software. To avoid error messages that prevent you from taking the survey, please try specifically unblocking Qualtrics in your plugin or pausing the plugin while you take the survey. What do users say about Stack Overflow? On the 2018 Stack Overflow Developer Survey, we asked users what the best, worst, most exciting, and most annoying things about Stack Overflow are. Here are their answers. Certain survey answers are treated as personally identifiable information, and therefore excluded from the anonymized results. These questions are highlighted in the survey with a note saying, “This information will be kept private.” The survey is expected to close on February 12th. If you’re a registered user who completes the survey in its entirety, you have the option to get the Census badge on Stack Overflow or a different technical site in the Stack Exchange network. (If you’re not yet a registered user, sign up here.) Thanks in advance for your time and thoughtfulness!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2019/01/18/state-of-the-stack-2019-a-year-in-review/","date":"2019-01-17T23:00:00.000Z","tags":["Company"],"title":"State of the Stack 2019: A Year in Review","text":"A loooong time ago, we used to post an annual “State of the Stack” update on the company and community. Then at some point it became an infographic which was… listen, everyone was doing infographics in 2011. Now it’s 2019, the company has grown and changed in so many ways, so we’re bringing this tradition back and taking a look at how far we’ve come while being open and honest about how much work we have left to do. 2018 was a big year! Some stats: Across all of Stack Overflow and the Stack Exchange network, we saw 9+ billion pageviews from 100+ million users over the course of the year. Stack Overflow alone had over 2.5 million answers and 2 million new questions, with over 1.6 million new users joining the community. Our community members and volunteer moderators handled almost 2 million flags, to keep abusive, unwelcoming, and inappropriate content off the site, and apply our updated Code of Conduct. Over 40,000 jobs were posted on Stack Overflow Jobs. We now have over 900,000 searchable profiles of developers who are interested in being contacted about a job on Stack Overflow Talent. And we launched Stack Overflow for Teams, a new way for developers to use the power of Stack Overflow Q&A inside their organization. Thousands of organizations are already using it to help their teams share knowledge and ship faster. All of this matters because Stack Overflow exists to help everyone who codes learn and share their knowledge. Every time someone finds a solution to a problem, learns something new, or finds an opportunity to grow their career on Stack Overflow, we’re all advancing that mission together. We also know that we still have a lot of work to do. Stack Overflow helps a lot of people today, but it is not yet the the welcoming, inclusive, and diverse platform we want it to be. That’s something we are committed to continuing to improve on this year, but we can’t do it without your help! Community Update: Welcoming everyone who codes Stack Overflow has never been about the company, or about any one user. It’s about bringing all the world’s developers together to learn from one another, and together creating shared artifacts that help millions of people all over the world. It’s about creating a community where everyone who codes — regardless of how they identify, where they work, or where they went to school — can participate and feel welcome. That said, good intentions aren’t good enough and we’ve fallen short of that ideal in a lot of ways: too often people feel unwelcome, unheard, and unable to help or to find help, particularly women, people of color, and other underrepresented groups. This has to change, and it starts with us, the company, providing the tools and support that you need to help one another. In May, we launched what we call the “Welcome Wagon”, an effort to identify and improve areas where we can do better. This is a collaborative effort, with our developers, user researchers, data scientists, and community managers reaching out to community members, moderators, and voices from outside the community to work together on solutions. We’ve made a lot of progress in half a year. We rolled out a new Code of Conduct and added new flags on comments to identify both abusive and unkind comments. We added a “New Contributor” indicator to encourage people to be helpful and friendly to new users, and we’re testing a new Ask Question wizard to help guide users through asking their first question. But we’re still just scratching the surface. One thing we’ve heard loud and clear from the community is that we need to also address a lot of existing bugs and community debt. These issues have accumulated over the years to lead to confusing and frustrating experiences for all of our users, and we haven’t been doing enough to prioritize fixing them. So in 2019 we’re going to be redoubling our efforts on this, adding more devs, designers, PMs, and community managers internally (in fact, we’re hiring right now.) They’ll be split across two major initiatives: continuing the Welcome Wagon work of making Stack Overflow more welcoming and inclusive, and a newly focused effort on community improvements and expert user experience. Business Update: How does Stack Overflow make money again? Stack Overflow has three main business lines: Stack Overflow for Teams and Enterprise, our newest product, brings the power of Stack Overflow Q&A to organizations in a private, secure space just for internal teams. Our Advertising products help companies reach and engage the developer community with on-topic, relevant ads. And Stack Overflow Talent helps organizations reach, attract, and hire the right technical talent for their team. The biggest expansion in our business this year by far was on Teams and Enterprise. The product idea is simple: give organizations a private version of Stack Overflow Q&A just for their team. While Stack Overflow public Q&A has been enormously successful at helping programmers share knowledge and find quick solutions to their problems, it can only ever solve a fraction of the problems professional programmers face because most programmers work on private code they can’t ask about in public. Every software team struggles with documentation and knowledge sharing, and Stack Overflow is designed to enable developers to write reusable snippets of documentation for one another in a way that doesn’t feel like a chore. It probably shouldn’t be a surprise that so many customers are finding that Stack Overflow helps their team onboard more quickly, reduce knowledge silos, and ship code faster. Thousands of organizations are already using Stack Overflow for Teams and raving about it, and Stack Overflow for Enterprise is seeing success in Fortune 500 companies that range from major technology companies to the world’s largest financial service firms. Between the explosive growth of Teams and Enterprise, and the continuing value of Talent and Advertising, 2018 added up to the best financial year in Stack Overflow’s 10-year history. While we’re not quite swimming in pools of cash yet, we’ve never been on better footing heading into a new year of growth. Company Update: Who are all these people? As the work has grown, so has the company. We now have employees in 14 different countries, working either in our offices in New York, London, Munich, and Denver, or remotely from wherever they happen to live. We’ve been working hard to create a more diverse team and inclusive team internally. We’re taking a look at our policies, benefits, interview practices, and internal trainings to make sure that we’re supporting the team we have. We’re also working hard to recruit a more diverse team. Globally, the number of people working at Stack Overflow who identify as women, non-binary, or transgender is now 39% (including 42% in management and leadership, and 32% in technical roles), and 15% of US employees are from an under-represented racial or ethnic group (10% in management and leadership, and 9% in technical roles). While this isn’t where we want to be, it represents substantial growth over the past few years. In 2018, we also concluded a third-party compensation review to address any gender or racial pay gaps, and implemented a Rooney Rule for tech and leadership hiring to ensure we continue to address the gaps in our hiring. We rolled out some new employee-friendly policy updates, too. For employees who have been here for more than two years, we have an extended stock option exercise window so that employees aren’t forced to exercise their options 90 days after leaving (and often pay hefty taxes) or lose them forever. We also extended our fully-paid parental leave to 16 weeks for primary caregivers and 12 weeks for secondary caregivers, and removed pro-rating in your first year (so everyone gets the full amount regardless of how recently they joined). In 2018, 13 people in the company took advantage of our sabbatical policy to take an extended break to travel the world, work on a side project, learn a new instrument, or just spend time with their family. We’re very proud of our sabbatical policy, which lets any employee who has been here for five years take an extra four weeks of paid time off to rest, recharge, and spend time on things they care about. I think it’s one of the reasons why so many of our earliest employees are still with the company. Get Involved: Help us build the future of Stack Overflow! 2018 was a big year for Stack Overflow, and I’m excited for what 2019 holds. Developers are shaping the future of the world, and we have a responsibility to help push that future in the direction of more openness, diversity, collaboration, and empathy. If we can do the hard work to make Stack Overflow a place where everyone who codes feels welcome and able to contribute, extend that to every company through Stack Overflow for Teams and Enterprise and Stack Overflow Talent, we can change the world for the better. And the best part is that anyone can join in and be a part of this mission. If you’ve never joined the community or tried asking or answering your first question, there’s no better day than today! The community works because regular, every day programmers like you decided one day to give something back and help someone out. By treating people with empathy and respect, you’ll help us create a more welcoming and inclusive community. If your company thinks knowledge sharing is a priority, give Stack Overflow for Teams a try — it’s free for the first 14 days and starts at just $10 per month (flat!) for your first 10 users. Or if you’re looking to hire developers, or reach our massive global audience of developers, try Stack Overflow Talent and Advertising. And if you’re looking for a new challenge yourself, we’re hiring, and not just developers: it takes a team to make all this happen, so we’re looking to grow everything from Sales and Customer Success to IT, Marketing, Product, Design, Finance, and more. Finally, if you’re already a member of the community, THANK YOU for all you do to help others. We still have a lot of work to do to make Stack Overflow the welcoming, inclusive, and diverse community we want it to be, and we can’t do it without you! So if you have ideas, suggestions, or ways we can help you in 2019, please let us know. Tags: announcements, company, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/12/20/10-years-of-stack-giving-back/","date":"2018-12-19T23:00:00.000Z","tags":["Company"],"title":"Ten Years of Stack Giving Back","text":"In 2009, Stack Overflow’s three employees (or associates, as they were then called) were inspired to end the year by giving back. To recognize our amazing community of moderators, we made small contributions to six nonprofits. Since then, we’ve donated over $350,000 through what we’ve dubbed Stack Overflow Gives Back. This year, we’re celebrating the initiative’s 10th anniversary (along with the 10th anniversary of our company!). This month our 577 incredible community moderators selected from five charities to which we will donate $100 on their behalf (that’s $57,000!). Our sites literally couldn’t succeed without these incredible volunteers, so we’re proud to be able to give a little back to some wonderful causes in thanks for all their efforts. Today, we’re celebrating each of the organizations and highlighting how these contributions may impact each one: Crisis Text Line – $7,700 donation A series of high-profile and heartbreaking deaths this year brought much-needed attention to mental health issues. We recognize that there’s a lot of stigma around talking about mental illness, and that’s why we’re happy to support a nonprofit that’s leveraging technology to do something about it. Crisis Text Line provides free, 24/7 confidential support for those in crisis, whether it’s depression, anxiety, eating disorders, bullying, or suicidal thoughts. Crisis Text Line acts as a simple support resource, while using data to make us better and to improve communities. Our donation to the organization this year will support about one month of the technology required to keep the platform up and running. Doctors Without Borders – $19,000 donation Our community of moderators is incredibly global, and Stack Overflow is used by people all over the world. Doctors Without Borders is one of the world’s most robust efforts to provide medical aid where it’s needed most. The nonprofit has reach into more than 70 countries around the world. They do everything from providing emergency response and access to healthcare to advocating for medical care and research. Doctors Without Borders impacts everything from Ebola outbreaks and the ongoing HIV/AIDS crisis, to the malnutrition that affects over 20 million children. Few organizations are able to tackle so many issues and touch so many people as Doctors Without Borders. Electronic Frontier Foundation – $12,800 donation A lot of legislation was passed in 2018 all over the world, and not all of it was great for a free and open internet. Fortunately, organizations like The Electronic Frontier Foundation (EFF) are monitoring legislation and court cases in order to fight the good fight. EFF is the leading nonprofit defending digital privacy, free speech, and innovation. They champion these things through impact litigation, policy analysis, grassroots activism and technology development. The foundation works to ensure that rights and freedoms are enhanced and protected as our technology grows. Pursuit – $6,800 donation Over the past year, Stack Overflow has taken big steps to make the site more welcoming and inclusive. This is why we’re especially excited about Pursuit, a non-profit that welcomes 200+ people into coding and tech every year. Pursuit partners with tech companies to create new pathways for high-need, high-potential employees by training their blue-collar and non-traditional workers to become software engineers. Over a four-year Fellowship, Fellows spend 10 or 12 months in intensive training, followed by three years of one-on-one career support. The Fellowship’s Graduates’ average annual salaries have quadrupled, going from about $18,000 a year to $85,000. Sea Legacy – $11,400 donation Intellectual curiosity drives many of our contributors. There are a number of excellent nonprofits working to combat climate change and save our planet, and Sea Legacy is doing just that by relying on people’s intellectual curiosity to catalyze change. The nonprofit works to create healthy and abundant oceans by producing powerful media and art that gives people hope. Sea Legacy is a collective of some of the most experienced and renowned photographers, filmmakers, and storytellers, working together on behalf of our oceans. Their important and ambitious work is on display in their popular Instagram. And their Instagram is a key part of their bold goal: to engage one billion people in ocean conservation. They’ve already reached a potential audience of 1.8 billion people, which is the advertising equivalent of $16.8 million. While we’re super excited to be giving back to these impactful nonprofits, it’s also important that we recognize the tools and organizations that help our Engineering and IT teams do their jobs everyday. This year, we donated $1,000 to each of the following organizations Powershell Summit OnRamp; OpenSSL Foundation; HAProxy; LetsEncrypt; Free Open Ghost. We are thrilled to be supporting so many important and impactful organizations, but more than anything we’re feeling very grateful for our moderators and our community. They contribute so much to Stack Overflow, which contributes so much to the world. We (Stack Overflow’s now more than three employees, who are no longer called associates) are humbled to be giving a little something back on their behalf. Cheers to an incredible 2018 and an exciting New Year! Tags: announcements, company, stackoverflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/12/04/welcome-wagon-community-and-comments-on-stack-overflow/","date":"2018-12-03T23:00:00.000Z","tags":["Community"],"title":"Welcome Wagon: Community and Comments on Stack Overflow","text":"This past summer, we wrote our first blog post about comments on Stack Overflow, focusing on our initial work rating comments internally at Stack Overflow and what we learned. Since then, we’ve fielded this comment rating task more broadly in our community. This blog post shares some of what we are learning. Engaging our community I (Jason) wrote a web application that presents a user with a comment thread from a post on Stack Overflow and asks the user to rate each comment in the thread as fine, unwelcoming, or abusive. Our first blog post shared results from when we asked employees at Stack Overflow, including developers, product managers, and executives, to rate comments. In August, we rolled out our new Code of Conduct, along with new flags for comments that align with these categories, one flag for rude/abusive and one flag for unfriendly/unkind. This fall, we extended our comment classification task beyond our employees to our larger community. We invited individuals from three groups to rate comments. Moderators on Stack Overflow and other Stack Exchange sites Individuals who responded to our blog post in April, indicating they want to help make Stack Overflow more welcoming A sample of registered users from our general research list (you can opt in/out of our research list in your Stack Overflow email settings) To log in to this web app and record data, each user needed a Stack Overflow account, so users had to make an account if they didn’t have one already. We asked participants to invest at least one hour in rating comments, and to not work for more than 20 minutes at one sitting. What kind of response did we get? Overall, there were 525 users who spent at least 15 minutes or more rating comments. They made 253,807 ratings of 40,358 distinct comments. How many users and comment ratings did we have, for each kind of user? TypeUsersComment Ratings Employee4613,300 Welcome Project7935,849 Moderator100103,661 Research List300100,997 The moderators demonstrated their enormous commitment to our community through this project, as they do consistently day in, day out; moderators who participated in this project rated an average of over 1,000 comments each. Folks who responded to our blog post expressing interest in welcome/inclusion on Stack Overflow also invested a great deal of time, rating over 500 comments each. We see can see this visually by looking at the cumulative distribution functions for each kind of user; this kind of plot shows, for each number of comment ratings, the percentage of users who rated that many comments or lower. If you’re not used to interpreting this kind of graph, take a look at x = 1000, the location on the x-axis that corresponds to 1,000 comments. The line for the moderators is the lowest, indicating that more moderators submitted more comment ratings compared to the other groups. Group differences Different kinds of people experience Stack Overflow in different ways. If we look at all the ratings made by the different types of users aggregated, how do the different kinds of groups perceive these comments on Stack Overflow? TypeFineUnwelcomingAbusive Employee91.8%7.7%0.4% Moderator95.0%4.8%0.2% Research List95.6%4.3%0.1% Welcome Project96.6%3.3%0.1% The highest rates of unwelcoming comments were identified by the internal employees at Stack Overflow, followed by Stack Exchange moderators. We trust and support our moderators, and in this specific project, moderators demonstrated their understanding of unfriendly and unwelcoming behavior in comments. Regular registered users from our research list perceived the next lowest rate of unfriendly comments, and users who responded to our blog post about making Stack Overflow more welcoming found the lowest rates of unfriendly comments of all. How can we interpret this? We specifically invited users who may not consider themselves active participants in our community in order to gain outside perspective, but then these users saw the lowest rates of unwelcoming behavior. A possible explanation is that we are seeing a real effect of deep experience with our site; it appears the more invested an individual is here at Stack Overflow, the more sensitive they are to problematic behavior. What do these unfriendly comments look like? The following combine elements of real comments to show typical examples. “Why do you want to do this? You have conflated at least three problems here.” “It will be very hard to help you with such a trivial bug. It could come from any line in your code, and we have to guess.” “How exactly is this going to solve my problem?!” “You don’t understand how to use this site. Here nobody codes for you; read the docs and then show us.” “What are you actually trying to achieve? Please learn how to use a debugger.” Our project showed that the more deeply an individual is connected to Stack Overflow (as an employee, or a moderator), the more they are likely to see problems in comments like these. This effect is robust to comparing groups who were shown the same comments, who rated the same number of comments, and other analytical approaches. Individual differences What do the distributions of ratings for each individual look like? Each individual did not rate the same set of comments and worked for different lengths of time, so we expect variability in the results for each individual. Overall, the median percentage of perceived unwelcoming comments per individual was 3.5%, quite a bit lower than the median percentage for employees of 6.5%. To understand how much agreement there is between raters, we can again look at Krippendorff’s alpha, a measure that ranges from zero (nobody agrees) to one (perfect agreement). This measure accounts for the number of raters, so we can compare agreement among employees to the groups with more raters. What is Krippendorff’s alpha, for comments that were rated by at least three people? These values for alpha are low compared to what social scientists would use to draw reliable conclusions based on the ratings; social scientists look for values close to 0.8 or more. Notice that Stack Overflow employees rated more comments as unwelcoming than other groups but agreed with each other about what is unwelcoming and abusive at higher rates at the same time. The rate of agreement among moderators and registered users was lowest (although still much higher than for people unfamiliar with Stack Overflow), and the rate of agreement for the users who volunteered to help make Stack Overflow more welcoming was a bit higher. Remember that these were the users who rated the lowest overall levels of unfriendliness; some spot-checking indicates these users identified only the clearest examples of problematic text. Another factor that impacts interactions on Stack Overflow is reputation. Do we see any difference in how raters perceived unwelcoming behavior with their own reputation? This can help us understand if “power users” (distinguished from moderators) may be driving problems with site culture. There is no clear evidence in this plot for a relationship, indicating that high-reputation users perceive unfriendly behavior at about the same rate as low-reputation users. We have seen effects similar to this before, for example, in our annual Developer Survey. When asked what the worst or most annoying thing about Stack Overflow is, developers of all experience levels and self-reported activity levels on Stack Overflow mentioned issues with harsh interactions and site culture. All together, this begins to paint a complex and interesting picture of who understands unwelcoming behavior and in what ways. Moderators and high-reputation users are just as likely, or even more likely, to identify unwelcoming comments compared to new users. Stack Overflow employees identify more comments as problematic and agree with each other more about what is a problem compared to the other kinds of users in this project. Next steps So where do we go from here? For starters, we as employees learned that we don’t always perceive problems in the same way as other members of our community. We will keep this in mind as we move forward with plans to make Stack Overflow a better place for developers to learn and share knowledge. We plan to use this dataset to investigate how comments are used on questions and answers, toward users of different experience levels, in different communities, and more. Look for more blog posts on these issues in upcoming months. We will continue to use the results from this project in product changes on Stack Overflow, as well as directly using appropriate subsets of this data in machine learning models. Also, in 2019 we will release this dataset (comment IDs, comment ratings, and anonymized/randomized rater ID) upon request so that other people in our community and beyond can explore this data for themselves. All of this would not be possible without the investment of time and energy of the individuals who participated in this project, and we want to acknowledge each of you who volunteered to help us understand this aspect of our site better. Thank you, for your care and time. Community is central to our identity at Stack Overflow, and we are committed to making Stack Overflow a healthy, inclusive place for developers to learn and share knowledge."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/10/12/exciting-leadership-announcements/","date":"2018-10-11T22:00:00.000Z","tags":["Company"],"title":"Exciting Leadership Announcements","text":"It’s been an exciting 2018 for Stack Overflow. In late spring, we launched our Welcome Wagon initiative to make the network more welcoming. In May, we shipped Stack Overflow for Teams and made our knowledge-sharing platform accessible to teams of any size. And September marked our 10th anniversary, which celebrated the 25 million answers to 16 million questions that have been viewed 12.3 billion times by developers. We’ve grown the ways that we serve developers, and we’re growing our Executive team to support these initiatives as well our ever-expanding community. The team has two new members, and one of our long-time executives has a new role. Our CTO, David Fullerton, was promoted today to President and CTO. This promotion recognizes David’s hard work and contributions over eight years (!) at Stack Overflow. David worked his way up through the ranks here. He started at Fog Creek as an intern; he spent years as a developer and then as a team lead at Stack Overflow before becoming CTO. He’s accomplished a lot and through it all, he’s demonstrated incredible servant leadership — a value that guides everyone at Stack Overflow. He’s the best person to help our company grow and evolve while remaining rooted in our mission to serve all the world’s developers. We also have a new VP of Engineering, Mary Ferguson. With David in his new role, our Engineering team is in great hands under her leadership. Mary joined Stack Overflow at the end of September after spending over three years at Etsy, most recently as their VP of Engineering. She’s also had senior technology roles at Amplify Learning and Katzenbach Partners. Her career has been distinguished by the common goal of organizing engineering teams to keep them happy, healthy, and diverse. This is in exact alignment with Stack Overflow’s values embracing servant leadership and growing an inclusive and diverse organization. Last but not least, I joined the company in June. Hi! I’m Khalid El Khatib, Stack Overflow’s VP of Marketing and Communications. I’m responsible for our marketing and advertising initiatives and for communicating company announcements externally and internally (like this one). I came to Stack Overflow from a company called GLG. Before that I worked at Teach For America and at an advertising agency. In addition to my day jobs, I’ve long contributed to publications like PAPER, VICE, and OUT on art, culture, and LGBTQ issues. The common thread through my career is that everything successful I’ve worked on (website redesigns, app launches, even articles that have gone viral) was in large part thanks to brilliant engineers. I’m thrilled to be working alongside so many today and to help amplify their voices here. More than anything, I’m excited to be a part of what Stack Overflow is doing — helping developers write the script of the future. It’s a bonus to have fantastic colleagues like David and Mary. The three of us are deeply committed to growing Stack Overflow in a way that’s consistent with our mission and values and to making sure our community is at the heart of everything we do. So, congratulations to David! Welcome, Mary! And more from me soon."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/09/27/stack-overflow-is-10/","date":"2018-09-26T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow is 10!","text":"Ten years ago, a lot was happening. Barack Obama and John McCain were running for U.S. president. Lehman Brothers’ collapse triggered a global financial crisis. The second iPhone came out – with 3G speeds, y’all! Tweens everywhere were deciding if they were on Team Jacob or Team Edward. Kanye West convinced everyone that what sunglasses had been lacking were venetian blinds. And on September 15, 2008, Stack Overflow’s public beta went live. Stack Overflow’s home page in 2008 Since then, 9.3 million users have provided 25 million answers to 16 million questions. Every 5.1 seconds, someone takes time out of their day and posts an answer, to help a complete stranger on the internet. And since 2007, those answers have been found 12.3 billion times by developers in need. We estimate that’s saved developers roughly 3.1 billion hours. But the big numbers don’t tell the real story. Every one of those times someone finds help is a developer who nails their initial project at their first job. Or a teenager who finishes her first project – the one that makes her realize she wants to be a developer when she grows up. That’s Stack Overflow’s real impact. That’s how your efforts to help each other – to share what you know – have made a genuine difference. So, to the 9.3 million of you who’ve joined us along the way, thank you. And to those of you who are new, welcome. We can’t wait to develop the rest of our future together."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/09/13/ibm-and-stack-overflow-partner-to-support-ai-developers/","date":"2018-09-12T22:00:00.000Z","tags":["Community"],"title":"IBM and Stack Overflow Partner to Support AI Developers","text":"IBM and Stack Overflow are partnering to bring learning and development to the AI community. As of today, the Artificial Intelligence site on the Stack Exchange network is sponsored by IBM. The site, featuring “questions about life and challenges in a world where ‘cognitive’ functions can be mimicked in purely digital environment”, is home to over 2,200 questions and 3,200 answers. The partnership aims to expand awareness of the AI industry, encourage innovation within the AI space, and help developers solve complex problems in the field. We spoke with Peter Moskovits, Program Director of Worldwide Developer Advocacy at IBM, on the partnership’s impact on the AI developer community. The Importance of Online Communities to Developers “As one of the world’s largest open source contributors, IBM has a lot of respect and appreciation for fellow developers”, says Moskovits. “In addition to speaking at conferences, meetups, and running workshops, our developer advocates around the globe spend a lot of time in online communities; first and foremost on Stack Overflow. On the one hand we come to Stack Overflow to help professionals and enthusiasts who use our technologies (products or open source projects) become successful. On the other hand, we come here to learn. This perpetual learning is what makes a developer advocate’s job so desirable.” Benefits of the AI Site “Fostering meaningful conversations in technology communities is critical. The sheer number of AI developers and the scope they cover has reached the critical mass. Having a dedicated forum for us is a major step forward. Such a forum can help developers get answers to high-level ‘strategic’ questions (build vs. fork vs. buy) as well as very specific integration or interoperability issues.” AI developers face a number of challenges in their daily workload, including creating training strategies, optimizing computing power, building trust in the system, legal and moral constraints, or simply finding experienced engineers to solve those problems. Moskovits says, “Having an open discourse with our peers is what makes Stack Overflow [and the subsequent Stack Exchange sites] such a great place to hang out.” Additionally, IBM’s flagship business and technology conference, Think 2019, is happening on February 12, 2019 in San Francisco. Through hundreds of labs, attendees can take deep dives into AI, cloud, data, security, and other emerging technologies. You can find more information on site sponsorships in general or this specific site on Meta."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/08/07/get-to-know-our-new-code-of-conduct/","date":"2018-08-06T22:00:00.000Z","tags":["Community"],"title":"Get to Know Our New Code of Conduct","text":"Thanks to some amazing efforts and collaboration between our veteran users and quite a few new faces that jumped in to help us with our inclusion efforts, our brand new Code of Conduct (CoC) is rolling off the press and going into effect across the network today. For those of you that haven’t been following along with announcements we’ve been making on our Meta site, we’re replacing our current ‘Be nice’ policy with a formal, far less ambiguous and way more informative Code of Conduct. As far as our rules go, nothing really changes: we’re just clarifying that we don’t have space for belittling language and condescension, while more deliberately setting people’s expectations surrounding what to expect when problems are flagged. By resolving some ambiguity, we’re able to apply the rules that we’ve had for quite some time more consistently, resulting in fewer instances where it seems like we didn’t have any rules at all. That’s the gist of it, but if you’ll indulge us, we’d like to take a deeper look into how we got here. Social contracts are an essential cornerstone of any collaborative project. A group’s shared expectations of how its members should treat one another not only helps their project stay on course, but also help outsiders decide if the group seems like a safe place for them to contribute. Since its inception in mid-2008, Stack Overflow and our subsequent network of Stack Exchange sites managed to flourish under a single guiding principle that everyone was expected to follow: .. Be nice. Stack Overflow began with a community of folks that were avid readers and pundits of Joel On Software and Coding Horror. As the initial community had some experience interacting with one another, “Be nice” was sufficient as a beacon to pull people back from over-enthusiastically critiquing other user’s contributions. We knew what ‘nice’ meant; that caused us not to notice how ambiguous our policy was as our community ballooned from thousands to millions of people in a very short amount of time. Gruenert and Whitaker made a very astute assertion when they said that “The culture of any organization is shaped by the worst behavior the leader is willing to tolerate.” People look at the best and the worst that a new community might offer in exchange for a contribution, and our worst began to look increasingly troublesome over time. We looked at examples of things that people were reporting as making them feel unwelcome and it seemed like a bit of a paradox: phrases like “Well, that’s clearly not nice, why wasn’t that flagged and removed?” dominated conversations that we were having about it. The reality became pretty clear: even our expanded ‘Be nice’ policy simply was not specific enough to meet the needs of a much larger dynamic that our sites had grown to be. What became clear is that we needed to be way more specific about what we meant when we were asking people to be nice, how we hoped folks would react when they encountered behavior that wasn’t great, and some examples that would allow people to better embrace the intent of what the document was hoping to accomplish. .. Be nice, here’s how, here’s why, and here’s what to do if someone isn’t. Really, please, take a moment to read the new Code of Conduct now. It’s not long, it’s not wordy-and-legalese-y and in our long held tradition, we feel that it does a good job of assuming that the vast majority of folks that use our sites always have the best intentions at heart. But we’re not done, not by a long shot. Our research indicates that the most problematic places on our sites tend to be free-form comments, so we’re working diligently on coming up with a way that lets users express feedback through the system; this not only ensures that users see compassionate, actionable guidance, but also helps remove the perception that there are people taking pleasure in picking at their work. We’re also working on new features to help new users ask questions that are much more in line with what our active community needs in order to provide fast and accurate answers. With Stack Overflow soon turning 10, a UX audit and overhaul to help ensure users discover the right information and tools at the right time is long overdue. Our efforts in this department are perennial; there will always be room for improvements. Our CoC is what we call a living document. It’s designed to change over time to ensure that it remains relevant by continuing to meet the needs of our communities. Every six months or so, we plan to find out how folks feel about how things are going by asking both new and experienced users about their recent experiences on the site. There’s also a code of conduct tag folks can use on Meta Stack Exchange to ask questions about, or propose changes to the CoC. Finally, we’d like to thank everyone that patiently worked with us in order to come up with a code of conduct that we think will make folks feel safe about contributing, but not so formal that it feels like oppressive, humid air. If it were not for our most engaged users working in tandem with many people that we only started reaching once they heard that we were working on this, we wouldn’t have anything close to what we accomplished together. We’re sincerely lucky to have all of you. And, be nice to one another— all of you deserve nothing less than that."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/07/10/welcome-wagon-classifying-comments-on-stack-overflow/","date":"2018-07-09T22:00:00.000Z","tags":["Community"],"title":"Welcome Wagon: Classifying Comments on Stack Overflow","text":"Last month, Joe wrote about the Welcome Wagon work that we are doing to make Stack Overflow more welcoming and inclusive. Our current work involves projects across domains from asking questions to framing community standards and more; one project we have been working on is understanding how comments are used and misused on Stack Overflow. We are a data engineer (Jason) and data scientist (Julia). As folks who code for a living and use Stack Overflow, as well as work here, we have certainly experienced and witnessed unwelcoming behavior in Stack Overflow comments first hand, whether through condescension, snark, or sarcasm. Our goal with this specific project is to understanding these issues so that we can start to address them. This blog post outlines our initial findings, what we could learn with more data, and next steps. Classifying comments I (Jason) wrote The Stack Overflow Comment Evaluator 5000™, a simple application that presents you with a comment thread from a post on Stack Overflow and asks you to rate each comment in the thread as Fine, Unwelcoming, or Abusive. Comments on Stack Overflow can already be flagged for being rude or abusive, but this flag is typically used only for the most egregious and toxic comments, which are thankfully rare. We’re looking here to characterize comments that are unwelcoming in a way that isn’t flagrant hate or abuse but would still make you think twice about participating in our community. Things we thought might fall into this category would include condescension, snark, sarcasm, and the like. We estimated how many comments we could rate, given the number of folks we have internally and the time we would be asking of them. Then we loaded up the right number of comment threads into the application and invited all of our community managers, designers, developers, executives, site reliability engineers, and product managers to spend an hour rating comments. We had 57 participants who made 13,742 ratings on 3,992 comments. Prevalence of comment categories If we take a majority vote on the rating of each comment (with ties going to the worse rating) comments on Stack Overflow break down like so… Rating % of comments Fine 92.3% Unwelcoming 7.4% Abusive 0.3% According to those of us deeply involved here and familiar with Stack Overflow, about 7% of comments on Stack Overflow are unwelcoming. What did some unwelcoming comments look like? These combine elements of real comments to show typical examples. “This is becoming a waste of my time and you won’t listen to my advice. What are the supposed benefits of making it so much more complex?” “Step 1. Do not clutter the namespace. Then get back to us.” “The code you posted cannot yield this result. Please post the real code if you hope to get any help.” “This error is self explanatory. You need to check…” “I have already told how you can… If you can’t make it work, you are doing something wrong.” This stuff isn’t profane, hate, or outright abuse, but it’s certainly unwelcoming. Looking at majority voting is one approach, but the experience of being not welcomed is not a majority vote kind of thing; it’s deeply personal. What if we looked at the distributions of the ratings by individual? Among the 57 individuals who participated, the median result for comments that are neutral or fine was 93.2% and the median result for unwelcoming comments was 6.5%. We can see from this graph that there is considerable variety in people’s experience of the site with respect to the comments they saw; the histograms have a broad shape. Take a look at just the distribution for the unwelcoming ratings. Four of us didn’t find anything unwelcoming, and three of us thought that in excess of 1 in 5 comments were unwelcoming. This speaks to the variability of experience; for example, what an experienced, professional developer from a privileged background finds unwelcoming may not be the same as for a more junior, or less privileged developer. What can we learn from our initial rating task? In this first attempt at rating comments, we have been able to measure the prevalence of unwelcoming comments, as perceived by experienced Stack Overflow community members/employees, as well as how much that varies. This first group of raters includes people from underrepresented groups in tech such as women, people of color, gay folks, and trans folks. We do not see evidence that having an identity in one or more of these groups led to an individual labeling comments as unwelcoming at a higher rate, at least not among the small group of ~60 participants in our initial task. It is possible that we would see a statistical difference with a larger sample size of raters. There are enough comments in this first rating task for us to assess whether unwelcoming comments are more prevalent on questions or answers on Stack Overflow. Let’s compare all the comments from the month the rated comments were drawn from, along with the rated comments. The proportions of comments that were classified as fine by the raters are consistent on questions and answers with the population of comments overall. We see a shift for the comments classified as unwelcoming or abusive, however; those comments are more prevalent on questions than answers, with a relative percentage shift of almost 10%. When we think through what is contributing to unwelcoming comments in our community and what to do next, this is important to keep in mind. Indeed, the dynamics at play here are part of why we are revamping our workflow for new askers. We also would like to look at how much this sample of raters agree with each other with some measure of inter-rater reliability. You might guess from the histogram of rating distributions that the inter-rater reliability is not going to be high; we labeled comments as unwelcoming at different rates. Given the kind of rating data we have (not every person saw every comment) we can use Krippendorff’s alpha to measure reliability; this is a measure that ranges from zero (nobody agrees) to one (perfect agreement). For comments that were rated by at least three people, Krippendorff’s alpha for this initial dataset is 0.39. This would be too low for qualitative research in an academic study like those done in the social sciences. If you have been around Stack Overflow a long time, you might be interested to know that this is much better than the reliability for the comment classification project done using Amazon Mechanical Turk about 5 years ago. What does a reliability measure like this mean? It reflects the real diversity in how we all experience the Stack Overflow community, based on our experiences and personalities. People who work at Stack Overflow agree more about what is unwelcoming than the Mechanical Turk workers did, but even the 60 or so of us do not agree enough that we could code comments reliably enough to be used in academic work. What this diversity of thought does not mean, to be clear, is that it is hopeless to address issues in how comments are being used for our community as a whole. We can take what we are learning here and move forward. Impact of unwelcoming comments So about 7% of comments on Stack Overflow are unwelcoming, depending on who you ask. What does that mean? First of all, this is not good enough for us. Stack Overflow is a place for developers to help each other; our goal is to be a professional space that makes our industry, our profession, and yes, the internet a better place. Everyone who codes should feel welcome to participate here. Second of all, a prevalence between 5% and 10% can have a big impact on a community. Let’s sketch out a back-of-the-napkin estimate. If a typical developer visits Stack Overflow once or twice a week to solve a problem, the question they visit has an answer, and each post (question and answer) has two comments (keep in mind that comments are more visible to visitors than answers), we would conservatively estimate that a developer visiting Stack Overflow would see 1 to 3 condescending, unwelcoming comments every single month of their coding lives. Will one unwelcoming comment a month drive everyone away? Clearly not, as Stack Overflow still works for many. But it will convince some that it’s not worth it to contribute here, and the next month’s comment will convince a few more, and so on. And this only considers the readers of these comments; those who the comments are directed at will naturally feel more dramatic effects. So, where does that bring us now? This is the first step for us in addressing how comments are used at Stack Overflow, and we are exploring options for moving forward. We believe strongly both that human moderators are key and that human-in-the-loop machine learning can offer us powerful tooling. It takes care to be understood well online, and people have different reactions to the same words. Remember that many more people than the post owner may read your comments, so write for posterity and make a conscious effort. When you see unwelcoming behavior, please flag it. We at Stack Overflow want to more clearly frame our expectations around our community standards. Watch for updates about the evolution of our “Be Nice” policy into a fully articulated code of conduct. We will be fielding this comment classification task more broadly soon, in order to learn more about how our community understands interaction via comments. Look for further work from us on this in the near future."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/06/21/rolling-out-the-welcome-wagon-june-update/","date":"2018-06-20T22:00:00.000Z","tags":["Community"],"title":"Rolling out the Welcome Wagon: June Update","text":"Back in late Spring, we posted “Stack Overflow Isn’t Very Welcoming. It’s Time for That to Change.” We know it’s all too common for companies to announce they really want to do a thing, and then… not much happens. So, it is time to share the work we’ve been doing behind the scenes and how our team of data scientists, developers, long term community managers, and UX specialists will continue iterating on our plans for the future. Done Shipped the “Ask a Question Wizard” prototype This new workflow should help new askers craft questions more successfully with less stress. Each step gathers specific input that’s generally needed to help answerers. As we test it, we can expand this design to support additional question types. We’ve already done a couple rounds of user testing and are now gathering feedback from the community. You can check it out here and leave feedback on this post. Built an “Unwelcoming or snarky” comments classification app Our users have always been really great at flagging and removing outright abusive comments, but we’ve long struggled to deal with (or even define clearly) lower-key unpleasantness: condescension, snark, dismissiveness. We just finished our first step to change that: 57 employees provided 13,742 ratings of “fine,” “unwelcoming or snarky,” or “abusive,” on random comments on SO, and we’ll be sharing the initial results and our next steps in a separate post. Created a prioritized queue of 67 other next up initiatives Some of these are already in active discussion with the community, like removing auto-downvotes that come with certain flags. The key here is that we will always have a next initiative to move forward for discussions, input, and implementation, so we won’t lose momentum. In progress Comment flagging improvements We are working on various improvements to comment flagging to increase visibility and allow more people to participate in this critical activity. Community/civility partnerships We’ve connected to individuals (researchers, academics, community managers and data scientists) from many institutions and companies that are concerned about civility on the internet. We’ve kicked off collaborations with a couple companies to build machine learning approaches that can address civility in internet scale communities. More data can train smarter analysis, so we are optimistic about these collaborations. Machine learning isn’t a magic solution nor will it be our only avenue for partnerships, but it will be a part of our toolkit. We hope to have more to share soon. Upgrading our community standards We are undertaking a full review of our community standards, including an overhaul of our “Be Nice” policy to evolve it into a full fledged code of conduct, which better articulates exactly what we expect and how those expectations are enforced. Our first draft is almost done and we’ll be sharing it for feedback early next week. Our internal framework to attack the problem We’ve created a framework to help us ensure we’re being disciplined in how we define the problems and prioritize solutions. Understanding exclusion We need to fully understand the scope and depth of the problem. Using data insights and UX research we are attempting to answer questions like these: What are the negative experiences people have had while using Stack Overflow? What are the site functions that contribute to negative feelings, expectations, and/or experiences? What are the behaviors that contribute to negative feelings, expectations, or experiences? Learn from others’ inclusion efforts By engaging and working with others who are actively tackling inclusion efforts (particularly other companies dealing with internet scale communities) we want to: Learn, learn, learn. We aren’t the experts. Investigate solutions from other online communities who had to address similar issues. Solve for one, extend to many We believe that by focusing on excluded people we can make Stack Overflow (and the entire Stack Exchange network of Q&A sites) better for everyone. We are committed to making changes in: community standards enforcement mechanisms the software that runs the site. Engage the broad community We commit to an open dialog about our goals, understanding of the problem, ideas for research and solutions and progress on both Meta and our blog. Next up We will be providing regular updates on the work we are doing around inclusion. Soon, we’ll be sharing more details in separate posts on the Ask a Question Wizard, what we learned from our comment classifier, and our proposed new code of conduct. We’re on a long road here, but we’re excited about our progress so far. We hope you’ll stick with us for the rest of the ride."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/05/21/changes-to-our-privacy-and-data-policies/","date":"2018-05-20T22:00:00.000Z","tags":["Company"],"title":"Changes to Our Privacy and Data Policies","text":"Stack Overflow has always been committed to protecting your privacy and your data. The European Union’s General Data Protection Regulation has prompted us to review our policies and make sure that we are doing the right thing for all of our users worldwide. Stack Exchange, Inc. has updated its Terms of Service, Privacy Policy and Cookie Policy for all of our sites. We have made it easier to understand what types of data we collect and how we use your data. Our new Terms of Service distinguishes between public network users (those who use our public Stack Exchange Q&A sites) and private network users (those who use Stack Overflow for Teams). As part of our new data-retention policy, we will now delete accounts that have been inactive for more than two years and where the user has never engaged in any meaningful activity. We may send account-related email messages that are triggered by your site activity. In most cases, you can opt out. With your continued permission, we will send you promotional messages based on your preferences. To see and change your opt-in preferences, manage your Email Settings. Please read these updated terms and take your time to understand these changes. Your use of Stack Overflow’s Products and Services, including the Stack Overflow Network, is subject to these revised policies and terms. Why you may see a prominent notification on stackoverflow.com or receive an email One of the key tenets of GDPR is that information on data, privacy and cookies can’t be buried or hidden. We have to prominently call out the policies and explain what to do if you don’t agree with them. That’s why we will show an onsite notification and send emails to registered users. We really, really want you to update your Email Settings. Last July, we launched an Email Settings feature that allows you to select the specific types of messages you do and do not want to receive. Most of our users still don’t know it’s there. We sincerely don’t want to email you if you don’t want to be emailed. Why we are notifying everyone, not just EU residents We believe the intentions behind the new laws are good and should apply to all of our users."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/05/03/stack-overflow-for-teams-is-now-available/","date":"2018-05-02T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow for Teams is Now Available","text":"It’s here. After months of designing, building, testing, and beta-ing, we’re happy to announce that as of today, Stack Overflow for Teams has launched and is available to everyone! The What & Why Of Stack Overflow for Teams It often feels like developers have to know everything, constantly juggling dozens of tools, languages, libraries, and frameworks. To do this, they have to be able to quickly find the information they need in order to get back to writing software. When that information is public, all you need is a quick search on Stack Overflow to turn up an answer and be on your way. But when that information is internal and private, it’s a maze of stale wikis and lost emails. Stack Overflow for Teams helps bridge that gap by bringing the power of Stack Overflow Q&A to a private space just for you and your team on stackoverflow.com. Ask and answer questions about all those proprietary, top-secret things that you can’t post to a public audience and create an accessible set of knowledge that you can come back to time and again. (No more having to re-answer the same question over and over again in chat!) It uses the same Q&A format, organization, and experience that you know from SO to help your team easily capture, organize, and find information. Stack Overflow for Teams doesn’t just provide you with the existing feature set of Stack Overflow, it also has new features that make it easier for new users and entire teams to use it, like guided onboarding for getting started, revamped tag watching and email notifications, and Slack integration. You can also access all of your team’s data through our API. Best of all, this all happens on stackoverflow.com — which your team probably already visits daily. When you search on stackoverflow.com, the private Q&A is also integrated into those search results so you can access both your private information and the wealth of knowledge from the existing community all at once. Making Knowledge More Accessible Over the last two years, dozens of large companies have adopted Stack Overflow for Enterprise for their own standalone, internal knowledge sharing communities in order to make proprietary information more easily discoverable. While Enterprise works great for these large (500+ developer) organizations, we needed to do something different for smaller teams. Anyone who has deployed new software, particularly anything involving a knowledge sharing or community building, knows how hard it is to get users to come and show up in a new place. You need a lot of users and a lot of activity at the right time or you end up with a ghost town that nobody has any interest in. Drawing from our own experience in building hundreds of public and private communities, we built Stack Overflow for Teams to overcome many of these traditional challenges with adoption by placing the knowledge in a private space on stackoverflow.com. The combination of our onboarding tools, integrations, and hosting everything in one central location, means Stack Overflow for Teams works for any size group. During beta, we’ve seen teams as small as five and as large as 200 adopt Stack Overflow for Teams successfully. Tim Golen, Engineering Lead at Expensify, summed it up pretty well: “We needed a good way of passing down knowledge between team members, because we saw the same questions being asked over and over in our instant message channels. Almost immediately, we found that the Search function in Teams returned relevant results in a quicker, more accurate way than chat would. We anticipate Stack Overflow for Teams increasingly becoming our go-to resource for knowledge-sharing.” We see similar results not just at our other beta users, but also internally through our own usage of Stack Overflow for Teams. Get Started Now Stack Overflow for Teams is available to everyone now — there’s a 14 day free-trial and after that it’s only $10/month for your first 10 users (additional users are $5/month). All you need to get started are a few teammates and questions that you know come up over and over again — we’ll guide you through the rest. So go create your Team and let us know what you think! PS: You can read up on the prior work we did building out Teams and keep up with new developments by following the For Work tag here on the blog."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/05/01/jon-skeet-answers-your-questions-irl/","date":"2018-04-30T22:00:00.000Z","tags":["Community"],"title":"Jon Skeet Answers Your Questions IRL","text":"In January, Jon Skeet’s rep crossed over one million. To thank him for his generous efforts and contributions, we hosted a brunch in his honor at our New York Headquarters in February. We also asked the community if they had any questions for him to answer in an IRL Q&A. Please enjoy this delightful interview in which Jon discusses everything from his origin story, to overload resolution, to banana flower pants. We’re immensely grateful for Jon’s continued devotion to the Stack Overflow community, and we hope to give him another free brunch after he earns his next million rep! By the way, we also recorded a podcast while he was here."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/04/26/stack-overflow-isnt-very-welcoming-its-time-for-that-to-change/","date":"2018-04-25T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Isn’t Very Welcoming. It’s Time for That to Change.","text":"We <3 and believe in Stack Overflow. But sometimes, loving something means caring enough to admit that it has a problem. Let’s start with the painful truth: Too many people experience Stack Overflow¹ as a hostile or elitist place, especially newer coders, women, people of color, and others in marginalized groups. Our employees and community have cared about this for a long time, but we’ve struggled to talk about it publicly or to sufficiently prioritize it in recent years. And results matter more than intentions. Now, that’s not because most Stack Overflow contributors are hostile jerks. The majority of them are generous and kind. Sure, a few are… just generous, I guess? But our active users regularly express their frustration that we haven’t done more to make outsiders feel more welcome. The real problem isn’t the community — it’s us: We trained users to tell other users what they’re doing wrong, but we didn’t provide new folks with the necessary guidance to do it right. We failed to give our regular users decent tools to review content and easily find what they’re looking for. We sent mixed messages over the years about whether we’re a site for “experts” or for anyone who codes. Yes, we really have a problem. But how do we really know that too many developers experience Stack Overflow as an unwelcoming or hostile place? Well, the nice thing about problems that relate to how people feel is that finding the truth is easy. Feelings have no “technically correct.” They’re just what the feeler is telling you. When someone tells you how they feel, you can pack up your magnifying glass and clue kit, cuz that’s the answer. You’re done. And a lot of devs feel like Stack Overflow is an intimidating, unwelcoming place. We know because they tell us. Stack Overflow is intended to be an inclusive place where every programmer can participate. It was one of Joel and Jeff’s earliest decisions. But it’s built on mechanics and norms that push people away if they don’t know the ins-and-outs. Too often, someone comes here to ask a question, only to be told that they did it wrong. They get snarky or condescending comments for not explaining what they’ve tried (that didn’t work). They get an answer… but the answerer gets scolded for “encouraging ‘low-quality’ questions.” They get downvoted, but don’t know why, or called lazy for not speaking English fluently. Or sometimes, everything actually goes well, and they get an answer! So they thank the poster… only to be told that on Stack Overflow, “please” and “thank you” are considered noise. All these experiences add up to making Stack Overflow a very unwelcoming place for far too many. We’ve struggled to put our money where our <3 was. Caring about this isn’t new to us. Initiatives like the Summer of Love, the closing overhaul, revising the “Be Nice” Policy, and our coaching experiment all came from our desire to build a place where everyone feels welcome. But we never felt comfortable acknowledging that we had a serious problem, and we under-resourced it. Badly. Here’s why we screwed that up: It was hard to accept some of the (valid) criticism, especially the idea that women and people of color felt particularly unwelcome. There’s a weird paradox with bias. Those of us who have privilege, but care deeply about reducing bias should be uniquely positioned to help, but we struggle the hardest to recognize that we are (unintentionally) biased ourselves.² As it happens, making people feel left out is a deep personal fear of mine. (There is probably a seriously repressed playground kickball thing in my past somewhere.) Ironically, that made it harder for me to accept the possibility that something I work on could make outsiders feel unwanted. So I focused on what we were proud of: We are one of the only large sites where it’s practically impossible to find a single slur – our community takes them down in minutes. We don’t tolerate our female users being called “sweetie” or getting hit on. But we weren’t listening. Many people, especially those in marginalized groups do feel less welcome. We know because they tell us. We felt protective of our current users, because we know they come here to teach, and most of them are fighters for good most of the time. Like all companies, we have an infinite list of things to do, but limited resources. In recent years, inclusion efforts (and other public Q&A work) have consistently been “fairly important, like… roughly #3 on our list of priorities?” Which meant they got allocated roughly zero resources. Getting to the <3 of the problem. (Here’s where we plan to start.) As of last week, we’re prioritizing this and staffing it with talented employees from our Executive, Community, Data, Design, Research, and Engineering teams. We’re listening to our community and those sharing their experiences. I want to thank those of you who’ve been vocal about the need for improvement. It hurt to hear, but we needed to hear it. We’ve started with user research, and we’re keeping an open mind to all ideas. There are opportunities to work on things like reviewing site copy for inclusive language. Maybe it’s time we re-visited things like our “no pleases or thank yous’” rule. (It serves a valuable purpose by keeping signal high, but also suggests that we just might be Zuckerbots who aren’t even trying very hard to pass as actual humans). In any case, here are some areas we’re planning to focus on first: Let’s shift from “don’t be an asshole” to “be welcoming.” Many people don’t realize that we already have a code of conduct (cuz we gave it a funny name). Or that it already includes concepts like “belittling language is not okay” and “Be welcoming, be patient, … and don’t expect new users to know all the rules — they don’t.” But we need to show it to all users, and empower them to help us enforce it. In the longer term, I’d like us to aim for something closer to what Jon Skeet told me about his experience attending a pride parade (as a cis straight dude): “I wasn’t just tolerated; I was made to feel like the community was actually better because I was there.” Let’s do something about comments. Condescension and sarcasm have been reluctantly tolerated in comments for too long. We’ll research possible feature changes, but let’s start by working with the community and our community managers to start flagging and deleting unkind comments now. Let’s make it easier for new users to succeed. No, I’m not shifting the blame. We set them up for failure, and our power users have been asking us to help them for ages. We’re planning to test a new “beginner” ask page that breaks the question box into multiple fields – one for each of the key things answerers need to help: “What did you want to happen?” “What actually happened? (Include any error details)” “Paste the shortest block of code that reproduces the problem. (We’ll format it!)” “Describe what you’ve tried so far (including searches, etc.)” Let’s stop judging users for not knowing things. (We’re a Q&A site!) It makes me sad when someone get downvoted for posting a duplicate. We should better surface them in the posting flow, but it’s not reasonable to expect askers to find dupes consistently. Users aren’t “too lazy” to search; searching takes less work than posting. And little makes me sadder than comments on answers saying, “Don’t answer questions like this – it encourages them.” Now, some questions are off-topic. (I’m genuinely sorry, but we simply can’t explain how a glass pitcher can smash through a brick wall with no apparent injuries; we are a programming site.) But it’s totally cool to answer questions without giving a grilled poop sandwich about exactly what’s allowed. It’s fine to volunteer in one way without being expected to read and enforce every rule and meta discussion since forever. Let’s reject the false dichotomy between quality and kindness. Quality matters because it means posts can help more people. But a larger, more diverse community produces better artifacts, not worse ones. We need to stop justifying condescension with the pursuit of quality, and we need better tools and queues to help power users trying to keep quality high. We still <3 and are proud of what we’ve done together. Every day, tens of thousands of people on SO take a break from their workday to help a stranger on the internet. And millions of times a day, someone clears a hurdle and doesn’t give up on their project thanks to solutions donated here. I’m incredibly proud of the small part I’ve gotten to play in everything this community has achieved. Our users are truly some of the most generous people on the planet. But we can do better. Together, we can make the world’s largest technical helping community one with a culture we can all truly and consistently be proud of. The kind of place that is genuinely better because you are here. We’re looking for volunteers to share their experiences in chat with us and help us prioritize what to work on first. Whether you’re an active user, or someone who isn’t comfortable participating, if you’d like to help, please fill out this one-minute survey. ¹ This post focuses on Stack Overflow, but most of it applies to the broader Stack Exchange network as well. ² If you’re shaking your head thinking, “not me,” I’d encourage you to take these implicit bias tests, specifically the Race IAT and the Gender-Career IAT. If you’re like me, they’re going to hurt."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/03/27/quantum-computing-site-launches-with-the-help-of-strangeworks/","date":"2018-03-26T22:00:00.000Z","tags":["Company"],"title":"Quantum Computing Site Launches with the Help of Strangeworks","text":"Last week, we rolled out our latest feature designed to help tech industry leaders engage more directly with the developer community. In a partnership with Strangeworks, Stack Exchange launched the Quantum Computing Q&A site at the SXSW Convergence Keynote in Austin, TX. During his Keynote, Strangeworks Founder and CEO William “whurley” Hurley discussed how quantum computing will forever change the computing landscape with advances in fields like artificial intelligence and next-gen cryptography. To say that quantum computing will fundamentally change how we think about computers is an understatement. “Stack Overflow is excited to partner with Strangeworks as the patron sponsor for our Quantum Computing community,” said CEO Joel Spolsky. “This partnership will help grow this energized community and expand the knowledge base in this emerging technology.” The site launched last week to 468 users, answering better than 93% of the questions posted. Access to this growing collaboration will help the next generation of developers usher in these advancements in technology. “We believe that quantum computing information should be democratized and available to all. We want to create something that can last far past us. We want to build a lasting, meaningful forum for developers”, whurley said. One of Strangeworks’ main goals is to revolutionize technology by guiding companies through the confusion and chaos of quantum computing. What Are Sponsored Sites on Stack Exchange? The idea of a company sponsoring a Stack Exchange site has stirred up quite a bit of interest in our existing communities, according to Robert Cartaino, our Director of Community Development. Some of these project teams have sizeable communities of their own, so it would be amazing if we could engage these organizations to actively support our current sites — along with the financial resources they bring to finally make our Q&As more attractive for active development again. A sponsorship generally entails enabling ads relevant to the subject and affixing a small “sponsored by…” logo in the upper-right corner. We’ve modeled this program after our “tag sponsorship” feature. Strangeworks chose Stack Overflow as a launch partner because of the community aspect. “We wanted to build a community for quantum computing that wasn’t beholden to just us—to provide a voice that’s not tied to a specific platform. Stack Overflow is a community by developers, for developers, which is just what we were looking for. A vibrant, active community of the world’s developers”, whurley said. This brings the realities of a quantum future into the present, helping readers understand and prepare for the coming age of quantum computing. You can read more about the site in last week’s meta announcement or join our Quantum Computing community!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/03/13/2018-developer-survey-results-live/","date":"2018-03-12T23:00:00.000Z","tags":["Company"],"title":"The 2018 Developer Survey Results are Live","text":"Each year, we ask the developer community about everything from their favorite technologies to their job preferences. This year marks the eighth year we’ve published our Annual Developer Survey results—with the largest number of respondents yet. Over 100,000 developers took the 30-minute survey this past January. This year, we covered a few new topics ranging from artificial intelligence to ethics in coding. See the Results Here Top Takeaways DevOps and machine learning are important trends in the software industry today. Languages and frameworks associated with these kinds of works are on the rise, and developers working in these areas command the highest salaries. Only tiny fractions of developers say that they would write unethical code or that they have no obligation to consider the ethical implications of code, but beyond that, respondents see a lot of ethical gray. Developers are not sure how they would report ethical problems, and have differing ideas about who ultimately is responsible for unethical code. Developers are overall optimistic about the possibilities that artificial intelligence offers, but are not in agreement about what the dangers of AI are. Python has risen in the ranks of programming languages on our survey, surpassing C# in popularity this year, much like it surpassed PHP last year. When assessing a prospective job, different kinds of developers apply different sets of priorities. Women say their highest priorities are company culture and opportunities for professional development, while men say their highest priorities are compensation and working with specific technologies. We’ll make the anonymized results of the survey available for download under the Open Database License (ODbL) on May 30th. In the meantime, you can see the full data sets from previous years here. Have questions or feedback? Head on over to Meta and use the [survey-2018] tag."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/02/08/information-architecture-navigating-stack-overflow-enterprise-stack-exchange-sites/","date":"2018-02-07T23:00:00.000Z","tags":["Community"],"title":"Updating Navigation for Stack Overflow, Enterprise, and Stack Exchange Sites","text":"This post refers to “Channels”, a product which is now called “Teams.” This post is part of a series on how we’re making Channels, the thinking behind the product, and insight into the process. Read “How We’re Designing Channels” and “Why Channels” for more background info. In his post, How We’re Designing Channels, Kurtis wrote that this project required a change to Stack Overflow’s information architecture. We created several prototype navigations, narrowed to two, and tested with a group of users. This brought us to the following design direction, with content navigation on the left side: We’re confident that this design will serve Channels users, but what about the greater Stack Overflow, Stack Exchange communities, and Enterprise? Our design explorations were guided by the following questions: How will the new information architecture support existing Stack Overflow users? How will it impact important workflows like reviewing posts or answering questions? How will this scale to Stack Overflow Enterprise and the Stack Exchange network sites? How can people transition seamlessly between Stack Overflow and other sites without having to learn new patterns? What about people using smaller screen sizes? Adding a vertical left navigation increases the page width, and how will we support people across a range of screen sizes and devices? Is the new information architecture inclusive and accessible? How will this impact people using screen readers or with other accessibility needs? How can we leverage this moment of change to improve the site’s accessibility? How will the new information architecture scale as the site grows and changes over time? In this post, I’ll talk about our approach to answering these questions. First, though, I want to step back and explain why it’s important for us to be thinking about these needs simultaneously. Background You may remember that we updated the navigation design last year. Our approach was to focus on the already complex needs of Stack Overflow, and solve Enterprise and network site solutions soon after. Through that project, we learned that – despite many similar or overlapping use cases – there were major differences that were not easy to resolve. As a result, it took us longer than expected to ship navigation to network sites, and we still haven’t updated Enterprise sites. This means there’s been extended or unresolved fragmentation between Stack Overflow and our other sites. This is problematic because there’s a lot of overlap between people using Stack Overflow, Enterprise, and network sites. For example, about 70% of users joining network sites already have a Stack Overflow account. More generally, fragmentation means that shipping basic improvements to Enterprise and network sites becomes increasingly costly as differences accumulate over time. This time, we wanted to make sure that we were considering Enterprise and network site use cases early, as well as ensuring that basic improvements like accessibility and responsiveness can benefit our 150+ communities and Enterprise clients as quickly as possible. How We’re Addressing These Needs We started by broadly considering use cases across our product offerings: Stack Overflow, network sites, Enterprise, and soon – Channels. This approach helps us avoid fragmentation and allows improvements to flow quickly to all of our users. I’ll explore these use cases in further detail below. First, here’s a recap of the basic design solution, with content navigation on the left side: Next, I’ll layer in the principles and use cases that have guided our designs so far. Principle #1: Flexibility The new information architecture had to be flexible enough to support a broad range of use cases and screen sizes, including: User has joined Stack Overflow only User has joined Stack Overflow and a private channel User has joined Server Fault only (or a different network site) User is viewing on a tablet or mobile Let’s see what the navigation looks like for each of these use cases. User has joined Stack Overflow only: User has joined Stack Overflow and a private channel: User has joined Server Fault only (or a different network site) : User is viewing on a tablet or mobile: Principle #2: Scalability The new information architecture also needed to scale reasonably over time. People should be able to expect a coherent experience as the site grows and changes. Here are some hypothetical scenarios that we can use to approximate the use cases that the information architecture needs to consider: A new product offering that is a separate entity from Stack Overflow A new feature on Stack Overflow Next, let’s see what the navigation looks like for these hypothetical scenarios. A new product offering that is a separate entity from Stack Overflow: A new feature on Stack Overflow: Principle #3: Accessibility We know that Stack Overflow and our other sites could better support people with differing abilities. That’s why the new information architecture also needed to support our effort to make Stack Overflow accessible to all. We are learning from the Inclusive Design approach, and also piloting a collaboration with the University of Washington AccessComputing initiative to identify improvements that bring our sites closer to conformance with the W3C Web Content Accessibility Guidelines 2.0 Level AA. We are also interested in hearing additional recommendations from you, if you encounter barriers that WCAG AA doesn’t address. While all of these changes may not be ready on day one, we are taking this opportunity to improve access for all of our users. What We’ve Learned So Far In December, we launched Channels Alpha and kicked off research with Enterprise and high-rep Stack Overflow users. We asked questions about their day-to-day workflows on Stack Overflow, showed them mockups of the new information architecture, and discussed potential disruptions to their workflows. Overall, we learned that this change caused minimal impact to their workflows. Any concerns about the extra screen width this would introduce were alleviated with knowing that the site will become responsive. We’ll also be testing with network site users in the upcoming months. Next Steps We’ll be rolling out these changes in the near future. In the meantime, please look for future posts sharing our design, research, and product process for Channels. If you have any questions for the team or me, feel free to drop them in the comments below. Note that these designs are not final, and we’ll continue to iterate as we receive feedback. Let us know what you think."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/02/06/pluralsight-stack-overflow-helping-worlds-developers-learn-new-skills/","date":"2018-02-05T23:00:00.000Z","tags":["Community"],"title":"Pluralsight & Stack Overflow: Helping the World’s Developers Learn New Skills","text":"Today we’re excited to announce a partnership with Pluralsight, the enterprise technology learning platform. Stack Overflow’s mission has always been to the help the world’s developers; whether it’s helping them get answers to their coding problems through Q&A, or helping them build their career with Jobs. Pluralsight has many of the same goals—helping the tech community grow their skills, share their knowledge, and create progress through technology—making the partnership a win-win for all involved. The Developer Learning Journey How developers learn has grown over time. Years ago, developers would visit their university’s bookstore, check out a book, and then read up on the software or programming language they were trying to learn. While this still may happen today, the majority of developers are learning through online courses, coding bootcamps, Pluralsight, and Stack Overflow. Our CEO Joel Spolsky says, “What [Pluralsight CEO] Aaron and I have in common is that we both wrote books for developers. Today’s developers don’t necessarily have time to read books—they need to learn three things today that they’re going to use immediately. Pluralsight is all about building core skills that you’re going to need later on, while Stack Overflow is how you fill in those gaps of knowledge, just-in-time.” How We’re Improving It This partnership is two-fold—it involves integrating Stack Overflow’s Developer Story and Pluralsight’s new product, Pluralsight IQ. Between the two platforms, developers have the most comprehensive data related to their learning journeys. Developer Story was built to give developers a way to show off what they know and built. Incorporating things like open source projects, top questions, and articles or blog posts helps developers expand their story beyond the archaic resume elements, like education and work experience. But there’s never been a standardized way for them to show their proficiency in a programming language, for example. That’s where Pluralsight IQ comes in. This product allows developers to measure their skill level in about 5 minutes in dozens of technologies. Skill IQ is a quantifiable skill level based on a percentile rating for the skill area or technology. It also includes a date of verification which matches the date they completed the assessment. In the first phase of this partnership, developers who use both platforms will be able to share their Skill IQ on their Stack Overflow Developer Story page. Developers who add this feature to their Story will have instant third-party skills verification that allows them to showcase their knowledge. How You Can Participate Take an assessment, add it to your Developer Story, and let us know what you think!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/01/31/stack-exchange-2017-review/","date":"2018-01-30T23:00:00.000Z","tags":["Community"],"title":"Stack Exchange 2017 in Review","text":"“It’s a life’s work to see yourself for what you really are and even then you might be wrong.”—Cormac McCarthy, No Country for Old Men You know the old saw about how 90% of an iceberg is hidden under water? At Stack Overflow, we strive to be a reverse iceberg by sharing as much as possible about what’s going on. 2017 presents a bit of a problem since the big news is that we’ve seen a lot of interest in companies paying for private Q&A. The other two legs of our revenue tripod (ads and job placement) are stable. But it turns out Stack Overflow is best known for providing a platform for people to share knowledge with each other. So our most exciting developments didn’t get much visibility last year. We offer both self-hosted and remote-hosted Enterprise instances. Both varieties are full-fledged sites that take a fair amount of investment from the customer to be successful. Smaller organizations have asked for private Q&A as well, which brings us to Channels. By hosting private Q&A for smaller teams right on Stack Overflow, we hope to simplify signup and security for them. From our experience using our own Enterprise instance, I’m excited to move to Channels in order to skip the VPN and to have notifications go right to my Stack Exchange global inbox. Many of the design changes needed for Channels will benefit the public sites as well. SiteQuestionsAnswersEditsCommentsAccepted AnswersUpvotesDownvotesReviews Stack Exchange921,1441,201,7312,090,0533,983,934365,9907,802,1691,126,6991,317,965 Stack Overflow2,462,1372,958,6924,761,3359,513,1141,041,40616,710,6922,549,5882,638,016 International SO134,518138,584211,904509,54559,173394,00188,297163,089 Total3,517,7994,299,0077,063,29214,006,5931,466,56924,906,8623,764,5844,119,070 The observant among you might notice these statistics are slightly down from 2016. One of the great things about an open Q&A network is that answers to the askers’ specific questions can be discovered by other people with the same question. So a big reason we don’t have more new questions is because we have so many existing answered questions for people to find before they ask. Most of the millions of questions asked each year are only ever seen by the handful of people who have the very rare problem asked about. (In other words, the network has a very long tail.) That said, some questions are seen by hundreds of thousands of people. Here are the top 5 viewed questions across the network asked in 2017: QuestionViewsSite What does \"covfefe\" exactly mean?467,235English Language and Usage Is it unethical for me to not tell my employer I've automated my job?438,343The Workplace Why does man print \"gimme gimme gimme\" at 00:30?283,666Unix and Linux No 'Access-Control-Allow-Origin' header is present on the requested resourcewhen trying to get data from a REST API188,548Stack Overflow What happens if someone becomes Excommunicado?178,090Movies (Full disclosure: I’ve tried to automate my job, but I haven’t achieved full covfefe.) Questions are only useful if they prompt helpful answers and Stack Exchange users regularly provide just that. While most of the accumulated value of the network’s content (available under a Creative Commons licence) is spread out over millions of clear answers to obscure questions, there are a few answers that just about anyone can appreciate. Here are the top 5 answers from 2017 ordered by score: AnswerScoreSite Why does man print \"gimme gimme gimme\" at 00:30?1948Unix and Linux Build a digital clock in Conway's Game of Life863Code Golf Which word begins with \"y\" and looks like an axe in this picture?831English Language and Usage Should a new employee be disciplined for not recognising a superior?643The Workplace Why do all the C files written by my lecturer start with a #?553Stack Overflow The only question to appear in both lists started as a pun based on an ABBA song, which is one reason to be thankful for 2017. One of the downsides of having a bunch of popular websites built entirely from community-created content is that we attract a lot of spam. Over the years, we’ve added systems to block and slow down unwanted submissions, but some still get through. The last line of defense is flags from individual users. A few years ago, a dedicated team of users (Charcoal) built a rather remarkable early warning system called the SmokeDetector. Initially, it was just a chatbot that dropped messages about potential spam for users to flag. Over time, the system’s accuracy increased to be even better than human flaggers. So recently, the system started automatically flagging spam. The program has substantially reduced the number of times an actual human needs to look at spam and other nonsense. For more details, please see the 2017 spam report. And just so it’s clear, this was entirely a community-led development. We love giving our users agency to fix problems. Even when we are doing the development work, we do best when we communicate early and often with users. (This was the most important thing we learned from Documentation.) For instance, the team working on improvements to the network publishes a monthly update and takes community feedback as one important input to its priority list. I mentioned last year that we didn’t listen to potential customers who wanted to pay for an Enterprise Q&A site. A variety of organizations have successfully deployed these sites, which in retrospect shouldn’t be a surprise. It hurts to consider the opportunities we missed simply by not listening. Annual events help turn a random collection of humans into a cohesive culture. As a sampling: TeX – LaTeX Stack Exchange elected representatives to the TeX Users Group. Graduated sites customized advertisements for the year to come. (Mathematics has some interesting submissions.) We redesigned the top bar. (Ok, that only seems annual.) Judaism hosted “Purim Torah” questions. The Stack Overflow Developer Survey results were revealed. We danced like fools for April Fool’s Day. Users hunted down their favorite digital skull decorations in Winter Bash 2017. Over $56,600 was donated in the name of our moderators. ($100 per moderator, if you are curious.) I’m not the only one posting about the year that was. Christianity has a statistics-heavy post that follows the format of this post—it’s like a fractal! There’s an introspective question on The Workplace in 2017. If you want more adventure in your life, you might look at some of the community’s favorite Science Fiction and Fantasy questions from the past year. (I’m still waiting for the fourth quarter post!) Classicists in the house might appreciate the best Latin(!) answers of the second half of 2017. If your language preferences tend toward the programming variety, take a look at the submissions to Code Review’s 2017 community challenge: design your own programming language. The highlight for 2017 on Bricks: it became a recognized LEGO User Group. My colleague, Shog9, looked at question closing statistics in 2017. Thanks to the the efforts of la gente hispana, Stack Overflow en Español became a fully graduated site. Meanwhile Stack Overflow employees keep busy with everything from semi-regular podcasts to reaching out to companies who are hiring programmers. Our data team spent much of 2017 digging up insights from our unique data about developers. They also introduced Stack Overflow Trends to facilitate your own research and released an improved salary calculator for programmers. After years of planning, the SRE team moved to HTTPS everywhere. In addition to the Stack Exchange app, we now have a Stack Overflow mobile app for Apple and Android phones. Finally, Jess Pardue explained how remote work really works. I’m not going to spin it; 2017 was not a terrific year for Stack Exchange Inc. Remember the Documentation feature I was so excited about last year? We shut it down in August. It’s still a good idea and there’s a huge opportunity, but our real strength is user-curated questions and answers. Unfortunately, we also lost a number of outstanding colleagues. (It was strictly a business decision and we miss them tremendously.) So it’s more important than ever to focus on what we do best: enable our talented communities to answer the internet’s questions."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/01/08/take-2018-developer-survey/","date":"2018-01-07T23:00:00.000Z","tags":["Code for a Living"],"title":"Take the 2018 Developer Survey","text":"It’s that time of year again—the annual developer survey is now open! This survey marks the 8th year we’ve been asking the developer community for their thoughts on everything from programming languages to career preferences. This year, we added in new questions about artificial intelligence, ethics in coding, and more. As in previous years, anonymized results of the survey will be made publicly available under the Open Database License. We encourage you to download and analyze the dataset yourself when it becomes available. Throughout the survey, certain answers you give will be treated as personally identifiable information, and therefore kept out of the anonymized results file. We’ll call out each of those in the survey with a note saying “This information will be kept private.” We’ve made this year’s survey short (and by short we mean somewhat-freaking-long), but we’ve done our absolute best to be respectful of the time you’re giving by taking the survey. If you have any questions or feedback in general, we’d love to hear it. The survey will be open for three weeks starting today, and will tentatively close on January 26th. Users who complete the survey will be awarded the Census badge across any SE communities they belong to."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2018/01/05/el-estado-de-stack-overflow-en-espanol-diciembre-2017/","date":"2018-01-04T23:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español: Diciembre 2017","text":"Este mes terminamos un año realmente tremendo. Vimos la graduación de nuestro sitio en el 2017 al igual que la inauguración de nuestros moderadores oficiales. Vimos también un crecimiento satisfactorio de nuestras preguntas por día y de nuestra membresía. Estamos muy emocionados por lo que vamos a poder realizar este año siendo que terminamos bien en el 2017. Como acostumbramos hacer cada mes, les presento unos detalles interesantes del mes de diciembre y también un resumen del año anterior. Las 5 preguntas con la cantidad más grande de respuestas del mes: Conseguir índice de un objeto en un Array de objetos proporcionando un atributo del objeto – 6 respuestas ¿Cómo extraer parte de una cadena según un patrón? – 5 respuestas ¿Cómo ocultar la ActionBar en Android? – 5 respuestas Usar una variable como nombre de fichero? – 4 respuestas Como obtener el Texto de un Label que esta dentro de un ListView dinámico Xamarin Forms PCL – 4 respuestas Los 5 usuarios con la cantidad más grande de preguntas este mes: omaza1990 – 33 preguntas fran – 16 preguntas Miguel Espeso – 15 preguntas Pachi – 15 preguntas Killpe – 14 preguntas Los 3 usuarios con la cantidad más grande de respuestas este mes: sstan – 93 respuestas Luis Daniel Rovira Contreras – 86 respuestas Jorgesys – 82 respuestas Corto resumen del 2017 Promedio de nuestras preguntas por día: 114 ppd Vistazo de las visitas por mes: Lugares de donde vino nuestra gente (de mayor a menor cantidad): México España Colombia Perú Argentina Chile Venezuela Ecuador Bolivia Costa Rica La pregunta más visitada del año: Cómo separar un String en Java. Cómo utilizar split() – vista 22,932 veces"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/12/27/stack-overflow-gives-back-2017/","date":"2017-12-26T23:00:00.000Z","tags":["Company"],"title":"Stack Overflow Gives Back 2017","text":"One of the most lasting gestures of philanthropy is when folks give so generously of their time and hard-earned knowledge so that others may benefit from their efforts. 2017 marked the year we saw Stack Overflow surpass 15 million questions and almost 4 million more across the network. But this year also marked another milestone — making a lasting difference from our little corner of the Internet. Every year we set this time aside to remember the people and organizations who desperately need our help. A few weeks ago, I contacted the 566 Moderators of Stack Exchange and asked each of them to select a charity for which we would make a $100 donation on their behalf. Giving Back Works! Today I am pleased to announce that the Giving Back program has surpassed over a quarter-million US$ in charitable donations, in our continuing efforts to provide the support these wonderful organizations need. So on behalf of the 566 Moderators of Stack Exchange, here are the charitable donations going out this year: Charity Donation Code.org A non-profit organization whose vision is that every student in every school should have the opportunity to learn computer science, dedicated to expanding access and increasing participation by women and minorities (code.org) $7,200.00 International Association for Suicide Prevention An international organization dedicated to preventing suicidal behavior and providing a forum for survivors, mental health professionals, and those affected by suicide (iasp.info) $9,500.00 International Rescue Committee Responding to the world’s worst humanitarian crises and helping people to survive and rebuild their lives; at work in over 40 countries, more than 90% of every dollar goes directly to help refugees in desperate need (rescue.org) $9,900.00 Doctors Without Borders An international medical humanitarian organization created by doctors and journalists (doctorswithoutborders.org) $14,500.00 Electronic Frontier Foundation Defending your rights in the digital world (eff.org) $15,500.00 TOTAL $56,600.00 And from our engineering and IT staff, it is important to remember some of the tools and organizations that make what we do possible: Organization Donation LetsEncrypt $1,000.00 Python Foundation $1,000.00 HAProxy $1,000.00 Creative Commons $1,000.00 Have I been pwned? $1,000.00 Earlier this month, equal access across the Internet took a crippling blow here in the US with the overturn of Net Neutrality. Opposition to this unfortunate turn was evident in this year’s strong show of support for organizations like the Electronic Frontier Foundation leading the fight. And with recurring themes in the news like the victims of natural disasters, mental health concerns, and growing support for under-represented groups making the headlines, it’s no wonder organizations like Doctors Without Borders, International Rescue Committee, code.org, and the IASP continue to rally such a generous outpouring of support. And to all the users of Stack Exchange, thank you… thank you… thank you! Without your passion and your generosity, none of this would be possible. It is our hope that, with your continued support, we can make a lasting difference around the world by continuing this wonderful tradition of giving back. See you next year!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/12/04/designing-channels/","date":"2017-12-03T23:00:00.000Z","tags":["Company"],"title":"How We’re Designing Channels","text":"This post refers to “Channels”, a product which is now called “Teams.” This post is part of a series on how we’re making Channels, the thinking behind the product, and insight into the process. We’ve got smart people working on smart solutions, and continue looking to the community and alpha/beta testers as we iterate toward launch. Read “Why Channels”, the first post in the series for more background info. Working on Channels has been like any remodeling project: You start out excited, then you pull down the wood paneling and suddenly realize you’ve got rewiring to do — solving one issue leads to even more. Discovering the problems The team started by interviewing developers — observation to more deeply understand their needs, the benefits and shortcomings of tools they’re using for knowledge management, and their hopes for what Channels on Stack Overflow could be. This research helped us center our approach around three main principles: Channels provides a private & secure space for your team to store and share institutional knowledge, Channels is a feature that exists right on Stack Overflow, a familiar place where developers know the systems and already go to ask and answer programming questions, And deep integrations & notifications are essential to make sure that the right question gets in front of the right person, especially on a smaller community or team. Next, we went broad by analyzing other products and prototyping many design approaches before converging on any solution. We pulled in designers from different product teams to quickly explore a wide range of solutions. This is where we began to discover that the new tile might not match the countertops. Here’s what we’ve learned so far Needs in small, private spaces are very different than large, public ones There are nuances to how people will use their private, work channel that differ from the public setting. Connections and relationships already exist in the physical world prior to the addition of a private Channel. Work problems are specific to coworkers who are domain experts. In public, anyone across the globe with the right knowledge can answer general programming questions. Not all features and rules created for public Stack Overflow are necessary in a smaller, private environment, and new features are needed that don’t yet exist. For instance on public Stack Overflow, you can’t mention anyone unless they’ve contributed in some way to the question (otherwise Jon Skeet would get pinged any time anyone had a C# question.) But in a private channel the need is different — “I want to make sure Jenny sees this question because I think she’s probably the only person in the company who can answer it well.” Also, users need to be able to quickly identify what is private. There are updates to the UI that are necessary in order to ensure there’s no possibility of posting private info into the public space. Adding channels requires big changes to SO’s Information Architecture A house with more rooms needs more doors. In order to help teams easily find, share, and store institutional knowledge, we need to make our search interface and navigation (finding things by clicking around) be more intuitive. Putting navigation in the right place Adding channels into the current navigation presents challenges that didn’t previously exist, and can only be solved by rethinking the underlying site structure. The team created several prototype navigations, narrowed to two, and tested with a group of users. This surfaced a few key issues: Scalability: Horizontal navigation lacks the space for additional elements — especially multiple channels per user. Gestalt: It’s confusing to place Channel navigation at the page top, where information is already dense. The hierarchy of information must be balanced and easy to comprehend. Persistence / Consistence: Because navigation creates a mental map, any design iteration that didn’t expose the existence of the channel at a top nav level created confusion. We need a system that solved these problems well regardless of whether you’re trying to find info to help onboard a new developer to your team, or just trying to figure out how to vertically align text in CSS. While we haven’t solved all the edge cases, the design discovery gave us a clear direction to test during the alpha phase. One search for all Channels A key path to finding content on Stack Overflow (searching for a question on Google, then clicking on a Stack Overflow Question) doesn’t work for private Q&A because Google can’t index it. That means Channels users will often need to use SO’s search when they’re looking for content that might be private… and our search has been showing its age for some time now. If our goal is to quickly help users find the most relevant results, then we need a better search experience that considers the searcher’s intent and improves the quality of the results (but I’ll let an engineer speak to those changes in a future post). New integrations and notifications Because Stack Overflow gets 10 million visits per day, getting questions answered hasn’t been a problem we’ve faced for a long time. The mechanics in smaller communities are different. With Channels, we had to think through how smaller teams interact and the workflows they’re already using in order to make sure the right people see the right questions. Our primary learnings showed that we need to integrate with the tools teams already use (such as Slack) and enable users to create custom email notifications. We’re planning and building several integrations. Balancing getting users in and iterating toward a vision Much of design is iteratively gaining a deeper understanding of the problems we need to be solving. Achieving a higher fidelity of understanding means repeating the process of creating and testing over and over again. Throughout the design process there’s a healthy tension between what we can build today and ship fast so that we can actually put something in front of users to make sure we’re meeting their greatest needs and a longer-term vision that guides our trajectory as the product matures. We split the work into phases, and even though we’re embarrassed by some of the things we are putting in front of people, there’s reassurance that we’re building toward a future state that we all believe in. This also means that we aren’t launching into long build phases on things that we think are important, but may not be essential to our users. Next Steps We’re launching Channels alpha in December and hope to be moving into public Beta in Early Spring. Look for future posts sharing our design, research, and product development process in the coming weeks. In the meantime, we invite you to provide feedback or sign up to be part of our beta group as we test and grow our Channels product. If you have any questions for the team or me, feel free to drop them in the comments or ask a question about Channels on Meta. Let us know what you think."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/11/09/why-channels/","date":"2017-11-08T23:00:00.000Z","tags":["Company"],"title":"Why Channels?","text":"This post refers to “Channels”, a product which is now called “Teams.” As we continue to work on Channels, we wanted to share with you our vision, the thinking behind the product and its intricacies, and insight into the process behind developing it. Not all product problems have been solved, and we hope that we can take you along for the journey. This post is the first in a series on how we’re making Channels. A year and a half ago, we launched Stack Overflow Enterprise to help large organizations share internal knowledge in private, stand-alone communities. It addressed several frustrations that large companies face: manual upkeep of knowledge bases, single points of failure, inefficient employee onboarding, and overall, quite simply, wasted time. And for larger companies, it works incredibly well; the feedback we’ve gotten exceeded even our expectations. Giving developers a place to discuss proprietary information in a system they were already comfortable with proved extremely useful to our customers. Because Enterprise is designed to be a self-sustaining Stack Overflow community, it works best when there are lots of people (roughly 500 technical members seems to be the magic number). However, developers on smaller teams also have problems getting answers to questions they can’t ask on public Stack Overflow. That’s why we decided to build a product specifically designed for technical teams that aren’t big enough to support a standalone community. Understanding the problem When we started developing Channels in earnest, we learned a lot more about the problems that developers are facing when sharing and maintaining internal knowledge. For example, when developers need to ask their teammates questions, they tend to default to the tools that they’re already using daily: namely, chat and email. But those tools have their own problems. Chat is ephemeral and tough to search, and email is inherently limited to the people included or copied in. Both tools put a lot of strain on the few developers at a company who know the answer to a given question, and neither method excels at storage and recall. Tools like wikis or documentation are useful, but they require a lot of upkeep, and developers aren’t necessarily visiting them on a daily basis. We heard from many people that the pain of managing their wikis and docs left them stale and outdated. More often than not, knowledge is locked up in the minds of a few individuals who find themselves repeating answers over and over every time a problem crops up. As we learned more and more about the problems that developers have with knowledge management, we became more excited about Channels. Most developers are already visiting Stack Overflow on a regular basis, so including internal knowledge management feels like a natural extension of our existing product, and means they don’t have to add a new destination to their workflow. Its searchability resolves any issues with ephemerality, and its ad-hoc nature eliminates the heavy upkeep of formal documentation and wikis. How Channels fits into our business While solving internal knowledge sharing problems is the primary focus of Channels, it also fits in really well with our broader business objectives: Be the best technical Q&A site – Channels plays to our strengths. Technical Q&A is our specialty, and extending it to internal knowledge sharing is a natural extension of what we do today. Help developers in new ways – Not all problems are public ones, and not all code can be posted online. Channels gives developers new ways to solve their problems without leaving the site they already know and love. Make money – This one’s probably obvious, but as a business, we have to make money! Channels will offer a paid service that we think many companies will be excited to buy. What the Channels solution will be Once we understood the user problems we were solving for and identified how they relate to our business objectives, we set out to determine what the fundamental pillars of the product itself would consist of. There are three key tenets of the Channels product: Exists right on Stack Overflow – Channels will bring all of your knowledge sharing into one place. Whether you’re seeking a solution to a problem with a common framework or debugging an internal system, you can get it done on stackoverflow.com. Private & secure space for your team – Security is our top priority (make sure to bother Nick Craver about writing that post). Your team will be able to interact with their Channel in a secure and isolated space within the public site, where internal knowledge is completely walled off from the broader community. Deep integrations & notifications – Small communities require additional effort to get the right questions in front of the right person. Channels will work with the existing tools at your disposal. We plan to launch with Slack integration, an API to connect Channels to your own tools, and updated subscription options to stay up to date with the most recent changes. What’s next? This December we’re launching the Channels alpha, where we’ll be testing an early version with a small group of companies. We plan to use this time to learn a whole lot and make sure we’re building the right product the right way. By early Spring we hope to be moving into a public Beta, where organizations can create their own Channels and start using Stack Overflow to collaborate in a new way. In the meantime, we invite you to provide feedback or become part of our alpha and beta group as we test and grow our Channels product. If you have any questions for the team or me, feel free to drop them in the comments or ask a question about Channels on Meta."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/09/29/making-remote-work-behind-scenes/","date":"2017-09-28T22:00:00.000Z","tags":["Code for a Living"],"title":"Making Remote Work: Behind the Scenes at Stack Overflow","text":"The logistics of Stack Overflow’s remote-first philosophy By now you’ve probably heard about Stack Overflow’s commitment to making remote work, well… work. If not, you can read about it here, here, and a whole page of links here. Seriously, we care about it a LOT. At Stack Overflow we want to hire the best person for the job, even if that person is in Salt Lake City, Utah; Berlin, Germany; or São Paulo, Brazil. Promoting remote work promotes diversity, and we are committed to improving both. However, this isn’t going to be another article about why we believe in remote work. I’m here to tell you about how we pull the whole thing off. I manage workplace operations for the company, and a huge part of that job is making sure that our 85+ remote employees have everything that they need to get their jobs done. So here are my tips for having a successful remote infrastructure: Have a dedicated remote person (like me!) to be the point person for remote needs. This is definitely the most important piece of the remote puzzle. You need a person whose stated job is to make sure that remote employees have a specific person for questions, concerns, and problems. When we hire a new remote employee, I tell them that they can come to me with any type of question, and I will try my best to answer it, or at least point them in the right direction. I get aaaaaall kinds of questions and requests. For instance, I now know how to buy and ship Belgian beer to Poland for an employee that wasn’t able to attend a work event because of a surgery. Also FYI, Uruguay has very strict restrictions on voltage of household items, so getting a crank-lever standing desk to Montevideo was fun (read: not fun). There also needs to be someone on the executive team (it’s better if there is more than one someone) consistently asking “What about the remotes?” When you have a new “x,” the execs should be thinking about how that impacts all employees, including remotes. Have your People and Finance Teams homed in on remote needs Companies will encounter a wide range of odd legalities in dealing with remote employees, especially with international folks. Did you know that in Romania if someone is going to have a home office, they have to have it inspected by a fire marshal? And in the U.S. we have a rule called “prevailing wage determination” that requires some remote employees to post a paper notice in their home for at least 10 days. (I like to think they put it in a laundry room or over the toilet.) It definitely helps to have an HR department that is certified in immigration and visa issues. At Stack Overflow we are lucky enough to have a lawyer on our People Team along with other trained HR counsels for employees to go to when these issues arise. The same goes for finance departments. The taxation alone is a handful with multiple states/countries. You need an entity for each state, which requires considerable forethought. You also have to file payrolls properly and that varies depending on location. No one ever accused the IRS of being simple! Remote first We’ve already touched on this in the other blog posts, but it bears repeating: If one person in the meeting is remote, we’re all remote. If there are 5 people in a conference room and 2 people dialing in remotely, it is very easy for the folks in the meeting room to forget about the people dialed in. You can eliminate that problem by having everyone call in, if possible. After a while it is second nature to jump on a call instead of finding a room. Currently in the Stack Overflow NYC office it is really common to walk around and see two people on a hangout even though their offices are next to each other! (It is also possible that these people are just lazy…) Try to recreate office fun stuff in a remote capacity We have regular “Bev Bashes” and holiday parties in the offices, but what about the remotes? How do you give them fun stuff even though they are scattered all over the world? For starters, we have “Remote Bev Bashes” over Zoom every Friday. The “Bev Baron” for that week (nominated by the last Bev Baron) schedules a Zoom call and sets a theme. Employees grab a beverage of their choice and just chat. You can stay for just a few minutes to say hi, or you can be a part of the entire thing. Additionally, each office has a pretty fancy Holiday party in December, so we of course invite any remotes that are near the offices. If they are too far away to attend, we give a $200 stipend so that they can have their own festivities, whether it’s a really nice night out with their partners or just a big dinner for family. We don’t care as long as the employee does something yummy with it. Don’t forget: If you make swag (t-shirts, hats, new socks etc) make sure that you send them to the remotes too. It may seem like a lot of work (believe me, with 87 remotes, it is a lot of shipping), but it is definitely worth it! Bring them all together Once a year, we bring all of our remote employees together for a week for some much needed face-time. It’s a different city each time, and there are usually 3 days of Executive Keynotes, Tiny Talks, and many many games of Werewolf. We talk about the state of the company and new projects and teams, but we vow not to make any huge decisions or business altering plans. The focus is on camaraderie, not profits. We look forward to it all year, and it’s definitely a blast. No pressure on the person that has to plan it, right? Read: That’s also me. We also have smaller mini-meetups for teams to come together when needed, but those are coordinated by the teams themselves and centered around one of our three offices. Make their home workspaces as awesome as the offices When a new remote employee is hired, I contact them for their furniture choices. They get their choice of the exact same desks and chairs that we have in the offices, free of charge. We want them to be as comfortable as possible, and that means if they want to stand instead of sit, no problem. Our IT dept sets them up with all of their tech, and I set them up with everything else. Need a filing cabinet? Cool. You want a different type of desk that is bright pink and sings? Hey, it’s your house. We re-create the in-office set-ups as much as possible so that our remote employees never feel less valued than everyone else. Want to go remote yourself? Love remote work or the idea of it? Check out our Live + Work Anywhere job listings on Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/09/25/can-use-new-stack-overflow-bot-microsoft/","date":"2017-09-24T22:00:00.000Z","tags":["Community"],"title":"How You Can Use the New Stack Overflow Bot from Microsoft","text":"As Joel often says, “developers are writing the script for the future,” and that is definitely the case when it comes to AI. The knowledge shared on Stack Overflow includes an ever-growing pool on AI and related topics such as machine learning, natural language processing and deep learning. From C to Lisp to Java to Python, professional developers and those learning the craft are eager to learn, share and build their careers around this important programming field. So when Microsoft showed us how they were bringing AI to every developer through their platforms and tools, and asked if they could partner with us to create an AI driven experience for developers to use and learn with, we of course said yes. The first step in this is Microsoft’s Stack Overflow Bot, available at https://aka.ms/stackoverflow-bot-sample, and powered by Microsoft AI. We hope developers will be inspired to use the bot’s sample code to create innovative AI experiences for Stack Overflow and share it with the community: You can play with the sample code on Github. We’re passionate about creating a place for developers to engage and enable one another to drive transformative change in society. Supporting knowledge sharing and use of AI on the Stack Overflow platform will bring more opportunities for developers like you to do so, and we look forward to seeing what you build with it. About Microsoft’s AI platform: The Microsoft AI platform provides productive and powerful tools, like Bot Framework, Cognitive Services, Cognitive Toolkit, Azure Machine Learning, and many more tools to allow developers to quickly infuse AI into their existing applications and solutions, and to create new intelligent experiences for their users. Powered by the robust capabilities of Azure, the Microsoft AI platform allows developers the openness and flexibility to choose the technology and deep learning framework suited for their scenario and skills. To learn more about the platform and to see a demo of Microsoft’s Stack Overflow Bot, watch the livestream today (Monday, September 25) at 11:15am PT/2:15pm ET, or see the video afterwards on Microsoft’s Channel 9."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/09/19/much-developers-earn-find-stack-overflow-salary-calculator/","date":"2017-09-18T22:00:00.000Z","tags":["Code for a Living"],"title":"How Much Do Developers Earn? Find Out with the Stack Overflow Salary Calculator","text":"Today, we launched the Stack Overflow Salary Calculator, a tool that allows developers and employers to find typical salaries based on experience level, location, specific technologies, and education. We did this because we believe developers should be empowered with more information around job searches, careers, and salary. In fact, we know that developers want more salary information to make better choices about their careers; we have seen that ads for Stack Overflow Jobs that include salary information get 75% more clicks than ads without salary information. This salary calculator is based on the comprehensive data from the Stack Overflow Developer Survey. The inputs to our salary calculator are your location, education, years of professional coding experience, what kind of developer you are, and the technologies you use professionally. The reason we built the calculator with these inputs is that we found these specific characteristics to be most predictive of a developer’s salary, tabs or spaces notwithstanding. There are also more subjective ways that coders are evaluated and compensated. We at Stack Overflow have written publicly about how that happens here but we don’t take that kind of skills assessment into account in this current model. Geography One of the biggest factors in how much a developer is paid is where she or he lives and works. For our initial release of this calculator, we are reporting developer salaries in the United States, Canada, the United Kingdom, France, and Germany. These are countries that are important both for the Stack Overflow community at large and Stack Overflow Jobs in particular. We know there are other countries, such as India, where there are huge numbers of professional developers who contribute both to the Stack Overflow community and technology in the world in general; we are exploring the possibilities of expanding our calculator to more countries like these. Even within a given country, there are metro areas where developers make more than the national average. In the United States, for example, our survey results indicate that developers in San Francisco and Seattle have the highest salaries. (They have high housing prices to go along with those high salaries, but that’s beyond the scope of our salary calculator.) We did not specifically ask about city or metro area on the 2017 survey, but we used IP addresses to geolocate survey respondents and delve into city-to-city differences. This is personally identifying information and therefore not available in the public release of the 2017 survey. Due to our statistical constraints, we only assigned separate predictions to cities that meet two conditions: There were many developers who responded there. Developer salaries there are unusually extreme compared to the national average. We are committed to improving the accuracy and granularity of this calculator. You can help us improve the calculator by confidentially sharing your salary with us in the calculator. We will use your salary information in modeling, but your salary is 100% private and will never appear on your profile or be shared with employers. Which types of developers make more? Another important factor in how much developers are paid is what kind of specific work they do and what technologies they work with. This plot shows how salary depends on developer role or type, but specific technologies also affect salary. Staying current with high-demand technologies can have a big impact on salary. For example, this year, we see a significant increase in salary for developers who tell us they use React.js or AWS in their professional lives. The flip side here is that some technologies are used so broadly that they do not increase or decrease salary significantly. For example, so many developers use JavaScript that identifying yourself as a JavaScript developer isn’t a significant predictor of salary up or down. Building a model The kind of model we built to predict salaries for the calculator uses multiple linear regression. The salaries were modeled on a log scale, because we found the salary distributions were log-normal (as such distributions often are) with a long tail of very high salaries. In this salary calculator, we report a predicted salary for the location, education, experience, and other information you enter. We also report a 50% prediction interval. The specific statistical meaning of this interval is that we expect 50% of people with the same characteristics as you to have salaries within that range; it spans the 25th to 75th percentiles. The interval is just as important as the prediction itself (the 50th percentile), because it gives you an understanding of what the range of expected salaries could be. Another characteristic of the model that can help you understand its predictions are the model’s residuals, the differences between the predicted salaries and the known salaries for the dataset we used for modeling. Let’s look at these for the countries and individual cities that are supported in this initial release of our calculator. The residuals for the model look pretty good. You might notice that the shape of the residuals for the United States isn’t the same as the other countries; there is less variation in the residuals at high salary than at low salary. Another way to say this is that the variance of the residuals isn’t constant. This is called heteroscedasticity (say that three times fast!) and means that our dataset doesn’t quite meet the underlying assumptions of our model. That’s modeling with real-world, messy data for you! We still feel comfortable with the results of our statistical modeling and the prediction intervals that we are reporting in the calculator. This plot shows residuals and fitted salaries on a log scale, but salaries in the calculator itself are reported in natural units and the appropriate local currency for each user. Your turn Check out the Stack Overflow Salary Calculator and learn more about what developers are earning! As a developer, you can estimate the range of potential salaries for your own skills and background, add your own salary to make the calculator better, and even see specific recommended jobs relevant for you. As an employer, you can learn more about industry salary ranges and the competitive marketplace for developers’ skills. Questions? Comments? Head over to Meta now."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/08/07/el-estado-de-stack-overflow-en-espanol-julio-2017/","date":"2017-08-06T22:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español: Julio 2017","text":"Empieza el mes de agosto y esto quiere decir que podemos compartir algunos datos del mes pasado para ver cómo nos fue. Les presento lo siguiente. Las 5 preguntas más visitadas del mes: ¿Qué significa un ampersand en la declaración de una función? – 339 visitas ¿Cómo solucionar errores en los enlaces? – 252 visitas Verificar número mayor a 50 millones – 244 visitas ¿Cómo hacer un “hola mundo” en un paquete para ATOM? – 240 visitas Utilizar JNA para acceder a una funcion de una DLL (C#) desde Java? – 186 respuestas Los usuarios que hicieran la más grande contribución de preguntas del mes: Eduardo Sebastian – 50 preguntas pepito – 40 preguntas MNibor – 23 preguntas Eduard – 23 preguntas AER – 22 preguntas La pregunta más compartida del mes: Validar un email en JavaScript – compartida 74 veces"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/08/01/felicidades-nuestros-3-moderadores-oficiales/","date":"2017-07-31T22:00:00.000Z","tags":["Company"],"title":"¡Felicidades a nuestros 3 moderadores oficiales!","text":"Es realmente increíble para mi el poder ver a este sitio lanzado, graduado, y ahora con sus moderadores. Hemos esperado desde el 2013 para tener nuestra comunidad y ahora aquí estamos, listos para continuar con mucha energía y entusiasmo. Me da un gran placer de poder felicitar a los ganadores de las elecciones, nuestros nuevos moderadores del sitio. Les presento a: AlvaroMontoro JorgeSys lois6b Ellos tendrán el honor de representar a nuestra comunidad y de ayudar a mantener el orden y la alta calidad de información que esperamos de nuestra gente. Ellos trabajarán muy cerca de mi y juntos ayudaremos a seguir mejorando lo existente. Por favor denles la bienvenida a estos moderadores los cuales fueron escogidos por ustedes. Les dejo este enlace para que vean los resultados con más detalle. ¡Espero y lo disfruten! Con esto también me gustaría agradecerles a los otros candidatos que también decidieron entrarle a la carrera. Ellos representan el interés de nuestra gente en seguir levantando el nombre de nuestra comunidad al querer ser parte de este equipo de moderadores. Los respeto mucho y de nuevo les doy las gracias por su valentía y su deseo por ayudarnos a todos. Ellos son: Toledano Carlos Muñoz fredyfx gbianchi Ivan Botero Paul Vargas ArtEze Joel Ibaceta ¡Felicidades a los tres ganadores! Muy pronto los contactaré para juntarnos y discutir los siguientes pasos pero por ahora, disfruten su nuevo titulo. Quiero también darles las gracias a Luiggi Mendoza y a Miquel Coll quienes fueron nuestros moderadores desde casi el principio de esta jornada. Ellos nos ayudaron tremendamente y más Luiggi siendo que por una temporada, él estuvo moderando el sitio solo. Miquel, gracias por tu ayuda y aunque no te hemos visto hace ya unos meses, esperamos que sigas bien y que nos puedas visitar lo más pronto posible. Luiggi, gracias por la ayuda que nos diste y el tiempo que tomaste para participar como un usuario y como moderador de esta comunidad. Te aprecio las ganas con las que vigilaste las colas de reportes y los mensajes de la comunidad. Te comportaste como todo un líder."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/07/31/podcast-114-every-conference-needs-break-dancing-greeter/","date":"2017-07-30T22:00:00.000Z","tags":["Company"],"title":"Podcast #114 – Every Conference Needs a Break-Dancing Greeter","text":"NOTE: We will be on podcast hiatus for the month of August. Look for new episodes in September. Welcome to The Stack Overflow Podcast episode #114 recorded Thursday July 27, at Stack Overflow Headquarters in NYC. Your hosts today are Assistant to Cobra Commander (and less importantly VP of Stack Overflow) Jay Hanlon, CTO David Fullerton, News Editor Ilana Yitzaki, and Stack Overflow’s own “Bananager” Kevin Montrose. Our sponsor today is Stack Overflow Jobs. No spam. No fake job listings. Find the perfect job so that you can build something awesome. Listen today for nuggets such as: Special guest Saron Yitbarek joins us with her amazingly interesting and insightful Developer Story. She started with a failed attempt at learning to code, but came back, eventually founding CodeNewbie, the most supportive community of programmers and people learning to code. She also produces the Codeland tech conference and hosts the CodeNewbie Podcast. On CodeNewbie users, “Little touches… have really helped make a community that enjoys really over-the-top positivity.” She also wore a t-shirt to her wedding. Not all heroes wear capes. Kevin’s rant is all about… Kevin. “Why? Why everything?” David bought the new Kindle Voyage. Verdict: Meh, it ain’t worth it. Just get a Paperwhite. Introducing the Stack Overflow Mentorship Research Project. Tell us what you think on Meta! This week’s Constitution question comes from Twitter user @_tbirrell. “When commenting code, comments should be inline, instead of above the line.” Vote PRO if you think that comments should be inline, and CON if you think it can be above the line. Post your answer to twitter using the Hashtag #stackoverflowpodcast, with either PRO or CON and your explanation, short but deadly, like a smurf with a black belt in krav maga. The best explanation, whether on the winning side or the losing side, will be read on next week’s podcast and win a STACK OVERFLOW STICKER, courtesy of the us. Last week’s winner is longtime SO contributor @MonicaCellio! Thanks Monica, you get some stuff. Thanks everyone for listening. We’ll be back in September! Links! Saron’s Awesomeness: Codeland conference Twitter: @CodeNewbies codenewbie.org CodeNewbie Podcast Most important: the amazing wedding video OMTR – Kindle Voyage vs. Paperwhite Mentorship Meta post In The News: Girl Scouts and STEM From Kevin’s new business card:"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/07/24/11-candidatos-para-la-carrera-de-moderadores-ahora-que/","date":"2017-07-23T22:00:00.000Z","tags":["Company"],"title":"11 candidatos para la carrera de moderadores. ¿Ahora qué?","text":"Me quedo impresionado por el apoyo y el interés que se ha visto en esta elección de los moderadores de SOes. Se ve que la comunidad entiende la importancia que estos individuales elegidos tendrán en el sitio. Para seguir explicando el proceso, les presento lo siguiente. El cuestionario, ¿es realmente necesario? Al escribir este blog, había todavía uno que otro candidato que no había terminado su cuestionario y con solamente media hora hasta que esta etapa cerrara. ¡Que locuras! Se planto la pregunta de si el cuestionario era un requisito para ser candidato a la carrera y muchos dijeron que lo deberíamos hacer así. La verdad es que estoy totalmente de acuerdo con esto pero no lo podemos hacer porque el sistema en donde las votaciones se cuentan no está en el mismo lugar en donde se someten los cuestionarios. El proceso de las elecciones se ha automatizado y por eso tenemos esas limitaciones. Mí opinion personal es que si alguien no entrega su cuestionario, eso me hace dudar de las habilidades de seguir las reglas y de la seriedad de ese candidato con respecto a su entrega ha este proceso. No tomaría en serio a esa persona y en realidad, no votaría por ella. Afortunadamente, esta no es nuestra situación ya que tenemos a 11 candidatos y a 11 cuestionarios. Ahora nos toca leer y escoger a los mejores. Las primarias y la elección final Habíamos dicho que si hubiesen más de 10 candidatos, tendríamos que entrar a la etapa primaria para escoger a los Top 10 para la elección final. Esto es exactamente lo que sucedió, solamente que hubiera hecho más sentido el tener a unos 20 o tal vez unos 15 candidatos pero no…..tenemos a 11. Suena un poco raro en tener que entrar a la etapa de las primarias por 1 solo candidato pero, ¿qué les cuento? Así esta el sistema diseñado, con solo 10 lugares para los candidatos finales. Lo que sigue es esto: Tenemos 4 días para escoger a los 10 candidatos que cumplan con lo necesario para moderar nuestra comunidad. Al terminar esos 4 días el sistema pondrá a los Top 10 en la elección final y empezará la elección oficial. Tendremos otros 4 días para este paso. Los 3 ganadores se anunciarán el primero de agosto. Todos estos pasos se describen en nuestra página oficial de elecciones. Pueden encontrar cada paso al navegar cada una de estas pestañas: Estamos muy cerca de tener a los moderadores oficiales para nuestra comunidad y les pido que sigan votando para sus candidatos favoritos. No dejen que se les pase esta oportunidad de participar en esta fase tan importante de nuestro sito. ¡Adelante! Últimas noticias Parece que uno de nuestros 11 candidatos a revocado su postulación. Esto nos lleva a tener solamente 10 candidatos cosa que nos hace pensar en poder entrarle a la votación final. Pero, no vamos a poder porque existe la oportunidad (aunque sea muy pequeña) de que ese candidato revoque la revocación y decida entrarle a la carrera de nuevo. Lo se, es un poco frustrante pero bueno, así esta diseñado el sistema. Seguiremos con las primarias hasta que se terminen los 4 días necesarios para esta fase. Al terminar esos días estaremos listos para votar por nuestros 3 moderadores oficiales. ¡Seguimos en marcha y con puntualidad!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/07/24/podcast-113-frustrating-miracles/","date":"2017-07-23T22:00:00.000Z","tags":["Company"],"title":"Podcast #113 – Frustrating Miracles","text":"Welcome to the Stack Overflow podcast recorded Thursday July 20 at Stack Overflow Headquearters in NYC. Your hosts today are podcast regulars Jay Hanlon, David Fullerton, and Ilana Yitzhaki, plus the quite irregular Matt Sherman (Stack Overflow Engineering Manager extraordinaire). This week’s episode is brought to you by Game of Thrones Season 5 Spoilers as well as Stack Overflow Channels. Everything you love about Stack Overflow, in a private space just for your team. Sign up today at stackoverflow.com/channels to learn more or get your team in line for the beta. Today’s highlights: For this week’s Developer Story, we are proud to have Linux Academy Founder and CEO Anthony James chatting about his circuitous route from authoring the Pinehead tutorial blog as a teenager, then jumping to creativity-sapping accounting and finance roles (we all know how much Jay loves Finance) and then to his current passion “changing lives through interactive training” with Linux Academy. Matt’s Rant™ is about everything and nothing; basically “Computers shouldn’t work…” OMTR – David has a new phone with a *gasp* analog silence button. We play Fake News: David Fullerton edition. Did we mention that he lives in Florida now? Google Glass is… back? New Constitution Question, this week from our very own Jason Punyon (@JasonPunyon): When reading code, would you pronounce the parentheses in a function call as “bananas”? PRO = Yes, I would call them bananas; CON = No, Jason Punyon is bananas. Post your answer to twitter using the Hashtag #stackoverflowpodcast, with either PRO or CON and your explanation, short but insightful. The best explanation, whether on the winning side or the losing side, will be read on next week’s podcast and win a Stack Overflow Sticker, courtesy of us! Last week’s winner: Thanks Ari for participating, and thank you all for listening. See you next week! Clicky clicky: Linux Academy‘s brand new platform cloudassessments.com Follow Linux Academy on Twitter and Facebook (and check out our Linux job postings here!) Sign up for Stack Overflow Channels! Reduce single-source-of-information bottlenecks by sharing any dev’s knowledge with every dev on your team. The OnePlus 5 In the News: Google Glass"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/07/21/el-estado-de-stack-overflow-en-espanol-junio-2017/","date":"2017-07-20T22:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español: Junio 2017","text":"Llegan los números interesantes del sitio para el mes de junio y esta vez vemos el sitio Meta. ¡Espero y encuentren lo siguiente interesante! Las 5 preguntas más contestadas del mes: ¿Es válido realizar preguntas sin mostrar esfuerzo si no es para poner una respuesta propia al mismo tiempo? – 3 respuestas Buscar todas las preguntas/respuestas que he publicado en la red de Stack Exchange – 3 respuestas Deshabilitar cierre de preguntas recientes – 3 respuestas ¿Qué ocurre con la pregunta “Manejar conexiones a bases de datos MySQL mediante PDO: principios básicos”? – 3 respuestas ¿Por qué Meta Stack Overflow tiene una opción para agregar código? – 2 respuestas Los usuarios que hicieran la más grande contribución de preguntas del mes: gilberto quintero – 9 preguntas Rubén – 8 preguntas Mariano – 5 preguntas fedorqui – 4 preguntas Alvaro Montoro – 3 preguntas Los usuarios que tuvieron más respuestas aceptadas del mes: Mariano – 8 respuestas aceptadas fedorqui – 4 respuestas aceptadas Rubén – 4 respuestas aceptadas Juan M – 3 respuestas aceptadas Luiggi Mendoza – 2 respuestas aceptadas"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/07/17/podcast-112-please-direct-hate-mail-jay-hanlon-%e2%84%85-stack-overflow/","date":"2017-07-16T22:00:00.000Z","tags":["Company"],"title":"Podcast #112 – Please Direct All Hate Mail to Jay Hanlon c/o Stack Overflow…","text":"Welcome back to the Stack Overflow podcast episode #112 recorded Thursday, July 13th at Stack Overflow HQ in NYC. Today’s hosting duties fall to Jay Hanlon as Joel is still busy alphabetizing his socks. Joining him is newly minted CTO David Fullerton, Fog Creek Community Engineer and Star Wars scholar Jenn Schiffer, and can-totally-tell-the-difference-between-Moff-and-Mon-Mothma podcast producer Jess Pardue. Our sponsor today is CircleCI. Build Faster. Test More. Fail Less. CircleCI’s continuous integration and delivery platform helps engineering teams of all sizes do more. Help your development team work smarter, with features like SSH into builds, first-class Docker support, and super fast builds. All with support for Linux, Android, and macOS. Starting this week, CircleCI 2.0 is generally available and features Workflows, allowing teams to build faster and fully configure their build pipelines. To learn more, go to circleci.com/stackoverflow, sign up with GitHub or Bitbucket and start building for free! Today’s highlights:: We are honored to have special guest Sarah Clatterbuck share her Developer Story; from generating “random” numbers in middle school to studying applied design in college and then directing the Presentation Infrastructure teams at LinkedIn. She also works with high school CS classes and sits on the board of the Girl Scouts of Northern California in order to help develop girls’ early interest in STEM fields. Jay gets quite indignant about Jess and Jenn’s lack of Star Wars recall. Jenn rants about how bad voice recognition really is. Her Echo Dot is cowering in fear under her bed… David ‘s new oven is weirdly specific: Introducing Stack Overflow Channels! Everything you love about Stack Overflow, in a Private space just for your team. Be one of the first to try it. In the News: Is it ethical to automate your job and not tell your company? Also, Jenn is definitely an anarchist… This week’s Constitution Question is brought to you by User Diederik Hattingh via Twitter where you can follow him as@Diederik_za: “In markdown, when adding to the middle of a numbered list, do you fix the subsequent numbers?” Answer with PRO if you must correct the numbers, or CON if you think “Why bother? The syntax will straighten itself out.” Chime in using #stackoverflowpodcast on twitter. The answer that makes us chuckle, whether on the winning or losing side, will be read on next week’s podcast and win a few SO stickers. This week’s winner, for the first time ever, is also the amendment proposer! It’s not rigged, we promise. CON don't use their trash can, leave it on their desk. One mans trash is another mans treasure. — Sharshiel Borisute (@SharshiB) June 13, 2017 Thanks for listening! We’ll be back next week. Links and socials: For Sarah’s awesomeness: Glimmer, Ember, Women in Tech, GS of Northern California Connect with Sarah on LinkedIn and twitter: @girodchatterbox Follow Jenn Schiffer on Twitter @jennschiffer and stop by Glitch! Thanks again CircleCI for sponsoring. BTW, there are so many Mon Mothra’s…"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/07/11/introducing-channels-private-qa-team/","date":"2017-07-10T22:00:00.000Z","tags":["Community"],"title":"Introducing Channels: Private Q&A for Your Team","text":"This post refers to “Channels”, a product which is now called “Teams.” Here’s What We’re Working on and How You Can Get Involved On Stack Overflow, a question gets asked once, answered, and then becomes a central point of knowledge for thousands of others who read it on our site. But what about developers who don’t have the luxury of being public about their work? Today, we’re announcing Stack Overflow Channels for teams that need a dedicated, private space to share knowledge. We’re working hard on an early beta, and we want your active involvement in the product as we build it. If you’re interested in early access and product updates, sign up here! Why Channels? We launched Stack Overflow Enterprise last year to help large organizations share knowledge internally. Like public Stack Overflow, it uses the power of a large community: devs ask questions and other devs from across the organization answer them. But as we expanded Enterprise to more and more large companies, it became clear that smaller teams also have the need to share knowledge in a private space. We realized that our platform gives us the unique opportunity to create a product specifically designed for teams who can’t sustain an entire community of their own. So a few weeks ago we began work on Channels, which will allow developers to ask and answer questions with their colleagues in a private area on Stack Overflow. What are Channels? Stack Overflow Channels will: Create a secure space for your engineering team to ask and answer questions about anything that needs to stay private. Reduce single-source-of-information bottlenecks by sharing any dev’s technical knowledge with every dev on your team. Make it easy to find solutions to technical problems on a searchable platform where knowledge is always discoverable. Put institutional knowledge in a familiar place that you and your team are already visiting. Stack Overflow Channels will be completely free while in beta. Although it will likely remain free for some users, we hope to use the beta to see how we can add enough value that many teams want to pay for it. If you’re interested in being one of the first people to get access or just want updates about our progress, head over to this page to get involved. We’ll start inviting teams to join our beta soon. And of course, for more in-depth discussion, check out this meta post."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/06/30/ya-nos-graduamos-ahora-que-sigue/","date":"2017-06-29T22:00:00.000Z","tags":["Company"],"title":"Ya nos graduamos, ahora ¿qué sigue?","text":"En pocas palabras, lo que sigue para nuestro sitio son las eleciones de nuestros moderadores. Tendremos moderadores seleccionados para el primero de agosto del 2017. Enlace a las elecciones. ¿Cómo funciona esto de las graduaciones? Bueno, es realmente simple. Aquí les contaré lo que se requiere para llegar a la selección de nuestros moderadores. Existen diferentes etapas que tendremos que pasar y superar para llegar a nuestra meta. La selección de los moderadores es algo realmente importante para nuestro sitio. Los moderadores son usuarios de la más alta confianza de entre la comunidad y es por eso que les damos permisos que superan a cualquier usuario normal. Ellos trabajarán muy cerca de y en conexión con el gerente de comunidades para seguir formando lo que es sitio puede y debe ser. Los moderadores también reciben una etiqueta de forma de diamante al lado de su nombre de usuario. Esto los designa como moderador oficial de nuestra comunidad. Para aprender más sobre lo que un moderador es y hace, véase esta publicación: Una teoría de moderación traducida por nuestro estimado Rubén. Allí verán lo que pensamos de esta posición y lo que podemos esperar de una persona que este interesada en aplicarse a este puesto. Primera fase – el cuestionario Empezando el 10 de julio hasta el 16 del mismo, tendremos nuestra primera fase donde aceptaremos preguntas de la comunidad que los candidatos tendrán que contestar. Estas preguntas deben de ser basadas en el deseo de conocer más sobre cómo cada candidato responderá a diferentes situaciones, etc. Recuerden que los candidatos seleccionados serán los que nos representarán y los que estarán al tanto de lo que suceda en nuestra comunidad y es por eso que estas preguntas son realmente importantes. Daremos una semana para aceptar estas preguntas. Tendré yo 2 preguntas que les hare a cada candidato y aceptaré 8 de la comunidad dándonos un total de 10 preguntas para cada candidato. Al tener estas 10 preguntas, seguiremos con el siguiente paso. Véase esta publicación para tener un ejemplo de cómo es esta fase. Segunda fase – las postulaciones Empezando el 17 de julio hasta el 23 del mismo, abriremos el campo a que cada usuario que le interese ser moderador pueda hacerlo de forma pública. No se vale el nominar a alguien para este puesto. Las personas interesadas deben postularse por si mismos. Pero, habrá una pregunta en nuestro Meta para que la gente que quiera animar a otra para esta posición lo pueda hacer. De nuevo, para que la postulación sea oficial, cada individual interesado debe postularse individualmente. Véase esta publicación para tener un ejemplo de cómo es esta fase. Tercera fase – las elecciones Empezando el 24 de julio hasta el 31 del mismo, tendremos nuestras elecciones oficiales. Cada candidato tendrá que contestar las 10 preguntas y nosotros como comunidad votaremos por los candidatos que nos gusten basándonos en sus respuestas y en interacciones o experiencias que hemos tenido con ellos. Pero, ¡ojo! esto puede realizarse en dos formas. En total esta fase dura 8 días sin importar que opción sigamos. Véase esta publicación para tener un ejemplo de cómo es esto del contestar las preguntas. Opción 1: Si resulta que tenemos más de 30 candidatos (este es lo máximo que se acepta por nuestro sistema) tendremos unas elecciones primarias. Estas elecciones servirán para reducir el número de candidatos a solamente 10 (lo máximo que se permite por nuestro sistema). Tendremos 4 días para hacer esto. Al terminar los 4 días, los top 10 seguirán al evento principal que durará 4 días también. Tendremos otra elección y los top 3 ganan la posición de moderador de SOes. Opción 2: Si solamente tenemos 10 o menos candidatos para nuestra elección, pasaremos a esta opción el 24 de julio. Tendremos 8 días para seleccionar a nuestros moderadores y al terminar los días, los top 3 serán los ganadores de esta posición en nuestra comunidad. Anunciaremos a los ganadores el primero de agosto del 2017. Como pueden ver, este proceso está completamente en sus manos. Les pedimos que traten este proceso con respeto y con seriedad. Cuando se selecciona a un moderador para el sitio, se esta seleccionando a alguien que ustedes han pedido. Será de suma importancia el participar en cada paso de este proceso. No se vale llorar al final si no se participó anteriormente. ¡Hagamos de esta oportunidad lo más que podamos! Tenemos entre nosotros a muchos candidatos posibles que son extremadamente dotados para poder representar los intereses de nuestros miembros. Queremos a gente que pueda seguir con nuestra postura hacia los novatos, la calidad de preguntas y respuestas, y sobre nuestra cohesión como comunidad global. Si tienen alguna pregunta o duda, ya saben como conectarse conmigo. Existe el chat de nuestro sitio para platicar sobre estas cosas también. Tenemos la oportunidad de seguir haciendo de nuestra comunidad lo mejor que podamos. Usemos estas elecciones para elegir a moderadores que quieran seguir con la energía y entusiasmo que demostramos aquí."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/06/30/raise-voice-proclaim-need-net-neutrality/","date":"2017-06-29T22:00:00.000Z","tags":["Community"],"title":"Raise Your Voice: Proclaim the Need for Net Neutrality","text":"Because we believe all traffic on the web should be treated equally, Stack Overflow will join some of your other favorite sites from around the web including Netflix, GitHub, Reddit, and Amazon on July 12 for a day of action supporting net neutrality. The goal of this day of action, organized by Fight for the Future, is to get regular friendly Internet users like you to submit your comments and concerns to the FCC about their plans to do away with net neutrality. In fact, you can do that right now by using Battle for the Net’s system or filling out a comment on the FCC’s page by clicking “Express.” What’s This All About? The short version: A few years back, the United States Federal Communication Commission, in response to numerous complaints and concerns, implemented a set of rules that prohibit Internet Service Providers from blocking specific content providers or charging them for access to their networks. Essentially, a set of rules that prevent your ISP from double-dipping on service you’re already paying them for, or blocking access to specific websites just for the hell of it. In order to do this, they had to change how ISPs were classified, moving them from a “Title I” classification to “Title II.” And now, the FCC, under a new chairman, is proposing to roll back that change, which would then allow discriminatory treatment of Internet traffic. This is a complicated issue, and sadly there is a lot of misleading information about it strewn around the ‘Net. The companion discussion to this post covers many perspectives on it in great detail, so please check it out before you make up your mind! For details on the technical aspects of net neutrality, please refer to this question on our Network Engineering site. Why is This Relevant to Stack Overflow? Hey, ain’t like we’re streaming video here, right? Downloading the entire archive of questions and answers on Stack Overflow would only use about as much data as watching 10 hours of Netflix. But that’s not an accident. We’ve known from the start that performance is a feature and we’ve worked really hard to make the site as fast as possible. We know that when your livelihood depends on plowing through a bunch of questions looking for an answer that works, the milliseconds add up pretty quickly. We put insane amounts of time, skill and money into making it easy and fast for folks to share information with one another. It’d be a real shame if that was all for nothing because some major ISP decided to shake folks down for more money. And even if we could weather such a storm, even if it didn’t result in an Internet where interconnection disputes made even trying to run a fast site a crap-shoot, what kind of an Internet would that leave for the next programmer on a shoestring budget trying to build a fast new site? As tempting as it is to shrug and say, “I got mine,” the Internet has always worked because folks kept striving to do better – and had the opportunity to try. We owe it to the next generation to make sure that can happen. How You Can help First off, you can download and read the proposed rule-change from the FCC’s website. Yes, it really has the ironic name “Restoring Internet Freedom.” It’s a little bit of a slog, but I highly encourage reading through the filing if you can spare the time – particularly the incredibly selective “Background” section. Then you can file a comment on the proposal. You can do this directly from the FCC’s website (or browse others’ comments first if you prefer), but I highly recommend using that site I linked to above: https://www.battleforthenet.com/ – it’s a lot less clunky, and automatically forwards your comments to your senator and representative. Which is helpful, since if you read that proposal you know that the big underlying problem we’re facing here is that the FCC is trying to work with a framework of laws that predate the Internet as we know it. Getting the folks who make the laws on board ain’t a bad idea here. I have Strong Opinions on this post, how it relates to Stack Overflow, and Net Neutrality in general Great! Let’s hear ’em. Instead of yet another mess of blog comments that no one reads, I’ve kicked off a discussion over on Meta: – please join in!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/06/27/new-stack-overflow-footer-pages-launch-today/","date":"2017-06-26T22:00:00.000Z","tags":["Community"],"title":"New Stack Overflow Footer & About Pages Launch Today","text":"If you go anywhere on stackoverflow.com today, you’ll notice a brand new footer, new About pages, and possibly a few other surprises we’re still testing out (not everyone will see these yet). Back in February, we updated our top navigation, and today’s changes follow in the footsteps of this effort. We wanted to make it easier for developers to find what they need so they can learn, share, and build their careers. We also needed to make our company information more accessible to press, and to surface our product offerings for customers. As an example of why we’re prioritizing these updates, check out our old footer. It was a bit of a labyrinth: We hope the new one gives you a smarter guide: We’re excited to continue our work improving your experience with Stack Overflow; stay tuned for more changes. Ideas on what could be better or see any bugs? Please let us know on Meta using the [bug], [feature-request], or [design] tags."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/06/21/las-celebraciones-de-nuestra-graduacion-un-resumen/","date":"2017-06-20T22:00:00.000Z","tags":["Company"],"title":"Las celebraciones de nuestra graduación – un resumen.","text":"Ha sido un mes y medio completamente feroz. La graduación de nuestro sitio nos ha causado mucha felicidad y hemos podido celebrar en Madrid y en la Cuidad de México. Hemos tenido también la oportunidad de poder conocer a varios de nuestros usuarios en persona, cosa que para nosotros es un gran placer. El poder visitar a estas ciudades para representar a Stack Overflow en español ha sido una experiencia que no se olvidará. Lo siguiente es un breve resumen de estos viajes recientes. Madrid Llena de gente innovadora y dedicada a su profesión, los muchachos de IronHack me presentaron sus oficinas en Madrid donde pude conocer más sobre su programa y de su intensidad al entrenar a gente interesada en el desarrollo y el diseño web. El espacio que ocupan se localiza en la Plaza Matadero, un lugar histórico en donde en algún tiempo se llenaba de carniceros y gente que buscaba buenos trozos de carne. Ahora, el lugar acoge a varias empresas cuyo énfasis es la tecnología y el arte. Es realmente un lugar bello con edificios construidos de ladrillo y contiene espacios al aire libre para todo tipo de reuniones o eventos. Mi primera impresión fue buena y solamente subió de intensidad al conocer más y más a la gente que acude allí para aprender y para trabajar. Las oficinas de IronHack están de lujo, a todo dar, o molonas – dependiendo de donde vivas. Es un espacio moderno, con aulas de paredes de vidrio entero y madera natural que decora las gradas y forma acentos de elegancia. Al empezar el evento, la gente que había llegado trajo su entusiasmo y curiosidad y pudimos empezar a tiempo y con mucha energía. Los temas de las platicas fueron sobre cómo se construyo la comunidad de Stack Overflow en español, cómo conseguir trabajo en Stack Overflow, y un tiempo de Q&A con tres alumni de IronHack. Fuimos llenos de información y experiencias por más de dos horas y al terminar, gozamos de unas buenas pizzas y cervezas. Nuestros anfitriones se comportaron con todo respeto, llenos de entusiasmo, y amabilidad lo cual me dejo sin palabras. Después, se regalaron las camisetas y otros artículos divertidos a la gente. Se que no fue un teatro solamente para impresionarnos, ellos así son con sus alumnos y con otros invitados que llegan a presentar en sus oficinas. Fue de los más fácil el hacernos amigos y esperamos poder tener otro evento juntos en un futuro. La Cuidad de México Una de las ciudades más grandes del mundo con una historia fascinante que no deja de impresionar, la Cuidad de México fue el segundo lugar donde nuestra comunidad decidió tener nuestra celebración. Llegue un día antes para poder ubicarme y tantear más o menos donde ibamos a estar celebrando. Lo que no me esperaba era la cantidad de trafico que existe allí. Había escuchado de este problemita pero en realidad no se sabe nada hasta no estar en persona. Uno de los usuarios de Stack Overflow en español, Flxtr, fue el que me anduvo llevando a diferentes sitios de la ciudad para conocerla mejor. Cuando comento que nuestra comunidad esta llena de gente respetuosa, amable, y con ganas de servir no estoy exagerando. Así somos aquí, y Flxtr es un ejemplo perfecto de ello. Él fue el que me ayudo a encontrar el lugar para la celebración y fue el que ayudo muchísimo con la organización total del evento. ¡Sin gente como él, nuestra comunidad no pudiera existir! El lugar donde se tuvo la celebración lleva por nombre Avenida 9, un restaurante moderno con comida de diferentes tipos. El espacio se reservo y nos preparamos para nuestro evento. Tuvimos dos platicas, una mía y la otra de Konamiman, nuestro primer moderador y ahora un Core Dev de Stack Overflow. Tratamos los mismos temas que en Madrid pero esta vez, Konamiman no pudo estar con nosotros en persona y en vez nos presento su charla remotamente desde España (¡fueron las 3am para él cuando empezamos!). Todos quedamos fascinados con su platica y al terminar, nos pusimos a comer y a convivir. El evento duro unas 4 horas. Repartimos camisetas y otros regalos a los presentes y bueno, ¿que más les cuento? Me quede con ganas de comer más tacos pero simplemente no pude. Las celebraciones que tuvimos fueron algo realmente especial para todos nosotros. Hubo oportunidad de expresar las gracias por el apoyo y la energía que se proporcionó al empezar el sitio. Tuvimos también el placer de conocernos en persona y de darnos la mano. Nuestra comunidad refleja la intensidad con la cual nos apoyamos los unos a los otros y el poder vivir un pedacito de eso con algunos de nuestros miembros fue algo que nunca se va a olvidar. Gracias a ustedes por crear un sitio genuino de ayuda y de amistad para los desarrolladores de habla-hispana. Existe talento aquí entre nosotros que no se ha explorado a su totalidad y se que el mundo se asombrará por los que se produce en nuestros países y regiones. Les pido que sigamos adelante con energía y furor y – como dice uno de nuestros más apreciados miembros – ¡con todo el poder 2.0!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/06/15/download-stack-overflows-2017-developer-survey-data/","date":"2017-06-14T22:00:00.000Z","tags":["Community"],"title":"Download Stack Overflow’s 2017 Developer Survey Data","text":"Starting today, you can download the raw data from Stack Overflow’s 2017 Developer Survey, which received more than 64,000 responses from developers around the world. (The data file includes the 51,392 responses we considered to be sufficiently complete for publication.) You can download previous years’ results as well, from 2011 to 2016. We’re always excited to share our insights about developers from the survey — such as the finding that developers who use spaces make more money than those who use tabs — and we’re eager (and curious) to see what you come up with in your own analysis. Using the raw data, you’ll be able to answer questions about developers’ careers, how they learn, which tools they’re using, and what they want. Want more data to play with? If you want to see data related to our Stack Exchange sites, check out the Stack Exchange Data Explorer, and if you want to see how different technologies have grown and declined over time, head to Stack Overflow Trends. You can also compare our data with other sets on Google Big Query. If you find something particularly interesting in your analysis of our data, let us know on Meta using the [survey-2017] tag. If you use it in an academic paper, we’d love to add it to our collection. Happy data diving!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/06/12/podcast-111-sre-occasionally-maintaining-infrastructure-hate/","date":"2017-06-11T22:00:00.000Z","tags":["Company"],"title":"Podcast #111 – SRE: Occasionally Maintaining Infrastructure That You Hate","text":"Welcome to a very special episode of The Stack Overflow Podcast recorded Thursday, June 8 at Stack Overflow HQ in NYC. Why is this a very special episode, you ask? It’s all about Site Reliability Engineers (SRE). Joel and Jay are away (slackers) so David is running the show along with Ilana and 3 members of our very own SRE team. Tom Limoncelli, Mark Henderson, and Jason Harvey are here to discuss how we build and maintain Stack Overflow and the Stack Exchange network. So much great stuff in this episode: Tom’s rants are much calmer than Joel’s, but just as infuriating. Stop hiding buttons, Google! Always tip your bartender and use a “USB condom“. Tom and David are fascinated by our Ping Pong Buddy, for some reason. We’re still waiting for Tom’s protocol droid. I, for one, welcome our new robot overlords. Differences between Stack Overflow and other SRE teams. *cough, we’re NOT in the cloud, cough* Special SRE edition of Failure is Not an Option. (Apparently Mark is a master criminal. We’re not sure that he moved out of Australia voluntarily…) In the News: How not to react when someone makes a mistake. Oh, and btw, the SRE team is hiring! As you know we are preparing a Constitution for Stack Overflow. This week’s question comes from listener Kase (@kasey_orourke1): Is it okay to throw things in other people’s trash cans when walking down a row of cubicles? Post to twitter #stackoverflowpodcast with PRO if you should be able to use the trash can with no stink-eyes from coworkers, and CON if you think you should keep your Doritos bags out of other people’s bins. Wittiest answer will win Stack Podcast stickers! Last week’s winner, for the question “Pro or Con, If I say ‘June 1st at midnight,’ am I referring to the morning of June 1st or the evening?” is @ariporad. Congrats Ari! You win things! Watch for a Twitter DM from Ilana. Thanks for listening! We’ll be back with new episodes in July. Until then you can catch up on our back catalog HERE. Links for the lazy: Joel on Software post referenced in Tom’s rant. Short and to the point. Web Pages That Suck is still a thing, albeit outdated (2015). OMTR – Otterbox uniVERSE and Resurgence battery cases. Did we mention that we’re hiring! Buy Tom’s Book: The Practice of System and Network Administration: Vol 1 and Vol 2 From the News: via Reddit – First Day Database Destruction. Who’s fault was it, really?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/06/05/el-estado-de-stack-overflow-en-espanol-mayo-2017/","date":"2017-06-04T22:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español: Mayo 2017","text":"Llego la hora de compartir unos numeritos con ustedes sobre el sitio. Tenemos una buena discusión sobre otras estadísticas que pueden discutir aquí. Este aporte es para darles un vistazo a lo que los usuarios han realizado en el mes de mayo. ¡Espero y lo disfruten! Los usuarios que ganaron 3 o más medallas de oro o plata este mes: PaperBirdMaster – 4 medallas Dev. Joel – 3 medallas fwBasic – 3 medallas Flxtr – 3 medallas Rubén – 3 medallas Jorge Arturo Juarez – 3 medallas Los usuarios que hicieron la contribución más grande de preguntas: omaza1990 – 42 preguntas Eduardo Méndez – 36 preguntas Eduardo Sebastian – 36 preguntas Webserveis – 25 preguntas UserNameYo – 24 preguntas Los 3 preguntas más vistas del mes : No me funciona netflix – vista 1485 veces (¡interesante que esta haya sido la más vista!) SII(Suministro Inmediato de Información) Webservice en Facturas Recibidas – vista 381 veces ¿Cuál es la diferencia entre echo, print, print_r, var_dump y var_export en PHP? – vista 307 veces"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/05/24/dive-stack-overflow-jobs-search/","date":"2017-05-23T22:00:00.000Z","tags":["Company"],"title":"A Dive Into Stack Overflow Jobs Search","text":"About two years ago, a significant event happened at Stack Overflow: a new system, named Providence, was released. Providence would allow us to tell which technologies a visitor is interested in, and measure the “fitness” between a visitor and a job. The release of Providence marked a stepping stone in Stack Overflow’s continuous effort to be “smarter” and invest in data science, and it was only the beginning. Aurélien Gasser, a developer on the Stack Overflow Jobs team, has detailed the long road towards building the greatest developer job search tool on the internet in his Medium post, A Dive Into Stack Overflow Jobs. It’s a deep-dive into the technology, tools, and experiments utilized by the Jobs team in search of the secret sauce that would match you with your perfect job, every time. “As a developer on the Jobs team, I started working on using this new power to help you find a new, better job. My adventures in doing so is what this blog post will (mostly) be about.” >> Read Aurélien’s post Whether you’re searching for a role as a C++ developer, Ruby on rails programmer, or Salesforce administrator, we have listings for you."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/","date":"2017-05-22T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow: Helping One Million Developers Exit Vim","text":"This morning, a popular Stack Overflow question hit a major milestone: You’re not alone, jclancy. In the five years since this question was asked, there have been over a million other developers who got stuck in Vim and couldn’t escape without a bit of help. Indeed, the difficulty of quitting the Vim editor is a common joke among developers. I’ve been told by experienced Vim users that this reputation is unfair, and I’m sure they’re right (even I’ve gotten the hang of it in the last few years). I think there are two reasons it’s easy to forget how to exit Vim: developers are often dropped into Vim from a git command or another situation where they didn’t expect to be, and they run into it infrequently enough to forget how they solved it last time. In honor of this milestone, we decided to take a look at the data surrounding this question. In particular, we’ll try measuring who is most likely to get stuck in Vim as opposed to using it intentionally, and examining how that balance varies by country and by programming language. How many people have been struggling to exit Vim? In the last year, How to exit the Vim editor has made up about .005% of question traffic: that is, one out of every 20,000 visits to Stack Overflow questions. That means during peak traffic hours on weekdays, there are about 80 people per hour that need help getting out of Vim. Has the percentage of traffic it makes up changed over time? That is, have developers started learning to exit Vim on their own? It doesn’t look like it. The question was asked in August 2012, and for a few months it got very little traffic. Then it began growing in the following two years, presumably as more sources linked to it online and it moved to the top of search engine results. It’s been relatively steady for the last two years. This doesn’t necessarily mean the same people visited it again and again, of course; it could represent relatively new programmers getting stuck in Vim for the first time. Differences across countries As we saw in a previous blog post, we can use Stack Overflow traffic to learn a lot about the geographical distribution of developers. Let’s consider what percentage of visits to Vim this question comprises within each country. In countries with a lot of experienced Vim users, we’d expect this percentage to be low. When it’s high, it indicates many users got stuck in Vim when they didn’t necessarily expect to. It looks like developers in Ukraine, Turkey and Indonesia are getting stuck in Vim quite a bit: it makes up a larger portion of their Vim questions than in any other country. In contrast, in China, Korea and Japan the fraction going to this question is one-tenth as much. That might indicate that when developers in these countries enter Vim, they usually meant to do so, and they know how to get out of it. What kind of programmers get stuck in Vim? It’s also likely that users of different programming languages will have different experiences with Vim. We can investigate this by stratifying the “Exit Vim / Total Vim” percentage across each user’s main programming technology. We’ll define this based on what Stack Overflow tag they visit most often. (For instance, my most visited tag is R: it makes up 52% of my question views). It’s not a perfect measure, but it’s reliable enough to give a sense of the breakdown by language. (For this analysis, we considered only registered users with at least 100 visits to the site). The developers who are most likely to get stuck in Vim are front-end web developers: those who primarily visit tags like JQuery, CSS, and AngularJS. They’re followed by Microsoft developers (C# and SQL Server) and mobile (Android and iOS). These developers usually work with an IDE (Visual Studio, Eclipse, Xcode, and so on), rather than a plain text editor, so it makes sense that they’re relatively more likely to get “stuck” in Vim rather than to open it intentionally. The developers least likely to get stuck in Vim are those who program in C, C++, Python and Ruby. These languages make sense to me: they are a combination of low-level languages and scripting languages that are often used with a plain text editor rather than an IDE, so they have the experience to escape it without a Google search. Conclusion I was amused when I saw this question approach a million visits, but I was also proud that I work for, and contribute answers to, a site that helps so many developers. You never know when an answer you contribute could help millions of people, whether it shares how to undo a git commit or how the yield keyword in Python works. If you want to contribute yourself, we encourage you to join the world’s largest developer community, whether it’s to ask and answer questions, get your next job, or build your online presence with a Developer Story. You can also use tools like Stack Overflow Trends to learn more about what our data can tell you about software developers. In any case, next time you solve your problem through Stack Overflow, remember the hundreds of thousands of users who regularly ask, answer, edit, and moderate the site to make it all possible."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/05/22/stack-overflow-flipped-switch-https/","date":"2017-05-21T22:00:00.000Z","tags":["Company"],"title":"How Stack Overflow Flipped the Switch on HTTPS","text":"As of today, Stack Overflow now deploys HTTPS by default on StackOverflow.com — as well as the hundreds of Q&A communities that make up our Stack Exchange network. We now redirect all traffic to https://, and Google links will change over the next few weeks. Sounds simple, right? But getting to this point has taken years of work. Four years, to be exact. Nick Craver, Stack Overflow architecture lead, documents this journey on his personal blog in the post, HTTPS on Stack Overflow: The End of a Long Road. He offers a detailed, comprehensive look at the technical issues that make Stack Overflow’s rollout unique, as well as the steps we took to solve them. Nick says, “While Stack Overflow is not unique in the problems we faced along the way, the combination of problems is fairly rare. I hope you find some details of our trials, tribulations, mistakes, victories, and even some open source projects that resulted along the way to be helpful.” >> Read Nick’s post"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/05/20/stack-overflow-en-espanol-graduated/","date":"2017-05-19T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow en Español has Graduated!","text":"It’s been four years since the Spanish site was proposed in Area 51 and we’ve just proven once more that international sites offer much to the users of those communities and to our network as a whole. I would like to announce that the Stack Overflow en Español community has graduated and will form a part of the network of sites as a full-fledged community for developers and coders around the world! There have been dissenting voices over the creation of other Stack Overflow communities in the past but our answer has remained the same—we will continue to be fanatically engaged in providing opportunities to the world-wide community of developers in helping them to learn, grow, and level up. Spanish is the second most globally spoken language by native speakers and it is the official language of 20 countries. It is also the second most spoken language in the United States. All of this made the creation of a Stack Overflow community in Spanish a wise move. The Spanish community has been very patient and has shown much rigor when faced with difficulties and challenges. Among the biggest obstacles we’ve overcome has been the integration of a single “community culture” from among the various countries represented there. Even though the language is the same, at least in theory, there are various cultural nuances that made it a challenge when trying to set a standard. Fortunately, the community has done that and we’ve come to show that what matters is the integrity of the person and their willingness to get along with others for the good of the whole. The language differences are overthrown by the desire to help and share our experiences and knowledge. The Spanish site has also set a high standard for new and casual users. They have taken our Be Nice policy and have raised the bar. The goal was to create a place where people would feel welcomed and appreciated. We wanted a community where information could be shared without getting slammed by others on the first attempt simply because they’ve never used the site before. I know that currently our membership numbers are low compared to other network sites and that this may just be a fluke or trend that will die when large numbers of people join. However, I don’t believe that’s the case here. The members and the top users have all shown themselves to be respectful and kind towards new visitors and members. They are educating others in doing the same and setting an example for all to follow. I’m very hopeful that this will continue and extremely proud of our community for having achieved this. I wanted to take just a few minutes to share with you that Stack Overflow continues to grow in its efforts to help developers worldwide. We are providing opportunities that many have not experienced or known about until now. Please join us in celebrating this most important achievement by sharing with those you know about the new and official Stack Overflow en Español! ¡Adelante!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/05/17/stack-overflow-en-espanol-se-gradua-hoy/","date":"2017-05-16T22:00:00.000Z","tags":["Company"],"title":"¡Stack Overflow en español se gradúa hoy!","text":"Es con gran emoción y con gran entusiasmo que les anuncio que desde hoy, el 17 de mayo, el sitio de Stack Overflow en español se gradúa y forma parte oficial de la red de Stack Exchange como un sitio hecho y derecho de Stack Overflow. ¡Los felicito por su victoria! El sitio lleva cuatro años desde que se propuso en nuestra Area51 por jachguate y se lanzo en estado de Beta privado en octubre del 2015. En diciembre del mismo año, el sitio entro en su estado de Beta y hasta hoy, pudo conseguir la evaluación necesaria para ingresarse como un sitio graduado de nuestra red después de 533 días en Beta. Me he quedado asombrado por la manera en que han colaborado los unos con los otros. No creo que existe otro sitio Stack Overflow que tenga la calidad y la cantidad de gente que se respete a la manera en que ustedes lo demuestran. Es muy especial que una comunidad como la nuestra, formada por gente de diferentes países y culturas, pueda juntarse bajo la bandera del mejoramiento de los desarrolladores para ofrecer información relevante y compañerismo genuino. ¡Los felicito por eso también! Ahora que nuestro sitio se ha graduado, falta que se cierre esta página. Ya no estamos en estado Beta y nunca regresaremos al mismo. Ahora falta que la comunidad continúe proporcionando la energía y la potencia para continuar adelante. Les comento que ninguno de los otros sitios internacionales (aparte del ruso el cual es otro cuento que les contaré uno de estos días) ha llegado a nuestras estadísticas tan pronto como lo hicimos nosotros. Esto comprueba que lo que estamos formando es importante y singular. No hay otra comunidad como la nuestra. Existimos para compartir y disfrutar de amistades entre los desarrolladores mundiales de habla hispana. Este objetivo nunca debe de ser comprometido o cambiado. Nosotros de Stack Overflow estamos apasionados por ayudar a mejorar las vidas de los desarrolladores de nuestras comunidades. Queremos que lleguen aquí para subir de nivel en todos aspectos. Pero, eso también requiere que todos sigamos compartiendo. La información publicada aquí seguirá siendo ofrecida gratuitamente porque así la recibimos. No comprometeremos eso. Lo que sigue para nosotros es simple. Ahora tendremos dos celebraciones, una en Madrid y la otra en la Cuidad de México. La celebración en Madrid tomará lugar el 25 de mayo en las oficinas de nuestros amigos de IronHack. Ellos nos han prestado su espacio en el cual nos juntaremos para disfrutar de charlas de nuestro único Konamiman, de alumnus de IronHack, y una presentación mía sobre nuestro sitio. Habrá comida, bebida, y regalos. ¡Y es completamente gratis! Apúntense ya para poder asistir al evento. La celebración en México se esta preparando ahora mismo y cuando tenga más información, se las comparto. Me hubiera gustado haber visitado cada una de sus ciudades pero la verdad es que no me es posible hacerlo. Me encantaría conocerlos en persona y darles la mano pero solamente tenemos estos eventos para poder conocernos este año. Espero y los pueda ver en Madrid o en la Ciudad de México. El tercer cambio para nosotros será la elección de nuestros moderadores oficiales. Estas elecciones se llevarán a cabo de varias semanas. Dado a que estamos planeando y terminando esta graduación y sus celebraciones, no empezaremos las elecciones hasta mas tarde en junio. El proceso es simple y les daré los pasos a seguir en cuanto estemos listos para empezar. Básicamente, miembros de nuestra comunidad que estén interesados en moderar al sitio se podrán postular para las nominaciones. Después, la comunidad votará por los finalistas. Tendremos a tres moderadores que representen a la comunidad. Los ganadores estarán completamente en sus manos. Les queremos dar toda la oportunidad de escoger a gente que tenga buena reputación entre los usuarios, ganas de mantener el equilibrio del sitio, conocimiento sobre la estructura de nuestra plataforma, y el deseo de actuar de manera justa al enfrentarse a oposiciones. La verdad es que hoy es un día muy especial para esta comunidad unida de desarrolladores de habla hispana. Esta graduación representa una culminación de el deseo de proporcionar información importante en un lugar amistoso, moderno, y útil. Les agradezco a cada uno de ustedes el gran placer de ser administrador de este hermoso lugar y espero ver que siga creciendo el sitio mientras pase el tiempo. ¡Adelante!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/05/12/stack-overflow-jobs-puts-developers-first/","date":"2017-05-11T22:00:00.000Z","tags":["Code for a Living"],"title":"How Stack Overflow Jobs Puts Developers First","text":"I’m Donna Choi, and I’m the Product Designer for the Stack Overflow Jobs team. I’d like to revisit and share with you our standards for developing Jobs. These are living standards—we’re constantly rethinking our approach as we talk to users about what kind of product would help them most. For a little more context: part of my job involves listening to people talk about their job search. Over the last 2 years, I’ve heard developers all over the world talk about why they leave a job, what makes them happy, what frustrates them, and what they hope to find. We just finished a big research project about this that involved everything from focus groups to data analyses. We’ll share more about what we learned in the coming months, but for now I’d like to highlight the core tenets that guide the way that Jobs works. Our policies Jobs for people who code. We welcome job listings where “writing software” is a primary responsibility. We also welcome jobs for people who work closely with developers or who have strong programming knowledge. On our site, you’ll see jobs for developers, programmers, software engineers, data scientists, CTOs, designers, product managers, DBAs, sysadmins, and software testers. Quality jobs. All jobs posted on our site must disclose a specific role and company. This means you’ll never see a job listing like “Hiring Developers For Multiple Positions” or “Work at a Well-Known Startup.” You’ll be able to find a relevant job description, location, and company per listing. No spam. We require all messages to job seekers to be tied to specific job opportunities, so you’ll never receive solicitations for general representation or requests for friends and family members’ contact info. We strongly encourage companies to send personalized messages. If you decline interest in a job, the associated company must stop messaging you. You decide who gets to contact you. We treat your data the way we’d like ours to be treated. You can easily opt-in-and-out of having your Developer Story—a resume built specifically for developers—viewable by companies. Your personal information will never be shared with companies without your explicit permission, and you’ll always be hidden from your current employer. Fair and inclusive jobs. When companies post jobs on our site, they join our community of developers all over the world. Job listings must not exclude people based on race, religion, gender, and other factors listed below. If a job contains language or images that contradict this policy, we’ll ask the company to remove the offending content and affirm their intent to adhere to the policy and its principles. * Race, ethnicity, national origin, religious affiliation, sexual orientation, sex, gender, gender identity, age, pregnancy, disability, or serious diseases. What this means to us Our team is passionate about creating a great job site—not just one that’s packed with smart, innovative features (although we care about too), but one that genuinely helps people find good, fulfilling jobs. Most of us can relate to feelings of frustration and anxiety during a job search. Some of us have experienced spammy job sites with dubious privacy policies, while others have experienced biased hiring practices and company cultures. We aren’t so naïve to think that we can single-handedly fix these problems, but we’d like to start by sharing our standards and hearing from you. Stories from you motivate us to think beyond a product that’s “good enough.” We want to be proactive about fixing these problems and guiding our industry toward something better. We’d love to hear your ideas in the comments or on Meta Stack Overflow. Thanks for reading. Check out Stack Overflow Jobs for yourself to see these values in action."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/05/09/introducing-stack-overflow-trends/","date":"2017-05-08T22:00:00.000Z","tags":["Company"],"title":"Introducing Stack Overflow Trends","text":"On a typical day, developers ask over 8,000 questions on Stack Overflow about programming problems they run into in their work. Which technologies are they asking about, and how has that changed over time? Today, we’re introducing the Stack Overflow Trends tool to track interest in programming languages and technologies, based on the number of Stack Overflow questions asked per month. For example, we could compare the relative usage of three programming languages. Here, we can see that questions about the Python programming language have become rapidly more common over the last few years. (In data from Stack Overflow Talent we’ve seen the same expansion in companies looking for Python developers). PHP was growing for several years, but has since leveled off. Perl was never as big a presence on Stack Overflow, and questions about it have become steadily less common in the last 9 years. Measuring developer interest based on Stack Overflow questions isn’t perfect: some technologies might inspire more questions among its users than others. But we’ve found it’s a simple measure that gives useful insights into the developer ecosystem. It’s especially useful for measuring changes over time: when we see a rapid growth in the number of questions about a technology, it usually reflects a real change in what developers are using and learning. Here we’ll share a few examples of insights we can extract from the Stack Overflow trends tool. JavaScript frameworks JavaScript open-source web frameworks show some of the most interesting patterns of growth and decline. JQuery used to be among the most popular tags on Stack Overflow (as some have humorously observed), but it has made up a smaller share of questions as newer web frameworks have been introduced. There’s been extraordinary growth of the angularjs tag (representing the first version of the framework) since 2013, then a quick shift to the angular tag (representing subsequent versions). We also see fast growth in the React library. These tags are among the most prominent JavaScript projects on the site. Smaller web frameworks show a brutal life cycle, where some show rapid growth then decline over the span of a few years. The Vue.js framework have shown quick adoption (and in terms of year-over-year growth is one of the fastest growing tags on the site). Frameworks like Backbone.js, Ember.js, and more recently Meteor appear to be in the later stages of the life cycle. Overall, front-end web development has largely been moving away from closed-source plugins, including Adobe Flash or the now-deprecated Microsoft Silverlight. In 2016 these each made up less than .1% of Stack Overflow questions. Data Science and Big Data Technologies used for data science have shown particularly rapid growth over the last few years. The R statistical programming language has shown consistent growth, as has pandas, a popular library for data science in Python. The closed source MATLAB language was growing for most of the lifetime of the site, but has more recently leveled off and may be shrinking. TensorFlow, Google’s open-source machine learning framework, was introduced only in late 2015, but it’s been growing at an extraordinary pace. Among the 500 largest tags, only swift3 has shown faster growth in the last year. Similarly, there’s been expansion of interest in big data frameworks. We can compare several major Apache open-source projects for storing and processing large datasets. Hadoop has grown since 2009, and so more recently has Hive, a query system built on top of Hadoop. Interest in Cassandra has remained steady for several years. But Spark shows the fastest surge of adoption, becoming the most asked about technology just a few years after its introduction. Try it yourself! Don’t see your favorite language, technology, or framework in this post? Use the Stack Overflow Trends tool to create your own graphs, and see what you can learn about how the developer ecosystem is changing and where it might be going in the future."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/05/04/el-estado-de-stack-overflow-en-espanol-abril-2017/","date":"2017-05-03T22:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español: Abril 2017","text":"El mes pasado casi se me acabó el tiempo para compartir nuestros números interesantes del sitio. Este mes decidí no dejar que eso pasará de nuevo así que aquí están algunos datos de interés sobre el mes de abril. ¡Disfruten! Los 5 usuarios con más respuestas aceptadas: Jorgesys – 40 respuestas aceptadas Gustavo García – 36 respuestas aceptadas Dev. Joel – 35 respuestas aceptadas FJSevilla – 34 respuestas aceptadas eferion – 27 respuestas aceptadas Las Top 5 más respondidas del mes: Como evitar el caché de los archivos css y js – 8 respuestas Abrir una nueva pantalla, con un un onMenuItemClick y enviar datos – 6 respuestas ¿Cómo validar en JavaScript si un objeto tiene una propiedad? – 6 respuestas ¿Cómo concatenar dos String en Android? – 6 respuestas ¿Cómo situar el footer siempre abajo? – 5 respuestas Los 5 preguntas más vistas del mes : Cabecera de XML para AEAT sistema SII Suministro inmediato de informacion – vista 508 veces ¿Qué es una promesa en Javascript? – vista 426 veces El código más raro de javascript – vista 355 veces Como evitar el caché de los archivos css y js – vista 224 veces ¿Cómo concatenar dos String en Android? – vista 221 veces"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/04/20/buenas-noticias-para-mayo-2017/","date":"2017-04-19T22:00:00.000Z","tags":["Company"],"title":"Buenas noticias para mayo 2017","text":"Hace poco mas de un año y medio empezó el proyecto de Stack Overflow en español. Me alegra contarles que después de seguir el crecimiento del sitio podemos esperar que nuestra comunidad se gradúe este mayo. Falta todavía el decidir la fecha pero las circunstancias necesarias ya existen para poder movernos fuera de la etiqueta de “sitio en beta.” Quiero felicitarlos a todos por haber continuado con el interés necesario para poder promover y crecer nuestra comunidad. ¡Sus esfuerzos han hecho la diferencia! Ahora, platiquemos un poco sobre lo que va a suceder en cuanto nos graduemos. Los privilegios del sitio cambiarán. Cuando un sitio esta en su fase beta, los privilegios que se permiten son muchos comparados con los que se permiten cuando un sitio se gradúa. La razón de esto es para empoderar a los usuarios a poder participar con más facilidad en el sitio. Les comparto la siguiente tabla para mostrarles los cambios de puntuación que ocurrirán. Beta Privado Beta Publico Graduado 1 15 15 Votar a favor 15 15 15 Marcar como ofensivo 1 50 50 Dejar comentarios 1 100 100 Editar publicaciones wiki 1 125 125 Votar en contra 1 150 150 Crear etiquetas nuevas 1 200 200 Re-etiquetar preguntas 500 750 2000 Editar publicaciones 1 500 3000 Votar para cerra 2000 2000 10000 Acesso a herramientas de moderación No se desesperen si al momento de graduarnos, se dan cuenta que no pueden tomar las mismas acciones que antes podían. Este cambio de privilegios nos afectará a todos pero en poco tiempo podremos continuar como normal. Elecciones para moderadores Hemos contado con la ayuda de Konamiman, Luiggi Mendoza, y Miquel Coll como moderadores designados de nuestra comunidad. Ellos han cargado la gran mayoría de la responsabilidad de la moderación del sitio mientras otros usuarios llegaban a los puntos necesarios para ayudar a moderar también. Pero, en cuanto el sitio se gradúe, tendremos nuestra primera elección para escoger a nuestros moderadores para el sitio. El formato lo explicaré en más detalle en cuanto lleguemos a ese tiempo. Por ahora, pueden esperar el poder nominar y votar por su candidato favorito para este importantísimo puesto. Celebraciones ¡Como me encantaría celebrar con todos ustedes este gran evento en vivo! Aunque me es imposible verlos a todos, estoy planeando dos celebraciones para festejar – una en España y otra en México. ¡Ojo! tal vez será en un lugar muy cercano de ti. Bueno, los dejo con eso. En cuanto haya más información para compartir oirán de mi de nuevo."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/04/19/el-estado-de-stack-overflow-en-espanol-marzo-2017/","date":"2017-04-18T22:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español: Marzo 2017","text":"¡Casi se me escapa este mes! Lo bueno es que los números que vamos a explorar no se van a mover a ningún lugar porque forman ya parte de la historia de este sitio. Les comparto algunos datos que resaltaron en el mes anterior. ¡Disfruten! Las 5 respuestas más compartidas: for vs while – LOOP – compartida 9 veces ¿Cómo ordenar nombres de fichero por extensión tras leer un directorio? – compartida 9 veces ¿Cómo funcionan las tarjetas de prueba de MercadoPago, y qué datos poner en el resto de campos que no son el número? – compartida 8 veces Diferencia entre int[] e Integer[] – compartida 6 veces ¿Cómo añadir imágenes a un textarea con JavaScript? – compartida 6 veces Los Top 5 más votadas del mes: Escribir solamente una vez cada tecla, ignorando las repeticiones – 26 votos ¿Como funciona el “if”? – 18 votos ¿Que algoritmo de cifrado se puede usar para guardar datos en Java? – 13 votos ¿Cómo evitar que mi programa sea plagiado? – 12 votos Diferencia entre int[] e Integer[] – 12 votos Los 5 miembros que tuvieron la mayor cantidad de respuestas aceptadas este mes: amenadiel – ¡62 respuestas aceptadas! Gustavo García – ¡39 respuestas aceptadas! A. Cedano – ¡35 respuestas aceptadas! Jorgesys – ¡31 respuestas aceptadas! sstan – ¡29 respuestas aceptadas!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/03/30/stack-overflow-unveils-next-steps-computer-security/","date":"2017-03-29T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Unveils the Next Steps in Computer Security","text":"At Stack Overflow, keeping your information safe is our top concern. And as a community with over 40 million people each month, it has to be: Our success has made us a frequent target of attacks. Computer security is always evolving. Passwords are “what you know.” Smart cards are “what you have.” We decided to ask “how you do you.” Today we’re proud to publicly launch that latest evolution. This security update is the result of years of work, requiring advances in many fields such as computer vision, AI and advanced calisthenics. Why did we decide to go down this bold road? Simple: We had to adapt. We had to get better. Getting better meant thinking out of the box. Thinking outside the box meant staying ahead of the game. Brazen innovation led to whole scale paradigm shifts. We pushed the envelope. And we came to the most logical conclusion. As part of our efforts to improve accessibility site-wide, the launch of Dance Dance Authentication also includes the implementation of Blink Blink Authentication and Sing Sing Authentication. To set up any of these systems for your account, log in and head to Settings. We are rolling this feature out to most users today, and all accounts will have access by tomorrow, April 1. Online threats and their solutions are continuously evolving. The security industry is seeking experts to combat these concerns. If you’re up for the challenge, find security employment opportunities here."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/03/24/nuestra-comunidad-funciona/","date":"2017-03-23T23:00:00.000Z","tags":["Company"],"title":"Nuestra comunidad, ¿funciona?","text":"Al pensar en nuestra comunidad, podemos enfocarnos en ciertas características. Es normal el pensar en la correlación entre la comunidad y nuestra experiencia. Después de todo, lo que importa es lo que experimentamos, ¿no? Si resulta que nuestra estancia en SOes es buena, salimos con la idea de que realmente algo bueno está sucediendo allí. Lo mismo si nuestra visita resulta en algo menos apetecible. Es casi imposible el divorciar nuestra experiencia con nuestra evaluación del sitio si no tomamos un poco de tiempo para analizar lo que esta pasando realmente. Buenos dias preciosa… Lo que muchas veces se nos olvida es que nuestra comunidad es un organismo viviente. No somos una cosa que se construye y se deja. Tampoco se puede planear y esperar que no cambie. Respiramos, contribuimos, crecemos, y respondemos a nuestro medio ambiente como cualquier ser viviente. Estamos hechos por varias partes importantes que necesitan interactuar efectivamente para poder hacer que esto funcione de la mejor manera posible. Nuestra situación se complica cuando agregamos diferentes nacionalidades, culturas, dialectos, y zonas de tiempo. Lo que un día funcione no determina que sea algo que nunca cambie. Para usar una analogía, un ser humano normal no necesita usar pañales toda su vida. Existe un tiempo para ello pero en cuanto esa temporada se va, las necesidades cambian – ¡deben cambiar! Lo mismo con nuestra comunidad. Estamos en una temporada donde se está aprendiendo a manejar el tipo de trafico que nos está llegando. Por ahora, tenemos a muchos novatos que no siguen las normas de comportamiento por (1) flojera o (2) por falta de educación. Vivimos en una era de “dame más, pero no esperes que contribuya nada.” Esto es exactamente lo que estamos viviendo ahora. He visto publicaciones en nuestro sitio Meta donde la frustración se está viendo claramente pero les advierto que esto nunca va a parar. Más sobre esto en un poco…. Tenemos herramientas, moderadores, y miembros que nos ayudan a mantener a la comunidad ordenada. Estos sistemas funcionan, no al 100%, pero definitivamente funcionan. Estamos ahora entendiendo nuestro medio ambiente y el como se debe responder efectivamente. Llevamos menos de dos años de existencia y estamos a solo pasos de sobrepasar el sitio portugués en preguntas hechas a diario por solamente 10 preguntas aunque nos lleva 2 años más de existencia. Esto nos demuestra que existe la necesidad de lo que proveemos pero no nos dice nada sobre el comportamiento de nuestros miembros o visitantes. Esa es la parte que nos tiende a frustrar. Contiene seres humanos Somos gente caprichosa, celosa, orgullosa, inteligente, desafiante, e innovadora. Es imposible esperar que no existan los pleitos y las interacciones “interesantes” entre nuestros usuarios. A esto me refiero cuando escribo que la frustración que se siente al moderar o disfrutar el sitio nunca desaparecerá. De niños, no se nos tiene que enseñar a pelear pero sí a tratarnos bien y muchos de los adultos no aprendieron bien esa lección. Nuestra comunidad es hecha de seres humanos por seres humanos para seres humanos. Les garantizo que vamos a seguir viendo problemitas aquí y allá. Pero, ¿qué se puede hacer al respecto? Lo mejor que podemos hacer es modelar el comportamiento apropiado y seguir las normas del uso sancionadas por el sitio. Aunque sea molesto, esta es la mejor manera de poder cambiar la manera en que este sitio crece y se evoluciona. ¡No hay que abandonar a los demás que también están haciendo lo mismo! Prueba y error De la misma manera que el ejercicio fortalece a los músculos del cuerpo, nuestra constante atención a los patrones de comportamiento apropiados fortalecerán la dinámica de nuestra comunidad. Lograremos esto al practicar y al fallar. De nuevo les pido que sigan adelante con las acciones que nos traen más cerca de lo que queremos ser – una comunidad abierta, saludable, amistosa, informativa, y robusta. Las pruebas que se nos vengan serán como un resfriado del cual el cuerpo tiene que recuperarse. Aprenderemos juntos y lograremos nuestra meta juntos también. ¡Adelante!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/03/22/estado-da-pilha-internacional-marco2017/","date":"2017-03-21T23:00:00.000Z","tags":["Company"],"title":"Estado da Pilha Internacional – Março/2017","text":"O primeiro trimestre de 2017 já caminha pro fim e o Stack Overflow em Português continua muito bem, obrigado. Cresceu bastante em 2016, começa o ano entre os 10 sites mais ativos da rede e a expectativa pra esse ano é de continuar crescendo, e ajudando cada vez mais gente, construindo ainda mais conhecimento de qualidade em língua portuguesa. Saímos do Carnaval à todo vapor e atingimos – pela primeira vez – a marca de 100 perguntas/dia na média das duas últimas semanas: Média de duas semanas; últimos 6 meses Olhando o sucesso e maturidade do SOpt, uma pergunta constantemente vem à tona: E se fizermos isso por mais pessoas, não só programadores? E se criarmos outras comunidades em português? Se, em tão pouco tempo, alcançamos um sucesso tão notável com o SOpt, já ajudamos tanta gente, nada mais justo que fazer tudo de novo com alguma outra área. Tudo isso faz sentido. O problema é o outro lado da equação. Abrir sites internacionais dá trabalho. Muito mais trabalho que o normal para sites em inglês. Tanto tecnicamente quanto comunitariamente, manter um site em outra língua acrescenta camadas extras de trabalho, manutenção e preocupação. O desenvolvimento do Stack Overflow não é feito em paralelo ao processo de tradução, nem espera por ele antes de mandar ao ar novas funcionalidades ou ajustes. Além disso, como inicialmente não se planejavam versões em diferentes línguas, o lado técnico de como compilamos, fazemos build, e distribuimos nossos sites, também não é lá muito receptivo à internacionalização. Isso significa que vários desafios aparecem no caminho de manter um site como o SOpt funcionando, e atualizado. E adicionar outro site acrescenta mais lastro à esse problemas, que já se arrastam há tempos. Precisamos arrumar a casa antes de expandí-la, simples assim. Só não é muito claro como fazer isso. Por conta da natureza desses problemas, não podemos depender apenas de soluções técnicas. No melhor espírito Stack Exchange, vários desses problemas dependem do apoio da comunidade para serem resolvidos adequadamente, ainda que não tenhamos como dar tanto suporte quanto gostaríamos. Precisamos encontrar maneiras de tornar o trabalho de tradução muito mais eficiente e recompensador, em respeito à quem traduz. Mas também precisamos que a comunidade entenda que sem as traduções, o SOpt não existe. O Stack Overflow em Português é um site especial, em vários sentidos. As necessidades dele não são as mesmas que as de outros sites da rede. Nós estamos trabalhando da maneira que podemos para integrar as necessidades das comunidades internacionais ao nosso desenvolvimento, tentando diminuir a distância técnica entre o irmão mais velho, em inglês, e a plataforma que oferecemos à vocês. A nova barra superior está vindo, em breve. As novas abas de navegação também. Algumas pequenas mudanças no projeto de tradução estão nos planos. Nada disso é drástico, ou vai tornar tudo maravilhoso de um dia pro outro, mas são pequenos passos na direção correta, procurando dar ao SOpt o suporte que ele merece do nosso lado, e ajudando vocês a continuarem o suporte do seu. Alguns dados sobre Fevereiro/2017: Perguntas Com Mais Respostas 1. Como posso obter um trecho especifico dentro de uma string usando PHP? 2. PHP que retorna null campos de tabela que não estão vazios nem nulos no MySQL 3. É possível fazer um update nas 100 primeiras linhas no sql(server)? Posts Mais Compartilhados 1. Required_if com mais de um field no Laravel 5.3 2. Xamarin Forms com Azure 3. Storyboard Segue Respostas Mais Bem-Votadas 1. O que é UX (User Experience)? 2. O que é um código legado? 3. Como descobrir se uma cor hexadecimal é escura ou clara?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/03/22/now-live-stack-overflow-developer-survey-2017-results/","date":"2017-03-21T23:00:00.000Z","tags":["Company"],"title":"Now Live: Stack Overflow Developer Survey 2017 Results","text":"What do developers want? And how do they get the job done? Every year since 2011, we’ve asked developers these questions (and many, many more) as part of our annual Stack Overflow Developer Survey, the largest and most comprehensive survey of developers in the world. More than 64,000 developers told us this year how they learn and level up, which tools they’re using, and what employers should know about working with developers. Our first analysis of these results is now live. Check out the findings now to see which technologies are the most popular, most loved, and most dreaded in 2017. You’ll also learn how much money different types of developers make on average, which benefits developers care about most, and how developers want their performance to be evaluated. You can even find out how developers prefer to pronounce “GIF”. Spoiler: 6% enunciate each individual letter (“gee eye eff”). Why do we do this each year? As the world’s largest and most trusted community of software developers, we run this survey and share these results to improve developers’ lives: We want to empower developers by providing them with rich information about themselves, their industry, and their peers. And we want to use this information to educate employers about who developers are and what they need. We learn something new every time we run our survey. This year is no exception: A common misconception about developers is that they’ve all been programming since childhood. In fact, we see a wide range of experience levels. Among professional developers, 11.3% got their first coding jobs within a year of first learning how to program. A further 36.9% learned to program between one and four years before beginning their careers as developers. Only 13.1% of developers are actively looking for a job. But an additional 62.1% of developers are interested in hearing about new job opportunities. (If you’re an employer, Stack Overflow Talent can help you recruit both active and passive candidates.) When we asked respondents what they valued most when considering a new job, 53.3% said remote options were a top priority. A majority of developers, 63.9%, reported working remotely at least one day a month, and 11.1% say they’re full-time remote or almost all the time. A majority of developers said they feel at least somewhat underpaid. Developers who work in government and non-profits feel the most underpaid, while those who work in finance feel the most overpaid."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/03/14/el-estado-de-stack-overflow-en-espanol-febrero-2017/","date":"2017-03-13T23:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español: Febrero 2017","text":"Continuamos presentando algunos números interesantes mensuales. En esta ocasión, nos toca reportar sobre el mes de febrero. ¿Qué les parece lo siguiente? Las 5 preguntas más respondidas: ¿Cómo generar identificadores únicos con JavaScript? – 8 respuestas ¿Cual es la diferencia entre static y final? – 6 respuestas Contar números negativos de un array en php – 6 respuestas ¿Se pueden colocar mas de un id en un solo input type text? – 6 respuestas ¿Como validar un campo en html5 sin que se recargue la pagina? – 5 respuestas Los Top 5 miembros que contestaron la cantidad más grande del mes: Jorgesys – ¡94 preguntas contestadas! amenadiel – ¡94 preguntas contestadas! Stefan Nolde – ¡76 preguntas contestadas! Gustavo García – ¡62 preguntas contestadas! x-rw – ¡53 preguntas contestadas! Los 3 miembros que hicieron la mayor cantidad de preguntas este mes: UserNameYo – 22 preguntas David – 17 preguntas Pierro – 17 preguntas"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/03/13/stack-overflow-podcast-104-jenn-schiffer-talks-us-fog-creeks-new-glitch/","date":"2017-03-12T23:00:00.000Z","tags":["Company"],"title":"Stack Overflow Podcast #104 – Jenn Schiffer Talks to Us about Fog Creek’s New Glitch","text":"Welcome to the Stack Overflow Podcast #104, recorded Thursday March 9, 2017 at the Stack Overflow HQ in NYC. Today’s podcast is brought to you by Nightmare at 20,000 Feet, the classic episode of The Twilight Zone starring William Shatner. OooOOoo scary. Today’s podcast is also brought to you by Stack Overflow Jobs. In honor of Women’s History Month, Stack Overflow Jobs is showcasing opportunities at companies founded by women. Go to stackoverflow.com/jobs now to level up your career. On this week’s episode, we talk to engineer, artist, tech satirist and brand new Fog Creek employee Jenn Schiffer about Fog Creek’s brand new community, Glitch, which launched today. Also this week, the return of Startup or Shut Up, our game where the hosts have to guess which ridiculous companies are real, and which are fake. And as you know, we are preparing a Constitution for Stack Overflow. Last week, we asked: PRO or CON: Making a sandwich for yourself… do you cut it in half? The results were cut perfectly in half, 50%-50%. But the winner is Andrew Wilkinson: We see what you did there, Andrew. This week’s Constitution question: If you’re writing an IF statement, and you’re comparing a variable to a constant, should you flip it so that you put the constant first? Post your answer to twitter using the hashtag #StackOverflowPodcast, with either PRO or CON and your explanation (in this case, PRO = yes, you flip them). The best explanation, whether on the winning side or the losing side, will be read on next week’s podcast and win a fabulous STACK OVERFLOW STICKER courtesy of the Stack Overflow Podcast. Submit your ideas for future constitutional amendments, and one of them might be named after you! Post your proposed constitutional amendment to Twitter using the hashtag #StackOverflowPodcast. And if it’s non-terrible, we may feature it in a future poll. Follow us on Twitter. Like us on Facebook. And if you want to make 8-bit art, check out Jenn Schiffer’s tool. Ilana used it to draw the best dog cow thing I’ve ever seen."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/03/09/anyone-actually-visit-stack-overflows-home-page/","date":"2017-03-08T23:00:00.000Z","tags":["Company"],"title":"Does Anyone Actually Visit Stack Overflow’s Home Page?","text":"Yesterday we were amused to see this post on Reddit’s sysadmin forum: Our architecture lead Nick Craver looked into this and gave a great answer, including that about 29% of the previous day’s Stack Overflow traffic was to the home page. From his perspective as a system administrator, that’s exactly the right analysis. Nick’s team has to ensure the site renders reliably and quickly, so counting the number of requests make sense. However, as a data scientist I’m more interested in how users view the site, and the vast majority of our traffic comes from automated traffic, including search engines and scrapers. When real people view Stack Overflow, how often are they visiting just questions? Who does and doesn’t visit the homepage, or other parts of the site? What pages do people view? If we look at yesterday’s traffic (2017-03-08), including automated traffic, here are the most common types of page views. (Note that this is only counting pageviews, not asynchronous requests that load after a page or internal API calls; sysadmins do care about the latter). Each of these represents one route: typically one possible type of page. The most common include: Questions/Show: question pages like this one, the kind of page most people associate with Stack Overflow Home/Index: our homepage UsersShow/Show: visits to a user’s profile (here’s mine) Questions/ListByTag: Pages with the most recent questions from a tag, like this one It does look like a lot of people are visiting the homepage, nearly as many as are visiting questions. However, that’s because we’re counting automated traffic! As a next step, I’ll take a few simple measures to remove automated traffic and include only people we think are real users. These measures won’t catch a savvy scraper who “doesn’t want to be caught”, but they easily filter out your “everyday” bot. Almost 95% of our non-automated traffic is to question views, with only a small percentage to the home page or other views. This isn’t surprising (it’s the motivation behind the Reddit post), but it’s a good insight into typical visitor behavior. How do registered visitors use the site? When I tell a software developer I work at Stack Overflow, they almost always recognize it but often admit that they don’t have an account. That’s true of most of our users; only about 15% of our daily traffic is logged in when they visit. Most developers visit Stack Overflow questions from a Google search as they solve their problems, then move on with their work. We owe a lot to the community that’s registered on the site, however, because they’re responsible for our terrific set of questions and answers. As you might expect, this part of our community visits the site in a different way. Within unregistered traffic, the percentage of traffic that goes directly to questions is up to 97%. The Reddit question was right! But a typical registered visitor, who might have answered some questions, does spend some time on the home page, as well as visiting user profiles and tag lists of recent questions. Power users While we’re grateful to everyone who contributes to the site, some within the community (“power users”) contribute an enormous amount of knowledge We usually represent this in terms of reputation, gained when content you’ve contributed is upvoted. Two thresholds we use for user privileges are established users, who have at least 1,000 reputation, and trusted users, who have at least 20,000 reputation. To give a sense of these levels: among users who visit in a typical week, the median user with less than 1,000 rep has answered about 3 Stack Overflow questions, the median established user has answered about 50, and the median trusted user has answered about 750 (!). How do power users visit the site? Trusted users (20,000+ reputation) spend about half their time viewing actual questions, and most of the other half visiting the homepage, question lists, or user pages. The home page offers suggestions of questions that are both new and likely to be relevant to you, so this makes sense. The ListByTag route is also relevant as an insight into how “power answerers” use the site; many stick to a particular tag that they’re familiar with, and watch for brand new questions they can answer. We’re happy that we make the lives of developers easier, even if they’re just getting a quick solution after a search. But we’d also encourage you to join the world’s largest developer community, whether to ask and answer questions, get your next job, or build your online presence with a Developer Story. In any case, next time you solve your problem through Stack Overflow, remember the hundreds of thousands of users who regularly ask, answer, edit, and moderate the site to make it all possible."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/02/15/how-do-students-use-stack-overflow/","date":"2017-02-14T23:00:00.000Z","tags":["Company"],"title":"How Do Students Use Stack Overflow?","text":"Since Stack Overflow was founded, we’ve described it as “a question and answer site for professional and enthusiast programmers.” It supports both experienced developers who code as part of their work, and people who are learning as part of a university curriculum. So just how many of our users are students? We on the Data Team can estimate this based on what fraction of our questions come from university ISPs. In this post, I’ll share some numbers about how students (both undergraduate and graduate) use Stack Overflow, what programming languages they tend to ask about, and how this differs between schools. Finding students on Stack Overflow In this analysis, we considered a question to be from a university if it was asked from an ISP whose name contained “University”, “College”, or “Institute of” (some manual examination showed this covered the vast majority of common cases). Not all universities have their own ISP, and students may live or work off campus, so this is probably underestimating the fraction. Since these results may have changed since the start of the site, we considered only questions from the years 2014 through 2016. And while Stack Overflow is a global network, our ability to recognize schools from their IP addresses is less reliable outside English-speaking countries, so we considered questions only from four countries: the United States, the United Kingdom, Canada, and Australia. These are four of the seven countries that ask the most questions. Overall, this dataset comprises 3.5 million questions. Questions from Universities 7.75% of questions in these countries were asked from colleges and universities. Which schools asked the most questions from each country? One notable feature is that many of these are large research universities, where many of the Stack Overflow askers may be graduate students or other academic researchers. As you might guess, the percentage of questions from universities depends dramatically on the time of year, based on whether most schools are in session: Notice that the percentage of questions coming from universities drops not only during the summer, but also at several typical school holidays: the start/end of the year (winter break), spring break in March, and Thanksgiving break at the end of November. The rate is also nicely consistent across the three years. What Tags Tend to be Asked about from Schools? Each Stack Overflow question comes with one or more tags describing the languages and technologies it is asking about. What tags were most likely, or least likely, to come from a university? We can see three types of questions that tend to get asked from universities. First are languages and frameworks used in academic research, such as numpy, R and (especially) MATLAB. Next are low-level languages such as C and C++, which may be used in introductory programming and operating systems classes; my first college class was taught in C. We can also see questions about algorithms and data structures, such as “algorithm”, “loops”, “list”, and “arrays”. Among the tags least likely to be asked from universities are Microsoft technologies, such as C#, .NET, WPF and SQL Server. This makes sense since those generally tend to be popular in enterprise businesses rather than educational and research contexts. How can we confirm our hypothesis that some tags, such as R and MATLAB, are asked by university researchers, while others are asked by undergraduate students? Let’s look at when they’re asked from universities during the year. As we saw earlier, undergraduates generally ask questions mostly during the typical fall and spring semesters, while researchers likely work and ask year-round. Here are the seasonal trends for six selected tags. Many Java questions are asked from universities during the fall and spring, but they drop to barely a third of that level during the summer. C and C++ also appear to be mainly asked by students on a semester schedule. In contrast, R and MATLAB are pretty consistent throughout the year, with 25% or 40%, respectively, of their questions getting answered from universities no matter the month (with the exception of the winter break). Besides the distribution across the year, tags also aren’t evenly distributed among US universities. For example, in American universities, the choice of programming languages differs between public and private universities. Microsoft technologies like C#, ASP.NET, VBA and SQL Server were more commonly asked from public universities, while cloud technologies like Heroku and AWS, as well as web frameworks like Django and Flask, were more commonly asked from private universities. Since I program in R, I was also curious what universities had the greatest amount of R. (So as to avoid having one student disproportionately affect their school’s tags, we measured the percentage of users who had asked from a school who had ever asked about R). (Note that Australia had only 7 universities with at least 200 askers). The most R-heavy schools included a mix of public and private research universities, and some are recognizable as having prominent statistics programs. This analysis gives a sense of how students use Stack Overflow differently from professional developers. In future posts we’ll look deeper into this data, including considering how students differ in what questions they answer or visit, and examining how this relates to tags most visited on weekends. Whether you’re a student or not, you can support others’ education by signing up for Stack Overflow and contributing today. If you’re a student looking for your first job, check out the latest listings for entry-level programmers."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/02/14/why-stack-overflow-redesigned-the-top-navigation/","date":"2017-02-13T23:00:00.000Z","tags":["Company"],"title":"How Stack Overflow Redesigned the Top Navigation","text":"You may have noticed that we’re sporting a new look today. We launched this update today as part of a series of changes supporting our core mission: Make developers’ lives better. In the past year, we fully integrated our by-developers, for-developers Jobs product. We added a whole new content type — Documentation — to help you find even more solutions to your programming questions. And we added Developer Story to help developers ditch the outdated resume format. During this time, we also evolved our product development process to include more user research, allowing us to validate ideas earlier and surface more users’ voices. There’s a ton you can learn by watching people try to use a feature — things that don’t get uncovered when directly soliciting feedback. As both product and process expanded, it quickly became apparent that Stack Overflow had outgrown some of our previous design decisions. A Common Theme A pattern surfaced when talking to users: even with the addition of Jobs and Documentation to the navigation, many developers weren’t aware of the change. Digging deeper, we discovered that many weren’t really seeing the top bar at all – a “mental block” so effective that most users also couldn’t identify what the icons meant. Here’s what a few of you said: “When I come here I’m on a mission; I don’t care about the rest.” “You’re only there for 1 reason: to find the answer to your question.” “From my point of view, nothing above the question title exists.” “I scroll down and read the question.” The data validated our hypothesis — of the average 9.3 million daily visits to Stack Overflow, we get fewer than 88,000 clicks to the navigation or top bar (this includes inbox, rep, profile, and search.) If you divided each individual click per visit, that’s fewer than 1% of visits navigating anywhere (and far fewer if you counted multiple clicks per visit). Our navigation is not being used by 99% of our users. The common use case for millions of daily visitors is “come from Google, scroll to middle of the page to a find an answer (without seeing the nav and sometimes evening ignore the question itself), and leave. This workflow makes sense — and we love helping the world’s developers gain programming knowledge quickly — but this also means many visitors don’t benefit from everything that Stack Overflow has to offer. If they’re not aware, then we’re less effective in helping more developers share their knowledge by finding questions to answer, advance their career search, utilize Documentation, or become contributing members of our community. We hypothesized that a lack of engagement with the nav was due to a combination of browsing habits, visual hierarchy, and the right-hand position of the layout. Based on research about F-shaped reading patterns and how readers’ eyes commonly move down the page, it made sense that our navigation was sub-optimal for most people. We also hypothesized that the focal point of the page (the logo) caused many users to skip over the small top bar. Plus the nav and top bar quickly scroll out of view when moving down the page. The product design team then did a design sprint. Each designer created their own design of the top nav and then converged to critique and identify the strongest ideas. The team then combined the best parts of their ideas into one design. The main thinking generated from the sprint: Remove clutter and group similar information in a way that’s more quickly parsable Stick the navigation to the top of the page so that users who are scrolling quickly to answers or arriving from answer or comment links still have access to search or navigate the site Use navigation design patterns more commonly found in contemporary web apps Design the navigation as shorthand for the Stack Overflow brand Stack Overflow users compared the new screens against the current navigation in focus groups at three tech companies. Here’s a sampling of what we heard about the current version of the top bar: “I’m not even sure if the black bar is new.” “I logically filter out the stuff that I know I’m not looking for.” “Nav looks like tags — they might filter, but they don’t look like navigation. Makes you question what it is so I don’t click it and instead go back to Google that I’m familiar with.” “I’m signed in and I still don’t know what those (inbox, achievements) mean.” “Jumbled stuff at the top that you have to read and decipher.” “Black bar is kinda… doesn’t look like it belongs, all else is white, grey, orange.” And the new version: “On the current nav I didn’t know what the inbox / rep icons were, on the new one I know what every button will do.” “I know I can search, I know I can go to Jobs.” “Much more modern, this one.” “I like the old black bar, but I like that I know what I’m getting myself into on the new one.” “A lot less noise, more signal.” “Cleaner, more organized. Instead of jumbled stuff at top you have to read and decipher you can go to this.” “More standardized position that you’re used to on other sites.” Project Definition At this point there was enough info to make the top navigation redesign an actual project. The nav is an area of the site that touches so many different use cases, user types, and metrics; it was important to tightly scope the project and clearly define the goals in advance in order to ship quickly. To mitigate scope creep, feature parity to the current navigation was the defined scope (with a few exceptions). Primary goals Present all the tools we provide for developers in a way that’s consistent with them actually discovering them Increase traffic to Jobs and Documentation More intuitive, updated visual design Increase the number of users who sign up and gain access to more site features Secondary goals Increase in notifications acknowledged Increase or no decline in searches No decline in questions asked And a handful of other important and boring metrics that we simply didn’t want to screw up The progressive rollout plan to measure success had the following objectives: Usability tests on clickable prototype with 6 additional users to catch any major UX and functionality issues and gather qualitative insights about the new design A/B test with 5% of anonymous users to measure usage data A/B test with 10% of registered users with less than 500 reputation to measure usage data Opt-in for all Stack Overflow employees Opt-in for all users for Meta feedback and for debugging Our findings from each… Usability Tests These tests were conducted in 1-1 recorded hangouts with 6 users who ranged from having low to high reputation. While a few participants struggled with identifying two of the icons (which were updated mid-testing), all participants successfully completed all tasks, and all participants preferred the new design over the current. “Looks really, really good. By far I like the new one — in the current one, you don’t notice the navigation at all, only the top bar. The (sub) tabs catch my eye before the current navigation.” “In the old, it is weird to me that the two bars exist separately. This one feels more natural.” “The new one is cleaner. Less wasted space. Things are more compact on the new one and account info is better grouped. Tabs across the top is preferable because a lot of sites have a similar flow. …much prefer the new one.” A/B Test with 5% of Anonymous Visitors This test ran from 2016-12-01 to 2017-01-19 for about 2 million users in each A/B group. Anonymous visitors account for about 97% of all page views but only 61% of the current navigation clicks. Signups increased by 7% Clicks to Questions increased by 163% Clicks to Jobs increased by 160% (an expected 16% increase in overall Jobs traffic) Clicks to Documentation increased by 229% Clicks to Tags increased by 113% Clicks to Users increased by 178% Clicks to Ask Question increased by 33% Searches decreased by 13%* *Adjustments to the design between the anonymous test and the registered user test were made that resolved this issue and actually improved the number of searches in the next test. While some dropoff often happens after launch due to novelty effect, these increases were large enough to make us think that a good portion of the increases would be sustained after launch. Regardless, we’ll continue to measure and monitor the performance of the new top nav. A/B Test with 10% of Registered Users with Less than 500 Rep This test ran from 2017-01-18 to 2017-01-30 for about 100k users in each A/B group . Registered user account for about 3% of all page views but about 44% of the current top navigation clicks. Inboxes shown increased by 45% Achievements shown increased by 11% Clicks to Questions increased by 51% Clicks to Jobs increased by 99% (an expected 15% increase in overall Jobs traffic) Clicks to Documentation increased by 113% Clicks to Tags increased by 32% Clicks to Users increased by 82% Clicks to Ask Question remained the same Searches increased by 8% Opt-in for Stack Overflow Employees This phase began Tuesday, February 1. About 100 Stack Overflow employees opted in to test the new top nav. Opt-in for All Users This phase began 2017-02-07 to 2017-02-14. Around 1600 users opted in. Feedback from the Meta community has been extremely helpful. Thank you to everyone who participated! A number of bugs were fixed during this period, some feature requests were implemented and others considered or planned. For a more complete list of updates, see Des’s most recent post. Next Steps There’s a running list of ideas we’d like to try in the near future. We plan on iterating upon the design and functionality of our new top nav in a series of A/B tests. There are also early-phase explorations into how this might roll out to international and other Stack Exchange community sites. The design team is working on a cohesive design language in order to create consistent experiences across all our product areas. Some of these changes have already rolled out, and more are coming in the near future. Special thanks to Paweł Ludwiczak’s and Oded Coster’s hard work designing and implementing the new top navigation. As always, we appreciate your feedback. If you have a bug or feature request — post it on Meta."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/02/07/el-estado-de-stack-overflow-en-espanol-enero-2016/","date":"2017-02-06T23:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español: Enero 2017","text":"Entramos ya al segundo mes del año y la cosa sigue moviendose rápidamente. Es nuestra costumbre el compartir algunos numeritos para que se vayan dando una idea de como va todo con el sitio. Les presento algunos numeros interesantes del mes de enero: Miembros que contestaron la cantidad más grande del mes: Jorgesys – ¡123 preguntas contestadas! guzgarcia – ¡78 preguntas contestadas! Stefan Nolde – ¡75 preguntas contestadas! Marcos Gallardo – ¡53 preguntas contestadas! sstan– ¡48 preguntas contestadas! Las 5 respuestas más votadas a favor del mes: ¿Cómo subir una aplicación al Google Play con todos los derechos de copyright? – 12 votos Nombre de función javascript dentro de la propia función – 12 votos Detectar en que elemento html se ha hecho click con jQuery – 12 votos Cómo declarar un arreglo tridimensional en java – 10 votos Acortar múltiples condiciones en una sola para ver si una variable coincide con algún texto – 10 votos Las “Top 5” etiquetas del mes: java – 2,438 preguntas javascript – 2,240 preguntas php – 2,118 preguntas android – 1,940 preguntas c# – 1,359 preguntas"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/01/30/stack-overflow-podcast-100-jeff-atwood-is-back-for-today/","date":"2017-01-29T23:00:00.000Z","tags":["Company"],"title":"Podcast #100: Jeff Atwood Is Back! (For Today)","text":"Welcome to the Stack Overflow podcast #100!! Recorded Thursday, January 26, 2017 at Stack Overflow headquarters in NYC. Today’s podcast is brought to you by the Cheeseburger. “It’s a hamburger, topped with cheese!” But the real question is: Is a cheeseburger a sandwich? The podcast is also brought to you by IBM Compose. Compose has spent the last 5 years helping developers ship applications with production grade databases. Try Compose today and get a free limited edition T-Shirt. Hurry! Quantities are limited. Visit compose.com today. (Unfortunately, t-shirts are US only.) Calling our guest today ‘special’ would be an understatement. He’s the co-founder of Stack Overflow (and this podcast), founder of Discourse, prolific writer and blogger at codinghorror.com, and most importantly, the subject of many internal Stack Overflow memes. It’s @codinghorror himself, Mr Jeff Atwood! Jeff and Joel chat about where we came from and where we are going, including clips from past podcasts. If you care at all about SO history, then this episode is a must-listen. You may also learn a little too much (or not enough?) about how to be a juggalo… “Ultimately, [answering] the best questions are kind-of a form of storytelling, and that is what we were trying to get to. You can go and take 5 minutes out of your day, look at some semi-interesting Stack Overflow question and share some knowledge…it’s a good feeling.” Jeff Atwood “Computing is just typing words into boxes.” – also Jeff Atwood This week’s SO Constitution question: When driving with a friend, is it ok to ask that friend to get out and direct you while parallel parking? Listen to the opinions of the hosts, and then post your answer to Twitter using the hashtag #stackoverflowpodcast, along with your explanation. Keep it short, but clever! The funniest explanation, whether winning or losing, will be read on next week’s podcast and win an awesome Stack Overflow Sticker. Last week’s winner, answering the question: PRO or CON: Is it pronounced “Data is…” or “Data are…”? “@StackPodcast CON because it’s weird to say “Data are my favorite Star Trek character #stackoverflowpodcast” – @ethanjpeters This week’s links: IBM Compose Discourse Choosing Your Own Adventure – Coding Horror OMTR – Band – The app for Groups! How To Be a Juggalo on WikiHow For the record, it’s still Dalgas’ fault."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/01/30/developers-without-borders-the-global-stack-overflow-network/","date":"2017-01-29T23:00:00.000Z","tags":["Company"],"title":"Developers without Borders: The Global Stack Overflow Network","text":"A while back I encountered a developer who shared a story of a positive experience on Stack Overflow. He’d asked a question late one Sunday on Labor Day weekend, and been delighted that he’d quickly gotten multiple responses. He said he was impressed that someone else in San Francisco was also “burning the midnight oil,” and noted it as a testament to the work ethic in Silicon Valley. It was great that he’d had a positive experience, but he’d made one incorrect assumption: there was no reason to think the users who’d answered his question were also staying up late in Silicon Valley. They could be halfway around the world, where it wasn’t midnight on a holiday weekend but rather a normal Monday afternoon. Indeed, some analysis of typical answering patterns on late Labor Day Sundays indicates that was almost certainly the case! It’s easy in the American tech environment to forget that Stack Overflow is a global community, and that it couldn’t have been successful otherwise. Since its start, Stack Overflow has let questions and answers pass fluidly across national borders, creating a worldwide network of programming knowledge. I thought I’d share some analyses of how global Stack Overflow is, and how we’ve benefitted from it. Stack Overflow around the world What countries ask questions and provide answers on Stack Overflow? Stack Overflow is an American company, but only 29.4% of its questions and answers have been contributed from within the US. Countries such as India, the UK, and Germany make up the next largest contributors, but about a quarter of questions and answers are contributed from the 200+ countries that each have a small (<1%) share. (The relative proportions are pretty similar if you look just at questions asked or answers provided.) The Stack Overflow community has always been open to the world. It has gotten more global over its history, with the United States and the United Kingdom contributing a smaller fraction of its questions and answers each year, and India and smaller countries contributing a larger portion. Questions across borders What does a typical weekday look like for Stack Overflow Q&A? There are about 8,000 questions asked, and 9,500 answers provided. These come from 150 separate countries, and 84.7% of answers come from a different country than the asker. What does that global exchange of knowledge look like? (You can rotate or resize the globe with your mouse). Each one of these arcs represents one user getting help from another. I’ve heard programmers refer to Stack Overflow as their “external brain”; these are its neurons. (Incidentally, we took several measures to anonymize the interactive visualization above to prevent the possibility of users being matched to locations, including, but not limited to, fuzzing locations and removing ones without a minimum number of distinct users.) So if I ask a question from my office in the US, who might answer it? There’s a 64.1% chance the answer would come from outside the US This depends a bit on what programming language you ask about. For example, PHP questions asked in the US have a 75% chance of being answered from outside the US, while R questions have only a 54.9% chance. Questions asked from non-US countries are even more likely to be answered across borders; for example, a question asked in the UK has a 89.7% chance of the answer coming from outside the UK. It makes sense that questions flow freely across national borders, but you might expect time zones to make some difference. However, it turns out that’s a small factor in who answers your questions. Just 16.9% of answers come from a user in the same time zone as the person who asked it, and of ones that don’t, a user is almost as likely to get an answer from someone eleven hours away as someone who is three hours away. This is both because answers don’t necessarily come immediately, and because even immediate answers may come from someone working on a different schedule (for example, a question asked in the morning in New York could get answered in the evening in Mumbai). Seven countries I’ve wanted to write about the global nature of Stack Overflow’s user base for a while, but this post has a particular motivation. Last Friday, President Trump issued an executive order banning immigration to the United States from seven countries: Iraq, Iran, Syria, Libya, Sudan, Somalia, and Yemen. Many leaders of tech companies have expressed their outrage. Alongside many other concerns, most recognized the enormous contributions of immigrants from these countries to the American tech industry. This includes our CEO Joel Spolsky, who pointed out that developers in these seven countries make up a valued part of our userbase. I’d like to share more about how they fit in. In just the last week about 125,000 developers in these seven countries visited Stack Overflow. (If you’re wondering, they visit a bit more Matlab, C#, and Android than the average country, and less R and Linux). This isn’t counting the many developers from these countries who have since emigrated elsewhere. Users from these seven countries have written over 225,000 posts on Stack Overflow, including over 110,000 answers to other users’ questions. Questions and answers from these seven countries have, in combination, been visited over 500 million times. If I made an interactive globe showing all the ways developers in these countries have helped others through the knowledge they contributed, it would crash your browser. Conclusion The point of this post is not to focus on these seven countries; there are hundreds of countries that make Stack Overflow the powerful resource that it is. It’s to share just how much we owe to the global community of developers, and to celebrate what’s possible when a community is built on cooperation and trust across borders. If you’re a software developer, you’ve likely gotten help from questions and answers from these seven countries, even if you didn’t know it. You may have products and open source tools developed by immigrants from them. If you’ve ever used the Stack Exchange mobile app, you’ve benefitted directly from the work of a former Iranian refugee. Supporting that kind of global cooperation is what Stack Overflow is all about."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/01/26/year-in-review-2016/","date":"2017-01-25T23:00:00.000Z","tags":["Community"],"title":"Stack Exchange Year in Review 2016","text":"I am not myself at all wise, nor have I anything to show which is the invention or birth of my own soul, but those who converse with me profit. Some of them appear dull enough at first, but afterwards, as our acquaintance ripens, if the god is gracious to them, they all make astonishing progress; and this in the opinion of others as well as in their own. It is quite clear that they never learned anything from me; the many fine discoveries to which they cling are of their own making.—Socrates from Plato’s Theaetetus By almost every measure, more Stack Exchange users shared more knowledge in 2016 than any previous year. Perhaps the most direct metric is the 4.5 million answers posted across our 162 sites. We couldn’t get those answers without a stream of new questions: 3.6 million last year alone. You might argue that not all of those posts are useful and it’s true users gave out 3.6 million downvotes. But I’d respond that askers accepted 1.5 million answers as fixing their problem and 24.9 million upvotes show many more people got helpful information. We have a strong culture of continuous improvement as evidenced by 5.1 million edits and 4.4 million completed reviews. Many of last year’s 14.4 million comments, which are intended to clarify rather than be conversational, added information above and beyond the posts themselves. Stack Overflow represented the bulk of network activity with 2.6 million questions. Our generous community of programmers provided 3.1 million answers of which 1.1 million were accepted. There were 2.4 million downvotes and 16.8 million upvotes. Seasoned users completed 2.9 million review tasks in order to keep the content looking its best. Some of last year’s 3.4 million edits were prompted by 9.9 million clarifying and annotating comments. If you compare those numbers to the previous year, you might notice Stack Overflow’s numbers are flat. We think we’ve saturated our current audience and should be looking at groups who feel marginalized or poorly-served by the system today. One obvious direction is to expand into other languages: Portuguese Japanese Russian Spanish Collectively, our non-English Stack Overflow sites have grown from 55k questions asked in 2015 to 70k in 2016. That 26% increase indicates there’s a thirst for people to learn and share knowledge in the language they regularly use. (I know. Shocking!) Q&A tends to be somewhat competitive and adversarial. This means that users often get answers to their questions within minutes. But not everyone enjoys that sort of activity. So we are experimenting with another way to contribute to the art and science of programming. We call it Documentation. In its first year, users have created 21,954 examples organized in 6761 topics and representing 890 tags. Our vision of Documentation will only succeed when many developers pitch in with improving edits. So it’s encouraging that 10,238 users have contributed 49,486 approved changes (including initial submissions) to those topics. Looking ahead to 2017, we are shifting from building the technical infrastructure to building a strong community. Come help us! We’re growing in terms of topic area too. Last year we graduated 5 sites from beta status: Law Motor Vehicle Maintenance & Repair Philosophy Programming Puzzles & Code Golf Puzzling The last two are particularly interesting as they push the boundaries of traditional Q&A. Instead of asking questions they don’t know the answers to, our puzzle sites are for people to pose challenges for others to solve. The Code Golf site has been doing this for years, so official graduation is long-awaited accomplishment. I’m also pleased to report that we have a site for Software Engineering. This site has been around since 2010, but you might not have known what it was about. That’s because the site was called Programmers. (And old-timers recall it started out as Not Programming Related. It’s a long story.) Besides being a better fit for the site’s community, we’ve heard from regular users that new users are more likely to grok the scope of the community. The most viewed questions on Stack Exchange tend to reflect technology trends: How do I get Pokemon Go to detect my phones orientation? (Gaming, 535,546 views) Windows 10 upgrade assistant stuck at 99% (Super User, 394,967 views) Graphics issues after/while installing Ubuntu 16.04/16.10 with NVIDIA graphics (Ask Ubuntu, 232,856 views) What actually happens when there is not enough oil in a car engine? (Mechanics, 216,643 views) Recovering from a rm -rf / (Server Fault, 191,392 views) Meanwhile, the best content according to voting tends to be more evergreen: Xcode 7 error: “Missing iOS Distribution signing identity for …” (Stack Overflow, +1907) How do I deal with my current employer not respecting my decision to leave? (Workplace, +623) In simple English, what does it mean to be transcendental? (Mathematics, +459) Did I just get hacked? (Super User, +438) Why is there so much fear surrounding LiPo batteries? (Electronics, +419) Once again, our designers amaze with their thoughtful site designs. They produced twelve more last year: Aviation Blender Computer Science Cryptography Emacs English Language Learners Japanese Magento Music Puzzling Signal Processing Worldbuilding If you enjoy analyzing data about the Stack Exchange network, 2016 was your year. Community member Monica Cellio wrote a tutorial about our data explorer, which is maintained by another community member, Tim Stone. A resident data scientist, David Robinson, released StackLite, a lightweight version of community data. To see it in action, consider scripting language trends on Stack Overflow. In December, we connected our data to Google’s BigQuery. People are already finding interesting results. Our data team has been posting analysis on the blog, if you crave more. In addition to making user-created content more accessible, we’ve also been working on being more open about how we operate as a company. We discovered that salary transparency helps companies recruit employees, so we made our salary calculation public. Since we strive to pay developers fairly, there’s really no downside. There’s no real downside to sharing our business model either. For one thing, being successful as a company means we can keep our servers running. For another, the products themselves further our larger goal of improving the computer programming profession. The Jobs product eliminates inefficiencies in the developer hiring process, so we are pleased to promote it (while improving it further). We even think our advertisements make our sites better by being respectful and relevant. Now I was tempted to not talk about Enterprise, which is our Q&A product for large organizations. As long as I have worked here we’ve steered people away from it because it’s so expensive and we assumed it didn’t work. But then we started hearing reports of companies hosting thriving communities sharing internal knowledge. (We probably should have guessed based on experience with smaller sites.) At any rate, Enterprise is now a product we actively support and sell to large organizations. And just to be sure it works for others, we’ve started using an internal instance to collect and preserve company lore. Last year we redesigned the resume which allows programmers to show off what they’ve done whether or not they are looking for work. In 2016, 278,455 users updated their Developer Story. (If you aren’t among that number, why not try it out?) Like Socrates, Stack Overflow Inc. serves as a midwife to knowledge. We don’t create informative content; we merely manage the systems that enable users to build up a corpus of knowledge. As such, we depend on users to report issues on meta. Across Stack Exchange, there were 2,365 bugs or features marked as [status-completed] in 2016. Our most popular change (by the voting) was allowing users to cancel misclicked flags. It was also the third most popular. We can’t implement all the ideas users send us, so we reluctantly rejected 322 meta posts. The most popular was my idea to hide trivial comments. (I still like the idea, but we haven’t been able to find a reliable way to evaluate the costs and benefits.) If you want more statistics about meta questions we’ve responded to, please see this spreadsheet compiled by my colleague, JNat. JNat also organizes our process for making small- to medium-scale changes that benefit our existing communities. Some of these changes (14 last year) help us in the Community Team do our jobs more efficiently. Others benefit our team of volunteer moderators (30). But the majority (55) are intended to help people in the community itself. For example, you can now chose which site to use for your network profile. We also support hiding sites if you don’t want the world to easily discover your obsession with 3D Printing. For those who are curious, JNat has another spreadsheet that details the changes made last year. Here at Stack Exchange, we have a few annual traditions: In January, 56k developers took our annual survey. (Please take this year’s survey, if you haven’t already!) On April 1, our very own Adam Lear kicked off our newest product line: indie games! Unikong is an old-school platformer that pits our highest reputation user against trolls as he attempts to tame a wild unicorn. (Pro-tip: jump off coins for greater height.) We gave $50,900 to charity on behalf and at the direction of our volunteer moderators. Our annual Winter Bash event was a smashing success as more users than ever donned digital dome decorations. 2016 marked a year of growing potential for Stack Exchange. While not everything we tried last year worked out, we’ve planted seeds that will bear fruit in 2017 and beyond. More importantly, our amazing communities continue to build (and curate) a massive collection of informative answers."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/01/23/stack-overflow-podcast-99-the-requested-operation-requires-elevation/","date":"2017-01-22T23:00:00.000Z","tags":["Company"],"title":"Podcast #99: The Requested Operation Requires Elevation","text":"Welcome to the Stack Overflow podcast #99 recorded Thursday, January 19 at the Stack Overflow HQ in NYC. Today’s podcast is brought to you by Reverse Polish notation. 25 enter 16 plus It’s 41! We actually have 2 sponsors for today: Grace Hopper – A program of Fullstack Academy. The Grace Hopper Program is an immersive software engineering course for women. Students only pay tuition once they secure a developer job after the program. Visit The Grace Hopper Program at www.gracehopper.com. Girls Who Code – A national non-profit organization dedicated to closing the gender gap in technology. They create a stronger community around girls and women that will empower the next generation to be leaders in technology. Visit www.girlswhocode.com. In today’s episode, Joel complains about Excel on Mac, the hosts play Start Up or Shut Up, and surprise! The One Minute Tech Review is NOT about light switches. This week’s Developer Story is new Stack Overflow data scientist and literal rocket scientist, Dr. Julia Silge. She tells us about her Descent into programming, starting in high school with LAN parties and continuing with her tech-adjacent foray into physics and numerous post-doctorals (with the dynamics of galaxies, nbd) before starting with Stack Overflow. She has written a blog post, that came out last week, titled “Women in the 2016 Stack Overflow Survey” where she analyzes the data from last year’s survey that focuses on how women answered the questions and what are some of the characteristics specific to women on Stack Overflow. There are some surprising differences between the way men and women answered the questions. “One of the things that I am really most excited about, being at Stack Overflow… is having such amazing data about the worldwide community and the people who work with code and software.” This week’s SO Constitution question: Is it grammatically correct to say “Data is…” or “Data are…”? Listen to the opinions of the hosts, and then post your answer to Twitter using the hashtag #stackoverflowpodcast, along with your explanation. Keep it short, but clever! The funniest explanation, whether winning or losing, will be read on next week’s podcast and win an awesome Stack Overflow Sticker. Last week’s winner, answering the question: PRO or CON: Is it sufficient to close a bug as NOT REPRO or do you have to write an explanation? “@StackPodcast always explain … that’s the point of SO after all.” – @racascou Congrats rafælcastrocouto, you win stuff! We also need new amendments, so tweet us your ideas and we could name an amendment after you! Seriously, we need ideas. Give us some, please. Thanks for listening and see you next week for our 100th episode special with @codinghorror, himself, the one and only Jeff Atwood! Editor’s note: American cheese is delicious! Period. This Week’s links: 2017 Developer Survey – Take it! In The News: Popcorntime Ransomware info from Wired, France is the new tech hub? Dr Julia Silge links: Recent Stack Overflow blog post Shiny App JuliaSilge.com Tidy Text Mining With R – By Julia Silge and David Robinson Click the link to buy the book!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/01/16/stack-overflow-podcast-98-scott-hanselman-is-better-than-us-at-everything/","date":"2017-01-15T23:00:00.000Z","tags":["Company"],"title":"Podcast #98: Scott Hanselman Is Better Than Us at Everything","text":"Happy New Year and welcome to the Stack Overflow podcast #98 recorded Thursday, January 12, 2017 at the Stack Overflow Headquarters in NYC. Today’s broadcast is brought to you by Sydney, Australia. If there are any Australian listeners left after Joel’s terrible accent, thank you and we’re sorry. In this episode: Joel rants about travel for the first time ever; Jay explains the Developer Survey (launched last week); and the hosts ponder the reason for Connecticut’s existence. This week’s Developer Story is prolific programmer, teacher, writer, podcaster and so much more: Scott Hanselman! In his 3rd appearance on the podcast, Scott recounts some of the earliest inspirations that helped take his life from being “voted most likely to be convicted of white-collar crime” to the success that he is today. Just some of his great advice to us about helping the next generation: “Stuff that you might be doing alone, find a kid and do it with that kid. Include them in soldering or in chopping down a tree or putting together a square-foot garden in the backyard. Those are all gifts that we can give to people moving forward.” As you know, we’re preparing a constitution for Stack Overflow. Each week, we bring you a proposal, and you, our listeners, will decide on whether that proposal becomes a part of our new constitution. This week’s question: Is it sufficient to close a bug as NOT REPRO or do you have to write some kind of explanation? Listen to the opinions of the hosts, and then post your answer to Twitter using the hashtag #stackoverflowpodcast, with either PRO if yay, or CON if nay, along with your explanation. Keep it short! The funniest explanation, whether winning or losing, will be read on next week’s podcast and win an awesome Stack Overflow Sticker. We also need new amendments, so tweet us your ideas and we could name an amendment after you! Last week’s winner, answering the question: The Simonyi Amendment, Shall we bring back Hungarian Notation? Is: “YAY but only the real Hungarian notation. Semantics based instead of type based. In Hungarian instead of English.” Thanks @inka22222, you win a thing! Week Links: Quark Conference India – Joel will be there if he can navigate the dropdown boxes. Developer Survey Blog Post OMTR – Lutron Light Switches News: Atlassian buys Trello! (Also, proof that Michael Pryor was a cheerleader.) Podcast Links: Twitter: @stackpodcast Facebook: The Stack Overflow Podcast Our website is now live: http://stackoverflow.com/podcast Links from our conversation with Scott Hanselman: Listen to his podcasts, they are amazing. Seriously, Just do it. Hanselminutes.com, This Developer’s Life, Ratchet & The Geek Anjuan Simmons – Lending Privilege Babysmash.com"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/01/11/the-2017-stack-overflow-developer-survey-is-now-live/","date":"2017-01-10T23:00:00.000Z","tags":["Community"],"title":"The 2017 Stack Overflow Developer Survey is Now Live","text":"We’re back for another edition of the Stack Overflow Developer Survey, the largest and most comprehensive survey of software developers on earth. Every year, we include questions about your favorite technologies, coding habits, and work preferences, as well as how you learn, share, and level up as a developer. Want to see how you stack up against the world’s developers? Take the survey now. We’ll publish initial results for you to peruse in March. A few weeks after that, you’ll be able to download and analyze anonymized results of the survey under the Open Database License (ODbL). We look forward to seeing what you find! Why We Do This We estimate that responses to the 2016 survey cost 14.6 years of total developer time. That’s a lot of missed opportunities to squash bugs and ship product. So why do we do this? And more importantly, how do we pay developers back for their time spent? It starts with our shared, company-wide mission: Everything we do at Stack Overflow is done to make developers’ lives better. Whether it’s through Q&A, Documentation, or finding developers better jobs, we’re single-mindedly focused on doing what’s best for the developer community, and how we can promote developers’ interests. The first step to doing this well requires knowing in detail what different developers want, what their pain points are, and how they want to share and improve their skills. Developers are generally misunderstood by non-technical managers, recruiters, and policy makers. This has led to lousy hiring practices, poor environments for development (open office concept, anyone?), and misallocation of resources. Having reliable, comprehensive survey results we can point to helps us educate companies. It also empowers developers who need more data to support their cause, whether it’s in asking for a raise to match industry standards, or because they’re pushing for a change with internal development or HR practices. We also of course use the survey to improve our own policies at Stack Overflow, as well as our products for developers. We want to know if what we’re doing is working, and what you want to see improved. See How You Stack Up Last year, we fielded responses from over 50,000 developers in 173 countries. We’re looking to break our record again this year, and we need your help. Take the survey now. Got questions of your own or feedback? Post in the comments below or on Meta."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/01/09/say-farewell-to-winter-bash-2016/","date":"2017-01-08T23:00:00.000Z","tags":["Community"],"title":"Say Farewell to Winter Bash 2016!","text":"Another year has ended, and with that, it’s time to put all the hats back in their boxes. Winter Bash 2016 has come to an end! Over past three weeks, we’ve had ups and downs (err bugs) with hats, but overall, it was a massive success. It appeared that there was fun to be had, and, wow, the hats looked hat-tastic on everyone. Time for a Fashion Show We saw many creative ways to wear hats, but here are a few of our favorites: Some Stats about Hats! This year, 215,960 users earned a total of 797,074 hats! The most awarded hat was our version of a participation trophy, Just Here for the Hat. This hat was awarded to all Winter Bash users on a site, once any 20 hats were unlocked on that site. A total of 269,016 of them were handed out across the network to 214,457 unique users. Some people wore the hat brilliantly: Stack Overflow was the first site to unlock it. They were also able to get the hat less than 8 hours into the fun, with only 6 users. A big congratulations goes out to Language Learning, as it only took 2 users to unlock the hat, with one user having 18 of the distinct hats. In comparison, it took 11 users to unlock the hat on Software Recommendations, which was quite a team effort. All in all, 108 communities earned the trophy hat. The next most common hat was I Have A Little Dreidel. It was awarded 146,403 times to 116,462 users. Because it was awarded an entire week of Winter Bash for participating on a site during any day of Chanukah, most everyone had a chance to earn it. Many of the other time-based hats were the most common across the network: Epiphany (68,013 times to 58,157 users), Mmmm Bacon (54,058 times to 45,749 users), Bûche de Noël (33,925 times to 28,770 users), and First Responder (605 times to 508 users). The silver badge hat, 925, was handed out 54,023 times to 50,954 users. We already knew earning a gold badge was difficult, which made the gold badge hat a bit harder to earn. 24 was awarded 9,488 times to 9,266 users. Just like previous years, we had a few hats for using the mobile applications: Cutting the Cord (2,456 times to 1,932 users), and Loungin’ Around (109 times to 104 users). This year, was the first year we introduced some site-specific hats. Stack Overflow has two products, Developer Story and Documentation, which are not available on the rest of the network, so we awarded hats for participating in them. The NeverEnding Story hat was awarded to 5,263 users, and What’s Up, Doc? was awarded to 3,246 users. In order to offset the Stack Overflow only hats, we created two hats that were available on the rest of the network. To earn Polymath (1,934 times to 516 users) and Running Ragged (256 times to 80 users) you needed to run ragged across multiple sites, showing off your knowledge in more than one area. The most difficult non-secret hat to earn was Maverick, which was awarded only to 17 users. This hat required users to post an answer to a -3 question, that went to +3 after the answer was posted. Many tried to get the hat, but obviously this wasn’t as easy as it appeared. The trigger was modeled after the Red Baron hat in 2014 which there are still ongoing discussions around turning into a badge. Time to Spill the Secrets About Hats We switched things up this year when it came to secret hats. In the past, users could guess the triggers for a hat, and if correct, and the first to guess it, another hat was awarded. This year, even though hats were not awarded for guessing the triggers, that didn’t stop you from guessing or even asking. Some of the guesses were accurate, others not so much. But without further ado, here are the secret hat details (and some more stats). There were a total of 14 secret hats (assuming you count both the sun and moon version of Where In The World? separately), which totaled 42 hats again, this year. Of course, the most you could earn was 41, since it was impossible to have both the sun and moon hat. The most common secret hat was the solstice hat for participating on December 21, 2016. The Where In the World? Sun hat was awarded 39,078 times to 33,341 users, while the Moon version was awarded 35,784 times to 30,209 users. This was similar to last year’s Flip Flop hat, but Sklivvz got creative in how randomness was assigned. The first secret hat awarded was This Is Fine. It was awarded to Jake on Stack Overflow less than 30 minutes into Winter Bash on December 19th. The community accurately guessed this was awarded if you have an upvoted answer on a question with a bounty, but you didn’t win the bounty. This hat was awarded 965 times to 958 users. The next secret hat discovered (and accurately guessed by the community) was 180°. It was earned by ColleenV on English Language Learners less than an hour into Winter Bash. In order to get this hat, you needed to vote to close a question, edit it while it was closed, and then vote to reopen…basically you did a 180° on the post. A total of 186 users earned this hat 188 times. Less than 10 minutes later, Don’t Wanna Taco ‘Bout It was triggered by users who edited or suggested an edit to 5 posts in a single UTC day, without commenting on the post. The very first user to get the hat was Jamal on Code Review. In the end, it was awarded to 1,111 users 1,177 times. Elementary was the next secret hat awarded. Elementary was handed out when users edited 5 questions that were posted more than a year ago. A total of 466 users earned this hat 506 times, with Kris Roofe on Stack Overflow, being the first. Two more secret hats, 6 (3,293 times to 3,193 users) and 8,243,721 (354 times to 338 users) were earned by commenting and then cleaning up after yourself. The first hat, 6 aka Bert, was earned if 6 posts were edited by the owner after you commented on them. The second hat, 8,243,721 aka Ernie, was awarded by deleting 6 comments from under posts (not your own), that were edited by their owners after you commented on them. These two hats worked hand in hand. If you commented on 6 posts, the owner edited them, and you deleted the comments, you’d earn both hats. Jaromanda X was the first to earn 6 on Stack Overflow, with TypoCube™ being the first to earn 8,243,721 on Database Administrators. Also awarded on the opening day of Winter Bash was my personal favorite, Blue In the Face. Users earned this hat by talking so much you were blue in the face. In other words, by posting 10 comments that earned an upvote. It was first given out to rmaddy on Stack Overflow. Overall, it was earned 2,660 times by 2,523 users. It took a few days, but the community eventually guessed this trigger. Even though it was discovered on the first day of Winter Bash, the rarest secret hat was TheyLive. It was only awarded to 133 users. To get this hat, you needed to head into the suggested edit review queue and either “Improve Edit” or “Reject and Edit” 5 times. The hat was a zombie head because the edit lived on through your improvement of the post. Emile Bergeron on Stack Overflow was the first to get the hat. The community accurately guessed Mild Mannered, the last secret hat found on the first day of Winter Bash. Users earned this hat by posting an answer that got accepted, but received no other votes for 12 hours. In the end, this was awarded 7,299 times to 7,180 users. On third day of Winter Bash, The Hatter was awarded. This threw people for a loop because it was seen so late after the start of hats (the lateness that was due to a bug we found). This was awarded when a user posted a positively scored question at 6:00pm in any timezone. 6:00pm was chosen because it’s the time the hatter and the March Hare are stuck at. It was given out 3,761 times to 3,715 users. Once awarded, it didn’t take long for users to guess the trigger. The two remaining secret hats were awarded several days into Winter Bash because they involved performing some act over a period of time. Five days into Winter Bash, Trendsetter appeared. Fashionable users earned the hat by wearing 5 different hats, and by changing their hat using the hat rack on a site, on five different days. Trendsetter was awarded 1,966 times to 1,864 trendy users. The very last secret hat earned was Like Clockwork. It was awarded if you voted between 3am and 9pm UTC (+/- 9 hours) on nine consecutive days during Winter Bash. Voting like clockwork earned you the hat, and it was earned 1,313 times by 1,211 users. The Hat-Fanatics Leaderboard Winter Bash is our way to have fun at the end of the year with all our communities. Even though virtual hats have gone away, this post wouldn’t be complete without recognizing some of those who went above and beyond to earn all the hats. They are referred to as the Hat-Fanatics! This year we had 4 users who earned the most hats network-wide: Please join me in congratulating the users who earned all 41 hats across the network: Alexander O’Mara alecxe Eran David And with that, it’s time to say so long to Winter Bash 2016. We’ll be adding more stats about hats on Meta Stack Exchange over next few days. If you have any feedback on this year’s event, please chime in on Meta Stack Exchange. Tags: winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2017/01/05/el-estado-de-stack-overflow-en-espanol-diciembre-2016/","date":"2017-01-04T23:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español Diciembre 2016","text":"Se termino el año 2016 y aquí les dejo unos numeros interesantes para reflexionar sobre la actividad que vimos en diciembre. Como siempre, se aprecian comentarios y sugerencias para mejorar las estadisticas que se comparten. Preguntas más respondidas: Forzar salto al catch 10 Respuestas Manera mas eficaz de comparar dos arreglos 6 Respuestas ¿Cuál es el significado del tipo de variable que tiene el mismo nombre que su clase? 6 Respuestas (Cerrada) Patrones de dibujo en C 6 Respuestas Consulta agrupada con distintos contadores 5 Respuestas Respuestas con más votos: ¿Cómo puedo enviar SMS desde una aplicación hecha en c# sin pagar API de terceros? 17 votos ¿Como obtener siempre los mismos resultados al encriptar una cadena? 10 votos ¿Cual es la diferencia entre position: relative, position: absolute y position: fixed? 9 votos Rotar rueda mediante la fuerza de presión 9 votos ¿Cómo estructurar una cita con autor en HTML5? 8 votos Las preguntas más visitadas: Rotar rueda mediante la fuerza de presión Vista 244 veces Simplificar y generar código captcha PHP Vista 222 veces ¿Cómo llamar a una función usando un if con dos condiciones? Vista 202 veces ¿Cómo puedo subir una imagen de Android a un servicio ASMX? Vista 198 veces ‘ERROR in Cannot read property ‘listLazyRoutes’ of undefined’ Angular 2 Vista 196 veces (Cerrada)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/12/21/stack-overflow-gives-back-2016/","date":"2016-12-20T23:00:00.000Z","tags":["Company"],"title":"Stack Overflow Gives Back 2016","text":"It’s hard to believe this has been a thing for eight years now. Every year since 2009, we’ve set aside this time of year to remember the people and the organizations who desperately need our help. It started with Stack Overflow LLC when three employees and three sites decided to “give back” with some charitable donations and to remember the people and projects that helped us succeed. In the next year, we grew to twenty-four employees and 130+ moderators across 38 sites, so it seemed only fitting to get our Moderators more involved in the process. An invitation went out where we offered to make a $100 donation to a selected charity on behalf of each Moderator representing their community. And a tradition was born. Giving back… 8 years and running! Wow, what a ride! Since 2009, we’ve grown into a top-30 online destination with 160+ communities serving 1.3 billion page views per month. So this year with your continued support, we are able to make the following donations to charity on behalf of the 509 moderators of Stack Exchange! Charity Donation Wikimedia Foundation Dedicated to encouraging the growth, development and distribution of free, multilingual, educational content for the public free of charge. (wikimediafoundation.org) $8,100.00 Girls Who Code Working to close the expanding gender gap in technology and engineering, Girls Who Code provides unparalleled computer science education to equip girls with the computing skills needed to pursue 21st-century opportunities (girlswhocode.com) $9,000.00 International Rescue Committee Responding to the world’s worst humanitarian crises and helping people to survive and rebuild their lives; at work in over 40 countries, more than 90% of every dollar goes directly to help refugees in desperate need (rescue.org) $10,300.00 Electronic Frontier Foundation Defending your rights in the digital world (eff.org) $11,300.00 Doctors Without Borders An international medical humanitarian organization created by doctors and journalists (doctorswithoutborders.org) $12,200.00 TOTAL $50,900.00 And from our engineering and IT staff, it is important to remember some of the tools and organizations that make what we do possible: Organization Donation Git and the Software Freedom Conservancy $1,000.00 HAProxy $1,000.00 Creative Commons $1,000.00 Let’s Encrypt $1,000.00 SQLAlchemy $1,000.00 Even after eight years of “giving back”, this event continues to be my favorite at Stack Exchange. I wish I could share with you the rush that comes from watching the charity selections come racing back across my screen mere seconds after the invitations are sent. It is a sobering reminder of just how many people are out there on the other side of that keyboard while we quietly read our favorite posts. Think about it; right now there are 10s of thousands of people working tirelessly to help people they will probably never meet. There’s a personal satisfaction that comes from helping someone who asks for help, but that satisfaction heightens to a genuine sense of purpose when you realize that you are creating something lasting — something that will continue to help people long after you’ve moved on. In this upcoming year, it is good to remind ourselves that there are real people behind the help you find among these sites. Stack Exchange isn’t a piece of software, or even the work of the company behind it. It takes the collective efforts of a much larger community working together to make this all happen. It is the generosity of people like you who give so selflessly of their hard-earned knowledge to make this all possible. So here’s to renewing that sense of purpose by doing something bigger than ourselves. And here’s to finding those small things that can make a big difference in someone else’s life, and leaving behind something lasting… for those who come after. Cheers!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/12/19/its-hat-season-announcing-winter-bash-2016/","date":"2016-12-18T23:00:00.000Z","tags":["Community"],"title":"It’s Hat Season…Announcing Winter Bash 2016","text":"Another year is rapidly coming to an end, which means it’s time for some fun. Fun with hats! That’s right, it’s time for our annual event that brings joy to all and creates hat-fanatics everywhere… Winter Bash! Starting today through the end of the day on 8 January 2017, you’ll be able to earn and wear hats (and possibly accessories) for performing various things you already do across the Stack Exchange network. Wait, what are hats again? For those who aren’t familiar with Winter Bash and the Season of Hats, we’ve documented the long history of Hats for your viewing pleasure. Upon completing one of the many challenges while being logged on a participating site, you will be awarded the associated hat. Once you’ve earned a hat, you can visit your profile on any site to choose the item you want to wear. Just click the hat dressing up your badges section on your profile to show the dialog: Upon picking a hat, you can reposition and resize it to make it fit your avatar. Here is floating head as an example: Besides seeing all your hats from your profile, you can see how you stack up against the rest of the network on the Winter Bash leaderboard. Only time will tell who will be the ultimate hat-fanatic at the end of the event. As always, if you’re a hater of fun and hats, you don’t need to participate or even see hats. You can opt out of hats by clicking the snowflake icon in the top bar, and then click the ‘I hate hats’ link at the bottom left. If you decide that you no longer hate hats, you can always change your mind during the season of hats. What’s new this year? Just like prior years, we’ve got all new hats lined up for the event this year. There are 28 total hats you can earn over the next few weeks. We’ve got some secret hats lined up with a few minor changes: A secret hat for correctly guessing a secret hat will no longer be awarded. This year there are no secret hats for tormenting incessantly poking SE employees under a post. Blame our lawyers; they did not like the idea of staff being poked or tormented for hats. Hats are awesome and a fun way to end the year. It’s our way of showing the communities how much we love them. We also put a lot of love into making hats fun for all. We want to give a special nod to everyone involved in putting it together: The Marketing Design team for coming up with the beautiful design. With extra special thanks to Kalina Moniquet and Nohemi Olvera for the amazing hat images. Our hat-umentary team Kaitlin Pike for producing the video, David Fullerton for the idea, and Talal Sarwani for directing it. Our hat-velopers, Sklivvz and Oded for implementing all engineer-y stuff to get this launched. The hat PM, balpha, for being our fearless hats leader again this year. Plus, everyone else who offered up ideas for hat triggers, designs, and assisted in getting it out the door. Now go forth and get all the hats! Tags: winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/12/15/you-can-now-play-with-stack-overflow-data-on-googles-bigquery/","date":"2016-12-14T23:00:00.000Z","tags":["Company"],"title":"You Can Now Play with Stack Overflow Data on Google’s BigQuery","text":"If you’ve ever wanted to get a statistic about Stack Overflow or your favorite Stack Exchange site, you may have used our Stack Exchange Data Explorer, aka SEDE. (This is separate from our regular “data dumps” meant for researchers and others who want to work with large chunks of the content.) Launched in 2010, SEDE is a web tool you can use to share, query, and analyze the data from our network. It’s updated weekly with all our latest changes and additions, minus a few sensitive things like people’s email addresses and voting behavior. We’ve seen a lot of creative uses of SEDE, from finding out “What questions does Jon Skeet have a higher/lower score on than me?” to “Where have I ‘met’ another user?” and many other questions keeping the community up at night. Today, we’re thrilled to expand your ability to play with this data by working with Google and releasing it (with regular updates) on BigQuery. Anyone with a Google Cloud Platform account can use SQL queries or their favorite tool to sort, join, and analyze away. What makes BigQuery different from SEDE? Go beyond 50,000 rows (our SEDE limit). BigQuery lets you go big. Unlike SEDE, BigQuery comes with a REST API. You can connect all sorts of tools like Tableau, re:dash, Looker, R, and pandas to it. JOIN all the things: BigQuery hosts a wide variety of datasets from GitHub’s to NOAA’s weather data. You can make all sorts of useful or useless but entertaining queries across these. Go check out our dataset now and poke at it. Feel free to share your results on reddit.com/r/bigquery. You can also check out the data scientists job listings to put your creative queries to work."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/12/07/el-estado-de-stack-overflow-en-espanol-noviembre-2016/","date":"2016-12-06T23:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español Noviembre 2016","text":"Casi se termina el 2016 y para los que no lo saben, ¡esto quiere decir que llevamos un poco más de un año de existencia! Stack Overflow en español ha superado todas las expectativas y seguimos nuestro camino hacia la dominación global. Dado a que existen desarrolladores como tú que están interesados en compartir el conocimiento con otros, sabemos que tenemos un futuro brillante. Al momento de publicar este blog, contamos con más de 12,000 preguntas con un porcentaje de %75 de esas preguntas contestadas. Esto indica que tenemos cerca de 9,000 preguntas ya respodidas. Estas preguntas forman la base de información que otros desarrolladores encontrarán y usarán en un futuro. También tenemos un promedio de 73 preguntas publicadas por dia cosa que nos coloca en el undécimo lugar en la red de Stack Exchange y en el tercer lugar entre las comunidades internacionales. Para comparar, la comunidad rusa cuenta con más de 121,000 preguntas y un promedio de 191 preguntas publicadas a diario lo cuál la coloca en el tercer lugar de la red de Stack Exchange. La comunidad portuguésa cuenta con unas 58,000 preguntas y un promedio de 88 preguntas publicadas al día lo cuál la coloca en el noveno lugar de la red de Stack Exchange. Pero, recuerden que los sitios ruso y portugués ambos llevan más de 3 años de existencia mientras que nosotros acabamos de cumplir nuestro primer año. ¿Piensan que podremos superarlos pronto? Yo diría que sí, claró, sin duda, “yes” en inglés. Lo importante no es el ser el sitio más grande de la red de Stack Exchange sino ser el sitío que ayude más a nuestra gente. Esa es nuestra razón de existir, nuestra meta, lo que nos define. Les agradezco mucho su apoyo y su constante interés en ser parte de algo que eleva a nuestros desarrolladores de habla hispana. Ahora sí, algunos numeros interesantes del mes de noviembre: Miembros que contestaron la más grande cantidad de preguntas: Elenasys – ¡128 preguntas contestadas! sioesi – ¡102 preguntas contestadas! sstan – ¡95 preguntas contestadas! Error404– ¡88 preguntas contestadas! Marcos Gallardo – ¡65 preguntas contestadas! Las 3 preguntas más compartidas del mes: Validar un email en JavaScript – compartida 128 veces ¿Cómo puedo hacer que cada perfil tenga N número de mascotas? Cada perfil debe tener mascotas diferentes – compartida 8 veces Mi aplicación se detiene con el error “android.support.v7.widget.AppCompatTextView cannot be cast to android.widget.EditText” – compartida 6 veces Las 3 preguntas más vistas del mes: Cómo determinar si todos los dígitos de un número entero son iguales – vista 748 veces Desofuscar código php – vista 284 veces ¿Los enlaces con nofollow aportan SEO? – vista 261 veces"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/11/20/estado-da-pilha-internacional-novembro-2016/","date":"2016-11-19T23:00:00.000Z","tags":["Company"],"title":"Estado da Pilha Internacional – Novembro/2016","text":"Alguns meses atrás eu comentei um pouco sobre o futuro do Stack Overflow Docs no nosso site. Não era um comentário dos mais animadores: “A primeira parte, sobre nós ainda não sabermos se teremos aqui também, é verdade.” mas era uma descrição verdadeira da situação. Só que, como o Tomás Barcellos notou, já se vão meses desde então. O que mudou? A principal mudança é que passamos de indecisos para decididos. Vamos, assim que possível, ter Documentação no SOpt. Ênfase para “assim que possível”. Há muito que precisa ser resolvido na parte técnica até que Docs esteja disponível para vocês. Os 2 principais problemas são: Ainda somos péssimos com traduções: Os tradutores fazem um excelente trabalho mas nós continuamos jogando string atrás de string no projeto, deixando-o cada vez maior e mais complexo. Assim não há projeto de tradução que aguente. Precisamos encontrar uma maneira de organizar o projeto e fornecer contexto, para que nossos bravos tradutores não passem tanta dificuldade. Sem o trabalho dos tradutores, não há SOpt. Docs ainda não é um projeto estável: Esse é um problema associado ao primeiro. Docs é um projeto novo e, portanto, ainda sofre mudanças constantes, principalmente de interface. É basicamente inviável que um projeto desse porte consiga se manter constantemente traduzido com a ajuda de voluntários, principalmente se não damos à eles ferramentas minimamente decentes. Esses são problemas bem complicados, mas suas soluções são requerimentos absolutos para termos Docs. Caso a Documentação fosse trazida ao nosso site, no momento atual, sua interface rapidamente se reverteria ao inglês e isso é a última coisa que queremos. Continuamos trabalhando. A equipe de desenvolvimento tem algumas ideias sobre como oferecer uma melhor categorização de strings no nosso projeto. Nós, da equipe de comunidades, estamos pensando em formas de distribuir ainda mais a carga sobre os tradutores e revisores do site. Cada passo nos leva mais perto de termos um SOpt melhor, e mais perto de trazermos Docs até vocês. Antes, a pergunta era se teríamos Docs. Hoje, a pergunta é quando. Algumas estatísticas de Outubro/2016: Quem Ganhou Mais Medalhas (prata ou ouro) Marconcilio Souza: 5 medalhas Florida: 4 medalhas stderr: 3 medalhas Taisbevalle: 3 medalhas Perguntas Mais Votadas A primeira linguagem de programação Qual a diferença entre codificação, criptografia e cálculo hash? O que é uma condição de corrida? Perguntas Mais Visitadas no Meta Porque uma pergunta clara e objetiva que pode ser respondido em 2 ou 3 linhas foi fechada como ampla? Responder o que está na pergunta? e prever o futuro! Porque e que “Como iterar sobre um dicionário” foi fechada?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/11/15/how-we-make-money-at-stack-overflow-2016-edition/","date":"2016-11-14T23:00:00.000Z","tags":["Company"],"title":"How We Make Money at Stack Overflow: 2016 Edition","text":"I’m Nick Craver, and you may remember me from my posts about how Stack Overflow does deployment, how we do hardware, and how we built our architecture. What I haven’t explained yet, and what remains a mystery to most developers I meet, is how we make money. I want to do this now not only to answer this frequently asked question, but because it’s my and Stack Overflow’s belief that being relentlessly open and honest with our community can be nothing but good. That extends to normally sticky situations like finances, and it’s why we’ve created projects like the Stack Overflow Salary Calculator to make our salary processes transparent. Why We Make Money For a little more context on the timing of this post: I’m the architecture lead for Stack Overflow, and I’m writing this just after our annual company meetup. Our meetup is an awesome time for remote employees like me because I get to see people I’ve never met in person before and discuss ideas. Endlessly. It’s also a great reminder of why we do what we do and how we go farther when we work together. I’m coming up on 6 years of my life spent building what I consider to be the best resource developers have ever had. I love making it better, every day. But I don’t build these things alone. I am insanely lucky to work with some of the best developers, sysadmins, designers, managers, marketers, sales, and all of the people who support that in the world. I don’t build Stack Overflow. We build Stack Overflow. I spent countless hours last week talking with many of these people, some of whom I’ve never spoken to before, about how we grow as a company. Much more importantly, we’re figuring out how to do it while being, for lack of a better word, honorable. I have high standards for how we behave, and I hope that’s reflected in what you think of Stack Overflow. I am extremely protective of our users. You can ask anyone who works here. It’s is my very strong belief that we have a built up a trust with the community that is not easily earned and is impossible to replace. I want to work for a company that respects that trust, and I do. While this is a shared, company-wide belief, historically we’ve heard concerns about how we can both respect users and make money, or that the money is just this thing we do for our VCs or because we want to keep the lights on. We want to squash that perception. Sure, money is required for sustainability. But we’re here fundamentally to help users, and we exist because you decide to let us exist. That’s why we’ve structured our monetization into a cycle that continuously improves the community, and doesn’t treat our product processes like some sort of resource extraction. How much money we make is a direct proxy for how much we are helping our users. We focus on maximizing how we help users in order to make a great business. Very few companies have done this successfully, and we take great pride in the fact that we’re one of them. How We Make Money Stack Overflow Talent & Stack Overflow Jobs We help companies build their brand and source technical talent through our business products: Display Ads and Talent. These services in turn help developers find better jobs and also learn about companies in a way that is respectful to the user experience (no spammy inmail, no flash ads, etc.). We consider the developer experience in everything we do, which is what makes everything we sell as a company unique. It’s a lot like questions and answers. Companies are asking for developers, and we need experts to answer the call. In order for this to work, we need people on both sides of the equation. The more companies and developers we have, the better and faster the matching we can do with developers and hopefully their dream jobs. For companies, we aim to match them with a handful of candidates that are an awesome match, not 500 candidates that barely match at all. This is where we can provide value. We want to optimize things. We don’t want to waste your time or a company’s time – there’s so much inefficiency here we aim to improve with the whole hiring process. Our position is relatively unique because we can help both companies and developers at the same time. That’s not bullshit. I believe we can do this. I believe we can be better at it than anyone else. We’re already placing thousands of candidates in thousands of jobs, but there are many more thousands of jobs waiting for the right candidates right now. One step of improving that is our Developer Story. I helped build this because I think it’s an awesome way we can improve life over resumes and CVs. It helps developers show off who they are, the things they do, and (I hope) in an approachable way that’s maintainable. It also lets you find a job. If you’re looking, or even just curious, the more complete your Developer Story is, the better chance we have of matching you to the right jobs. If you have no interest in either, that’s perfectly okay too. While we’d love to help match you to a perfect company, we built both Jobs and Developer Story to support our core mission of serving ALL developers, including those of you who just don’t care about job searching right now. We’re working to change how companies treat developers not only through the standards built into Jobs (e.g. no spamming allowed), but also through our Developer Hiring Blog, which we created for the express purpose of improving employer and recruiter practices. And with Developer Story, we want to change the perception that developers are only as good as their last gig or a title. Developers are creators with stories to tell, whether that’s through code or blog posts they’ve written or individual teams they’ve served on or even what they’re reading right now. These products weren’t just launched to hit a bottom line; they were built to shift paradigms. Stack Overflow Ads We’re a major website, and our ads solution is a major player in how we survive. But we don’t want you to click on something you don’t care about. We want to give you something you want. Our goal is to give you something as relevant as humanly possible, and when that fails we’re trying to give you something as relevant as this sentient computer over here thinks is possible. I’m not sure if giving it feelings was a good idea, but we’ll see. Anyway, we’re constantly working on it. It’s our job to make the ads we need to survive also be as relevant to you as possible. We have brilliant people working on this, and a large part of it is all after an overall goal: understanding developers, so that we can serve you better. (So, how do we feel about ad blockers? We don’t care, and here’s why.) What are we doing with ads now? In short, we’re not adding more ads; we’re just improving what we have. We have a little more smarts about what technologies you, as a developer, like than most places do. We want to see what we can apply there to make ads always more relevant. It’ll take a little longer, but we also want to make ads load faster as well – that’s a bigger project. What we’re not doing is lowering the quality of our ads. Did you know we have a lot of unpaid inventory on Stack Overflow every month? Every time we display a “house ad” (which is what we call an ad for another site on the network) or a “community ad” (voted on by the community), we could display a paid ad. But we don’t. We don’t because if we don’t have anything even remotely good to show you, we shouldn’t. And we don’t want to use an automated system that selects some ads for us. We looked at this. It didn’t allow us the control we required to maintain the level of quality we want to maintain. We have intentionally left a lot of money on the table. Sacrificing quality is not what we want to be known for. We believe there are better ways. It’s important to know that the rejection of ads we could be selling came from our ad sales team. These are the people actually making money from selling ads. And they rejected the idea because they care more about what we’re doing and what you think of us than earning more money for ourselves. Do you have any idea how fucking rare that is? Our Talent sales team that faces employers behaves the same way. All of these people care about something bigger than themselves, and that’s why I love working at this company. We have a few ads that are loading slowly (thanks for the reports, meta users!). We’re tracking down the advertisers and figuring that out, helping where we can. That’s a complicated one due to how many people are involved, but we’re on it. Samo and I will be adding timing information to our sampling profiles for these items, so we can keep an eye on them in the future and alert on issues automatically. We believe ads that load slowly or are expensive diminish the user experience. Performance is a feature and anything on the page matters to us. I’m working with our ad sales team to ensure starting in January 2017, all of our advertisements will be HTTPS compatible. This is mostly the case today, but not guaranteed, and in the future we’ll enforce this. I don’t want them to be a blocker for anything. We’re about to move all Imgur images to https://, and enforce it. I’m also about to move all site logos and icons to https://. We’re working on that huge project… but that’s another (very long) post. Enterprise We’re going to spend more time developing Stack Overflow Enterprise. It’s starting to gather steam, and it’s another way we can help developers behind company firewalls and our company at the same time. We have a few full-time people on this to make it happen. Enterprise environments are somewhat unique and need some specific love. But, Enterprise is the same code base as stackoverflow.com. It’s the exact same git branch. And sometimes features for Enterprise are features for public Stack Overflow. For example, we’re looking at building a simple image proxy needed for HTTPS that’s just useful as an inside-the-firewall image host on Enterprise. Those client timings I mentioned earlier? Those will help us gauge bandwidth required for this adventure. It’s one big picture we’re building. Trust Making money at a company our size requires great marketing. But two years ago, I didn’t trust our marketing team. Why? Because it was brand new and I didn’t know them. I knew of other marketers and I had bad experiences. So my default assumption was roughly “all marketers are bad and want to abuse user trust for quick wins”. But it turns out that’s not true. Not here. I had to work with our team on several projects to overcome that prejudice and realize something simple: we hired some awesome marketers and they care about the same stuff I care about. Especially to Kaitlin, thanks. Our new team has put up with a lot of pushback and not fought about it. They showed us why these things are a good idea, and they convinced the smartest people I know on so many things. All of our teams know that the Stack Overflow community and its trust is the most precious resource we have. We want to communicate, not alienate. And only with users we think we can help. Yes, if we’re doing it right, sometimes these things will help us as a company too. I don’t see that as a bad thing. If we can grow the company, we can build more awesome things for the world. I have so many, so many things I want to build for you. Ask me about sticking Stack Overflow in a 2U server in Europe, Asia and South America to beat the speed of light sometime. I saw a presentation from Adrianna (our relatively new CMO) that blew me away. I hadn’t actually met her before her talk at the meetup, but it was a hell of a first impression. They have some awesome things in the works to help us with a unified brand. While watching her present, there was a lot of “why the hell didn’t we do that four years ago?” going through my mind. Marketing, like development, is mostly about connecting the dots. I have gone from dreading interactions with “the marketers” to looking forward to them. We’ve got smart, well-intentioned people who can really help everyone involved. I’m actually psyched now. Mini Case Study in How We Build Trust: Email Trusting each other and sharing values related to how we make money directly connects to how we build internal tools. Here’s the most recent example I can think of how trust is a required feature in all our products: So that Architecture team I run? We’re the team that coded a new email system to communicate with our users in a consistent way (with a lot of help). Why am I saying this? Because I personally went from 100% opposed to ever building such a thing to being onboard… if we did it right. By the way, it’s just me and Samo Prelog. “Team” is a pretty strong word. It’s kind of lying at that level. Should we call it a pair? We’re really just two developers forming a miniature Justice League. …anyway, email. What’s the first thing I specced? Opt outs. That’s the very first thing we built. That’s absolutely the most important feature to us. One-click unsubscribes and a landing page for that where you can opt out of everything was non-negotiable. It’s priority #1. I’m a developer who deleted their LinkedIn account over spam years ago. If you don’t want to hear from us again, that’s just fine. I’m sorry if we bothered you in the first place and appreciate any understanding of where we’re coming from. One of my biggest apprehensions is annoying our community. Worrying about that keeps me up at night. We are in the process of sending out an email now announcing Developer Story to the larger community in the hopes that we can help some percentage of developers. If that email is rejected, we’ll unsubscribe you. If you’re unresponsive to emails we send, we’ll unsubscribe you. If you mark it as spam, we’ll unsubscribe you. We want to be a good citizen here. Every new email, except for transactional emails like “Forgot your password?”, sent through this system will have three links at the bottom: a one-click unsubscribe, a direct link to manage all categories, and feedback. One of the reasons we built this system the way we did (which required a lot more effort) is that if a given provider didn’t work out (we’re using SendGrid right now, so far so good!), we could be damn sure that your opt outs were carried over. We didn’t want to risk annoying users who clearly tell us they’re not interested. While we only have one category at the moment (“New Features”), we plan on adding more. But, I’m not talking about adding new email in that. We want to move all of the existing emails like community newsletters (a completely opt-in thing, if you’ve never seen them) over to this new system so you can manage it all in a very simple way, with a one-click unsubscribe we know works. Our email preferences page is, to be blunt, a total disaster. This is an old artifact of growing from one site to many and it needs love. We have people working on that right now. One of our designers, Donna, is working hard to tremendously simplify this. There’s a lot of backend changes needed to support that unification and simplification. We hope to have one email address for a user and a single place you can manage all email that ever comes from Stack Overflow. If you are annoyed, it must take (at most) one to two clicks to unsubscribe from everything. All communication and interaction has to reflect our respect for you. If it doesn’t, we have failed you, and we have failed ourselves. Our mission is to improve life for developers. When I lose sleep, it’s often over worrying about this. We have to deserve your trust; we have earn it. If we add new categories of emails later (not just categorizing something we send today), existing users will not be opted in. Only new users will get defaults. We don’t want to be “that site.” I mean it. We intentionally designed the table schema around this. If you read our Developer Story email and don’t want one, that’s absolutely fine. I hope Stack Overflow serves you in other ways, and I appreciate your time. I hope other things like Documentation and ongoing Q&A improvements help make your life easier. It really is why we’re here. It’s why I’m here. How We Think About What’s Next There are so many things in my head right now. I want to put a time series database in SQL Server in a Clustered Columnstore. I want to test an idea we came up with at midnight to improve consumption of developer news. I want to build several data connections that are almost there for our internal teams to save them time. I want to do a thousand things. I’m also excited. I’m excited about the future of Documentation. I’m excited about Developer Stories. I’m revving to go. I want to get the money part of being a company out of the way so we can build all the useful things our communities want and need. I know we can do that, and in a good way for everyone. I hope you agree. I hope my ramblings helped out what it’s like at Stack Overflow, at least a little, at least for me. If we don’t agree, that’s just fine. If you have time though, I’d appreciate if you told me why in the comments so I/we can do better. Thanks for listening."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/11/14/stack-overflow-job-search-better-faster-stronger/","date":"2016-11-13T23:00:00.000Z","tags":["Company"],"title":"Stack Overflow Job Search: Better, Faster, Stronger","text":"Finding a job you love should be easy and hassle-free, which is how we built Stack Overflow Jobs: Personalized job matches, and no recruiter spam. We’re expanding our promise to users today with even more magic. Starting today, you can expect… Better filtering options: Developers can now filter by technologies, salary, experience level, company and industry. Faster search engine: When a user runs a search or performs an action, only specific sections of the page refresh, saving a second or two per action. Stronger and more specific job alerts: More filtering options allow developers to conduct better searches and set more specific job alerts. Sorting by best matches and salary: You’ll see the best matches at the top of your search results by default. You can also sort by salary and newest. Match Your Stack, Match Your Experience Work with what you know best. Our new technology filtering lets you to view jobs with tech you want to work with and exclude jobs with tech you dislike. You can now also filter by range of experience (e.g. student, junior, mid-level, senior, lead, and manager). Money, Money, Money & More We believe job seekers should be empowered with as much information as possible when looking for a job – especially salary. It’s why we built and are always improving our own salary calculator. And it’s why we want to put salary filtering up front for search. Salary filtering lets you set a minimum annual salary and choose among ten currencies (USD, EUR, GBP, CAD, AUD, INR, SEK, PLN, CHF, DKK). Want more than just cash on hand? Look for other things to sweeten the deal with our Perks filter. See which job listings offer remote work, visa sponsorship, or relocation. Companies You Love, Companies You… Don’t Our new updates allow you to see specific companies (like Stack Overflow) with open jobs or to exclude certain companies. You can also filter by industry. Get Alerts For Perfect Fits Along with all these new and improved filters to help you suss out specific criteria, we’re also giving you a way to set very specific job alerts, which you can receive daily, and match alerts which you can receive weekly. Find a Job You Love Now Curious? Want to try it out for yourself? Head over to Stack Overflow Jobs now to search, filter, and create alerts. Got questions? Leave comments for us on Meta. Our community’s feedback is at the heart of what makes our products like Jobs better, faster, stronger. <3"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/11/11/el-estado-de-stack-overflow-en-espanol-2/","date":"2016-11-10T23:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español #2","text":"!Seguimos compartiendo estadísticas interestantes del mes anterior! En este caso, llevamos en mente el mes de octubre. Les dejo con los siguientes numeros: Preguntas más respondidas: ¿Como agarro un JSon desde AsynTask en android? ¿Por qué es considerado una mala práctica utilizar variables globales? ¿Cómo mostrar productos relacionados en el carrito de la compra? Respuestas con más votos: Consulta sobre desarrollar una IA (inteligencia artificial) [cerrada] Hackeo de sitio web Porque no hay “clases” en JavaScript? La pregunta más visitada: Consulta sobre desarrollar una IA (inteligencia artificial) [cerrada]"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/10/26/why-stack-overflow-doesnt-care-about-ad-blockers/","date":"2016-10-25T22:00:00.000Z","tags":["Company"],"title":"Why Stack Overflow Doesn’t Care About Ad Blockers","text":"Hi! I’m Steve Feldman, Senior Ad Ops Manager at Stack Overflow. My whole life I’ve been fascinated by advertising. Even as a kid, I wondered what a company was trying to tell me by using one word instead of another in an ad. Over time, I developed a strong (read: subjective) opinion of what makes an ad ’good,’ and what makes an ad ’bad.’ It took me many years– in fact, it wasn’t until joining the Ad Sales team at Stack Overflow– to finally figure out that the common thread shared by the best ads is relevance. Maintaining that relevance is how we’ve managed to avoid one of the biggest issues facing publishers today: ad blocking. What’s the deal with ad blockers? At this point, it’s pretty clear that ad blocking is a big deal. A recent study suggesting the advertising industry is set to lose over $22 billion in 2015 alone as a result of ad blockers is setting off alarm bells. That is a LOT of money. Companies are scrambling to ‘fix’ the ad blocking problem, as active users of ad blocking utilities hits nearly 200 million. But it’s not just that tiny stop sign in the toolbar raising alarms. Apple caused a panic when they announced that iOS9 would permit the use of ad blockers, as many see mobile ads are an important piece of revenue for the industry. First, the ad industry went up in arms over ad blocking, offering suggestions like developing ways to deliver specific ads to users employing ad blockers. Then, they considered going after Apple when they announced iOS 9 would permit ad blockers. Later, they began asking users to turn off their ad blockers as a sign of good faith. That did not go so well for some. Finally, they prevented Ad Block Plus from attending an industry event. Through all of this, those of us at Stack Overflow sighed and shrugged our shoulders. Clearly, many in the industry just don’t get it. Publishers can’t win by forcing ads — especially low-quality ads — in people’s faces. But some in the industry do get it. Eyeo (the company behind Adblock Plus) outlined in their ‘Acceptable Ads Manifesto’ some strong ideas for how to improve digital advertising– not to mention the iAB’s L.E.A.N Ads program. While there is criticism for both of these solutions, the positive takeaway is that powerful organizations are finally moving toward addressing the problem. Reddit is proactive in their public outreach with their ads. Quartz is trying new and interesting ways to engage with users, to mixed reviews. I’m going to toot our own horn by saying that Stack Overflow started doing these things a long time ago via a numerous channels on our Meta sites for both Stack Overflow and Stack Exchange. Ads at Stack Overflow The display ads team grew from just two in 2012 to nine today. In that time, traffic on SO tripled, and sales have grown with it. One of the attractions for new hires on our team is the unique relationship we have with our users and the challenge that represents for a salesperson. We entered into an agreement with Stack Overflow users long ago that we wouldn’t subject them to low-quality ads. Think scantily-clad women selling flight deals, weight-loss supplement promos or wacky waving inflatable arm-flailing tube-men promoting car dealerships. But really: anything that doesn’t speak specifically to the Stack Overflow audience is not permitted. We also don’t accept rich media like animated ads, expandable ads, or video, which are the norm for most publishers today. This strict policy means we leave money on the table, but our team wants to protect Stack Overflow from those kinds of ads, as they run the risk of alienating that established trust. Salespeople and campaign managers on our team do much more than they do at other companies. They’re more involved with a campaign from start to finish. From explaining to a new client how reputation works to working with ad ops to suggest a shift to a new and popular tag like [tag:swift] because it is attracting many new users. This may seem irrelevant to the ad blocking debate, but it’s not. It encourages edification and awareness for people who otherwise would have little or none, which in turn breeds respect and appreciation. This works for a new member of our team much better than simply saying ‘Stack Overflow is important for reasons x, y, and z.’ And they grow to learn over time what IDEs and SDKs are, and it’s remarkable to watch. This acquisition of knowledge really just means that our team cares about keeping ads useful and relevant on Stack Overflow. We don’t care! The truth is: we don’t care if our users use ad blockers on Stack Overflow. More accurately: we hope that they won’t, but we understand that some people just don’t like ads. Our belief is that if someone doesn’t like them, and they won’t click on them, any impressions served to them will only annoy them– plus, serving ads to people who won’t click on them harms campaign performance. That focus on relevance and performance arrives early in the QA process. Whether it’s our sales people explaining that ads must have borders, or our campaign managers checking landing pages to ensure they adequately inform, we are thorough. An important part of the QA process is ensuring that not just the creative, but the advertiser is relevant to our audience. Every single ad to appear on any of our sites is vetted by the operations team. We check copy and content on the ads as well as the landing pages. What we repeatedly ask ourselves in this QA process is quite simple: is this relevant to users? ‘Kiss your hosting problems goodbye’ with a provocative image is not something we want on our sites, and I’m sure our users don’t either. The purpose of this heavy QA is to ensure that our users get the most out of their experience on Stack Overflow. The content* is helpful– why can’t the ads be the same? This ad tries to be relevant, but falls on its face. Also it’s fake. Sorry, future herpetologists. The Value of Valuing User Experience User experience is always on our minds. Indeed, others believe that putting user experience ahead of revenue is a path toward long-term growth for publishers. As the chief revenue office of The Washington Post said, “…the product experience has to be every bit as good as the content.” Our approach is in harmony with that belief, as we keep ads confined to certain areas, and we permit users to downvote or close ads that they don’t like.* This allows users control over their experience. QA, curating content and advertisers, and a consideration of the user experience have been successful tools preventing ad blockers from hindering our growth. The recent resizing of the sidebar from the non-standard, completely made up, for reasons unknown to us 220×250 to the industry standard 300×250 went through thorough research prior to launch. The problem boiled down to this: we wanted to increase the sidebar size, but wanted to ensure that the content wouldn’t be harmed in any way. Bret and the ad server team dug in and investigated screen size of every user across the Stack Exchange network and concluded that only about 2% of users would be affected by the change. As a result, we proceeded confident that our new increase in size would be a net gain for all involved. Stack Overflow’s mission to make the world a better place for developers remains a central tenet for the Display Ads team. Everyone on our team considers the impact on our users in most of our primary functions. This dedication to keeping content relevant and beneficial to users is what makes the Big Scary Ad Blocking Problem not so big or scary for us. We want advertising to benefit our users and be a resource, not an eyesore. We want advertising on Stack Overflow to be better for our users and advertisers than anywhere else. I’m proud of what we’ve accomplished so far, and I’m excited to see what’s next. *Special props to the sales support team, as they manage these functions but for the Careers sales team. This QA process used to go through the ops team on the Display Ads side, but it became too much for an army of two to handle. Sales support now consists of seven excellent support specialists."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/10/11/bye-bye-bullets-the-stack-overflow-developer-story-is-the-new-technical-resume/","date":"2016-10-10T22:00:00.000Z","tags":["Company"],"title":"Bye Bye, Bullets: The Stack Overflow Developer Story is the New Technical Resume","text":"If you write code, you know that you’re more than a list of places where you worked or went to school. However you got to where you are now, what should matter is what you’ve built, and what you can do. Whether you’re currently looking for new opportunities or not — and whether you’re active on Stack Overflow or not — your Developer Story is the best way to share whatever it is that you take pride in. It’s your story; tell it your way. Get yours today at s.tk/story. It only takes a few minutes, and you do NOT want some other joker snapping up the good URLs. Take it from me, stackoverflow/story/J@yH@n10n. Technology has evolved. Tech resumes? Not so much. The resume was invented by Da Vinci in the 15th century. It mostly served as a letter of introduction for traveling lords… and it hasn’t changed much since. What do you see when you scan the bold stuff on a resume? Employers, job titles, schools, and degrees. And a lot of small bullets. Plus maybe an other-stuff-intended-to-round-me-out-as-an-actual-human section at the bottom. In the roughly five centuries since resumes were created to help nobility vouch for roadbound gentry, they’ve stayed mostly optimized for one thing: conveying the importance of your pedigree. The emphasis is all on the seniority of your titles and how impressive your companies or schools have been. Which is a great way for some developers to put their best foot forward. Have a Masters in CS from Yalemouth? Cool! That’s one good signal. But it ain’t the only one. Heck, even politicians know that fancy schools are only one of many ways to signal potential: “It turns out it doesn’t matter where you learned code, it just matters how good you are at writing code.” — President Barack Obama Show, don’t just tell. Developers, fundamentally, are makers. Like designers… or architects… or jugglers! You wouldn’t hire any of them based on a list of titles or places they’d worked. (“Oh, a Senior Associate Juggler? Get her! I bet she can do those flaming sticks and stuff!”) So why hire a developer that way? Makers’ skills are conveyed by showing, not telling. Portfolios. Blueprints. This awesome juggling video. Be more than bullets: Your best work, front and center. The Developer Story lets you share what you’ve worked on by linking to actual features you’ve worked on, blog posts, or public code. Those things shouldn’t be described in the second clause of a tiny bullet, or relegated to the “Other interests” section of a resume, to sit unassumingly next to your second-place trophy in intramural tetherball. The Developer Story puts the work you’re most proud of where it belongs: at the grownup table, right alongside your roles or schools. No reputation points? No problem. Posting answers or contributing to Documentation is one way to build up public artifacts of your coding experience, but it’s not the only way. Your Developer Story lets you show off whatever you work on. So you’ll look good, no matter how much rep you have on Stack Overflow. Find a job you’ll love, on your terms. If you’re ready for your next challenge, the Developer Story makes it easy to learn about jobs that fit your personal criteria. And since developers are in demand, we know it’s not about finding a job — it’s about finding the right job. The same way Stack Overflow Q&A put the right answer right on top, when you fill out your profile, Stack Overflow Jobs shows you roles that match the technology or projects you want to work on. (Even if they’re not what you’re using today.) And we always put the developer in control. No spam, no BS. (Did you know that Stack Overflow Jobs actually penalizes blind messaging by employers?) And it’s 100% backwards-compatible with those crusty old resumes – it can still highlight fancy schools and fancy titles, and anything else you’d include on a traditional resume. So if you’re like me, and still just a little proud that you got off the waitlist and eked your way into a school above your intellectual weight class, you can still show off your alma mater off with pride. But don’t employers just want role, schools, and keywords? Nope. It turns out that they’ve just accepted that that’s all that they can generally get from a resume, leaving them stuck using “seven vs. eight years of JavaScript experience” to determine whom to interview. The employers we’ve shared it with love the way the Developer Story gives them real, tangible ways to understand what a candidate has actually worked on. It’s not just for developers who are job hunting. Happy at your current gig, but open-minded? According to our 2016 developer survey, 63% of developers aren’t actively looking, but are open to learning about new opportunities to level up. If you’re enjoying where you are, but open to finding that perfect new challenge, the Developer Story can help you keep an eye on what’s out there, and we’ll only send you the best opportunities that match your goals. Completely not interested in jobs, but proud of what you’ve made? Listen, I get it. I never want to leave my job. The Developer Story is for you, too. Like most people who make things, devs often like to share what they’ve built. So it’s designed so you can use it as your own “coding central,” even if you’re not job hunting. Just create a Developer Story, but set your job preference to “Not Interested.” You can share the features you’ve worked on, Github repos, blog posts, or even books you’d recommend. It’s your story. Tell it your way. Once your Developer Story is beautiful, let’s work on your wardrobe. We think one of the best ways to inspire other devs is by sharing some of the awesome stuff their peers are building. Or by showing a curious twelve year old what someone else who loves breaking machines can grow up to be. So, for the next two weeks, if you tweet a link to your developer story, and include the #mydevstory hashtag, we’ll enter in you in a contest to win one of two hundred gen-u-ine Stack Overflow tees (50 mens and 50 women shirts each week.) And don’t forget the link to your Developer Story – we need it to contact you if you win. Take a minute to start your story now. (We hope you’ll indulge our use of Rear Admiral Hopper’s incredible biography as a case study for the images in this post. You should not take this to mean that the Rear Admiral endorses Stack Overflow in any way. You can, however, take it to mean that we endorse her. Wholeheartedly.) Thanks to Abby T. Mars, Elaine Wang, Kaitlin Pike, Kit Carrau, Rachel Maleady, Taryn Pratt, and Tim Post for helping to improve this post."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/10/06/international-salaries/","date":"2016-10-05T22:00:00.000Z","tags":["Company"],"title":"International Salaries at Stack Overflow","text":"We got a great response to the initial publication of our salary calculator in July – over 100,000 people tried it out just in the first few days. Today we shipped an update to the calculator, which includes: International salaries Two new positions: Creative Director and Data Scientist 2016 market adjustment Skills now have a resolution of 0.5 (previously whole integer) Setting the US market salaries Our base salaries are updated once a year based on the best available information “market” rates. Sources we look at: Industry reports. We purchase salary data from a third-party, aggregated by job title. This gives us rough data for e.g. Software Engineers or Graphic Designers (though it isn’t specific to startups). VC surveys. All of our main VCs do yearly compensation surveys (which we participate in) and then share the aggregated data with us. This is our best survey data because it’s more specific to startups, though the sample size is smaller. Competing offers. For anyone hired in the previous year, we take into consideration any competing offers they received that they’re willing to share. Setting the international salaries (new!) As of 2016, we also benchmark international salaries. Our People Team (which I lead) researches and establishes a base salary in the local currency for each country in which we have a presence. This salary is determined the same way we do it currently in the US – by researching the appropriate market rate for the country. We anchor it at skill level 1 and 4 years of professional experience. We recognize that some countries have market salaries that are lower than the US – therefore when determining the local salary, we not only look at the local market, but also the “remote developer market” rate, i.e. the salary you would get if you were paid by a US company in USD. The international salaries are updated yearly. If we hire someone in a new country mid-year, we’ll research and establish the base salary then. Try the updated Stack Overflow salary calculator… Looking to work internationally? Stack Overflow Jobs has postings for developers in London, Amsterdam, Singapore, and more."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/10/05/el-estado-de-stack-overflow-en-espanol/","date":"2016-10-04T22:00:00.000Z","tags":["Company"],"title":"El estado de Stack Overflow en español","text":"Imaginen una comunidad en línea llena de gente, ideas, y posibilidades. Un lugar donde los usuarios vienen a ayudarse los unos a los otros para compartir su interés en algo que es muy importante para sus vidas. Imaginen una comunidad que se convierte en parte de la rutina diaria y ayuda a cada miembro a ser mejores desarrolladores al participar en discusiones interesantes. Si están leyendo esto, sabrán que no es cuestión de imaginarse un lugar así. Una comunidad como esta ya existe ¡y eres parte de ella! Todos somos parte de ella. Sabemos también que es importante el mantener a nuestra comunidad creciendo saludablemente. Lo mas fuerte que nos convertimos nos permitirá ayudar a mas personas. Este reporte es exactamente de lo que estamos hablando – una manera de echar un vistazo detrás de la cortina para ver lo que estamos planeando y pensando. Esta es una manera en la cual podremos compartir con ustedes algunos datos de importancia sobre nuestro crecimiento e impacto. Será una manera de contarles como va todo con la comunidad porque estos sitios son enormes y sabemos lo difícil que es el poder mantener todos los datos organizados. Compartiremos estadísticas interesantes con ustedes de mensualmente y pondremos el reporte aquí en el blog donde lo podrán encontrar fácilmente para leerlo y comentar sobre lo que vean. Pero, antes de comenzar, nos gustaría saber cuales pasos siguientes debemos tomar – ¿cuales estadísticas les servirá conocer? ¿Que les gustaría saber, conocer, platicar o leer? Tenemos algunas ideas que queremos intentar pero nadie sabe más que ustedes lo que la comunidad necesita. Denos sus ideas sobre lo que este espacio pueda ser e intentaremos soportar sus intereses de la mejor manera posible. Les dejo con algunos números interesantes para el mes de septiembre del 2016: Preguntas más respondidas: ¿Cómo puedo proteger mi código de robo? Python ¿Qué es mas eficiente if not == o if !=? ¿Cual es el mejor lugar para colocar los tag en html? Respuestas con más votos: Opiniones sobre uso de Ñ en nombre de variables en C# Guía de estilo para HTML, CSS y Javascript Coordenadas de la aguja del minutero La pregunta más visitada: ¿Cómo añadir mensaje de error en código jQuery?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/10/04/estado-da-pilha-internacional-outubro-2016/","date":"2016-10-03T22:00:00.000Z","tags":["Company"],"title":"Estado da Pilha Internacional – Outubro/2016","text":"Imagine uma comunidade online, repleta de pessoas, ideias e possibilidades. Um lugar onde pessoas se encontram, para ajudar umas às outras e dividir seu interesse em algo muito importante em suas vidas. Imagine esse lugar se tornando parte da rotina de cada membro, contribuindo para que eles aprendam mais sobre algo que eles adoram fazer. Imagine uma comunidade que incentive o debate, alimente a curiosidade e recompense a dedicação – não só com pontos mágicos de internet mas com algo mais concreto: o sentimento de descobrir algo novo, de alcançar um objetivo, de ir mais longe no seu aprendizado. Se você está lendo este post, é provável que não precise imaginar um lugar assim. Você já sabe que ele existe, e faz parte dele. Todos nós fazemos parte dele. Nós todos compartilhamos a responsabilidade de ajudar nossa comunidade a continuar crescendo, forte e saudável. O quão mais forte ela for, mais pessoas vamos poder ajudar. E é daí que nasceu o Estado da Pilha. Uma maneira de vocês poderem dar uma olhada nos bastidores e saber o que estamos pensando, quais são nossos planos e o que estamos fazendo parar apoiar vocês e todos as outras pessoas que chegam ao nosso site. Também é uma maneira de vocês poderem nos dizer como as coisas estão indo do seu lado, já que nossa comunidade é bem grande e não temos como estar de olho em tudo o tempo todo. Vamos sempre tentar dividir algumas estatísticas interessantes sobre o site, no último mês, mostrando o que aconteceu de notável no período. Tudo isso de maneira regular – provavelmente mensal – aqui no nosso blog. Mas precisamos da sua ajuda pra transformar o Estado da Pilha em algo que seja realmente relevante para a comunidade. Que as coisas que falamos aqui realmente sejam interessantes para vocês. Então… O que você gostaria de saber? Alguma coisa em especial que gostaria de ver detalhada aqui? Não importa se é sobre o plano do site à longo prazo, ou sobre alguma coisa que estamos fazendo no momento. O importante é que seja algo que vocês gostariam de saber sobre como os sites estão indo, e o que estamos fazendo. Nós temos algumas ideias sobre como usar este espaço, mas ninguém conhece a comunidade melhor que vocês. Então, deixe sua sugestão abaixo! Algumas estatísticas de Setembro/2016: Perguntas Com Mais Respostas Como obter valores únicos em um array JavaScript? O que significa o termo Fallback? Capturar Enter no IE usando jQuery Respostas Mais Votadas Como usar as tais tags semânticas? Como obter valores únicos em um array JavaScript? Por que é obrigatório implementar public static void main (String [] args)? Perguntas Mais Visitadas Divergência em criptografar e descriptografar em Java e C# algoritmo Aes Como obter valores únicos em um array JavaScript? Por que é obrigatório implementar public static void main (String [] args)?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/07/21/introducing-stack-overflow-documentation-beta/","date":"2016-07-20T22:00:00.000Z","tags":["Company"],"title":"Introducing Stack Overflow Documentation Beta","text":"Today – thanks to our amazing community beta testers – we’re shipping our biggest expansion to Stack Overflow since it first launched: Documentation. “Together, we believe we can do the same thing for technical documentation that we did for Q&A.” Documentation is community-curated, example-focused developer documentation, based on the principles of Stack Overflow. If you ever wanted to contribute to Stack Overflow but weren’t sure you could, now’s your chance to give back. Whatever technologies you work with, whatever your experience level, there will never be a time your contribution is more valuable than it is today. So, why will this be better than how documentation is today, exactly? Examples, examples, examples – show beats tell. In Stack Overflow Documentation, examples are the star of the show. Anyone can add one, so good topics will eventually have several useful examples. And much like answers on Stack Overflow, the most helpful ones will usually be voted up to be right on top.* It’s need-driven and self-healing. The best, most diligent technical writer out there still can’t beat thousands of actual users trying to learn a function or concept while writing real code. They’ll determine what topics or examples are needed most. And whenever something fails to explain something clearly, they can ask for it to be improved. It builds on what made Q&A work, but recognizes where it can be better: Familiar elements, so you’re not starting from scratch. Voting, requesting a topic, adding examples all mirror Q&A elements (voting, asking, answering) More emphasis on collaboration, and ensuring most developers can contribute. The more canonical nature of artifacts created means: More “shared” ownership of posts and more collaboration Small edits and contributions are encouraged Everything is reviewed by other helpers, so you can’t “break” the page trying to help More recognition for more people – More collaboration means more helpers need recognition. And documentation shares a feedback and reputation system with Q&A, so contributions to either earn you reputation and privileges on both. Your generosity, your content. All content is covered by the same CC-SA license that SO Q&A always used. And our regular data dumps will now include Documentation content. “Be Nice” still applies. We know that occasionally some folks can get a little prickly, but this is who we still are: Whether you’ve come to ask questions, or to generously share what you know, remember that we’re all here to learn, together. Be welcoming and patient, especially with those who may not know everything you do. Oh, and bring your sense of humor. Just in case. So, why does Documentation belong on Stack Overflow, exactly? Go back and read Jeff’s original introduction of Stack Overflow, you’ll find this pitch: [Stack Overflow] is by programmers, for programmers, with the ultimate intent of collectively increasing the sum total of good programming knowledge in the world. No matter what programming language you use, or what operating system you call home. Better programming is our goal. (emphasis mine) This was a great starting place, but over the years we’ve made tweaks as we’ve learned from the community – both from direct feedback on Meta and from observing how people use Stack Overflow. We learned that our Q&A works best when you’ve got a real problem, specific to the code in front of you. By coming to terms with that, and tweaking Stack Overflow accordingly, we’ve become much better at Q&A but have left some programming knowledge out in the cold. Documentation gives a home to a lot of this good content that has been turned away, or very hard to “get right” in the Q&A format. Namely, the canonical, general reference, instructional content. Once word got out Stack Overflow was expanding, the developers responsible for some of our favorite tech got a little excited. The Meta community got first dibs with the private beta, but now that Documentation is live on Stack Overflow I’m pleased to announce developers from: <partner pics!> </partner pics!> will be participating in Documentation right alongside the community. They’ll be watching to see what kind of great examples and documentation are created to inform their own work and help answer or clarify anything that needs it. They’re Stack Overflow users like everyone else, we’re all working together (to help developers everywhere), so you could see your change reviewed by a Microsoft-y or find a request from a Dropbox-er. Ready to help? Whether you’ve been posting on Q&A for years, or have always wanted to give back if you could, now’s your chance. Docs today resembles Stack Overflow Q&A was right when it launched – there’s a lot of white space to fill in, and plenty of chances to “actually write the book on” your favorite tech. Oh, and since we really want to use this launch to expand the Stack Overflow Community tent, we’ve got some silly/shiny fun to encourage folks to jump right in! All users who contribute to Documentation the next four weeks: Will get a silver “Documentation Pioneer” badge Will be entered in a drawing to win one of 100 Stack Overflow T-Shirts Let’s go build this thing together. Browse Documentation Take the tour Jump in and handle (or make!) requests for .NET Framework or C# Dropbox API PayPal PubNub Twitch Meteor Xamarin iOS or Android Twilio .. or browse all tags in Documentation We literally almost called this “Stack Overflow Examples”, but then we thought about having to constantly explain that it serves the same purpose as ‘Documentation’ used to, but we didn’t call it that because the important part* of documentation is the Examples, which are central to our thing. So we stuck with the term folks know."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/07/12/you-can-now-download-stack-overflows-2016-developer-survey-data/","date":"2016-07-11T22:00:00.000Z","tags":["Company"],"title":"You Can Now Download Stack Overflow’s 2016 Developer Survey Data","text":"Earlier this year we released the results of our annual developer survey. With more than 50,000 responses fielded from 173 countries, it was the largest and most comprehensive survey of the programmer workforce that has ever been conducted. Now, you can analyze this year’s and previous years’ results yourself by downloading the raw data from our brand new research portal. Our annual surveys ask developers what they’re up to, what tech they care about most, and what they want. This year, for instance, we found that JavaScript remains the most popular programming language in the world, 46% of developers don’t have a bachelor’s in computer science or a related field, and job satisfaction is highly correlated with pushing code to production. While we like to think we know software developers better than anyone, we’re eager (and curious) to see what you come up with in your own analysis of the data. The launch of our new research site means you can compare what developers have said about the state of the programming world and workforce since 2011. You’ll be able to answer questions about how technology preferences have changed over time, whether particular demographics correlate with certain developer job types, and even what programmers think of Stack Overflow. If you do find something interesting while digging through the data, let us know on Meta. And if you’re ambitious enough to make it an academic paper, we’d love to add it to our collection. Finally, if you’re curious about adding even more data related to Stack Exchange sites, check out our Stack Exchange Data Explorer, designed to make it easy to query and browse the public data we periodically release for all Stack Exchange sites. Happy data diving!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/07/07/una-receta-para-promover-nuestra-comunidad/","date":"2016-07-06T22:00:00.000Z","tags":["Company"],"title":"Una receta para promover nuestra comunidad","text":"Hablemos hoy sobre como promocionar nuestro sitio. Ya que estamos un poco mas establecidos desde que empezamos en Diciembre del 2015, necesitamos seguir creciendo con esta la dinámica cada día. Existimos para proporcionar el mejor contenido para desarrolladores globales de habla hispana. La cruel realidad es que todavía existen personas que no conocen sobre nuestra comunidad. Es por esto que debemos correr la voz para educar e interesar a gente que pueda ver el valor de lo que se ofrece aquí gratuitamente. Compartir preguntas y respuestas interesantes The mejor manera (y la mas fácil) de promocionar nuestro sitio es simplemente el compartir enlaces a preguntas y respuestas interesantes. La piedra angular, el sello distintivo, el fundamento de Stack Overflow es el producir Q&A del cual estamos orgullosos, el Q&A que vale la pena compartir con otros. Sabemos que lo siguiente es obvio pero así es como podemos obtener el enlace a una pregunta: copiar el URL de la barra del navegador. hacer un clic derecho en el titulo de la pregunta, seleccionar Copy hacer un clic en el texto “compartir” y seleccionar Copy Si necesitas un URL corto, recuerda que no se requiere mas que el numero de ID de la pregunta. Así que tienes: http://es.stackoverflow.com/questions/15144/mejora-para-el-factorial-en-rust Se puede reducir a: http://es.stackoverflow.com/questions/15144 y también a http://es.stackoverflow.com/q/15144 Un URL corto se puede también copiar del la sección “compartir” debajo de cada pregunta: Como pueden ver, el hacer clic en “compartir” da la opción de compartir en Google+, Facebook, o Twitter. Piensa en lo pequeño, se especifico Bien, tenemos la idea central pero falta desarrollar un poco más la estrategia. En vez de preguntar lo gigante, lo obvio, mejor preguntemos sobre lo mas pequeño. Empezemos con preguntas que sean mas fáciles de contestar, preguntas como estas: “¿Cuales son las 3 mejores conferencias que podemos patrocinar?” “¿Puede la comunidad Python soportar un ‘Dev Days’ como lo hace Stack Overflow?” “¿Cuales son los mejores 5 podcasts que se interesen en nuestro sitio?” Pero, no se detengan allí. Después de tener la primera ronda de respuestas, usen esas respuestas para continuar a preguntar con mas especificidad. ¿Alguien conoce a Miguel de Icaza para poder pedirle que nos hable por medio de su Twitter? Esto requerirá mas coordinación y disciplina que preguntar una sola pregunta y esperar que el resultado máximo aparezca. Se requiere que miembros individuales quieran preguntar preguntas especificas, con pasos distintos, con una meta en mente y después cumplir con los pasos. Se igualará el esfuerzo con fondos Cualquier comunidad que demuestre suficiente empeño e ideas innovativas para promover su sitio se le ofrecerá un presupuesto y recursos para ayudar a realizar esas ideas. Piénsalo como un sistema donde igualamos fondos, excepto que igualaremos fondos con innovación, recursos, esfuerzo, e ideas de la comunidad. Pero, tiene que nacer de su comunidad, ustedes son los expertos, no nosotros. El igualar los fondos con su esfuerzo asegurará que: Los recipientes están invertidos en el mejoramiento del sitio Las comunidades saben que sus esfuerzos regresaran para ayudar a mejorar el sitio. Aquí les dejamos unas ideas que hemos discutido por algún tiempo para su consideración: El patrocinio de conferencias ideales. Para la mayoría de las comunidades, estas serán 2 o 3 solamente. El alcance de publicaciones y bloggers ideales. Asegurar que los expertos clave sepan de nuestra comunidad. El patrocinio de cosas divertidas para cada comunidad – especialmente esas cosas que tendrán mejor probabilidad de ser compartidas por las redes sociales. Por ejemplo, concursos de fotografías para los sitios de cámaras o clases de cocina para los sitios de recetas o comida. El asegurarse que los evangelistas de cada comunidad tengan la oportunidad de hablar delante de los expertos de sus campos de interés. Animar y participar en conversaciones de base ya existentes – cuando sea apropiado. Tenemos acceso a diseñadores profesionales así que concursos o eventos donde regalamos calcomanías, camisetas, o otras cosas interesantes son posibles. Mencionamos estos ejemplos para ayudar a motivarlos a pensar en oportunidades y maneras de como se puede convertir este sitio en uno de nivel mundial. No se demoren por nuestra cuenta. Ustedes tienen que realizar el empuje inicial. Hay veces en que se necesita ser la voz activa y ser los que organizan los eventos. Hemos tratado con mucho, permítanme dejarles con dos puntos clave: Alienten a la comunidad a que compartan enlaces a preguntas y respuestas destacadas o excepcionales. Si existe el sentimiento que no hay preguntas o respuestas dignas de ser compartidas, se necesitara corregir eso primero. En cuanto a las promociones, **no intenten tomar al mundo entero”. Si las ideas que resultan son gigantes, están incorrectas. Se necesitara reducirlas a pedazos mas pequeños que cada miembro de la comunidad pueda ayudar a mejorar. Cuando una person le pregunta a un grupo grande de amigos, ¿Qué quieren comer? resultara una bola de indecision e inactividad. Mejor sera preguntar mas específicamente ¿Cual es un buen lugar para pedir una pizza? Se recibirá así una respuesta rápida y se obtendrá una panza llena en menos de 30 minutos. Esta publicación esta basada en esta escrita por Robert Cartaino."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/07/05/podcast-71-a-bunch-of-bald-yaks/","date":"2016-07-04T22:00:00.000Z","tags":["Company"],"title":"Podcast #71 – A Bunch of Bald Yaks","text":"Welcome to the Stack Exchange Podcast, recorded Tuesday June 28th at Stack HQ! Today’s podcast is brought to you by Eugene McCarthy for President, as well as by IBM. Try the new IBM Cloud Tools for Swift. New this week: one of those two sponsors is a real live sponsor. Bet you can’t guess which one! Anyway, your hosts today are joined by Daniel X. Moore and Gareth Wilson from the HyperDev team at Fog Creek Software. But before we talk to the guests, our esteemed hosts run through some interesting tech news. (Or maybe just tech news. -Ed.) First up: .NET Core! Microsoft is trying to turn a gigantic ship around toward open-sourciness and community-friendliness. (Said ship is apparently unrelated to the arm of Microsoft that forced you to upgrade to Windows 10.) Also: did Microsoft build their own version of Trello? You decide. And now it’s time for the first and possibly only but definitely first monthly One-Minute Tech Review with Joel Spolsky! This week’s OMTR is Wallcat. It’s free. You can install it. (If you know your Apple password.) It changes the background image on your computer every day! Amazing. Let’s turn from tech news to Stack news. What’s shipped since our last podcast? A new and improved Stack Overflow Enterprise! It’s for big companies with lots of proprietary code who want to run private Q&A for their development teams. Companies with 1000+ developers who want this can get it by sending an email to enterprise@stackoverflow.com. We updated the sitewide Terms of Service. It forbids companies from going onto Stack Overflow to scrape profile data, which protects our users from spam. Our guests have been waiting very patiently through all this, so let’s turn to them! Daniel X. and Gareth work at Fog Creek Software, the first company Joel founded. They’re currently working on HyperDev, the easiest and fastest way to get your idea developed and deployed on the internet. You can get an app up and running in less time than it takes to listen to this segment–without shaving any yaks. So go check it out! We talk about the story of the product for a long time before we remember to talk about how it actually works, but rest assured, we do eventually dig into that part. So what’s next for Stack Overflow? Running some tests on the /ask page. This hasn’t been touched since the dawn of time, more or less. The community has been discussing ideas here, so read up and weigh in! Documentation. We’ll cover this in more detail next podcast. And that’s it for this podcast. Thanks for tuning in!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/06/28/welcome-stackoverflow-in-russian-blog/","date":"2016-06-27T22:00:00.000Z","tags":["Company"],"title":"Добро пожаловать в блог сообщества Stack Overflow на русском!","text":"Всем привет! Рад анонсировать, что с сегодняшнего дня у нас появился свой канал в блоге компании на русском языке! Мы будем использовать его для всего того, чему ранее не находилось места на Мете. Ура! Да, еще вы можете подписать на RSS–канал блога: blog.stackoverflow.com/feed/ru"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/06/24/learn-more-about-your-site-with-the-se-data-explorer-heres-how/","date":"2016-06-23T22:00:00.000Z","tags":["Community"],"title":"Learn More About Your Site with the SE Data Explorer. Here’s How!","text":"Have you ever wanted to get a statistic about your favorite Stack Exchange site, but been baffled by exactly how to do that? The Stack Exchange Data Explorer (SEDE) may be just what you’re looking for. SEDE was created to make it easy to query and browse the public data that we release periodically for all Stack Exchange sites, but a lack of familiarity with SQL has been a barrier to many of you who would otherwise benefit from it. Now, thanks to friend of the company and moderator extraordinare Monica Cellio, you have a tutorial to guide you in using it! For the past several months, Monica—who writes documentation for programmers at her day job, and even holds a tag badge in technical-writing on Writers SE—has been spending some of her free time putting together a tutorial for people who are completely new to the Data Explorer or SQL. Thanks to her efforts, and those of another awesome community member, Tim Stone, the de facto maintainer of SEDE (and the SE election stats page), version 1.0 is finally live! This new tutorial introduces the basic concepts of relational databases, and teaches the fundamental SQL statements that go with them. Examples all use the design of the actual Stack Exchange databases. And for those who find themselves getting really interested, digging into more advanced queries and having some trouble, well, there’s a great place nearby to get help. About the Stack Exchange Data Explorer In keeping with our founding principles, all user-contributed posts are always available for reuse with minimal restrictions, and we even package up “data dumps” of all the content on Stack Exchange regularly for researchers and others who want to work with large chunks of the content. Of course, not everyone has the time or expertise to download massive data dumps and then install SQL locally or write custom code to get what they want. So we also provide a web UI to the same information: the Data Explorer. It’s essentially a publicly accessible copy of the databases behind the SE Q&A sites. It gets updated weekly with all the latest changes, minus a few sensitive things like users’ e-mail addresses and voting behavior. People have mined all sorts of interesting information out of SEDE. Ever been curious how much reputation you would have if the 200-points-per-day rep cap didn’t exist? Or wondered how true someone’s claim that “downvoters are ruining everything” really is? Maybe you have an idea for a new badge, and want to see how many people would meet its criteria before you propose it on meta. For all of these situations, SEDE is the answer. But even though SEDE is nicer to work with than a raw data dump, it can still be pretty intimidating to new users, especially those who aren’t trained database engineers. Up until now, the Data Explorer’s own help docs have been a little thin, and mostly covered very specialized, advanced features. We’ve wanted to expand the guidance there for a while, but never quite got around to it. Then Monica rewarded our procrastination by helpfully volunteering to take on the writing. So please check it out, try your hand at answering that question you’ve always had about your favorite site but never knew who to ask, and let us know what you think on meta. And again, a big thank-you to Monica and Tim for their work in creating this great guide!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/06/17/bienvenidos-al-blog-de-stack-overflow-en-espanol/","date":"2016-06-16T22:00:00.000Z","tags":["Company"],"title":"Bienvenidos al blog para Stack Overflow en español","text":"¡Bienvenidos a todos a nuestro blog internacional para la comunidad de habla hispana! Hemos creado este espacio para poder comunicar y ser más abiertos en como construimos Stack Overflow en español para ustedes. Aquí, trataremos diversos temas que no son adecuados para el sitio meta. Será un lugar donde podremos pensar en voz alta, compartir pensamientos espontáneos, o otras cosas por el estilo. Compartiremos información exclusiva que generalmente no se encontrará en otro lugar. Esperamos que nos sigan apoyando y se unan al nuevo blog de SOes. Empezando ahora, podrán las publicaciones más actualizadas a mano derecha del sitio. Podrán también comentar como en un blog normal. Por favor usen el siguiente enlace para suscribirse al RSS: blog.stackoverflow.com/feed/es ¡Nos vemos pronto!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/05/04/welcoming-stack-overflows-new-cmo-adrianna-burrows/","date":"2016-05-03T22:00:00.000Z","tags":["Company"],"title":"Welcoming Stack Overflow’s New CMO – Adrianna Burrows","text":"The Stack Overflow team is beyond excited to welcome Adrianna Burrows as Stack Overflow’s new Chief Marketing Officer. She’s an industry veteran of everything from global product launches to partner development and she is as laser focused as we are about empowering developers. We fundamentally believe that developers are writing the script for the future. The work that developers do every day is transforming industries and shaping the way we all live, work, and experience the world around us. We also believe the professional generosity of developers is unmatched; Stack Overflow wouldn’t be what it is today without the contributions of millions of developers and their desire to help one another while advancing the world’s collective programming knowledge. We’re thrilled we have a veteran storyteller like Adrianna on board to help us show the world just how important we believe developers really are and what we’re doing as a company to support them. Beyond Q&A, developers can go to Stack Overflow Jobs to find opportunities targeted to their interests while connecting with recruiters (no spam allowed). We also want to make sure businesses know that the best place to source technical talent and gain insights about the developer community is through Stack Overflow Careers. We have a ton of exciting products on our roadmap, all of which support our mission to help developers learn, collaborate, and advance their knowledge and careers. Adrianna will drive our global branding, communications, digital marketing and demand generation – basically raising awareness about Stack Overflow and sharing with the world the industry-changing work being done by the Stack Overflow community. As part of her responsibilities, she’ll join the Stack Overflow executive team, helping support our continued expansion into services that make developers’ lives better. Please join us in welcoming Adrianna to the Stack Overflow team!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/03/17/stack-overflow-developer-survey-results/","date":"2016-03-16T23:00:00.000Z","tags":["Community"],"title":"2016 Stack Overflow Developer Survey Results","text":"Here at Stack Overflow, everything we build is done with the same single-minded, compulsive, fanatical obsession to serve programmers. We’re a community built by developers for developers, and each month, we serve 40 million coders looking for answers to their most pressing questions. Because of this, we like to think we know software developers better than anyone — and we have the data to back up that claim. Each year since 2010, we’ve asked developers what they’re up to, what tech they care about most, and what they want. With more than 50,000 responses fielded from 173 countries, this year’s Stack Overflow Developer Survey is the largest and most comprehensive survey of the programmer workforce that has ever been conducted. View the full results here. Key Findings on Technology: JavaScript remains the most popular programming language in the world. React is the fastest growing technology on Stack Overflow. Swift is exploding too, and Objective-C is in decline. Rust is the most-loved programming language. A higher percentage of developers who program with it want to continue to do so more than any other programming language. Visual Basic is the most dreaded language. A higher percentage of devs who program with it don’t want to continue with it more than any other programming language. Key Findings about Developers at Work: 91% of developers in the workforce are “gainfully employed” either full-time, self-employed, or freelance. 46% of developers don’t have a bachelor’s in computer science or a related field. So if you’re an employer requiring one of these degrees in order to consider a developer candidate, you may want to reconsider your strategy. Developers just want to code. Job satisfaction is highly correlated with pushing code to production. And 57% of developers told us they check-in or commit code multiple times per day. Make it rain! Cloud technologies like Spark and Cassandra pay better than anything else. The median salary for developers in the US who know Spark is $125k, and there are plenty of cloud devs who are making a lot more than that. (And remember, you can find jobs in Spark on Stack Overflow Jobs!) Don’t call programmers “rockstars” or “ninjas”. Only about 10% of devs call themselves ninjas, and 7% consider themselves rockstars. Thank you to everyone who participated in our survey and shared information about yourself. We’ll be releasing the full data set in just a few weeks. Do you have ideas for what we should ask about next year? Tell us in the comments. Oh, and one more thing. Here’s the answer to how many pennies were in that piggy bank."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/01/12/year-in-review-2015/","date":"2016-01-11T23:00:00.000Z","tags":["Community"],"title":"Stack Exchange Year in Review 2015","text":"I think we have to enjoy what we do if we are to succeed.—John Wooden Looking back on the past year across the network, it strikes me that we are very fortunate that so many people take pleasure in sharing their knowledge with others. Everything we (as a company and as a community) accomplished was made possible by that singular reality. Since last year’s report, we changed our company name (back) to Stack Overflow and got an epic new logo. Partly it’s simple branding; causal visitors recognize Stack Overflow and other individual sites rather than the network as a whole. Another reason reflects the reality of our (current) goal: building programmer Jerusalem. This year alone users asked 2.5 million questions and contributed 3.2 million answers on our flagship site. People gave out 16 million upvotes last year and for the fourth straight year more than a million questions were answered to the askers’ satisfaction. That’s a lot of programming puzzles solved. Not every post started as a gem of perfection (there were 2.3 million downvotes), but nearly 10 million comments and 3.4 million edits sorted many of them out. (These statistics come from public data. Feel free to look up the results for your favorite site.) Nearly two years ago we expanded the Stack Overflow community beyond English. This year the experiment paid off: Stack Overflow em Português graduated from beta status. Building on that success, we started a Japanese-language Stack Overflow, absorbed a Stack Overflow in Russian, and Stack Overflow en Español began its beta. Non-English Stack Overflow sites collectively field 159 questions per day. None of this activity seems to have come at the expense of the English site—people just enjoy sharing knowledge using the language in which they are most comfortable. Have you ever looked at your digital collection (books, movies, music, games and so on) and realized you have titles you’ve never consumed and don’t even remember obtaining? Stack Exchange is like that except all 150 communities prove to be amazing. As a Community Manager, I’m obviously biased in my evaluation—except the quality of these sites has almost nothing to do with us. Instead credit goes to the thousands of core users who write posts, improve them and vote up the best content. Excluding Stack Overflow, users asked 967,039 questions and provided 1.3 million answers. Over 4 million comments helped clarify those posts and people submitted 1.6 million edits. There were 7.1 million upvotes and 1 million downvotes to rank posts and reward authors with reputation. In addition to the 3 million reviews completed on Stack Overflow, 1.5 million posts were reviewed on other sites. Askers “accepted” 402,647 answers as particularly helpful in 2015. Answers don’t just benefit the people who ask the questions either. Last year the Stack Exchange network (including Stack Overflow) racked up 8 billion page views. Nearly all of that traffic came from people searching the internet at large and discovering an answer on the network. Quantcast ranks the stackexchange.com domain (excluding the trilogy and sites with custom URLs) in the top 50 US sites. In order to handle that much activity we need a massive data center, right? Well, not really. After serving faithfully for four years, we upgraded the hardware in our “New York” data center. Instead of failing over to our backup data center in Oregon (which was moved to Denver in June), the Site Reliability Engineering team updated hardware live. This requires careful planning and plenty of redundancy: 11 web servers, two SQL clusters, two Redis servers, etc. Most of the time those machines run at single-digit CPU load. We expect the new hardware to keep up with the load for the next four years. We used to joke that all of our sites should be named “$topic for programmers“. But as sites and the network mature, that’s getting less true. Last year the network expanded to 17 new topics, including Woodworking, Music Fans, Health, and Law. Instead of renaming to Stack Overflow, we could have gone with Socratic University: there just aren’t many topics you can’t ask about. Several of our sites, especially the mathematically oriented ones, boast serious academic chops. Papers regularly cite posts from Theoretical Computer Science, Mathematics, MathOverflow and Physics. A tiny sample of the smörgåsbord of tasty content posted last year: Gaming wins the title of most viewed question with: How do I deliver a baby? Presumably a fair number of the 867,960 views were to figure out what game the question is about. Why does “effective. Power” text crash the iPhone OS? (Apple, 448,473 views) How to disable the “Get Windows 10” icon shown in the notification area (tray)? (SuperUser, 416,421 views) The top voted answers? New warnings in iOS9 (Stack Overflow, +812) On OS X, why does sudo ls show hidden (dot) files? (Super User, +378) Leaving intentional bugs in code for testers to find (Programmers, +374) The top posts by anonymous feedback: Is it ‘OK’ to use the root user as a normal user? (Apple, +783) How to make Windows 10 File Explorer open “This PC” by default? (Super User, +693) How do you raise an intelligent and happy daughter in a sexist world? (Parenting, +353) The community team used to imagine that we could individually evaluate every site in detail. But even after hiring four more people we just can’t scale as quickly as the network has. Fortunately, our subjective evaluations of Stack Exchange sites, small and large, show they’re exceptionally committed to quality. As a result we’ve switched to objective site evaluations (Daniel Kahneman would be proud) and graduated a record number of beta sites: ExpressionEngine Movies Chemistry Stack Overflow em Português Biology Network Engineering Cryptography Code Review Stack Overflow на русском Raspberry Pi Our designers worked with each of these communities to come up with pleasing designs that fit the aesthetic of each topic. In addition, WordPress Development and Skeptics got beautiful redesigns. Additionally, most sites were updated to use the Less preprocessor, polished for higher-resolution monitors and have new profile pages. This very blog got an overhaul too. We’ve been hiring designers, but not as fast as our sites are growing. So the following sites elected moderators while awaiting their designs: Blender Computer Science Anime and Manga Magento English Language Learners Japanese Language and Usage Software Recommendations Musical Practice and Performance After five years of democratically electing moderators, it’s mind blowing that Stack Exchange is still the only major network (with the notable exception of Wikipedia) that embraces this form of self-governance. It’s a strategic advantage we wish more internet communities would adopt. We simply cannot thank our 476 volunteer moderators enough for their patience and dedication. At “Stack Exchange, Inc doing business as Stack Overflow”, we think of our communities as our partners. The company’s responsibility is to provide our users with the very best platform for helping each other and creating lasting artifacts. This year, we plan to roll out some mighty big changes that we expect will improve the lives the world’s software developers. (If you are a programmer, please take our survey to help us know how to serve you better.) As with Q&A, we intend to open these features up to other domains as makes sense. We aren’t finished with our existing products either. Each week, the community team asks our developers for three or so improvements often selected from the various Meta sites in the network. Some of them are small, such as allowing privileges links to be clicked without JavaScript. But we’ve also fixed highly upvoted requests such as preventing canonical questions from being deleted. JNat put together a report describing the 75 requests directly benefiting either the community or moderators. He also reports 433 community-requested features and 1,267 community-reported bugs were marked as completed in the year. Our users pay attention to these changes too. Feedback, whether encouraging or critical, reminds me that what happens on Stack Exchange matters to the daily lives of folks around the world. That enthusiasm and industry made 2015 our most successful year (so far)."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/01/07/podcast-70-david-was-wrong-and-jason-was-right/","date":"2016-01-06T23:00:00.000Z","tags":["Company"],"title":"Podcast #70 – David Was Wrong & Jason Was Right","text":"Welcome to the Stack Exchange Podcast episode #70! Today’s podcast is brought to you by the BB-8 droid. Today your hosts are joined by developer Jason Punyon, whom you may remember from way back in Podcast #21. Punyon works out of balmy Buffalo, NY. (Here’s the Buffalo sentence they talk about for a weirdly long time.) Punyon started working at Stack Overflow on the Careers team in June 2010 (back when Careers developers were devalued associates). His interview process involved a party and a change of pants. You should listen. So why are we having Punyon on the podcast, anyway? Because of Jobs on Stack Overflow. (We talked about this last podcast, too, and Donna wrote a blog post as well.) And now, a story about how David was wrong and Jason was right! Basically, we made a wrong decision a long long time ago and built Careers as a completely separate application. When at last we decided to fix this, we thought it was more or less insurmountable, or that it would take years. But then we had our annual company meetup at a hotel in San Diego with weird showers (take our word for it) and everything changed forever… because Dalgas and Punyon put their heads together. The summary: Careers is putting on a Stack Overflow outfit. (Jason does a better job of explaining it, don’t worry.) Then Punyon went home and crammed years worth of work into a week. At least that’s how I think it happened. It’s live for everyone now, and you can go look at it, and it probably won’t break because we did a lot of work to make it perform better for Stack Overflow’s scale. Anyway. It’s here: http://stackoverflow.com/jobs. Lest we make it sound like Jason singlehandedly shipped Jobs on SO, David made him recite the list of his co-conspirators from memory: Donna, Dalgas, Nick Craver, Dean Ward, Kirti Thorat, Nick Larsen, Roberta, Ana, Shog, Mike McGranahan… and if you worked on this but aren’t listed here you should go yell at Jason and not me. Anyway, this was a cool project for Jason, who spends most of his time interpreting whale songs (which is apparently what the data team does). It was also cool because he gets to ship it and immediately run away to parental leave – babby #2 arrives on January 8! Congratulations, Punyon family! So! Is there anything else going on? There was some kind of bash going on at the time of this recording. A Winter Bash, you might say. Also, Stack Overflow en Español is in beta público, Stack Overflow на русском is graduating, and Stack Overflow スタック・オーバーフロー is continuing to flourish. And check out the new design on the Raspberry Pi site! Thanks for joining us for Stack Exchange Podcast #70. See you next time!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2016/01/06/winter-bash-2015-hats-off/","date":"2016-01-05T23:00:00.000Z","tags":["Community"],"title":"Winter Bash 2015: Hats Off","text":"And here we are again, at the end of another Winter Bash, the annual Stack Exchange celebration where the hats are made up and the points don’t matter. Who Wore It Best? Most of the fun of Winter Bash is, of course, seeing the actual hats on avatars. So let’s kick off with some pictures! And a very honorable mention to Role-Playing Games SE’s BESW for taking the Timey Wimey hat and really running with it! Numbers, We Want Numbers! The most commonly awarded hat this year was, of course, Every! Body! Gets! A Hat!, the hat that was automatically given to all Winter Bash participants on a site once any 20 hats were unlocked on that site. A total of 99,388 of them were distributed across the network, to 70,103 unique users. Sadly, that means the hat didn’t quite live up to its name, and a couple thousand people did not get to look like Oprah… or sport fabulous mustaches, like this fancy gentleman: Congratulations to Mathematics SE for being the first site to unlock this hat, less than 18 hours into the event! Also to Code Review SE and Blender SE for technically needing only three users each to get this hat (i.e. at the time that the hat was earned, one user had 16 or more hats, and two other users had enough hats that the first user didn’t, filling the number up to 20). The biggest “team efforts” occurred at Aviation SE and English Language Learners SE, on each of which ten users came together to get the site past the 20-hat mark. All in all, 90 communities managed to “get Oprahed.” Not surprisingly, the next-most-common hats were “participation hats,” given for doing little more than showing up on a given date: A New Hope was earned the most total times, at 35,329, but Sufganiyot was earned by the most distinct people, 27,050. The most common hat for an actual achievement was Cerro de Potosi, with 21,720 awarded users for earning silver badges; fortunately, our badges don’t require any destructive real-world silver mining. Actually, more people earned silver badges during the event than visited on Christmas; Cerro de Potosi edged out O Tannenbaum, which was earned 20,104 times. Many Explorers (4285, to be exact) used Winter Bash as an opportunity to venture to new sites, where they were welcomed with upvotes by the natives. Some 1994 of those natives may have been designated Greeters as a result. On the other end of the spectrum, the rarest non-secret hat was Living in the Future, which only 42 people earned, and nobody got more than once. It was doubly challenging, requiring users to have learned enough to solve their own problems and preventing them from custom-designing questions for the purpose of the hat by requiring the question to predate Winter Bash. People were much more likely to close questions than to reopen them, with 10,015 Melpomenes going out compared to just 1556 Thalias. However, given that the only questions that can be reopened are those that have been closed in the first place, and that many closed questions never get improved to a point where reopening is appropriate, that’s not a bad showing. While many users enjoyed playing along casually, there was a strong corps of “power users” as well, as evidenced by the numerous awards of Specialist Hatsman (earned 1911 times, for earning 11 other hats; a play on “specialist batsman” from the game of cricket) and Fan-hat-ic (earned 20,469 times, for visiting on ten consecutive days; a play on our badge “Fanatic”). Do You Want To Know A Secret? Do You Promise Not To Tell? Well, actually, at this point, you can tell. There were a total of 13 secret hats this year (or 14 if you count the white and blue Flip Flop variants separately… which is highly recommended, because it results in an even 42 hats for the year). The first one awarded, and first one the community figured out the trigger for, was Odinson. It ended up being awarded 1817 times, and was triggered by closing a question as a duplicate using the “dupe-hammer” privilege or voting to close a question as such that was later closed by hammer. The first user to correctly explain Odinson was Undo. In doing so, he earned himself a second secret hat: Archimedes, the hat given out for correctly identifying another secret hat’s trigger. Veteran Winter Bashers may remember it being called Eureka in past years. This year’s only manually awarded hat, it was earned by 18 people. Next to fall was Hairboat’s Revenge, which was given to any user who replied to everyone’s favorite Community Manager, Jon Ericson, by answering one of his questions, commenting on one of his posts or replying to one of his comments. A total of 516 users did this, and it was apparently so fun that many did it on multiple sites; the hat was given out 614 times. Soon afterwards came 007, for posting an answer that received 0 comments to a question that had 0 comments and reaching a score of at least 7 for the answer. A simple reward for posting a good, clear answer to an equally clear question, it was awarded 402 times. The final secret hat to be deciphered on day one of the event was Sun Wukong, for posting a meta question or meta answer that attracted at least five upvotes and at least five downvotes. It was a lightweight test for a moderately popular old badge request, and it was given out 165 times. Day two kicked off with a team of users solving Amazing Grace, another nod to one of our favorite people. By asking a bug-tagged question on a meta site, scoring at least 10 and attracting an answer that also scored at least 10, users could make themselves look like Admiral Hopper. This was one of the rarest hats, as only 30 people earned it (32 total times). Returning to the realm of fantastical headgear, users could get It’s Over 9000! for racking up a total of 9000 views across all of the questions they asked during Winter Bash. This turned out to be another hard one; only 48 people did it, and nobody managed it on more than one site. After that, things quieted down until Friday, when It’s Always 5 O’Clock Somewhere first appeared. It was awarded for asking a question at exactly 5:01 pm on Friday, though it didn’t have to be 5:01 in your local time zone, just at some standard time zone currently in use in the world. It was earned 170 times, by 167 users. That was followed by another break, and then the arrival of the Flip Flop hat(s), triggered by posting or voting on Dec. 22 (the solstice). As expected, it was a pretty common one; 17,531 users got the blue and black version (13,489 distinct) while 17,446 got the white and gold (13,112 distinct). It took until nearly the end of the event for three more secrets to be cracked. Flying Tiger was a successor to last year‘s Red Baron. The original trigger was to find a question with a score of -3 or lower, post an answer that reached a score of 5 or better, and bring the score of the question up to 3 or better. This year, the trigger was the same, except that your own votes didn’t count. Because of the natural difficulty of the hat and the late date at which the community realized the trigger, only 11 were earned (all by different users), making this the rarest hat in the history of Winter Bash! Next up was Cleanup Crew, which probably produced a greater variety of trigger theories than any other hat this year. It was earned by deleting ten of your own comments that were left under someone else’s post, before the author edited the post. In the end, the crew was 195 users strong, though a few of them pulled duty on multiple sites, bringing the total hat count to 198. The last hat to be successfully solved, Edward Edwards, was awarded to users who won a bounty even though a competing answer had already met the criteria for the bounty to be automatically awarded. This was another uncommon hat, with 47 going out to 47 people. And now, what you’ve all been waiting for: the mystery of the Onion Knight, revealed! This hat sparked debate almost immediately, with most people split between whether it referred to the Final Fantasy job class or the Game of Thrones character (and a couple people piping up for a Dark Souls NPC). Who was right? None of them! A hint midway through the event directed guessers to focus on the word “onion,” but it probably should have done a callback to 2009 and prodded them to do so “as a programmer.” The hat was meant to make people think of Tor (now a proper name of its own, but originally an acronym standing for The Onion Router), and evoke the concept of anonymity. Users who received the Onion Knight hat posted questions that received at least three anonymous feedback pseudo-upvotes from visitors who did not have full voting privileges on the site. There ended up being 369 Onion Knight hats, awarded to 361 distinct users. Mad Hatters Finally, even though it’s not a competition and the points don’t matter, this post couldn’t be complete without declaring some winners. This year, nobody earned all of the possible hats, but three people tied for “most hats” at 39 each: Thanks to everyone who got involved for another fun year! For those who are especially interested, I’ve posted additional statistics and analysis on Meta Stack Exchange (along with more screenshots). Here’s to a great 2016! Tags: winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/12/23/stack-overflow-gives-back-2015/","date":"2015-12-22T23:00:00.000Z","tags":["Background"],"title":"Stack Overflow Gives Back 2015","text":"It’s that time of year again — a time when we reach out beyond the Stack Exchange community to remember the organizations and people who desperately need our help. Each year, we set aside this time and offer to make a $100 donation to charity on behalf of each moderator representing their community. We’ve been doing this since almost the beginning of Stack Overflow; and still, when the call goes out to our Moderators — ”Make your charity selections now!” — the outpouring of enthusiasm for giving back grows stronger with each passing year. It is a precious gift to have the means of helping someone who desperately needs it. Whether it’s an organization providing clean water, a warm blanket, or a light in the dark for families fleeing violence; these charities make it possible for another year of school in a war-torn country, while others are defending our very way of life. There is a lot of emotion and heart-felt concern in deciding which causes most need our help each year. And when violence rocks our biggest cities and millions of refugees have nowhere to go, moderators coming together to “give back” takes on an especially meaningful tone. But came through, they did! This year, on behalf of the 483 moderators of Stack Exchange, we were able to make the following donations to charity: Charity Donation UNICEF The United Nations Children’s Fund provides long-term humanitarian and developmental assistance to children and mothers in developing countries (unicef.org) $5,500.00 International Rescue Committee Responding to the world’s worst humanitarian crises and helping people to survive and rebuild their lives; at work in over 40 countries, more than 90% of every dollar goes directly to help refugees in desperate need (rescue.org) $6,900.00 Girls Who Code Working to close the expanding gender gap in technology and engineering, Girls Who Code provides unparalleled computer science education to equip girls with the computing skills needed to pursue 21st-century opportunities (girlswhocode.com) $9,500.00 Electronic Frontier Foundation Defending your rights in the digital world (eff.org) $12,100.00 Doctors Without Borders An international medical humanitarian organization created by doctors and journalists (doctorswithoutborders.org) $14,300.00 TOTAL $48,300.00 And on behalf of our engineering and IT team, we also like to remember the organizations and tools that make what we do possible: Organization Donation Git and the Software Freedom Conservancy $1,000.00 HAProxy $1,000.00 jQuery Foundation $1,000.00 OpenBSD $1,000.00 SQLAlchemy $1,000.00 We are immensely grateful for the incredible year we’ve had at Stack Overflow. Stack Exchange was conceived out of a crazy idea that people would be inspired to create and share information online in the spirit of peers helping each other — and to see that kind of passion spill out into the real world to help others overcome real adversity is truly heart-warming. With the holiday season upon us, it is a good time to reflect on what we’ve accomplished this year. With almost 100 million users visiting us each month, we are literally changing the way people work and learn. Our fellow community members are generously contributing their time, their passion, and their leadership to make these sites worth visiting and participating in. So as we enter this new year, let’s tip our glasses and make 2016 the year to share in our good fortunes. It’s a year of new beginnings… so set aside some time to learn something fun, take pride in what you do, work because you love it — and most of all… enjoy! Cheers!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/12/21/bringing-jobs-to-stack-overflow/","date":"2015-12-20T23:00:00.000Z","tags":["Community"],"title":"Bringing Jobs to Stack Overflow","text":"TL;DR: We believe that all programmers need and deserve jobs they love. Last week, we added a Jobs tab to Stack Overflow in order to help you do just that. What’s changed? You’ll no longer need to login to a separate account on a separate site in order to use Stack Overflow Jobs. This means that the family of products we’ve built with the goal of improving programmers’ lives – Q&A, Jobs, and soon-to-be Documentation – will live side-by-side on Stack Overflow. Tim has already summed up the problem that this decision was designed to solve: Many of you reading this have great jobs that you love, but many more do not, and don’t realize that Stack Overflow has a product that could help get them a much better job. Some might have poked at it, but got lost in the hassle of having to sign up all over again and tell us things they thought we already knew about them. I already have a job I love. Why should I be interested? You don’t have to be. In Tim’s words, this is our attitude toward bringing Jobs to Q&A: It’s all there when you need it. For many users, it should be a lot easier having all these things in one place. For those who only choose to use Q&A, or Docs, the rest will be waiting patiently out of the way. If you are interested in a new job – and based on an experiment we ran earlier this year, we learned that 40% of you are – we’d like to help you. Because even though the demand for skilled programmers is on the rise, only 1 in 3 of you told us “I love my job.” In the last few months, we’ve focused our efforts on several key features designed to help you land the job you love. 1. Better job matches About a year ago, we began a long-term experiment that used our machine-learning technology to surface more interesting jobs to our users. This drove a 40% increase in overall applications, which was awesome – it meant that we were making it easier for you to find and apply to jobs you found interesting. This experiment taught us that we can help the programmer community by showing relevant jobs without asking anything of the user. But how could we make the experience even better? What about specific criteria that you’re looking for? How could we better empower you in your search for not just a job, but the right job? We believe that we can serve up even better jobs if we allow you to define your own preferences for important things like tech you’d like to work with, where you’d like to work, and desired compensation. Our matching algorithm uses this information to sort the latest jobs for you, putting the best matches on top. To start seeing jobs that match your criteria, just login and visit the “matches” tab. 2. Better job listings Last year, we asked you what you care about most when looking for a new job – and this is how you responded: We’re working hard to get more companies to provide this info in their job listings. So far, we’ve focused on tech stack – and today, about 80% of our jobs offer tech stack data. Now we’ve set our sights on compensation. Currently, about 30% of our job listings provide compensation data – but we’re working hard to bring this closer to 100%. 3. No recruiter spam If you’re a programmer, you’ve probably never tweeted this: Because chances are high that you’ve received a message like this: My associate forward me your contact info. and the hiring VP of Engineering is interested in your technical background for a senior position. The company I’m working for is very successful, profitable and well funded by several top VCs. Also can you please email me your current resume in word so I can forward it to the hiring VP of Engineering so he can review it, the resume he has is a bit dated… The compensation is excellent with great stock options, bonus, 401k and comprehensive package. I can call you with all the details on the position and company, please let me know the best # to call you at. We’ve taken a few measures to help ensure that Stack Overflow users only receive personalized, high-quality messages from companies – and of course, only after you’ve given us explicit permission. Our Job Search Status feature gives you full control over who is allowed to talk to you, whether you want to hear from companies right away or not at all. We limit the number of outstanding messages that a company can send. This feature helps us control generic, copy-and-pasted messages to candidates, while encouraging companies to send messages that are relevant to the unique interests and background of each user. We refund company subscriptions when we receive reports about bad behavior, and all of our job listings are required to disclose a company name. Furthermore, we seek out opportunities to work with developer-friendly companies that would be appreciated by the Stack Overflow community. Okay, but how does this affect Q&A? https://i.stack.imgur.com/1Ocuw.png” alt=”jobs on stack overflow” /> As Jason neatly summed up: That ^ is about the extent of the changes to existing Stack Overflow. There’s nothing else changing about Q&A. We aren’t going to put jobs that look like questions in the middle of a question list, or jobs that look like answers in the middle of the answers for a question, or any other dark pattern garbage. The Jobs tab will be there for you should you need it, and otherwise Stack Overflow is essentially as it was. We also won’t start hassling you about things that aren’t relevant to your interests. That means we’ll only push relevant Jobs content to users who’ve indicated to us that they’re interested in looking for a job. For everyone else, it’s there when you need it. Stack Overflow Jobs is now live Each of us has a different dream job. Some of us want to work quietly from home; others want to build products in offices filled with colleagues and free perks. Some of us want to make more money, while others want to push the first line of code on a product that will eventually be used by millions. Whatever it is that you’re looking for, we hope that your search starts with Stack Overflow."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/12/14/announcing-winter-bash-2015/","date":"2015-12-13T23:00:00.000Z","tags":["Community"],"title":"Announcing Winter Bash 2015","text":"Another calendar year is ending, which can mean only one thing. It’s time once again for the event that brings joy to all (with a slight helping of dismay for our friends in the southern hemisphere1): Winter Bash! Starting now and going until the end of the day on Jan. 3, 2016, you’ll once again be able to earn and show off hats for all sorts of things you’re already doing across the Stack Exchange network. As in previous years, we’re rolling out an all-new array of hats for this year’s event. (For those who are wondering, this is entirely because we on the SE team love our communities and think you deserve the best, and not at all because we forget where we store the old hats every year.) That means we owe another big thank you to amazing freelance designer Elias Stein, who deftly handled the conversion of all hats from crazy vague concepts into beautiful digital reality for the third year in a row, and our very own unicorn lord balpha, who once again worked tirelessly behind the scenes to perfect the hat distribution process. Hats, for those who don’t know, are sort of like badges, but better, because you can “wear” hats on your avatar, displaying them wherever your avatar appears, network-wide! (And thanks to a labor of love by Brian Nickel, that includes the iOS app this year!) The triggers for hats are a little different than the triggers for badges; to find out what you have to do to get some headpieces, check out the Winter Bash mini-site. There are 28 total hats you can earn over the next few weeks… that we’re telling you about. How many secret hats are there this year, you ask? You’re on your own. We’re not spilling the beanies. After you’ve earned some hats, you can visit your profile on any site to choose the hat you want to wear (or simply admire your own personal hat rack). Just click on the bobble hat adorning your badges section to bring up a dialog. (No, you can’t wear the bobble hat yourself. Your badges would get cold!) Once you’ve picked a hat, you can resize and reposition it in the selection window to suit your avatar. Last year’s example image for this was so perfect that it just has to be reused: Finally, you don’t need to worry about tracking all this stuff yourself. You’ll get notifications about new hats via a special, Winter-Bash-only top bar inbox: . Of course, if you think all this is weird and don’t want any part of it, that’s okay, we won’t judge you (much). You can opt out of the event by clicking on the snowflake icon in the top bar——and then the “I hate hats” link at the bottom left of the box that pops up. (NB: the reverse is true on Stack Overflow; fans of hats on SO will have to go through the same procedure but click a link to opt in at the end.) You’re welcome to change your mind about wanting hats at any time during the event. Just remember, all the hats will vanish again after three weeks. Now go! Other people out there are already working on their degrees2! 1: As in the past, tradition defeated accuracy in the naming decision. Hopefully some of our summertime audience will be at least partially mollified by the fact that the Winter Bash site will be available in Portuguese, Spanish, Japanese and Russian this year, thanks to the efforts of our international Community Managers. 2: The University of Winter Bash has not been accredited by any organization recognized by the Council for Higher Education Accreditation or the United States Department of Education. Yet. Tags: winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/11/11/how-we-talk-about-diversity-at-stack-overflow/","date":"2015-11-10T23:00:00.000Z","tags":["Company"],"title":"How We Talk About Diversity at Stack Overflow","text":"We have a Diversity and Inclusion Panel (DIP) at Stack Overflow — you may have read about it in Donna’s post on Why Stack Overflow is a Good Workplace for Women. It’s a grassroots, employee-driven group with volunteers from different departments with varying levels of seniority. We’ve been working hard to make our company one of the best places to work by ensuring individuals feel welcome, valued and respected. The panel was formed when a group of employees noticed that conversations were happening all over the company about diversity, or the lack thereof, both at Stack Overflow and in the tech industry. We wanted to consolidate the discussions and efforts to get everyone on the same page and make a bigger difference. DIP’s Google Group and monthly meetings served this purpose for quite some time before we decided it wasn’t enough. The conversations that we were curating were too valuable to keep to ourselves; the entire company deserved to be part of those conversations if they were interested. We needed to create a comfortable space for everyone at Stack Overflow to be able to engage with each other on diversity issues. Our Experiment Roughly once a month, we host a one-hour chat in our company-wide chat room to candidly and respectfully discuss diversity. It’s 100% internal and only for employees who are interested in participating. The chat is structured with 1-3 volunteers, who are arranged ahead of time, starting our discussion by sharing personal experiences related to diversity. Anyone can ask questions, offer support, share their own experiences, or simply observe. We chose our existing chat room because we wanted to meet people where they were already talking and eliminate speaking over each other. It would also allow us to save the conversations as artifacts that employees could read after the fact if they miss the live chat or want to re-absorb the information. I know the idea sounds risky. How could that possibly work? People would either be too timid to say anything of value, or make everyone super uncomfortable by oversharing, or even worse, begin to brawl in all caps. I wouldn’t even be surprised if someone cried. And this would all be in our chat history, never to be deleted. Spoiler: none of that has happened. The conversations have been productive and civil; the volunteers have been open-minded and allowed themselves to be vulnerable, while other participants have asked questions, offered support, and shared different perspectives. In several instances, people responded with things like, “WHAT??!! Really? I can’t believe that happened to you!” or fervently agreed that they had experienced something very similar. People have even been brave enough to ask if their own behavior was perpetuating the issue, and asked to be called out if they did something that bothered anyone. What We’ve Learned By no stretch of the imagination do I think this would be a good idea in every workplace. Stack Overflow seems to be just the right size with the appropriate tools to make something like this work. Furthermore, people were at least willing to give it a try, and kept open minds. So we had the means to make it happen, and I think we also found a formula that heavily contributed to it being productive: Focus Each chat has a topic, like English as a Second Language, LGBT, or Parenting/ Work-Life Balance, that we discuss within the scope of working at Stack Overflow or in the workplace in general. By keeping the focus small, we are able to dig in deeper. We also have a moderator to make sure things don’t derail by slipping off-topic or becoming toxic. (So far we have not experienced the latter, but I will concede that we have been guilty of the former.) Respect There is a lot of respect amongst peers here. I firmly believe that this idea can only work if people trust each other enough to make themselves vulnerable — there can be no hostility whatsoever. We also follow the same Be Nice Policy that we practice in our communities, and keep everything 100% internal. Vulnerability The real secret sauce, though, is that our volunteers share (very) personal experiences. By giving firsthand accounts of dealing with bias, they are bringing the issue close to home — it’s a lot easier to have empathy for experiences that are different than yours when they come from someone you care about personally and respect professionally, especially when they are putting themselves out there. Impact I don’t think DIP Chat is a silver bullet. We haven’t “fixed” diversity at Stack Overflow by any means, but it is doing us some good. Employees from different parts of the company — and all over the world — are learning from each other and strengthening relationships in a way that previously wasn’t available. For me personally, DIP Chat has changed the way I think about myself, other people, and our responsibility to each other. The real reason that I think that this is working for us is that the heart of Stack Overflow is asking and answering questions. We are professional lovers of sharing knowledge, and this spirit extends beyond our Q&A sites."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/10/06/beyond-coding-recap-helping-emerging-developers-launch-careers/","date":"2015-10-05T22:00:00.000Z","tags":["Company"],"title":"Beyond Coding Recap: Helping Emerging Developers Launch Careers","text":"This summer Stack Overflow, together with a host of NYC-based tech companies, created Beyond Coding, a 10 week program for emerging developers and designers. We sought to guide students through the finer points of professional “soft” skills in order to help those lacking experience gain a foothold in the technical job market. Having no idea what reaction the program would invite, we had an astounding 375 applicants from all over the world. With the program open only to those living within the New York City area, 221 students were accepted. 110 students went on to complete the course requirements, which included attending 5 out of 6 classes and passing the project-based homework assignments. Prior hard coding/design experience was required for this program, as the focus was instead on mentoring, training, and confidence building. The Knowledge In collaboration with the New York Tech Talent Pipeline, Beyond Coding included courses from Stack Overflow, Crest CC, Foursquare, Kickstarter, Tumblr, and Trello. Speakers from each company (be they developers or recruiters) shared insights and practical knowledge that they themselves wish they had known when starting out careers in the tech industry. Each course was catered specifically to developers and aimed to increase overall confidence; they included perfecting elevator pitches, business networking, learning how to find new resources on the job, working with data, technical communication best practices, and tech interviewing tips. The classes were designed to be highly interactive by encouraging students to discuss their ideas and projects and solicit feedback from one another. The Students We couldn’t have asked for a better group of students to spend the next few months with. They came from a diverse range of backgrounds and genders – 69% identified as male, 31% identified as female. Each student came to Beyond Coding for a different reason. We met graduates, career changers, self-taught techies, and part-timers looking for full-time roles just to name a few. At the beginning, confidence was on the lower side, with 30% of students stating they were not confident in their ability to get hired in a technical role. At the conclusion of the program 90% of students were confident they would be hired or had already accepted a job offer. Students were highly encouraged to utilize social media outlets such as LinkedIn to present their coding skills and qualifications and create a professional online presence. On Twitter, you can check out #beyondcodingNYC student conversations and photos. The Hiring Fair Hosted at AppNexus, the Hiring Fair was held on September 9, and was open to employers hiring entry-level technical roles. Participating employers ranged from large corporations such as Morgan Stanley, American Express, NY Times, and HBC Digital, to local start-ups including App Partner, Decoded, and Percolate. Over 80 students were in attendance, with around 20 students gaining “Early Bird” access by consistently attaining high marks for their homework projects. The evening was a great mix of networking, resume reviewing, and getting to see students confidently engage with employers. The End Result The program caught the eye of BRIC TV, a Brooklyn arts and media nonprofit, who have created this fantastic video overview of Beyond Coding and the Brooklyn Tech Triangle Internship Program, whose students were required to attend all Beyond Coding courses. Each student who completed the Beyond Coding program should be proud of the hard work and late nights they put in. We’ve been impressed with the caliber of everyone involved and can’t wait to hear about the new roles and internships that will be taken on in the coming months."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/09/15/were-changing-our-name-back-to-stack-overflow/","date":"2015-09-14T22:00:00.000Z","tags":["Company"],"title":"We’re Changing Our Name (Back) to Stack Overflow","text":"We are Stack Overflow You may know us from such popular websites as Stack Overflow Q&A, Stack Overflow Careers, The Stack Exchange Q&A Network, and most of your Google search results. tl;dr – We’re changing our company name. Here’s what’s changing: As of today, our company will be known as Stack Overflow. Our logo is different. But only a little. Not one other damn thing. Here’s what “Stack Overflow” is: A community where millions of programmers ask questions and share knowledge The best place to get a job as a developer, or to hire a developer The flagship site of the Stack Exchange Q&A network, which covers over 140 topics (new!) The company behind all of those things Seven years ago today, Joel announced the public launch of Stack Overflow. Since then, our strategy has centered around building useful tools for developers and then – if they worked – expanding them to serve a wider market. We think our new company name better reflects this core philosophy, and will continue to lead to good things for devs and non-devs alike. And… that about covers it. But just to be safe, I’ve tried to answer the questions we expect some of you may still have. Q: So, what’s actually changing? Well, as of today, people like me will start saying we “work for Stack Overflow.” I guess we’ll need new business cards, too? Hopefully someone’s on that already. But I digress. In the weeks ahead, we’ll change the name of things like the blog, podcast, and any other places where “Stack Exchange” was referring to the company, as opposed to the network of Q&A sites. Our Q&A sites will still be collectively known as the Stack Exchange Network. Q: Are you “just not that into” the Stack Exchange network anymore? No. Nonononono. Our commitment to the Stack Exchange network is completely unchanged, and we’ll continue to invest in its expansion and growth. SE’s users have built a network of constructive, civil communities of helpers on a previously unheard-of scale, and we’re insanely proud to be a part of it. Here are just a couple of facts to drive home how much you’ve all achieved: The network as a whole has more monthly 5-time posters than English Wikipedia has 5-time monthly editors. Stack Exchange is the 47th most visited website in the US without Stack Overflow, and gets roughly as many US visitors each month as the New York Times. Here’s what one of our investors had to say on the topic: I believe Stack Exchange’s growth has now reached escape velocity. Not only will the existing topics continue to grow, but many new topics will emerge, until the network covers every topic that is amenable to objective Q&A. As new generations of people grow up on the internet, old habits — searching through textbooks or how-to books, or asking friends—will fade away.” ​ –Chris Dixon, Andreessen Horowitz You hear that, books?? We’re coming for you, you filthy tree-based anachronisms. Q: So, why the change? We started with better Q&A for developers. When we named the company Stack Exchange, we were only making Q&A sites. We’d had great success with Stack Overflow Q&A and we were expanding that engine to serve new topics. So, using the Q&A network’s name for the company made sense. If we’d decided to make one of those lame, corporate hierarchy charts,and for some reason had chosen to ask an untalented child with a crayon to draw it, it would have looked a lot like this: And just to be clear, Q&A remains our core product, and we’ll continue to invest in helping it serve more of the world’s developers, chemists, photographers and whatever the heck these awesome people are. Then, we focused on better jobs for developers. It was pretty obvious that even though developers were scarce, valuable talent, most job boards were still designed for recruiters’ needs, and were full of fake “exciting new startup!” listings and jobs requiring things like “8 years experience with Swift”. Tired of that nonsense? So were we. So we built Stack Overflow Careers. Which totally effed up my corporate chart structure. But Joel was all, “We’re supposed to be relentlessly serving devs, not charting dopey crap. Figure it out, or I’ll take your standing desk away, and tell the pastry chef no seconds for you.” But I still couldn’t come up with any good spot for Careers, so I just stuck it somewhere random. And since Joel had said “relentless” a bunch of times, I added a drawing of Batman, cuz he’s super-relentless and I was a lonely teenager: Next up? Better EVERYTHING for developers. Which brings us to today. Now, we could just sit on our laurels and reflect on all we’ve achieved. I actually proposed that laurel-sitting plan, but you know how Joel is: “You know when you get to sit on your laurels? When every developer problem has been solved. Last week, Carmack Instagramed that that he was eating a crappy sandwich. YOU ARE FAILING HIM.“ Honestly, some days I worry about Joel, but he’s on to something: Developers have a lot of problems. We got here by focusing on underserved developer needs, and asking the world’s developers to help us solve them. I think that if we’d set out to build the best Q&A platform for everyone’s needs, it wouldn’t have helped anyone. By narrowing our focus to a specific group we thought we could help, we were able to create a product opinionated enough to actually make a difference. So, we’re going to stick with the plan. As we look for new ways to serve our users, we’ll focus on what we know best: solving developer problems. Today, we’re working on our biggest expansion since Stack Overflow launched: Documentation. You can learn more about it here, or sign up for the beta, and be part of building what we think will be our next Big Thing. I should point out that we fail a lot around here. But wherever we’ve succeeded, it’s come from focusing on how we could better serve devs’ needs. And when that success looked transferable, we passed it along to the rest of the world. So, we’re gonna run with that, and hope you all keep on running with us. Here’s what that crayon wielding kid thinks we look like today: Do I hope to see more multi-colored, (poorly-drawn) networks spring up around some of our other dev products? Hell yeah. Will they? Beats me. But as always, we’re counting on you to help us figure it all out. Didn’t you say something about the logo? Oh – right. With the exception of a few minor tweaks, the Stack Overflow logo that you know and love has been essentially unchanged since we paid $512 for it in in a 99 Designs contest back when that was a lot of money for us. We thought it was pretty awesome then, and it’s still pretty awesome now. So, the design team didn’t change much, and just made a simple, clean update to the existing logo. Next week, they’ll share how it fits into a new style guide we’ll be using to help us standardize our visuals and save valuable design cycles downstream. But for now, we were inspired by Google’s video explaining how they arrived at their new logo concept of “kindergarten letters, most of which are actually aligned correctly.” So we made a short video. While ours doesn’t include the phrase, “…and just the right soupçon of whimsy” nearly as much as theirs did, I think it does a nice job conveying exactly how ours got changed. (Film by our own Benjamin Dumke-von der Ehe, aka balpha, music by Zero Project) We are Stack Overflow. And we’d be nothing without all of you."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/09/03/stack-spotlight-aurelien-gasser/","date":"2015-09-02T22:00:00.000Z","tags":["Company"],"title":"Stack Spotlight: Aurélien Gasser","text":"Stack Overflow currently has three offices in New York, London, and Denver. In addition, for many of our teams and job openings, we also offer remote work. As of our last estimation, 20% of our employees work remotely from around the world. One developer who is included in that 20% is Aurélien Gasser, who works remotely from his home in London. Read on to learn what his job entails and the unique way he ended up working here. Name: Aurélien Gasser Job Title: Web Developer How long have you been at Stack Overflow? I joined on September 23th 2013, so that’s almost 2 years. How did you join Stack Overflow? What made you want to apply? As a developer, I love Stack Overflow in a lot of ways. But I actually ended up getting this job in a very funny way. I’m originally from France and I was visiting a friend in NYC for 3 weeks. After only 10 days or so, I had decided I wanted to get a job and live here. So I started interviewing for jobs all over the place. I started using a dating website, OkCupid, where I met a girl I quickly became good friends with. She wanted to help me find a job so she accessed the alumni repository of the university she went to, Yale. In this repository, she got several email addresses which she sent my resume to. One of the alumni she emailed was a certain Joel Spolsky (co-founder and CEO of Stack Overflow). Joel threw my CV on the pile, and after that I went through the regular interview process. What big projects are you currently working on? I’m working on a project named “match quality”. I like to think we operate like a dating agency: guys are candidates, and girls are employers (or vice-versa, if you prefer). In the “match quality” project, I focus on the candidate side, trying to find the best job for a candidate not only by looking at each case in particular, but rather by identifying patterns that give us a better idea of what makes a job interesting. This way, we can come up with algorithms which suggest relevant jobs to candidates. I think it is very important because it gives us a competitive advantage. And it’s the best place to do it because we know developers more than everyone else. I hope one day, when you go to Stack Overflow Careers, your dream job will be right in the middle of your screen, you’ll just have to grab it. What is your favorite part about working at Stack Overflow? Working with smart people, for sure. Facepalming is something that used to be common in my professional life, but not anymore. Well, I facepalm sometimes, but most of the times it’s because of my own derps. Though always arguable, the decisions that are made always make sense. Also, there is always something I can learn from each and every developer (yes, each and every developer). It feels great to be around Stack devs, and I find it is a privilege to be in such an environment. Oh, and all the benefits are pretty cool too. I’m writing this from home, on my MacBook pro, with 2 Thunderbolt screens, on a stand-up desk. And I just had a nap. Outside of Stack Overflow, what are you working on? What hobbies do you have? I don’t have a side project at the time, though the last one I worked on was an online multiplayer game. It allowed me to fiddle with node.js, write my own physics engine, implement lag compensation. I learnt a lot about game development and read terrific articles (I recommend the Valve article on lag compensation). I’m always happy to read or talk about tech things; a few weeks ago a guy explained to me how he built his own automatic headlights for his old car. To be honest, I spend most of my free time playing video games (Dota 2), or hanging outside. I have been living in NYC and London for the past 2 years, so hanging out in bars is a cultural thing, right?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/08/21/welcome-juan-garza-and-stack-overflow-en-espanol/","date":"2015-08-20T22:00:00.000Z","tags":["Company"],"title":"Welcome, Juan Garza, and Stack Overflow En Español!","text":"Juan is the most recent addition to our team of internationally-oriented community managers that focus on bringing Stack Overflow to large groups of developers that aren’t being served as well as they should be by Stack Overflow in English. Juan started his professional journey as an Engineering Major in college, and realized that it wasn’t his true calling after discovering that he is partially color blind. He graduated with a Psychology degree with a minor in Biology. Because he loves helping others, he decided to pursue a career as a school teacher. After several years of teaching Math, Science and Spanish, he discovered community management and retreated to the salt flats: He didn’t really retreat, beyond taking a recent vacation After working in and with a very wide variety of forum communities for nearly the last decade, Juan brings a great deal of outside perspective and experience to the team. He’s thrilled to be working remotely from his home in Texas, where he loves nothing more than spending time and camping with his family and friends, and playing music on a variety of instruments. Juan is now working on bringing up a private beta for Stack Overflow En Español, which we expect to have ready early this November. We’re extremely excited to have Juan on board, and hope you’ll join us in welcoming him! If you’re a native or fluent Spanish speaker and wish to help with the translation effort, check out Juan’s short ‘kick off’ post on the Stack Overflow In Spanish Area 51 proposal. Welcome, Juan!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/08/13/stack-spotlight-bethany-marzewski/","date":"2015-08-12T22:00:00.000Z","tags":["Company"],"title":"Stack Spotlight: Bethany Marzewski","text":"Each month we’ll be featuring a short interview with one of our very own employees here at Stack Overflow. You’ll learn how they came to Stack Overflow, what projects they’re currently working on, and why they love working here. First up is our Marketing Manager, Customer Happiness Bethany Marzewski. Name: Bethany Marzewski Job Title: Marketing Manager, Customer Happiness How long have you been at Stack Overflow? I started on the sales team in February 2012. How did you end up working at Stack Overflow? I first read about Stack Overflow from a Northwestern alumni email list that I’m a part of. A current Stack Overflow employee, Rachel Boyman, sent an email to the group with the subject line, “My (awesome) company is hiring!” At the time when I read it, I had been working as an editorial assistant at Prevention magazine and I thought, “Oh, sure. I’ve seen that line before…” so I didn’t respond right away. But about a month later, after yet another round of layoffs at the magazine, I realized that it was probably time to shift out of journalism permanently. And something in her email had stuck with me. I emailed her back and asked if they were still looking. She grilled me a little on why I was leaving the journalism world and why it took me so long to respond. I apparently passed the test with my answers, and she passed my contact info along to the manager later that day. The rest is history! What big projects are you currently working on? Right now, I’m working on several projects that will give us a better understanding of how customers perceive our products with Stack Overflow Careers. Together, with marketing, sales, sales support, and sales operations, we’re gathering as much information about our customers as we can. What support tickets do we see coming in the most often and how can we interpret this data? What does our sales team perceive to be the most common pros and cons about our product? What do customers think about some of the new features that we are rolling out currently? For customers who haven’t renewed with us, what can we learn about this group? After collecting all of this data, we’re going to take a look at what parts of this experience we can improve with better training, better onboarding, or tweaks to the product itself. It’s a wide open project with little definition at the start, which is my favorite kind. What is your favorite part about working at Stack Overflow? I like that Stack Overflow truly gives you the tools and resources at your disposal to make the most of what you want to do here. You’re not boxed into a job title, a role, or a routine. I love the agility of a company where you can start with an idea one day and start executing on it the next. One of the most rewarding examples of this recently has been the projects I’ve been involved with as a part of the DIP committee (Diversity & Inclusion Panel). I really enjoy having a chance to work with people at other companies, and Stack was very supportive when we co-produced the first ever Diversity Summit with Kickstarter at Union Square Ventures. Based on the contacts and connections I made from that event, we launched Beyond Coding this year as a partnership between Stack Overflow, Tumblr, Kickstarter, Foursquare, Trello, and Crest. It’s been an unbelievably rewarding project that will hopefully culminate with us getting emerging developers in New York City a foot in the door to their first roles in technology. Outside of Stack Overflow, what are you working on? What hobbies do you have? Have I told you about this amazing new Broadway show, Hamilton? Okay, so there’s this guy, right? His name is Alexander Hamilton. You probably know him as a stodgy old revolutionary who did boring stuff like create the first national bank. But then, 250 years later, there’s this other guy, Lin-Manuel Miranda, who reads a biography of Hamilton his honeymoon and decides to turn his story into a hip hop musical about his life. Then you realize, “Oh wow. The revolutionaries of yester-year were just like you and me today. And this guy, Hamilton, was actually sort of like a modern-day Elon Musk in the way he looked at the world.” Anyway, it’s literally a game-changer and has inspired a lot of the decisions I’ve made in the past year. Go see it. Also, disclaimer: My boyfriend works on the sound team for the show. (If you ever want to see some of the cast, check out Glass House Tavern on Saturday nights at 11 p.m.) It’s really fun to have one foot in the door in the Broadway world, though it does mean a lot of late nights. Other than that, on weekends, you’ll probably catch me museum-hopping or doing a crossword puzzle at an outdoor cafe on the UWS. To keep up with Bethany, you can follow her on https://twitter.com/bethanymarz“>Twitter."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/07/01/the-new-stack-exchange-blog/","date":"2015-06-30T22:00:00.000Z","tags":["Company"],"title":"The New Stack Exchange Blog","text":"Today, we’re proud to announce the new Stack Exchange blog, all shiny and new! It’s been six to eight weeks in the making and we’re really happy our community can finally see it. Here’s an overview of the major changes that we’ve made to the site: Channels The biggest change we’ve made is the introduction of channels on the blog. In the previous blog, we pretty much put everything in one column, organized by tags. We still have all the posts in chronological order on the homepage of the new blog, but we realized there are two big buckets of content that we want to post here: company news and engineering posts. We want to recast our blog not just as a place to post updates as they come, but to become an amazing source of news, technical knowledge, and insight into the communities we’ve built. Company News Channel If you’ve been visiting our blog regularly, this channel houses the kind of content you should already be very familiar with. This includes all of the podcasts, announcements about the company, and updates about the Stack Exchange community. In effect, this is exactly what the old blog was and will continue to be – with some added features. We’ve also decided to include more posts in this channel that we want to highlight: happenings in the office with explanations of our internal culture, and all the amazing diversity efforts we’ve been pursuing. This is the place to learn everything about Stack Exchange the community and the company. Engineering Channel The newest addition to the blog is the engineering channel. One of my favorite things about working at Stack Exchange is the amazing engineering culture we’ve built and our place in the developer community at large, especially with Stack Overflow. This channel gives you an inside look into that culture: how we build things, why we build them, and what we think about approaching technical problems. This includes technical walkthroughs of new features we’ve built, announcements of open source projects we’re working on, and the public outreach efforts we’re working on for the developer community. This blog even includes reposts of some of engineers’ most popular posts on their personal blogs, as well as opinion pieces on technical practices. There’s even a walkthough of how we built the new blog on the channel you can read now! There’s a subsection for each major part of our engineering team: developers, SREs, designers, and anyone else that touches our product creation process. As we grow, you can expect to see more content fill up here, and possibly bring in outside contributors as well. An all new design The most notable thing that we changed is the overall design. We wanted to make something that people enjoy reading, exploring, and learning from. Most of all the things from the previous blog still exist: previous posts with archived comments, tagged posts sortable by category, and so on. We’ve also added some additional functionality here: new navigation that emphasizes our new channels and content, posts sortable by author, and better feeds with individual post pages for readability. Take a look around, there’s a lot of changes we’ve made here. A new navigation that emphasizes the new channels and subsections we want to emphasize Better overview look that’s more photo heavy, provides an excerpt, and the ability to look through posts sortable by authors A revamped individual post view with bigger text, more spacing, and more photo heavy Open source The last thing I want to mention is that we’ve made the code for our blog open source. One of the things we love doing as an engineering team is to work in the open when we can. We love involving the communities we build in almost everything we do as a rule, especially our technical community, and the blog is no exception to that rule. We’ve migrated our previous blog from a WordPress site and rebuilt our new blog powered by Jekyll, which is also open source. If you have suggestions for how to make the new blog better, create an issue and one of our developers will take a look at it (probably me). If you’re a developer, we encourage you to take a look at the source code and make pull requests for changes as well. If you want a walkthrough of how we built the blog, take a look at the engineering channel for an inside look. More to come There’s so much more we want to do with this blog in the future. It’s one of the few places we have as a company to talk directly to the community we’ve helped build and love so much. As always, sound off in the comments about what you think of the changes, ideas you have about how to make it better, or take an extra step and become a contributor writing code. Until next time! Jon is a developer and heads up evangelism efforts at Stack Exchange. You can follow him on Twitter."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/06/15/pivoting-into-a-new-career-please-welcome-taryn-pratt-bluefooted-community-manager/","date":"2015-06-14T22:00:00.000Z","tags":["Community"],"title":"PIVOTing into a new career: please welcome Taryn Pratt, bluefooted Community Manager","text":"Long-suffering readers may have noticed that, as we’ve expanded Stack Overflow into strange and exciting territories, we always start by hiring a new community manager. These intrepid souls act as emulsifiers, enabling and promoting communication between the company and the growing community. This role is just as critical for our 140+ English-language sites, where our small team works to ensure that requests and concerns are addressed in a timely fashion (6-8 weeks, give or take). Whenever possible, community managers are hired from within the community itself – after all, who knows its needs better than someone who has been a part of it? Thus, I’m happy to announce that veteran Stack Overflow moderator bluefeet has decided to join the CM team! Bluefeet – also known as Taryn Pratt – joins us from that sweltering hot desert of Phoenix, Arizona. She has been an active community member on Stack Overflow since 2010 and an elected moderator since 2014. Discovering Stack Overflow helped Taryn realize how much she enjoys assisting others, quickly discovering that helping other users was actually more fun than writing SQL! This discovery eventually led her to the CM team. Taryn’s career path to technology began about 15 years ago. She enrolled in law school and after discovering that she hated it, she dropped out. Her obvious follow-up question was, “what next?” Always a sucker to learn, Taryn picked up her first web development book, and the pathway to technology was lit! A variety of programming jobs ensued, including web developer, software engineer, and most recently a SQL database developer role. While Taryn enjoyed all these opportunities, she felt something was missing. She dreamed of working at a company she felt passionate about… enter Stack Exchange! Outside of work, Taryn enjoys spending time with her family, and babying her 3 dogs. She’s a self-confessed CrossFit junkie who’s crazy about dead-lifts. When not at the box, she can be found working on her ‘honey-do’ list renovating her 1950’s home. Please join me in welcoming her to the team!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/06/11/welcome-nicolas-chabanovsky-and-stack-overflow-in-russian/","date":"2015-06-10T22:00:00.000Z","tags":["Community"],"title":"Welcome, Nicolas Chabanovsky and Stack Overflow in Russian!","text":"Some time ago, we hired a Russian-speaking Community Manager named Nicolas Chabanovsky. He works remotely from St. Petersburg (we’re pretty sure it’s the one in Russia). In the past Nicolas was a software developer, and participated in the development of DLNA-stack at Motorola, webOS at LG Electronics and many other notable projects. What we found the most interesting about Nick is he’s one of the founders of the most advanced clones of Stack Exchange we’ve ever seen, which was ХэшКод, otherwise known as HashCode. Beginning as a research project, in the four years of its existence, HashCode turned into a small network of Q&A sites, complete with a careers and data site. HashCode became one of the best places to get an answer on programming and system administration questions in ‘RuNet’ (the Russian part of the Internet). Most importantly, the quality of the questions and answers were directly on-par with our English site. We got to know Nick, and quickly determined that he, along with the thriving communities he was building, would be a great addition to our team and network. After a great deal of hard work by both Nick and our developers, we’re extremely excited to announce the launch of Stack Overflow In Russian, the newest addition to our family of international sites. More background on the site can be found (in Russian) on their meta site. Joining our network as a very active and healthy site, Stack Overflow In Russian is killing it with roughly 70 questions per day, 60,000 questions altogether and a whopping 85,000 answers contributed by 27,000 users. We’re very proud to be the place where this community calls home, and very proud of the amazing job Nick and our developer team did in making this transition smooth. Welcome, Nick and everyone!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/06/04/stack-overflow-in-portuguese-now-with-less-beta/","date":"2015-06-03T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow in Portugese: now with less beta!","text":"If you can’t read the rest of this post, you’re probably not part of the Stack Overflow in Portuguese community. It’s a shame, because it’s a really good site! We built it because it’s not fair to expect everyone to speak every language, right? Exactly. So, the important thing is that the site is great, the community is great and now they’re graduating! That’s really awesome, so this blog post is for them. Há mais ou menos 2 anos nós fizemos uma descoberta avassaladora: nós percebemos que a maioria das pessoas do mundo não fala Inglês. E, se isso é verdade, significa que existem programadores que, pasmém, não conhecem o Stack Overflow. O choque inicial foi grande, mas depois de um copo de água com açucar nós decidimos fazer algo a respeito disso: abrir novos sites sobre programação! Criar novas comunidades onde mesmo quem não fala Inglês possa se expressar em sua própria língua, à sua própria maneira. Afinal, ter a resposta para todo tipo de pergunta sobre programação é só metade do que faz do Stack Overflow uma excelente comunidade. A outra parte da equação é estar na companhia de pessoas como você. Outros programadores, que compartilham seus interesses e curiosidades. O conteúdo é a base de um grande site, mas as pessoas são os pilares de uma comunidade. E é aí que a língua faz diferença. Muita diferença. O primeiro destes novos sites foi o Stack Overflow em Português. O período de beta privado começou há um ano e meio e algumas semanas atrás ele foi graduado com mérito! Estamos profundamente orgulhosos de tudo que a comunidade do SOpt construiu até agora e temos certeza de que estes são apenas os primeiros passos de um site excepcional. O site nasceu cercado de muitas incertezas. Era algo diferente de tudo que já tinhamos feito antes e assim viria acompanhado de diversos desafios que não tínhamos como prever. Ainda assim nossas expectativas eram bastante altas. Queríamos dar à comunidade de programação lusófona um lugar onde ela pudesse se sentir em casa, compartilhando conhecimento em sua língua nativa. Seria um Stack Overflow completamente novo, pronto para que a comunidade construísse algo espetacular, e o desafio foi aceito. O site logo se tornou um dos mais fortes e ativos da rede, com todos empenhados em resolver os problemas que toda comunidade recém-nascida deve enfrentar para construir sua identidade e atingir o sucesso. As estatísticas do site são impressionantes, mas ainda mais impressionante é a dedicação da comunidade ao longo destes 18 meses. São pessoas inteligentes, trabalhando em conjunto para construir algo do qual podem se orgulhar. Tudo que o SOpt conseguiu até hoje é graças a essa comunidade e a graduação é mais que merecida. Sob qualquer ponto de vista, o Stack Overflow em Português é um site espetacular. Foi o segundo site mais rápido a atingir 10 mil perguntas, perdendo apenas para seu irmão de língua inglesa. Hoje, com mais de 20 mil perguntas, é uma das comunidades mais ativas, em um nível de participação maior que outros sites 3 vezes mais antigos. E isso é só o começo! Todas essas perguntas – e respostas – vêm de pessoas com níveis bem variados de familiaridade com o site original, em Inglês. Pouco mais da metade de todos os posts vem de pessoas que nunca tiveram a oportunidade de participar ativamente da comunidade Stack Overflow. São milhares de programadores criando coletivamente um excelente acervo de conhecimento sobre programação, e que não teria existido sem o SOpt. Da mesma maneira, os usuários que já conheciam o SO não ficam atrás. Não só eles contribuiram com a outra metade de todos os posts no SOpt, como também aumentaram sua participação no site original. Isso significa que, contando ambos os sites, a participação dos usuários de língua Portuguesa quase dobrou em relação ao ano anterior. Nossa teoria é que falantes de Português têm super-poderes. Parece, então, para surpresa de ninguém, que as pessoas se sentem mais confortáveis em sua própria língua. A evidência é bem clara: quase todos os usuários de maior reputação do SOpt têm pouca, ou nenhuma, atividade no Stack Overflow em Inglês. São pessoas inteligentes, dedicadas, empenhadas e dispostas a ajudar, mas que não tinham um lugar para chamar de seu. Hoje eles são a essência de uma nova comunidade, a qual eles aprenderam a amar e respeitar tanto quanto o site original. E compartilham esse sentimento com milhares de outras pessoas. Nada foi mais fundamental para o sucesso do Stack Overflow em Português do que seus usuários e usuárias. Foi graças ao seu empenho que a comunidade continua a crescer dia após dia, sendo um exemplo para todas as outras. É graças à participação de todos, compartilhando conhecimento, conversando, discutindo e se divertindo. Vocês fizeram do site um lugar agradável, útil e interessante. Uma celebração da comunidade do Stack Overflow em Português não estaria completa se seus membros não participassem. Então pedimos que eles contassem um pouco de sua história e, como sempre, o resultado foi espetacular: Estava vendo esse layout super bonito pós-diplomação e notei uma métrica muito interessante, que é a de alcance geral. O quanto meus posts ajudaram os outros. O meu está em aproximadamente 176 mil pessoas. Cara, isto é um número retumbante. Não estava esperando por isso. A minha contribuição aqui é isso: ajudar os outros como eu gostaria de ser ajudado. Acho que é uma excelente forma de reconhecimento. Há pouco mais de um ano, em Resultados de um experimento social, eu escrevia sobre os benefícios de ter me juntado a uma comunidade como o Stack Overflow em Português. Hoje digo que todos os benefícios multiplicaram-se. O Stack Overflow me ajudou a crescer muito, ajudando e aprendendo. A participação de todos faz com que nos tornemos desenvolvedores melhores, pessoas melhores e mais maduras. Eu também tenho um carinho especial pela minha participação no Meta. Foi muito edificante participar da construção de uma comunidade (foi a minha primeira experiência nesse formato). Sim, eu sei que ela ainda está em construção, mas eu lembro das discussões iniciais sobre o que é ou não escopo, sobre “nós não sermos o SOEN”, e sobre como nos entendemos conversando. Isso pra mim significa muito mais do que aquele número que é a reputação. A reputação que eu tenho com os colegas daqui, pessoas que as vezes eu só conheço pelo nome (ou apelido!), mas de quem sei muito a respeito profissionalmente e também (em muitos aspectos) pessoalmente. É muito legal quando alguém nos dá em que direção devemos seguir para ‘desatar o nó’ depois que passamos horas quebrando a cabeça com um problema. Jamais participei de uma comunidade onde as pessoas me ajudassem tanto igual vocês me ajudam aqui no SOpt. Mas, o aprendizado vai muito além das perguntas que nós fazemos. Quando abrimos o link de uma pergunta recém criada, apenas para certificarmos de que está tudo ‘nos conformes’, nós aprendemos algo novo. Quando eu descubro, por acaso, ao pesquisar sobre um assunto que existia o SOpt fiquei a pensar para mim “wow agora já posso vir responder a perguntas”. Já tinha respondido a algumas no SOen mas não é a mesma coisa. Conheci aqui muita boa gente, não pessoalmente, mas sei se precisasse de alguma coisa que estivesse ao alcance delas que me iriam ajudar. E adquiri muito conhecimento em muitas áreas distintas no SOpt. Descobri o SOpt muito por acaso. Em um dia de muita dor de cabeça, tentando resolver um problema que estava tendo, encontrei o SOpt. No começo achei que era brincadeira, que não seria nada sério. Até porque, o SOus era uma fonte de muitas respostas a erros e bugs que nos atormentam! Entrei no site e vi que era verdade, a pura verdade. E desde o dia que entrei, me encantei com a disponibilidade e excelência com que a comunidade se dispôs. Já havia visto outros sites e fóruns destinados a programadores, mas aquele era diferente dos outros, e isso era visível pela qualidade das respostas, e o comprometimento dos membros em ajudar os outros. Aquele me parecia realmente uma comunidade. Acabei por me registrar, e aí foi… Hoje estou quase começando no meu terceiro mês de emprego, e já aprendi muito, muito mais do que imaginei. E posso afirmar que muitos desses aprendizados aconteceram aqui, no SOpt. O Stack Overflow é dedicado integralmente a programadores. Queremos ajudar todos os profissionais, estudantes e curiosos do mundo. Conhecimento é algo belo e poderoso demais para ficar restrito apenas um grupo. Todos devem ter a chance de aprender. Estas histórias, dos usuários do SOpt, são um excelente lembrete de quanto impacto uma comunidade pode ter, quando lhe é dada a oportunidade. Nós tínhamos um único objetivo quando decidimos iniciar nossa aventura internacional: dar a mais pessoas uma chance de compartilhar o que sabem, e aprender com outros. Não faz sentido sentar e esperar que todo mundo aprenda Inglês. Nós acreditamos que ajuda, conhecimento e um bom ambiente de aprendizado devem estar disponíveis para todos, em qualquer lugar. Por isso o sucesso do SOpt nos enche de orgulho. Parabéns à comunidade!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/05/27/stack-overflow-and-andela-partner-to-provide-education-beyond-borders/","date":"2015-05-26T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow and Andela partner to provide education beyond borders","text":"Jon is a web developer and heads up developer evangelism efforts at Stack Exchange. When I think about the impact that Stack Overflow has had on the world, it’s tempting for me to think about numbers: how many active users we have, how many questions are answered in a day, how many jobs get posted on our Careers platform. These are things that I, as a developer, think about on a daily basis to measure how we’re helping programmers around the world grow. But I find that these numbers are hard to wrap my head around: it doesn’t quite give me a feel for what our work is doing. What is the quality of our impact? What does it feel like at an individual level? In just a week into our new partnership with Andela, that impact is becoming clearer than it ever has before. Over the course of eight weeks, six of Stack Overflow’s developers based around the world are providing one-on-one mentorship to six new Andela developers in Lagos, Nigeria. Twice a week, the developers “meet” over video chat and cover everything from pair programming to preparing for technical interviews and sharing career advice. We chose Andela as a partner because of the amazing work they are doing training world-class developers in Africa. We have a shared commitment to remote work and providing access to tech education in underserved communities, and we are so excited to advance these goals together. Our initial sessions with the Andela developers have been incredible, and we’ve all been very impressed by how bright and energetic the fellows are. Marco, one of our developers has said of his mentee Bosun: “[He] is very enthusiastic and smart, and constantly reminds me of a kid in a candy store. I am very impressed by him.” It’s a testament to how thorough Andela is at finding and growing top technical talent. As we were talking about our first few sessions, Nick, another one of our developers, recalled a conversation he had with his mentee Abimbola: “the Andela program itself is pretty crazy…if you haven’t talked to your mentee about it yet, I highly recommend it and prepare to be amazed at what they go through just getting into the program.” The level of training the Andela developers gets prepares them to hit the ground running and it allows each mentee to get personalized training from their mentor. Max and Fiyin covered how we do automated testing and builds at Stack Exchange. Oded and Adeleke are going over MVPs and user-centric design. Pairs are covering everything from data structures and algorithms, solving coding challenges like N-Puzzle, to building apps targeted at the African market. Another thing we’re picking up on is how everyone’s cultures intersect and what challenges we face working across so many boundaries. In just our group of twelve developers (both mentors and mentees), there are four different countries represented across different ages, genders, and races. Given our own focus on remote work, some of this comes pretty naturally to us. For example, coordinating meetings across time zones is something we’re used to, but there are some challenges unique to our partnership with Andela. For example, some of us had connectivity issues with Google Hangouts, and many of us have switched over to Skype for its reliability on Andela’s end. We quickly realized some of the things many of us as developers take for granted are larger factors in our partnership. But even with these challenges, we’re finding that individuals across the world are thinking about the same issues in the technology industry. Roberta, one of our developers based in Rio de Janeiro, Brazil brought up the following about her first few sessions with Mirabel in Lagos, Nigeria: “She also had questions and concerns regarding diversity and I think I convinced her that things are getting better and that being a programmer is super awesome. <3” We’re learning that many of the questions we think about at Stack are the same questions individuals in vastly different parts of the world are thinking about. We’re just getting into our first few sessions with the developers at Andela, and we couldn’t be more excited to be working with such bright individuals in a truly transformative organization. Over the next several weeks, we’re going to continue to see how we can help the Andela developers grow and discover what we learn working across boundaries we’re not used to crossing. As the program reaches its end, we’ll give another update here. My sessions with my own mentee, Babajide, are something I look forward to every week, and they give me perspective on how the work Stack Exchange and Andela is doing to educate developers around the world really impacts people at the individual level. It gives richness to the numbers that I think about every day. If you would like more information about our partnership with Andela, email me at jon@stackoverflow.com or reach out to me on Twitter."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/05/05/introducing-beyond-coding-free-professional-skills-training-for-emerging-devs-in-nyc/","date":"2015-05-04T22:00:00.000Z","tags":["Company"],"title":"Introducing Beyond Coding: Free professional skills training for emerging devs in NYC","text":"Today, we’re excited to announce that online registration is now open for Beyond Coding, a free new summer program designed to equip emerging computer programmers in New York City with professional skills needed to help them succeed in their first job working with code. The program, slated to launch June 11, is part of our collaboration with New York City’s Tech Talent Pipeline initiative to support the growth of the city’s tech ecosystem. And we’re thrilled to be taking part, along with some other top-notch New York startups: Crest CC, Foursquare, Kickstarter, Tumblr, and Trello. This Tech Talent Pipeline initiative, which launched in May 2014, has three objectives: Work with New York companies to help close the skills gap between open jobs and candidates to fill them, provide training and educational opportunities to New York residents, and ultimately, to build a talented and diverse workforce in the tech sector. Since the program kicked off, we realized that while we are hiring, we’re not doing it fast enough to make a real difference for New Yorkers who want to learn to code. On the other hand, one thing that we do have (thanks to Stack Overflow) is access to a wide range of resources and knowledge that we can offer to the greater community. And several other New York startups fell into the same bucket. So we decided to team up — you know, like a less super-heroic League of Justice — and build out a formal educational curriculum for the New York tech community. With nearly five open jobs for every available software developer, the need for qualified technical talent is higher than ever. In New York City alone, there are 13,000 firms hiring for highly sought-after skills, such as web development, mobile development, and user-interface design. You can see the openings for developers in New York on Jobs. To meet this demand, it’s critical to get more talented people coding, and do it fast. Beyond Coding’s goal is not to teach hard coding skills; it’s to ensure that anyone in this city with a passion for technology can get the mentoring, training, and support they need to succeed as a developer. The curriculum is designed to accelerate the learning curve for new programmers by attacking skills gaps that often prevent talented young developers from actually landing jobs. We’ll cover professional networking, technical communication skills, the best way to prepare for a technical interview, and what happens next: how to continue learning programming skills beyond the classroom. The Beyond Coding program is open to anybody in the New York City area with an understanding of coding and is currently looking for a job as a software developer or a related role, but lacks access to tools, resources, or a professional network they need to succeed. Once the 10-week program concludes, students will receive a formal certification and be introduced to top tech companies in New York City who are hiring junior-level developers. This is just one of the ways that we’re working to promote inclusion both here, and in the tech community as a whole. But we’re still figuring out how we can make a positive difference, so we welcome any feedback or ideas you may have. And if you live in New York City, are learning to code and can use a little help kickstarting your new career, you can apply at beyondcoding.io."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/04/22/jnat-and-animuson-workin-on-ur-problemz/","date":"2015-04-21T22:00:00.000Z","tags":["Community"],"title":"JNat and animuson: workin’ on ur problemz","text":"The Community Team’s first and most important job is to help you, the users. Every day, we hang out on meta sites and in chat, watching to make sure that someone is working on your problems. Until very recently, community managers also fielded each and every request that came through our support ticketing system. (And before that, Jeff Atwood handled them all. The whole team@ inbox, singlehandedly.) Our approach to customer service via email has changed as the network has grown: we’ve tried many new processes and tools over the years to help community managers handle team@ efficiently and still have brainpower left over for the rest of their jobs. (If you’re curious about it, you can take a look at Jon Ericson’s ongoing blog series.) But still, support tickets stack up and all too often lose out to more pressing issues on the sites themselves; more and more often, we found ourselves struggling to resolve problems as they came in, much less fix them in two ways. Some companies respond to this problem by just giving up, hiding support emails and shunting requests into a poorly-monitored forum somewhere. We know this because we’ve repeatedly gotten emails from members of such sites, from people searching desperately to find anyone willing to help. But we don’t believe in treating our users – the people whose patronage we depend on – as annoyances to be brushed off and forgotten. So we decided to double down on our commitment to friendly and efficient user support: we’ve hired two new staff members to handle email support full-time. And we hired them from the communities they will be supporting. Please join me in welcoming our two new Community Growth Operations Specialists Kyle, aka animuson: Kyle was an elected moderator on Stack Overflow, spending a significant amount of his time helping out others on the site. Some personal background: He visited Australia for 18 days as a student, which is probably longer than you’ve ever spent in Australia (unless you live there); He plays an obsessive amount (his words) of video games, and has over 100 platinum trophies on the PlayStation Network; He previously worked at his county’s Election Commission, which is (unintuitively) the most non-political job one can have. JNat: JNat was a pro tempore moderator on Anime & Manga SE, contributing greatly to the health and growth of that community. Some personal background: He studied Arts in high school and has a masters degree in Architecture and Urbanism, so it should be obvious how he ended up in operations for an internet Q&A community; He’s Portuguese, so Gabe now has some assistance in supporting the needs of our Portuguese-speaking members. He credits his love for anime and manga with getting him this awesome new job. You might be thinking: “Wait. Operations Specialists? I thought they were just handling emails.” But that would be a waste of their considerable talents. Once JNat and Kyle have tackled team@, there’s no telling how many new and efficient ways they’ll find to help make our team better at supporting our communities. If ever you find yourself having to contact us, it’s likely that these brave souls will be fielding your request. Feel free to say hi, or tell them what the best part of your week has been so far!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/04/15/two-new-user-pages-one-new-stat-this-on/","date":"2015-04-14T22:00:00.000Z","tags":["Company"],"title":"Two new user pages. One new stat. This one’s big.","text":"In the time since we started working on the profile, generations of dinosaurs were born, fell in love, had families, and were killed by a comet. Or climate change, or maybe texting and driving or some nonsense like that. Anyway, as of today, it’s live on SO and about half the network, and we’ll be rolling out to the rest over the next few weeks. And it was worth the wait: One user page isn’t cool. You know what’s cool? A billion user pages. Unfortunately, the designers said I could have… like two, maybe? At most. So, we went with that: One page for you, one page for them: The Profile Page lets you show others a summary of what you’re all about. Share your interests, favorite charities, or your Twitter, Github, and SO Careers activity. Or don’t. And it automatically shows off your most helpful posts and tags from the network. The Activity Page lets you instantly see just how much good you’ve done here. And it provides new, individual suggestions for specific ways you can contribute next. How many people have you helped? “People Reached” is a new way to see just how much your efforts here matter. For the first time ever, you can see roughly how many times an actual human being – very likely one looking for help – found your contributions here. Personally, I like to call it the “Saving-the-frigging-world-o-meter”. Which may be why I’m no longer allowed to name stuff. Whatever. Not big on words? Stop reading this. It’s long. Just go touch it! Already have a profile? Go update it; you can add new Twitter, Github, and Careers links, and you’ll want to check your “People Reached” to see just how many people out there would high-five you if they could. Never filled out a profile? If you’ve ever gotten help here, create one today, and you’ll be ready to pay it forward the next time you run across a question you can answer. And the new layout is designed to make you look pretty great even before you post. Sticking around for the details? Well, I warned you. Why?!? Grimlock say NO changies! I LIKED THE OLD CHEESE! Why the change? Well, the legacy user page served proudly for many years, but the design team got bored. And they had some long, tedious point about black never really being black, or tortoise-shell glasses or something, so we eventually just gave in. (Okay, not really.) Because the old page was being asked to do two different things, it was okay at both, but not awesome at either: When you looked at your own profile , the top section was full of stuff that you A) know, B) can’t forget, and C) almost never changes. “What’s my name?” “Where do I live again?” At least “Age” was exciting roughly 0.3% of the time: “Whee – it’s my birthday today!!” When other people looked at your profile, the whole bottom section was full of stuff that you may care about, but others probably didn’t. (“It’s sure been a while since Jay accepted a bounty – I hope he’s doing okay!”) So, we left all the stuff that was working exactly the way it was, and split the info into two pages. Anyone can see either page, but the default view will be the one with the info that you actually care about. Your beautiful new Profile Page: Show others what you’re all about. What do you want to share? What you do. What you build. Your favorite quote, or least favorite N’Sync member. (Just kidding. They’re all equally awesome.) Let others see your best work, whether it’s here or on other sites. Not active here yet? Not a problem. The new profile has dedicated fields for links to Github, Twitter, your Rick Schroeder Fan Fiction Tumblr, or wherever you have something to share. If you never felt you needed a profile before, today just may be your day. Already been helpful? We’ll show off your best work. Your top posts – along with the technologies or tags you’re strongest in – show others what you’re all about. And if you’re active on multiple communities, your best stuff from those sites will show in the sidebar, too. The new Activity Page: Track your impact and find new ways to contribute. Not sure what to do next? We’ve got you covered. “Next Badge” helps you figure out where you can contribute next. If you’re new, it suggests badges that help you learn the ropes. If you’ve been helping for years now, it suggests badges for activities you seem to have enjoyed in the past. And for most of ’em, it links right to a half-decent place to go earn them. Wondering what your future holds? The “Next Privilege” bar offers a slightly more realistic goal than “catch Skeet“, tells you what powers are in your immediate future, and shows you just how close you are to earning them. Already have mod-like powers? Not a big fan of “other peoples advice”? Good for you! Don’t let the man tell you what’s up. The next badge picker lets you pick the goals you want to track, and shows you just how close you are to each of ’em. And the page adapts to serve our most generous users. Once you’ve earned all the privileges, the “next privilege” bar automatically starts tracking your progress toward your closest tag badge (or another one of your choosing). 70 million humans in need land here each month. How many find your posts? Long before I worked here, the thing I found most appealing about contributing to Stack Exchange sites was the idea that when I took the time to write something here, my efforts would help more people than they ever could buried on some forum. An answer here doesn’t just help the one original asker, or the five up-voters. The real impact comes from the sixteen thousand searchers who land here looking for help with the exact same problem. Every time you take five minutes out of your lunch break, or ten that you might have spent watching creepy hands open eggs to post here instead, you’re choosing to donate some of your most most valuable asset to do some good. And holy crap, have you done a lot of it. In the past, we hadn’t given you any way to even estimate just how much, though. Today, we’ve fixed that. So if you’ve contributed even a few up-voted posts, go- take a look. I think you’ll be damn proud of what you find."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/04/07/stack-overflow-developer-survey-2015-the-results/","date":"2015-04-06T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Developer Survey 2015: The Results","text":"Every year we ask our users to tell us a little about themselves. This year we asked our users to tell us a lot. For 2 weeks in February 2015, we ran a 45 question survey. We asked where you live, what programming languages & frameworks you use, how much money you make, how much coffee you drink, and whether you prefer tabs or spaces when writing code. More than 26,000 of you responded, making this year’s survey quite possibly the most authoritative developer survey ever conducted. A few findings: Only 48% of you have a degree in computer science. You spend, on average, more than 7 hours every week coding on the side. You use JavaScript. You love Swift. And you want to code in Node. You overwhelmingly like your jobs (especially if you live in Iran). Your Stack Overflow rep is a strong indicator of how much money you make. And you prefer tabs to spaces at a ratio of 4:3. This is just a start. Check out the full results. Massive thanks to everyone who shared information about themselves. There’s a huge benefit in being able to see who your peers are and what they’re interested in, and we hope this survey is as interesting to all of you as it is to us. For those of you who want to dive into the data yourselves, we’ll be releasing a full dump of all line-by-line responses within the next couple weeks. And if you took the survey and counted M&Ms, or if you’re just curious about how well devs can estimate packing density (spoiler: not very well), see how many M&Ms were in the jar. Have ideas for what we should ask next year? Let us know in the comments."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/03/25/podcast-63-the-plumbers-up-to-67-coins/","date":"2015-03-24T23:00:00.000Z","tags":["Company"],"title":"Podcast #63 – The Plumber’s Up To 67 Coins","text":"Welcome to the Stack Exchange Podcast Episode #63, recorded March 6, 2015 in front of a live-ish audience. Today’s podcast is brought to you by Cool Whip by Kraft Foods. A description for this result is not available because of this site’s robots.txt — learn more! Our hosts today are Joel Spolsky, David Fullerton, and Jay Hanlon… as usual. So what’s new? David went to London. (We have an office there. It’s awesome and it has graffiti on the walls.) David flew out to meet the London marketing team, spend time with some of our European developers, and get knighted. Probably. This story didn’t really go anywhere, so we’ll take an audience question and then move on to talking about review queues. Specifically: the Help & Improvement queue. (Let the record show that Joel asked for this feature approximately 700 years ago. [So did Jon Skeet. -Ed.]) The Help & Improvement queue (aka the helpers queue, aka the huggy queue) contains questions that were deemed “Should Be Improved” in the triage queue. The triage queue is working very well so far. (There are numbers with percentages and two decimals of accuracy, so they are obviously really good.) Instead of talking about it more, let’s just go check it out! Here’s the question Joel was working with. Joel discusses some questions that got as much help as they deserved (if not more), including an example that got some helpful edits comments. But without better information from the askers, these questions were still never going to get good answers. User Lynn Crumbling has a new badge idea: Almost Famous — had a question closed by Joel. After many tangents, here are the takeaways from our experience so far with the helpers queue: we need to think about how to better control what’s going into the queue, and we need to give the reviewers more ways to deal with questions that shouldn’t be in there. Right! Let’s talk about closing. But first we get sidetracked and talk about moving datacenters and blogging about it. It’s a great post, especially if you’re into this kind of thing: On top of NY-VM01&02 was 1 of the 1Gb FEXes and 1U of cable management. Luckily for us, everything is plugged into both FEXes and we could rip one out early. This means we could spin up the new VM infrastructure faster than we had planned. Yep, we’re already changing THE PLAN™. That’s how it goes. (Oh, and the SRE team got snowed in and had to sleep in the datacenter. There’s that, too.) But here’s the blog post we actually meant to talk about: My Love-Hate Relationship with Stack Overflow by Jason S. It inspired David to come back from vacation to rant about it in chat for an hour. He helpfully re-creates this rant (with help from Joel and Jay) live on the podcast! So what came out of this discussion? We changed close vote aging, for one thing. Community Manager Jon Ericson‘s meta post thought experiment about close voting was another. Thanks for listening to the Stack Exchange Podcast, brought to you by Cool Whip — a whipped topping, NOT whipped cream."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/02/12/education-begins-at-home-improving-developer-training-in-nyc/","date":"2015-02-11T23:00:00.000Z","tags":["Company"],"title":"Education begins at home: Improving developer training in NYC","text":"The core goal of Stack Exchange is education. Everything we build is geared toward helping people learn from one another — not just the nuts and bolts of their profession or passion, but the universal skills of how to better communicate and learn. As we’ve grown as a company, we’ve benefited from many resources to assist in educating developers out of our office space, including hosting local meetups and partnering with the Flatiron School and Fog Creek for a mentorship program. Today, we’re excited to announce our partnership with the New York City Tech Talent Pipeline, Mayor de Blasio’s new initiative designed to increase the number of qualified candidates for open tech positions in New York City. That’s nice. But how? The city has brought together a number of major companies that hire developers in NYC and asked us to do two things: Join a committee designed to help the city identify ways it can use its resources to attack the problem more broadly (through the education system, etc.), and Implement programs we can run, possibly with the help and support of other awesome like-minded tech companies in the city. On the first point, we’re excited that our VP of Engineering, David Fullerton, will be sitting in on quarterly meetings with other tech industry leaders convened by Mayor de Blasio, where we hope we can help to represent the developer voice and to share what skills and technologies we know are most in-demand. For the second, we’ve already brought in a bunch of (awesome) NYC companies — including Trello, Kickstarter, Foursquare, Tumblr, and Control Group — who will build and teach a new curriculum of programmer “soft skills” to graduates of public computer science programs in New York (starting with the CUNY system) that will better equip them as professional developers. The goal is to make sure that anyone in this city with a passion for technology, no matter who they are or what neighborhood they grew up in, can get the mentoring, training, and support they need to succeed as a developer. Why are we doing this? As you probably know, there’s a vast disparity between open tech jobs and qualified developers in today’s market. At last count, there are nearly 5 job openings for every one job-seeking developer. With New York City’s current tech job count teetering at around 300,000 job openings, we need to increase the number of good candidates or a lot of websites aren’t going to get built. The city needs developers. And this happens to be an area that we know a thing or two about. Our goal is to support and empower developers, no matter where they may be in their programming careers. Despite our well-known belief in remote work, our founder has always been a particular proponent of building great places in New York for those developers who do want to work in a more communal space. Like many tech companies, we’ve been giving a lot of thought to how we can promote inclusion, both internally and in the tech community as a whole. We don’t pretend to have figured it all out, but this is just one thing we’re excited to share. As always, we welcome any ideas you may have."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/02/04/podcast-62-delete-this-whole-episode/","date":"2015-02-03T23:00:00.000Z","tags":["Company"],"title":"Podcast #62 – Delete This Whole Episode","text":"Welcome to Stack Exchange Podcast #62, recorded live on January 20th–with a live studio audience (kinda)!. Today’s podcast was brought to you by the American Venture Capital Association. With you today are our hosts Jay Hanlon, David Fullerton, and Joel Spolsky. Let’s jump right in: we made a big announcement! Andreessen Horowitz has invested a pile of money in our little company so we can improve our ‘programmer forums’. Precisely none of the pile of money is going into Jay’s raise, but one of those dollars is going to SomeKittens. So, the (forty) million dollar question: how are we going to use this money? (not on supporting ancient browsers.) We intend to (continue) spending money on Stack Overflow Careers. Our goal is to get every programmer a better job, and we want to do that without selling crazy-takeover-animated-bonzaibuddy-ads that feel like reading a newspaper on the subway (according to Joel), so we’re getting money from investors instead. How are we going to make this happen? We plan to revisit the developer side of the Careers equation and figure out how to make that better. More features to let programmers search and filter for interesting jobs (for example, you can look for Javascript jobs or specifically Node.js jobs), update the way profiles work, etc. – more of the stuff we were going to work on anyway. Careers is already a very developer-focused product: we limit the things our employers can do heavily based on what drives programmers nuts. For example, we only let employers contact a limited number of candidates unless those candidates actually respond, and we disallow contingency recruiters. (A pox on all of their houses.) You can get a Careers profile here. We filter the applications to make sure only real programmers end up with profiles on Careers. Time to take some questions from the peanut gallery! How will this [investment news] affect the sites? Not one bit! Well, a few bits. This cash will allow us to hire more designers, so more sites can graduate and get beautiful site designs. We’ll get to hire more people to hit more of our goals at the same time. For example, one of the things we’re actively working on now is improving search on Q&A sites. Have we mentioned lately that we’re hiring? Our most urgent need is for product managers, and you can apply for that job even if you’ve never had ‘product manager’ in your job title before. Will there be someone to represent the rage quitters? Yes. You’re hired. Thanks for volunteering. Would you consider being an intermediary, putting a “Buy This Person’s Time” on their profile page or answers? No! (Sorry, Brent.) Has the Stack Overflow design update changed user behavior? We’ve noticed a big uptick in the number of people complaining about how blue and cream go together. We’ve also gotten a lot of constructive feedback on meta that we’ve used to inform tweaks (but it’s really hard to distinguish those from comments about how people’s cheese has been moved). Can you comment on whether SO rep is useful to a job search? Lots of employers out there don’t know what Stack Overflow is, but Joel is going to use some of those 40 million dollars to educate them. But from our perspective, posting on Stack Overflow is more like blogging in that it can tell you a lot about a programmer and how they interact with the developer community. Stack Overflow reputation alone doesn’t always tell you about the second half of “smart and gets things done”. Will you be making a Windows Phone app? Not for the foreseeable future. This question makes our mobile lead sad. Are there any plans to add a chat feature to the mobile application? (Mobile lead Kasra just dropped dead.) We may add chat to the mobile app yet, but it’s not in our 2015 plan. Are we going to ever allow wildcards in searches? Currently in chat it just nulls the search. Chat search is weird and backwards, but actual site search allows a certain amount of wildcards. This will get a better response if you post it on Meta and our search devs can actually respond! What happened to the videos idea? We first thought about Stack Overflow TV a while back. We hope to expand into areas of developer learning beyond questions and answers someday, and SOTV is one of those ideas. It will essentially be a YouTube channel with little introductory videos on topics in programming. The idea has hit some snags, but it’s still on our radar. Do you have any plans to run hackathons to promote local user groups? Yes! On a small scale, we make our office space available to local user groups who need a place to meet. And we’re out of questions. So what else is going on these days? Hats! And some new sites. How about new features? We’re experimenting with a new triage queue to help sort questions into “hopeless and needs to be burninated” and “could be passable with some editing” buckets. Things in the triage queue won’t show up on the homepage until they’ve been approved. Here are the details. Joel wants to sign off, but first make sure you check out Expression Engine SE’s new design. (Since this podcast was recorded, Movies SE has also graduated with a slick new theme.) Thanks for wasting an hour on the Stack Exchange Podcast Episode #62, brought to you by the American Venture Capital Association."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/01/27/targeted-jobs-for-stack-overflow/","date":"2015-01-26T23:00:00.000Z","tags":["Careers"],"title":"Targeted Jobs for Stack Overflow","text":"Stack Overflow Careers was announced five years ago with a simple mission statement: We believe that every professional programmer should have a job they love To help you find a job you love, we need to match you with the right job at the right time. We do that by helping you create a profile that brings the right employers to you, and by showing you relevant job ads from our job board on Stack Overflow. With over 6,000 companies that advertise on Stack Overflow Careers, we’re getting closer to our goal of having a great job for every developer. Until today, the job ads that we show on Stack Overflow were pretty stupid: they targeted solely based on location, and ignored all the other information about what you’re looking for and what kind of job it is. They didn’t even care about whether the job was in a technology that you were interested in. So today* we’re launching the first step in showing you jobs that we think are an actual match for you. *If you just ran to a question to see how targeted the jobs were and left disappointed, don’t worry. This feature is just launching today and most employers haven’t had a chance to target their jobs yet. You’ll see the difference over the coming months. Developer Types, Tech Ecosystems, and Tech Tags Many of you will start noticing that the jobs you see aren’t just in your area, but are related to the question you’re viewing, a question you’ve answered, or something you’ve asked about. We’re using this little bit of data, along with the location data we were already using, to predict what type of job you’re more likely to want to apply to. We then do some predictive modeling based on this information to target mobile jobs at mobile devs, front-end web development jobs at front-end devs, and even more complex stuff based on technology stack and specific tags. It’s difficult to show you an example of a targeted ad. We haven’t changed much about the ad design or even how the job is displayed in the ads. However, we can show you the other side, how the employer is targeting their jobs. This is all organized into three tiers of targeting criteria: Developer Types: The broadest description of a developer. Technology Ecosystems: A narrower description, best described as tag clusters. Python includes frameworks like Django and Flask. Cloud (back end) implies knowledge of AWS, Microsoft Azure, Rackspace, etc. Stack Overflow Tags: The most finely-grained descriptor. These draw straight from the top 1,000 most popular tags on Stack Overflow. It’s really that simple. Once employers fill out a targeting profile for a job, we’ll try and predict which of those jobs you’ll be interested in. Fine, but these are just ads. Why should I care? Hopefully this doesn’t change much about how you use Stack Overflow in your daily life. Job ads are only a small part of our page content, but we hope this launch will improve your odds of seeing the right job opportunity at the right time. So far it appears to be working. Initial testing of targeted jobs over the past few months have demonstrated significant progress toward our goal of showing relevant job ads to each developer, as clickthrough rates increased 21-30%. Not bad for a V1! We also want to let you know exactly how we’re targeting jobs, so our newly created data team will be talking about building out the infrastructure for this project, and all the details of what went into it. You can follow these posts on Kevin Montrose’s blog starting today. Jason Punyon will also be adding to this series later this week and next. Additionally, if you want to see your personal prediction data, or if you want to disable predictions, you can do that from the user preferences page. This sounds cool; I want to use it to hire a developer! If you want more details on how this works for employers, go visit our Stack Overflow Careers blog. If you want to dive right in, you can post a job now and fill out a targeting profile. And if you already have a job running, you can edit it to add targeting for the rest of its run. That’s it! As always, if you have questions or comments feel free to post on Meta Stack Exchange in the ‘Careers’ tag."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/01/20/andreessen-horowitz-invests-in-stack-exchange/","date":"2015-01-19T23:00:00.000Z","tags":["Company"],"title":"Andreessen Horowitz Invests in Stack Exchange","text":"Stack Exchange Raises $40m Today Stack Exchange is pleased to announce that we have raised $40 million, mostly from Andreessen Horowitz. Everybody wants to know what we’re going to do with all that money. First of all, of course we’re going to gold-plate the Aeron chairs in the office. Then we’re going to upgrade the game room, and we’re already sending lox platters to our highest-rep users. But I’ll get into that in a minute. First, let me catch everyone up on what’s happening at Stack Exchange. In 2008, Jeff Atwood and I set out to fix a problem for programmers. At the time, getting answers to programming questions online was super annoying. The answers that we needed were hidden behind paywalls, or buried in thousands of pages of stale forums. So we set out to build Stack Overflow with a single-minded, compulsive, fanatical obsession with serving programmers by building a better Q&A site. Everything about how Stack Overflow works today was designed to make programmers’ jobs easier. We let members vote up answers, so we can show you the best answer first. We don’t allow opinionated questions, because they descend into flame wars that don’t help people who need an answer right now. We have scrupulously avoided any commercialization of our editorial content, because we want to have a site that programmers can trust. Heck, we don’t even allow animated ads, even though they are totally standard on every other site on the Internet, because it would be disrespectful to programmers to strain their delicate eyes with a dancing monkey, and we can’t serve them 100% if we are distracting them with a monkey. That would only be serving them 98%. And we’re OBSESSED, so 98% is like, we might as well close this all down and go drive taxis in Las Vegas. Anyway, it worked! Entirely thanks to you. An insane number of developers stepped up to pass on their knowledge and help others. Stack Overflow quickly grew into the largest, most trusted repository of programming knowledge in the world. Quickly, Jeff and I discovered that serving programmers required more than just code-related questions, so we built Server Fault and Super User. And when that still didn’t satisfy your needs, we set up Stack Exchange so the community could create sites on new topics. Now when a programmer has to set up a server, or a PC, or a database, or Ubuntu, or an iPhone, they have a place to go to ask those questions that are full of the people who can actually help them do it. But you know how programmers are. They “have babies.” Or “take pictures of babies.” So our users started building Stack Exchange sites on unrelated topics, like parenting and photography, because the programmers we were serving expected—nay, demanded!—a place as awesome as Stack Overflow to ask about baby feeding schedules and f-stops and whatnot. And we did such a good job of serving programmers that a few smart non-programmers looked at us and said, “Behold! I want that!” and we thought, hey! What works for developers should work for a lot of other people, too, as long as they’re willing to think like developers, which is the best way to think. So, we decided that anybody who wants to get with the program is welcome to join in our plan. And these sites serve their own communities of, you know, bicycle mechanics, or what have you, and make the world safer for the Programmer Way Of Thinking and thus serve programmers by serving bicycle mechanics. In the five years since then, our users have built 133 communities. Stack Overflow is still the biggest. It reminds me of those medieval maps of the ancient world. The kind that shows a big bustling city (Jerusalem) smack dab in the middle, with a few smaller settlements around the periphery. (Please imagine Gregorian chamber music). Stack Overflow is the big city in the middle. Because the programmer-city worked so well, people wanted to ask questions about other subjects, so we let them build other Q&A villages in the catchment area of the programmer-city. Some of these Q&A villages became cities of their own. The math cities barely even have any programmers and they speak their own weird language. They are math-Jerusalem. They make us very proud. Even though they don’t directly serve programmers, we love them and they bring a little tear to our eyes, like the other little villages, and they’re certainly making the Internet—and the world—better, so we’re devoted to them. One of these days some of those villages will be big cities, so we’re committed to keeping them clean, and pulling the weeds, and helping them grow. But let’s go back to programmer Jerusalem, which—as you might expect—is full of devs milling about, building the ENTIRE FUTURE of the HUMAN RACE, because, after all, software is eating the world and writing software is just writing a script for how the future will play out. So given the importance of software and programmers, you might think they all had wonderful, satisfying jobs that they love. But sadly, we saw that was not universal. Programmers often have crappy jobs, and their bosses often poke them with sharp sticks. They are underpaid, and they aren’t learning things, and they are sometimes overqualified, and sometimes underqualified. So we decided we could actually make all the programmers happier if we could move them into better jobs. That’s why we built Stack Overflow Careers. This was the first site that was built for developers, not recruiters. We banned the scourge of contingency recruiters (even if they have big bank accounts and are just LINING UP at the Zion Gate trying to get into our city to feed on programmer meat, but, to hell with them). We are SERVING PROGRAMMERS, not spammers. Bye Felicia. Which brings us to 2015. The sites are still growing like crazy. By our measurements, the Stack Exchange network is already in the top 50 of all US websites, ranked by number of unique visitors, with traffic still growing at 25% annually. The company itself has passed 200 employees worldwide, with big plush offices in Denver, New York, and London, and dozens of amazing people who work from the comfort of their own homes. (By the way, if 200 people seems like a lot, keep in mind that more than half of them are working on Stack Overflow Careers). We could just slow down our insane hiring pace and get profitable right now, but it would mean foregoing some of the investments that let us help more developers. To be honest, we literally can’t keep up with the features we want to build for our users. The code is not done yet—we’re dedicating a lot of resources to the core Q&A engine. This year we’ll work on improving the experience for both new users and highly experienced users. And let’s not forget Stack Overflow Careers. I believe it is, bar-none, the single best job board for developer candidates, which should automatically make it the best place for employers to find developer talent. There’s a LOT more to be done to serve developers here and we’re just getting warmed up. So that’s why we took this new investment of $40m. We’re ecstatic to have Andreessen Horowitz on board. The partners there believe in our idea of programmers taking over (it was Marc Andreessen who coined the phrase “Software is eating the world”). Chris Dixon has been a personal investor in the company since the beginning and has always known we’d be the obvious winner in the Q&A category, and will be joining our board of directors as an observer. This is not the first time we’ve raised money; we’re proud to have previously taken investments from Union Square Ventures, Index Ventures, Spark Capital, and Bezos Expeditions. We only take outside money when we are 100% confident that the investors share our philosophy completely and after our lawyers have done a ruthless (sorry, investors) job of maintaining control so that it is literally impossible for anyone to mess up our vision of fanatically serving the people who use our site, and continuing to make the Internet a better place to get expert answers to your questions. For those of you who have been with us since the early days of Our Incredible Journey, thank you. For those of you who are new, welcome. And if you want to learn more, check out our hott new “about” page. Or ask!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/01/16/why-we-still-believe-in-private-offices/","date":"2015-01-15T23:00:00.000Z","tags":["Company"],"title":"Why We (Still) Believe in Private Offices","text":"There was a time where it seemed like we barely even needed to talk about this: Joel had won the argument, the Internet agreed that private offices were the future, and only incompetent management (or a tight budget) was still putting developers in cubicle farms. A glorious future lay before us. The original Fog Creek Bionic Office, way back in ye olde 2003. We didn’t have iPhones, but at least the offices had doors. Unfortunately, that’s not quite how it turned out. Open plans have been surprisingly hard to kill, despite research showing that they’re unpopular, decrease employee satisfaction, and hurt productivity. The response so far seems to have been to double down and make it, if anything, worse: cubicles are now decidedly un-cool so no-wall open offices are all the rage, and Facebook brags that its new building will be the largest open floor plan in the world, consisting of a single, ten acre open room. The result is that today Stack Exchange is decidedly lonely if not quite alone in offering private offices to our developers (at least the half who work in the office; the other half work remotely). Suddenly we’re the ones who look a bit old-fashioned: isn’t that the old-school Microsoft approach? Doesn’t it make us less creative? How can we stay fast and agile if people keep disappearing into offices to do work? We’re pretty sure it doesn’t do any of these things, and in fact we believe it has a lot to do with how we think about work and our developers. Find your own rhythm Joel’s management philosophy is deceptively simple: hire smart people who get things done, and get the hell out of their way. The role of management is to give the people who actually do the work — the developers, designers, sysadmins, etc. — all the tools they need to get their jobs done, and then trust them to do the job! This means we give you the space and expect you to find your own rhythm of work. With a private office, you’re in control of your space and attention: you can choose when to close the door and avoid interruptions, and when to go play ping-pong, talk with coworkers or work out of the coffee bar. In an open office you’re at the mercy of the people around you: if they’re talking, the best you can do is crank up your headphones and hope to drown them out, and if they’re playing foosball then good luck. Everybody has their own rhythm. People come in at different times, take breaks at different times, need to socialize at different times, and have their most productive hours at different times. Management’s job is to accommodate that and create a space where all those conflicting needs don’t congeal into a persistent hum of distraction — not to enforce some top-down ideal of openness and creativity. Private offices put the people who do the actual work in control. Motorized standing/sitting desks come standard, including for remote employees. Keep the nexus of activity online We are an online company: we’ve been remote from day one and still to this day over half of the team (aside from sales) works from home. The only way to make that work is to keep the nexus of activity online: in chat rooms, Google Hangouts, Trello boards, etc. This keeps everyone on equal footing, whether you’re in the office or working from home. Want to know what’s going on? Just check Trello and chat. Don’t go hang out around the watercooler. This creates a magnificent culture of non-distraction. Whenever we get a new hire in the office, I make it a point to sit down with them in their first week and explain that they should not go to someone’s office when they have a question. Instead, ping them in chat and then jump on a hangout. The result is exactly the sort of culture that open offices are supposed to promote but better: If someone else sees the message, they can chime in with the answer If someone else is interested in the discussion, they can jump onto the hangout And, crucially, if someone is working heads-down and doesn’t want to be distracted, all they have to do is close the chat window. This really is the best of both worlds, and one of the reasons that I’m a big advocate of remote work culture even if nobody works remote. And a big part of what makes it possible if you’re working out of an office is having a door you can close so you’re not distracting your coworkers. Glass walls let in tons of natural light. It’s not as creepy as you think. Schedule time for cross-pollination The result is that we get a lot of work done and individuals are fantastically productive. The only thing missing is to make sure that we’re facilitating those cross-team connections that open offices pretend to get you for free. We solve that in a few simple ways: daily lunch together in the office, weekly “Beer Bashes”, and an annual company meetup. Joel has written a lot about the benefits of eating lunch together and we’re still big believers in it. Some people get a little weirded out by this so I’ll clarify: lunch together is not required, but anyone who skipped it completely would be missing out on some great food. At Stack Exchange HQ in New York we’re lucky enough to have a full kitchen and our own professional chefs and the results are pretty amazing. Eating lunch together every day is a great way to connect with coworkers you wouldn’t otherwise have talked to, though it doesn’t quite tie in the remote employees which is what makes the other approaches so important. Friday “Beer Bashes” have long been another in-office tradition: grab a tasty beverage (alcoholic or not, nobody really cares) and hang out with some of your esteemed colleagues on Friday afternoon before taking off for the weekend. Recently we’ve been experimenting with Remote Beer Bashes via Google Hangouts, with some pretty fantastic results. Now even the remote people can join in and have some fun, even if it’s closer to midnight or freakishly early in their time zones. Finally we have an annual engineering + community team meetup. We could write a whole post on this, but one of the points we make every year is that the primary goal of the meetup is to meet people and hang out — any work done is merely a side benefit. This last year we had a pretty great mix of presentations, meetings, and a strange obsession with hangman (oh, and an impromptu war room when we were hit with a novel DDoS attack). The whole thing was a huge success (even the war room) and really got a lot of different teams talking to each other and solving problems together. Lunch served every day at Stack Exchange. That’s how we work Now, of course, the caveat: this is what works for us, and we understand it’s not for everyone. Maybe some places really are more creative because they have open plans. We don’t actually even give everyone private offices: some people are doubled up in offices, and the sales and marketing teams sit in larger open spaces because they feel that’s an important part of how they work. But it’s continually astonishing to me that more companies aren’t talking about private offices for developers, and that open plans have become the expected norm in the industry. At the very least we should be considering all the benefits that private offices provide. Oh, and did I mention we’re hiring? If this sounds like the kind of place you’d like to work — whether out of the office or from home — we’re hiring for a lot of positions in 2015 across all three offices and remote. In closing, I’ll leave you with a few choice pictures of our office. If you’d like to explore more, check out the Google street view tour of the NYC office. We also have sales offices in Denver and London which you can check out. Serious work being done. Obligatory ping-pong table. Meeting space and cluster of offices. Would also qualify for Random Cups at Stack Exchange Can’t beat that view. Oh, and if you’re worried about our remote developers, we make sure to set them up with some pretty sweet equipment too: A remote developer‘s home setup. Obviously a designer. And yes, he has a sketch of himself on his wall. Obviously less of a designer. But look at all dem monitors!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/01/08/year-in-review-2014/","date":"2015-01-07T23:00:00.000Z","tags":["Community"],"title":"Stack Exchange Year in Review 2014","text":"We – which is to say, you, the Stack Exchange community – had another great year in 2014. We cracked Quantcast’s top 50 networks in the US. We did this without posting celebrity gossip, top 10 lists, or cat pictures. We did it by creating artifacts: useful, canonical bits of information, edited, refined, and curated by our community. By donating your knowledge to the largest community of developers in the world, you’ve been able to create a slice of the Internet that is indeed a better place. Amidst the noise, clutter, and chaos of the web, you’ve built one of the largest, most trusted knowledge repositories ever created. How many times did people looking for help find your solutions last year? If you were to take the number of visitors to Stack Exchange sites in 2014, it would be larger than the populations of the United States, Russia and Brazil combined. (Accommodating this many visitors would not be possible without our remarkably lean infrastructure, which served 6.4 billion pageviews last year alone.) By the Numbers Let’s focus on how much you did in 2014 to share your knowledge: 3.1 million new questions asked 4.5 million answers submitted 2.7 million edits, which made those posts even more helpful 17 million comments 3.6 million reviews 21 million upvotes; 3.2 million downvotes; 1.8 million accepted answers Community Highlights In 2014, we launched 20 new beta sites that you proposed through Area 51, bringing us to a total of 133 communities spanning topics as diverse as Economics, Startups, and Buddhism. 5 communities graduated from beta and were fully launched with snazzy new designs: Personal Finance and Money, Graphic Design, Academia, The Workplace, and Salesforce. We released native mobile apps for iPhone, Android, and iPad, (with an Android Tablet version in the works). Just a year in, hundreds of thousands of you have installed them, and you’ve posted more than 15K posts from the bathroom mobile apps. We launched Portuguese and Japanese Stack Overflows, our first non-English SOs. Portuguese is now officially our second fastest-growing community ever after hitting 10,000 questions in only 9 months. Stack Overflow Careers added 3,700 new company pages and 29,000 job listings. Finding a better job should be as easy for developers as finding answers on Stack Overflow. Content Superlatives Numbers are fine, but answers are better. Let’s look at some of your top posts from 2014. Most viewed post: What is the optimal algorithm for the game, 2048? (Stack Overflow, 679k views) Honorable mention: Visually stunning math concepts which are easy to explain? (Mathematics, 304k views) Most upvoted answer: Why is printing “B” dramatically slower than printing “#”? (Stack Overflow, 2109 votes) Honorable mention: Why does Windows think that my wireless keyboard is a toaster? (Super User, 1293 votes) Most anonymous votes: Produce the number 2014 without any numbers in your source code (Code Golf, 997 anonymous upvotes on the linked answer) More Highlights We worked on a lot of open source projects this year, not least bosun, a sophisticated monitoring system. _Everything _we’ve achieved is thanks to the generosity of our users, so we’re proud to give back. We donated over $60,000 to some of our favorite projects on behalf of our invaluable moderators. We grew to 205 employees here at Stack Exchange (the company), more than 20% of whom work remotely. We now have people in 11 countries with physical offices in New York, London, and Denver. If you want to join us in serving the world’s programmers while building a better, smarter Internet, we’re hiring. You blew us away last year. Thank you. We can’t wait to see what you’ve got in store for 2015."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2015/01/06/so-long-winter-bash-2014/","date":"2015-01-05T23:00:00.000Z","tags":["Community"],"title":"So long Winter Bash 2014","text":"While testing hats before the start of Winter Bash 2014, a snowflake notification told me I’d earned the Treasure Hunter hat. After adjusting pirate paraphernalia to fit my head, I tried to remember what triggers this particular hat. As it happens, I’d just received a gold badge on Cooking that I would’ve totally ignored if not for the associated hat. Suddenly I understood why this time of year resonates with our most accomplished users. Earning cosmetic items, as silly as they are, temporarily reminds us of what it was like to begin participating on Stack Exchange months or years ago. Plus, hats look really cool. This year 84,439 users earned a total of 244,865 hats, which is slightly up from last year. Secrets revealed The most common hat (awarded 70,361 times to 39,499 distinct users) turned out to be the secret Chameleon. On Meta Stack Exchange folks correctly noted that it was triggered by editing certain fields in your profile. Our intention was that it would be triggered by changes in a user’s avatar. However, due to an otherwise low-priority bug, the hat seemingly was awarded randomly after profile edits. So the theme of this hat is less camouflage and more Mixed Up Chameleon. Two more secret hats, Fascinating (34,026 times to 25,017 users) and Fascinating, Ma’am (12,342 times to 10,526 users) were earned by voting on posts that were already quite well received. (The first was for upvoting an accepted answer with a score of 5 or more and the second was for voting up a question with 10,000+ views and a score of at least 25.) These are, of course, Star Trek references which brings the total to three. That compares to one Star Wars reference last year, for those keeping score. We awarded Warm Welcome (14,430 times to 9,597 users) to people who upvoted another user’s first post. It was gratifying to see so many of these hats awarded. Upvoting quality posts sets up a positive feedback loop encouraging a new user to post again. Each time I was awarded this hat, I felt good knowing that I’d done just a little bit to improve the overall quality of content on the site. Last year, abby hairboat did such a great job of wrangling hats we decided to prank her honor her with a hat awarded to those responding to one of her posts or comments. Hence, the HairBoat (awarded 699 times to 569 distinct users). She was so pleased that she promised to send me a gift: a box of live spiders. What a kidder! (In unrelated news, my oldest child will now earn a little extra allowance in exchange for his new title: Family Postal Inspector.) The last four secret hats were harder to earn than the most common four by more than an order of magnitude. Time Lord (404 times to 378 distinct users) was given for people who edited at least 5 questions more than a year old. Plenty of people edit older posts once in a while, but not many update that many out-of-date posts in a short period of time. One of my goals for designing hat triggers was to test potential permanent badge ideas. This trigger (which we also explored with the “A Link to the Past” hat last year) is something I hope to evaluate as a badge idea in the coming year. I was somewhat surprised with how few people earned Waffles (365 times to 331 users) for downvoting a question, editing it, and upvoting it in that order. Looking at the data, it turns out that only about 2% of people who edit a question and later upvote it had downvoted it first. During Winter Bash 2014, the ratio increased to about 10%. Likely some of the increase in pre-downvoting came from dedicated breakfast hat hunters. When you think about it, downvoting a post you are about to edit amounts to wasted effort. Either fix a post until it’s better or downvote and move on. In sum, a fun concept for a hat (especially if you like waffles), but not a good badge idea. Finally, we awarded 15 detectives with the Eureka! light bulb for correctly and independently guessing the trigger conditions for secret hats. We didn’t award Eurekas for guessing Eureka! itself this year since it was largely unchanged from last year. Non-secret hats The most common non-secret hat was Saint Lucia (25,444 times to 19,390 users). It was also the first awarded (December 14 at 1200 UTC). Yes, that’s a day late. Other time-based hats were: Solstice (7,581 times to 6,858 users), Kofia (4,152 times to 4,019 users), Gelt (813 times to 757 users), Bill Lumbergh (325 times to 318 users), Resolution (244 times to 222 users), Stockings Hung by the Fire (223 times to 196 users), and Mistletoe (207 times to 154 users). Due to timezones, we were pretty generous with the timing. But not Mistletoe, which required chatting within a ten minute period around January 1, 2015 0000 UTC. Thankfully our chat servers handled the load just fine. The mobile app must have been on our mind recently since there are a number of hats that required it: Bugdroid (7,115 times to 4,776 users), Not a cherry (3,829 times to 2,403 users), On The Road (511 times to 451 users), and Got a Tablet for Christmas (231 times). I personally got an iPhone 6 for Christmas and used the iOS app to earn “Not a cherry”. Verdict: my fingers are still too big for phone-sized keyboards. Maybe I should get a tablet. Right in the middle of Winter Bash, balpha allowed hats to be rotated 360°. Lots of folks took advantage of this to concoct brand new hats such as the Praying Mantis, Soccer Necklace, Crab Face Googly Eyes, Next Generation Earpiece, and, of course, the Mulletbeard™. The most difficult hat was the Red Baron earned by just 26 users. It required posting an answer that was so good it changed they way people looked at the question. A great example of how this works is this answer, which was submitted while the question was at -7. After the answer (and a strategic edit to the question), the question got 10 straight upvotes to bring the score to +3 at the time of writing. Without the hat, this amazing accomplishment would have gone unrecognized. Especially pleasing for us: the idea for this hat came from a user suggestion to replace the existing Reversal badge. When it comes to amazing, talented and dedicated users, Stack Exchange’s cup overflows. We’ve been asked to share statistics about hats this year, which we are happy to do. In the weeks to come, I will be reporting things we learned from Winter Bash over on Meta Stack Exchange. In the meantime, enjoy a few more of my favorite hat-wearing avatars: As last year, the hats were illustrated by Elias Stein. I hope you enjoyed his work as much as we did. Thanks Elias! Announcing the winners Everyone who participated is a winner! Okay, that’s not what you are here for. Four individuals top the network-wide leaderboard: Please join me in congratulating the users who earned all 38 hats across the network: Logan M (32 hats on Anime & Manga and last year’s winner) Martijn Pieters (35 hats on Stack Overflow) rolfl (34 hats on Code Review) Mike Miller (36 hats on Mathematics)* And with that, we must say a fond farewell to the hats of 2014. If you have any feedback on this year’s event, please weigh in on Meta Stack Exchange. The leaderboard counts hats earned across the network. While all four earned the maximum network-wide, the tiebreaker goes to the person who scored the most hats on their home site. Mike Miller’s 36 hats on Mathematics was the maximum he could earn. The two he missed on Math were HairBoat, since Abby hadn’t posted on his site and Kofia, which is awarded to brand-new posters only. Tags: winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/12/24/stack-exchange-gives-back-2014/","date":"2014-12-23T23:00:00.000Z","tags":["Background"],"title":"Stack Exchange Gives Back 2014","text":"There are few things that make me more proud to be part of the Stack Exchange community than the outpouring of good will that comes during our “Giving Back” program. Each year we set this time aside to remember the organizations and people who need our help by offering to make a $100 donation to charity on behalf of each community moderator. It’s just a small gesture of thanks to our moderators from each community whose hard work makes this all possible. In our sixth year of Giving Back, I started to wonder if asking Moderators to select their charities year after year might become somewhat routine and unremarkable. But it’s been quite the opposite. As December rolls around, the buzz and anticipation for this event gets stronger with each passing year — “When do we get to pick our charities?” — and when the selections finally go out, the passion and enthusiasm of folks rushing in to help is nothing short of remarkable. So on behalf of the 132 communities and the 433 Moderators of Stack Exchange, we were able to make the following donations to charity this year: And from our engineering team, let’s not forget the tools and organizations that make what we do possible: Git and the Software Freedom Conservancy — $1,000 HAProxy — $1,000 jQuery Foundation — $1,000 OpenBSD — $1,000 Charities embody some of the best qualities in all of us. Whether you’re fighting for a cause that is important to you, or helping someone whose life may be falling apart, there’s an almost indescribable bond that forms when neighbor embraces neighbor to overcome whatever difficulties you face. We may have not had our own Hurricane Sandy event this year, but when you’re giving back to help others, you can’t help but reflect back on those times when someone reached out to you, and you start to wonder if perhaps you’ve sparked that same feeling of hope and fellowship in someone else today… if even just a little. I would like to end this year with glasses held high — to thank all of you, the community of Stack Exchange, for helping us make all of this possible. It’s times like these that I will reflect back on and cherish always. Cheers!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/12/16/stack-overflow-in-japanese/","date":"2014-12-15T23:00:00.000Z","tags":["Community"],"title":"Stack Overflowへようこそ","text":"Hi English-language readers! This blog post is not for you; perhaps you’d like a hat instead? No? Well, when last we spoke of creating non-English versions of Stack Overflow, some of you were certain we should’ve gone the easy route and just leveraged a machine translation service instead of creating real sites for real people to use. I humbly invite you to read the rest of this post using the mechanical babelfish of your choice, and see if you think such tools can be relied on for important work… 2008年にStack Overflowが設立された目的は、プログラミングに関する質問の全ての回答をまとめあげ、それらを提供する場を作る事でした。Stack Overflowの誕生以前は、プログラマー自身が自身の貴重な時間を使い、複数のブログ、掲示板やニュースグループで回答を検索した上で、その回答が有効か否かを自分自身でチェックするしかありませんでした。 現在、Stack Overflowは700万個以上の質問をまとめている事で、毎月4,400万人のプログラマーをサポートしています。そしてそのうち60万人以上もの人が日本からアクセスしています。Stack Overflowは英語のサイトにも関わらず、日本のプラグラマーのプログラミング問題を解決する為の必要なツールになってきました。 Stack Overflow日本語版へようこそ 日本には100万人以上のプログラマーがいます。 Stack Overflow日本語版の誕生により今後は、英語と格闘しながらプログラミング問題を解決する必要が無くなります。 2014年12月2日にStack Overflow日本語版のプライベートベータを開始し、1週間で1000人以上のユーザーと100個以上の質問が集まりました。そして今、日本の全てのプログラマーに開放する運びとなりました。Stack Overflow英語版と同じ様に皆様と一緒に日本語でのリソースを作成しましょう。 日本のプログラマーを応援しましょう これからは日本語でのプログラミングに関する質問や回答の投稿が可能となります。今日から投稿して頂く質問は将来の日本人プログラマーのサポートとなります。日本のプログラミング能力を集結し皆様の知識のレベルアップを図れるチャンスです！ Stack Overflowは皆様のサイトです Stack Overflowはコミュニティのものです。参加者は投票する事で最も有効な質問や回答を示す事が出来、権限において投稿の編集や管理を行う事も出来ます。そして、コミュニティ内で当サイトの改善案を自由にメタで討議する事ができます。コミュニティは既にリスト質問やリンクのみの回答をどうするべきか討議を開始しています。 当サイトは日本語のプログラミング問題・回答のベストリソースを目指しています。皆様と一緒に作り上げましょう！"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/12/15/winter-bash-2014/","date":"2014-12-14T23:00:00.000Z","tags":["Community"],"title":"Winter Bash 2014","text":"There is no better antidote, at least for the worst hours and eclipses of the soul, than to conjure up…serious frivolity. Friedrich Nietzsche What’s Winter Bash again? No, it’s not a new flavor of Unix shell. Rather, Winter Bash is an ancient tradition of Stack Exchange. (2011 is ancient according to Internet time.) Here’s how it works: Starting right now, when you complete one of 30-odd challenges while logged on a participating site, you will be awarded the associated hat. To notify you, an icon will light up on the top bar. In addition, admire your hat collection on the Winter Bash 2014 site. Finally, your profile includes the number of unique snowflakes hats () you’ve earned all around the network. Once you acquire an item, click your avatar to pick a hat that you earned–not just on the current site, but anywhere. When you are satisfied the hat’s position, click “Wear hat” and it will be visible everywhere your avatar is displayed. Optionally, you may have a different look on each site. Once you are wearing a hat, you’ll also see an option to go unadorned. (But really, why would you want that?) On January 4, 2015 at 23:59:59 UTC, all hats will be returned to the Stack Exchange vault. The best way to preserve holiday memories is to take plenty of pictures before they are gone. Again with the hats? What happened to “We hate fun”? In the face of the darkening days of winter, we put aside our steely, businesslike frowns to wear virtual cosmetic items. It’s our solemn duty to cut out the nonsense leaving pure, unadulterated knowledge as permanent artifacts helpful to future visitors. And that task is no laughing matter. Yet, to quote G. K. Chesterton: About what other subjects can one make jokes except serious subjects? The truth is, we don’t really hate fun. Contributing to a volunteer effort should be an enjoyable experience. Heck, fake internet points are integral to how these sites operate. Winter Bash reminds us that there’s more to life than nose-to-the-grindstone work and quality content. We don’t stop having fun when the event ends. We go back to having fun with a larger purpose. Is everything going to be the same as last year? Management gave us a clear mandate when it came to building new features into Winter Bash: We were not allowed to spend weeks on snow animation. Thankfully, we could reuse last year’s start-of-the-art snowfall algorithm for the official Winter Bash 2014 homepage. There you can discover a nearly* complete list of hats and how you can earn them. The activities this year are mostly fresh and (hopefully) all fun. If you could go ahead and answer 5 questions on Saturday, that’d be great. Mmmkay? Once again, we are delighted with the work of freelance illustrator, Elias Stein. It’s difficult to express how satisfying it feels to think up a concept (Tam o’ Shanter!) and have it manifest a few days later: In the past, some people have had trouble getting hats to fit properly. Last year, we added the ability to reposition hats, but that did little to satisfy folks with especially large or disembodied heads. So, this year hats can be resized and twisted to fit your head. (Thanks, balpha!) If you have any questions about the event, try the Frequently Asked Questions. If your question isn’t covered there, please ask it on Meta Stack Exchange, our Q&A; site about our network of Q&A; sites. Before signing off, I apologize to our Southern Hemisphere friends for the name. I wanted to go with something season-neutral like HAT ATTACK or December Fling, but tradition ruled the day. Just remember: while you are sipping refreshing drinks and enjoying the sunshine, it’s cold, wet, and dark up here. Act now and get an exclusive hat only available today! * Tags: winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/11/11/announcing-bosun-our-new-open-source-monitoring-alerting-system/","date":"2014-11-10T23:00:00.000Z","tags":["Community"],"title":"Announcing Bosun, our new open source monitoring & alerting system","text":"If trees could scream, would we be so cavalier about cutting them down? We might, if they screamed all the time, for no good reason. Deep Thoughts, by Jack Handey A big part of scaling up an engineering team is getting serious about monitoring and alerts. A good monitoring system collects data from all of your various systems — for example, how fast pages are loading, or server CPU usage, or emails being sent — and alerts you when something isn’t working correctly. When everything works perfectly you can sleep easy at night knowing that you’ll get an alert if something isn’t working correctly. That’s the theory, anyway. About a year ago we realized that our monitoring system needed some serious upgrading. Instead of proactively alerting us before something broke, it mostly alerted us that something was already down. When we did get an alert it wasn’t obvious what exactly was breaking or who needed to fix it. If you’re a developer or sysadmin this email inbox probably looks a bit familiar: So we set out to fix it. We weren’t happy with any of the tools available so we decided to build our own. Since we are big fans of giving back to the community, we decided to make it open source as well. The new system is called Bosun (because naming is hard) and was developed by our own Kyle Brandt and Matt Jibson. It’s still very much in development but we’ve been using it internally for a few months and are really happy with the results. We can measure much more intelligently and build complex alerts based on those metrics. Some of the things it makes easy are: Push data into Bosun from anywhere via a simple JSON api, or use scollector to collect common metrics from lots of different systems Test alerts against older data and see when they would have gone off Reduce email clutter with scope-aware alerts, so when e.g. redis goes down we get one email, not twelve (one for each instance) Forecast and alert against future data, like when we’re about to run out of disk space If you’re interested, read the full announcement (with a lot more detail) on the Server Fault blog or go straight to bosun.org to check it out. There’s a link on the Getting Started page to a Docker image that populates itself with some data for you to experiment with. And if you happen to be at LISA this week you can check out Kyle Brandt’s talk on Thursday. As with any open source project, we’re looking for a few brave souls to join us. You can grab the source on GitHub and start submitting issues and pull requests today. Do you love solving engineering problems? Good sysadmins are always in demand. Find new opportunities in our system administrators job listings."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/11/03/stack-exchange-for-the-ipad-is-here-and-ios-apps-now-support-ios-8/","date":"2014-11-02T23:00:00.000Z","tags":["Community"],"title":"Stack Exchange for the iPad is here – and iOS apps now support iOS 8","text":"When we launched our iOS and Android apps, we were pretty sure they’d help our most active users in a couple of ways: Push inbox notifications are epic – you can know the minute you get an answer or someone comments on your post. The personalized mobile feed lets you browse all content relevant to you, whether it’s posts from your communities or replies to your posts. Voting, commenting, and minor edits are all things you often want to do when you’re away from your desktop, and an interface built for touch makes them a breeze. Those were a huge success; a ton of our most active users loved them. Here’s what we didn’t expect: A lot of people are posting from the app. Over twenty-five thousand posts have been made from the app… …More than 69% of them are answers! The average quality of the posts is significantly higher than the overall average.1 Those on-screen buttons may not have the same satisfying click your Cherry MXs do, but despite your freakishly large thumbs, an amazing number of you are helping others from the bus. Or in line at the DMV. Or at other times that you’re… just not at your computer. (They tell me I can’t make a “or while in the bathroom” joke here. Because of course that would be a joke, right?) That’s not just a reflection of how dedicated our users are to sharing their knowledge; it’s also awesome for my personal job security, so thanks! (Phil Schiller with actual-size prototypes.) Bigger is Better So that’s all great. But we still had a problem. Sure, the iPhone 6+ is big – but even the new iPhone 6+ probably can’t show you all the upvotes you’ve earned today from all the knowledge you’ve dropped lately. So, what are you supposed to do? Scroll? Like an animal?!? We thought not. So, we’re ecstatic to announce Stack Exchange for iPad, built from the ground up for the ideal tablet experience.2 Go download it now! What if we raised the price to $0.99 next week? Think about how long you’d agonize over paying nearly a dollar for this wonderful app. We really don’t want that stress for you, so go get it now. (Okay, we’re probably not going to charge for it. But why risk it? Isn’t life stressful enough?) The Feed: Bigger than Ever Thanks to the bigger screen real estate, we were able to let the feed display way more of your recent notifications, achievements, and recommended questions. If you haven’t downloaded it yet, there’s a screenshot at the top of this post – just look at all that information! There’s also a dedicated, swipe-browsable hot questions section at the top. Did you ever wish you could swipe new things onto your screen, without the sense of guilt that comes from swiping a human out of your life based entirely on their looks? Have you ever wanted to know if a society could evolve without wood, or if submarines technically “float”? Your day has come. Editor and Preview Just Might be Better than on the Web We can’t overstate how happy we’ve been to see people writing actual, great posts on the go. This new update makes that even easier, with touch-optimized Markdown tools in the composer, and a live preview that’s right next to the compose window, so you can see your beautiful formatting as you type (without scrolling!) This is just the start. Given how much you’re posting using the applications, we’re going to be focusing a lot on making the entire process nicer. When we started out, we thought the iPad standard browser experience was pretty solid, and we decided we weren’t going to build an iPad app unless we thought it actually improved that experience. Between the touch optimized browsing and interface elements, side-by-side composing, and a much more integrated experience going from one site to the next, we’re convinced it does just that – we’ve been testing it a lot internally for the last few months and I can’t live without it; hopefully you’ll feel the same. So, if you’ve got an iPad, get to the store and download it now. (No worries, it’s still free. For now…) If you’re an iPhone user, the new update also includes lots of quality of life changes for you too (including full iOS 8 support), so upgrade or install it today! Not an iOS user? If you’re an Android tablet user, don’t worry, we’re working on things to make you happy too. If you’re a Windows Phone pioneer, check out this meta discussion. If you’re anxiously waiting for a Symbian or WebOS version, please submit your request via betamax video, ideally delivered by a human being riding on a horse, don’t forget to have another person following to clean up after the horse. Feedback These apps couldn’t have happened without our incredible beta testers from the community, and we’re counting on you to tell us how to make it even better! Please post any feature requests you have on Meta – and if you find a bug, please report that too. 1 To be fair, there’s probably a lot of selection bias there – the app users are likely our most active, experienced users, but the point is this: the posts from the app are good. 2 Technically, it’s iOS 1.2.0, a universal app available now for iPhone and iPad."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/10/07/new-editing-badges-and-enhancements-to-suggested-edits/","date":"2014-10-06T22:00:00.000Z","tags":["Community"],"title":"Editing is essential: new badges and review enhancements","text":"We rolled out three new badges last week! These recognize a pattern that sets Stack Exchange apart from the forums and message boards that came before it: answering and editing questions, the ability to not only write an answer that can be useful beyond the immediate asker but also re-write the question such that it can be found and understood by future readers. Thanks to this capability, brilliant explanations need not languish under titles such as “C++ problem” or “Java doubt” – having written an answer that ably fixed the problems in the asker’s code, it is possible to also fix the problems in his writing! It’s no surprise then that the top editors tend to include an awful lot of the top answerers. If you’re good at writing, good enough to consistently hammer out insightful answers, you’d be a fool not to make sure the introductions to those answers – the questions being answered – were of similar quality. Yet, this seemingly-obvious technique remains unknown to many – indeed, I’ve heard some express shock at the notion that answerers would be allowed to touch the words of those whose questions they strive to interpret and address. Well, you are allowed. And now, encouraged! As with previous sets of badges, the bronze level exists to provide a form of “just in time” learning for new users, while the silver and gold levels offer increasingly lofty goals to strive for. Recent changes to suggested edits With the introduction of suggested edits, we sought to make the immense power of editing available to anyone reading the site. Instead of going into effect immediately, suggested edits required approval from some number of people who had already earned full editing privileges, thus ensuring some resistance to spammers, vandals and griefers as well as a path by which inexperienced editors could be guided by those with more exposure to community norms. However, several serious deficiencies in this system became apparent over the past few years, so we’ve now taken steps to correct them: We’re now notifying editors of past rejections when they load the edit form. There are some checks in place to avoid hassling folks with occasional rejections, but for a new editor whose edits are being rejected these should help them to improve before they waste too much of their time. Reviewers are given a limited period of exclusivity for edits they’re reviewing, during which the edit won’t be assigned to anyone else for review. This should greatly reduce the frustration for conscientious reviewers, who might previously find the edit they were reviewing (or improving) already approved or rejected by the time they submitted their review. Reviewers who wish to perform edits themselves have the option of either approving and editing on top of the suggestion, or rejecting and replacing it with a different edit. This replaces both the previous “Improve” option, and the “too minor” rejection reason, allowing edits that make small changes while overlooking large flaws to be quickly discarded, while ensuring that truly helpful edits – even small ones – are more consistently approved. Combined with change #2, this gives a great deal more power to reviewers who are comfortable editing – and who better to review edits than editors? Finally, we’ve revamped the rest of the predefined suggested edit rejection reasons, improving their context-sensitivity and focusing more specifically on common mistakes and outright abuse. Together, these changes should offer better guidance to both editors and reviewers, helping both work together effectively. Big thanks to everyone who chimed in on the meta discussions linked above, as well as those who’ve repeatedly reported these problems over the past few years. Gratitude is also due to the developers who patiently worked to implement these changes, Geoff Dalgas (badges, review changes) and Kevin Montrose (edit rejection feedback). And of course, huge thanks to everyone who uses this tooling in spite of the occasional rough edges. These changes are part of a project intended to help improve the quality of Q&A on Stack Exchange. Stay tuned for even bigger, better changes in the coming months!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/09/16/introducing-runnable-javascript-css-and-html-code-snippets/","date":"2014-09-15T22:00:00.000Z","tags":["Community"],"title":"Introducing Runnable JavaScript, CSS, and HTML Code Snippets","text":"On Stack Overflow and our other code-related sites, creating a minimal, complete, and verifiable example is the best way to get an answer to your question. We’ve always loved JSFiddle and sites like it because they let both askers and answerers reference runnable, working code that demonstrates their problem or solution. Unfortunately, the use of these external sites introduces a few problems: If the link breaks, the post becomes worthless. If the code isn’t embedded in the page, visitors are forced to go elsewhere to get the full content of the question or answer. Also, because the code isn’t a part of our post Markdown, changes to it don’t show up in the revision history. The community voiced similar concerns around external sites, which eventually led us to block posts that contain links to JSFiddle and similar sites without a corresponding code block. This is an unnecessary burden for both askers and answerers. So we’ve created our own way to embed runnable JavaScript, CSS, and HTML code blocks right in the body of a post. As of today, we’re launching “Stack Snippets,” a fully integrated feature available on Stack Overflow and any other code-related Stack Exchange sites. How Do Stack Snippets Work? With Stack Snippets, a code block: Can become a runnable code block: The code will not run until you press the “Run code snippet” button: How Do I Make A Stack Snippet? Stack Snippets work for both questions and answers. In the Markdown editor window, there’s a new button that you can click to launch the Stack Snippets editor. The editor appears and allows you to enter HTML, CSS, and JavaScript (or any combination of them): Once you’ve got your code working, press “Insert into Post” at the bottom and you’re done! You can test your snippet, or load it back into the Snippets editor from right in the Preview screen: When answering a post containing a snippet, you can easily include a modified version of the original in your answer – just click the “Copy snippet to answer” button. Under the Hood A great feature of Stack Snippets is that they are inserted as regular Markdown code blocks: This makes them instantly backwards-compatible with our normal revision history and diffs, and also any API clients including our own mobile apps. The runnable snippets behavior is triggered by a few new HTML comments that are not rendered by Markdown. You can even edit the code right from the Markdown editor and the snippet will still be runnable. Are Stack Snippets Safe? Yes, as much as the web in general is safe. You are not in any more danger than you are when browsing any site with JavaScript enabled. With that said, the snippets are running client code in your browser, and you should always exercise caution when running code contributed by another user. We isolate snippets from our sites to block access to your private Stack Exchange data: We use HTML5 sandboxed iframes in order to prevent many forms of malicious attack. We render the Snippets on an external domain (stacksnippets.net) in order to ensure that the same-origin policy is not in effect and to keep the snippets from accessing your logged-in session or cookies. Like all other aspects of our site, Stack Snippets are ultimately governed by the community. Because users can still write code that creates annoying behaviors like infinite loops or pop-ups, we disable snippets on any post that is heavily downvoted (scoring less than -3 on Stack Overflow, -8 on Meta). If you see bad code that you think should be disabled, downvote the post. If you see code that is intended to be harmful (such as an attempt at phishing), you should flag it for moderator attention. What About Other Languages? Our initial release supports HTML, CSS, and JavaScript because questions on these topics use external code hosting sites the most frequently. These languages also run client-side in the user’s browser, making them self-contained and easy to support. Server-side languages are much more complicated and require significant infrastructure changes in order to properly implement. We don’t have any specific plans at this time to implement other languages, but it’s something we might consider in the future. What About Sites Like JSFiddle? You can still use sites like JSFiddle if you prefer them. JSFiddle and similar sites still have a bunch of features that we have not implemented yet. The normal rules for a link still apply: make sure you copy the relevant code into your question or answer so that it can be accessed if the external site is unavailable. We decided to implement our own version instead of embedding a third-party site for the reasons mentioned earlier: There’s no need to copy-paste the code into the post. It’s all embedded in the post automatically, so revision history and diffs just work. There’s no need to visit another site to get your answer. The best experience is one where your question and answer(s) are complete and on the same page. Since we host it, we can guarantee performance and up-time. We have high standards when it comes to performance and up-time, and want to make sure that the ability to run a snippet is always available. Give Stack Snippets A Try We’re excited to see how the community uses Stack Snippets, and looking forward to your feedback: If you find bugs, or you’d like to give specific feedback on Stack Snippets, you can post on Meta Stack Exchange using the tag stack-snippets. If you just want to try it out, we’ve created a sandbox on Meta Stack Exchange. If you feel that a particular site should have Stack Snippets, post a feature-request on that site’s meta – if there’s support from the community there, we’ll enable them. We’ve already started piloting it on Code Review and are seeing some neat results. Don’t hesitate to share interesting examples you come across – or create – here in the comments. Have fun! If you’d like to put your Javascript efforts to work, discover new opportunities in our Javascript job postings."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/07/23/please-welcome-jmac-community-manager-of-the-rising-sun/","date":"2014-07-22T22:00:00.000Z","tags":["Background"],"title":"Please welcome jmac, Community Manager of the Rising Sun","text":"As Stack Exchange continues to expand to serve new audiences, we’re constantly on the lookout for folks who can take the principles and practices we all hold dear and communicate them effectively to the folks who would otherwise find them strange and difficult. I’m happy to announce we’ve found another of these rare specimens in the form of Joshua Maciel: Josh joins us remotely from beautiful Kansai Japan, where youthful ignorance brought him for a two-year stay (maximum!) to teach English. Eleven years later he still hasn’t left, having found gainful employment doing international sales for Japanese manufacturers, along with something he refers to as a ‘social life’ in Western Japan. After living extensively in two cultures, and working in a half-dozen more, Josh decided that humans are really interesting, despite all their peccadilloes. And what better way to study these humans in their natural habitat than by participating on Stack Exchange! Josh first caught our attention on Meta, gaining the admiration and respect of us all by politely pointing out how incredibly wrong and delusional most of my opinions are. After a few months of respectable participation on Stack Overflow, he joined our site for questions about workplace and career-related issues and proved me wrong once again by helping the good folk there to push that site out of the beta doldrums and into graduation. He then proceeded to get himself elected as a moderator, where he continued to demonstrate the sort of dedication and tact that has been his hallmark. Josh can usually be found in his natural habitats: at a baseball game somewhere in the world, sitting with a book in Ubud, or finding a local watering hole to escape the Japanese summer heat. Please join me in toasting to his health as he takes on this new challenge. Do you have a unique set of skills that would benefit the growing communities here on Stack Exchange? We’re always looking for more help, and would love to hear from you – whether you’re near our NYC HQ or anywhere else in the world. You get to work with enthusiastic folks like Josh and help us guide Stack Exchange as it grows!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/05/08/stack-exchange-for-iphone-is-here/","date":"2014-05-07T22:00:00.000Z","tags":["Company"],"title":"Stack Exchange for iPhone is here!","text":"Earlier this year, we announced the release of our Android application and the public feedback was fantastic. Well, it turns out we offended our designers by not doing an iPhone application too. So, after spending the last few months apologizing and bribing them (turns out designers love moleskins in pantone colors), we’re excited to announce the release of Stack Exchange for your iPhone. Feed Me, Seymour At the heart of our mobile applications is The Feed which gives you a deeply personalized selection of content customized to what’s relevant to you. It includes any new answers, comments, or upvotes on your posts, and even new questions we think you’d like based on your previous activity. It basically does all the hard work to make it so you always have something interesting waiting for you a tap on a blue icon away. Since it’s personalized, try not to judge me based on how nerdy the following sample is: Real time feedback Stack Exchange for iPhone sends you instant notifications any time someone interacts with you, so when you urgently need to figure out how long cooked chicken lasts in the fridge (turns out, a couple days) you’ll get a notification the second someone answers your question. And you can always customize the notifications in your iPhone’s built in Settings, in case you don’t want to get a message in the middle of the night (and end up dreaming of chicken). Like Stack Exchange on your computer, but better. You can ask, answer, comment, and vote, and there’s even a built-in Markdown keyboard. Plus, you can upload images straight from your device. The next time you want to identify a cool font you see on a poster, you can immediately post a question with a picture of it from your iPhone. What about feature […]? While the application currently has some awesome features, it doesn’t have everything. If you find something wrong or missing, please let us know. Use your fancy new app to post a question on Meta using the ios-app tag. There are already some great suggestions, and while we’re currently working on a dedicated tablet interface for both iPads and Android, the urgency of our iPhone improvements will be pretty closely related to the vote count of posts on meta. Speaking of which, we’d like to give a huge thanks to the awesome people who answered our call to arms (well, thumbs) to test this application, and who provided us with great feedback (including the list of suggestions above). So, what are you waiting for? Go download Stack Exchange on your iPhone now and you’ll never have to wait until you get back home to figure out “What was that movie with the guy and that thing?” again!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/04/22/putting-the-community-back-in-wiki/","date":"2014-04-21T22:00:00.000Z","tags":["Background"],"title":"Putting the Community back in Wiki","text":"Ever seen this diagram? That’s the visual elevator pitch for Stack Exchange. We were the little dot in the middle, a potent mix of useful traits from other tools, a wiry mutt full of hybrid vigor. The purpose of this blend was to allow and encourage the construction of a library of solutions, by providing communities with the tools they needed to share their experiences and challenges with others who might struggle with the same issues. The diagram illustrated where we stole drew inspiration for the design of those tools, and their influence occasionally shows up in the results. Sometimes, a question will end up more like a wiki, other times more like a blog, other times more like a discussion. Because of these roots, we’ve never been too stuck on the purity of the idea of Q&A: over time, when communities using this software needed to deviate a bit, we’ve tried to build in features to give them what they needed to help solve more problems: Users wanted to “blog” about questions where they’d already found solutions, so we introduced self-answered questions People occasionally found themselves needing ongoing discussion to solve a problem, so we added chat forums …And sometimes, folks realized that they needed a bunch of people to contribute meaningfully to create a post. Not just the collaborative, minor editing that occurs on most questions here; these were cases where multiple users needed to pitch in just to do a topic justice. But there were two points of friction: Originally, most users couldn’t edit others’ posts, (we didn’t have suggested edits yet) It’s hard to ask people to put a lot of effort into creating something together when the asker is going to keep all the credit and all the reputation. I don’t care about rep and attribution when I’m self-motivated to improve a post I come across, but it feels different when someone outright asks me to pitch in while intending to keep all the fake internet points for themselves! That’s where Community Wiki came in – it killed those friction points by eliminating rep generation from those posts and lowering the bar on who could edit them. Which made it much easier for people who wanted to create collaborative, ensemble works – true community owned and edited resources. But, much like dynamite, this well-intentioned invention was quickly weaponized into an instrument of destruction. Our big mistake: thinking we could systematically detect when such collaboration was happening, and automatically convert those posts to Community Wiki. It sounded awesome – “we’ll help you collaborate even more! When we see enough editors, we’ll save you the trouble of making it community wiki yourself and do it for you…” Yeah, we are dumb. In which we stop being dumb By using ridiculously simplistic heuristics to detect these scenarios, we turned what should have been an act of generosity – an invitation to the community to participate in building a shared resource – into a hidden pitfall for the unwary. Too many helpers? NO ONE GETS CREDIT!!! It was a system that converted helpfulness and generosity into a slap in the face – from a robot. Therefore, we have removed all automatic Wiki conversion triggers from the software. No longer will answers with more than some arbitrary number of edits, or questions with more than a page of answers suddenly lose their owners. To handle those rare situations where unusual activity levels may indicate misuse, we’ve added some new moderator flags in these scenarios: they can respond when necessary by closing or locking the post – but when there is no fire behind the smoke, they can silently dismiss the flag without disruption. The once again future of Community Wiki An author can still apply the status manually when posting or when editing their own answer, and moderators retain the ability to apply it when they deem it truly necessary (for instance, a question attracting very large numbers of partial answers can be a sign of a topic that wants to be a wiki). For the most part, we’ve turned it back into something that you can choose to use in cases where it lets you work together to create something wonderful: Compiling a canonical reference Consolidating the knowledge of the community Encouraging the ongoing, active maintenance of a changing answer Sometimes these are single, collaborative answers, other times questions where all contributions must be made in the form of edits. In all cases, the results are clearly that of a sum greater than the whole of its parts, a true community project. _source: Wikimedia Commons_ Collaboration isn’t a rare thing on our network – the whole system, from posting and editing to voting to moderation, is based on the interaction of multiple users to produce a final product. Community wiki is for a special scenario, something built not by the expertise of one individual, then improved or iterated on by a few others, but rather something created by the concerted efforts of the community as a whole."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/04/17/announcing-the-launch-of-meta-stack-exchange/","date":"2014-04-16T22:00:00.000Z","tags":["Background"],"title":"Announcing The Launch Of Meta Stack Exchange","text":"We’re very pleased to announce that as of today, we’re (finally) splitting the site formerly known as Meta Stack Overflow into two sites: Meta Stack Overflow is a brand-spanking new site for discussions specific to the Stack Overflow (programming) community: Meta Stack Exchange will cover feature requests, bugs, and any discussion topics that affect the entire network: Meta has always been one of the most important things that make our network… work. Almost all of our most important features, improvements, and community rules were partly or entirely based on our users telling us how we could help you help more people. Hell, even the idea of Meta itself came from the community – and we fought it hard before we realized how right you guys were. But meta has always had two key functions: Local governance – communities have to decide what’s on- and off- topic, what tags to use, and how to deal with topic-specific guidelines like how sources should be cited. Federal law and product feedback – Most changes to the engine affect all sites, and some guidelines and rules (“be nice”) are the same network wide. And that’s why every site except Stack Overflow has always had its own meta site, so it could focus on the “local governance” issues that were specific to that community. But as the network has grown, many users have shown enthusiasm not just about the sites where they participate, but also about how the whole system should work. It’s time to give these discussions a place of their own. Prior to today, Meta Stack Overflow doubled as the home of both discussions about broad network changes, and discussions around the unique issues that Stack Overflow faces (often due to its enormous scale). The percent of problems Stack Overflow shares with its smaller sister sites has become exceedingly low, which has created an awkward dissonance when it comes to how folks perceive and approach challenges. For example, some new sites embrace the idea of highly specific, narrowly-scoped questions that seek product recommendations, – something that is perfectly acceptable to explore on many sites but completely off-limits on Stack Overflow. Someone else might be interested in strategies to better promote and grow new sites when they come out of private beta, which might apply to many network sites, but is obviously a problem that the Stack Overflow community is not facing. The scale of Stack Overflow puts an interesting twist on almost every discussion that the Stack Overflow community has; they needed a place of their own to work on their own challenges. Similarly, someone outside of the Stack Overflow community that wants to propose a new feature isn’t likely to be super interested in XML tag synonyms. When you visit Meta Stack Exchange, you’ll see that the split is still a a work in progress. We’re in the process of migrating quite a few Stack Overflow specific discussions that are still relevant and unresolved, to help to show the kind of topics that belong on the new MSO. Over time we’ll continue to migrate discussions that clearly belong on Meta Stack Overflow back over the fence. If you’re interested in the nuts and bolts and mechanics of the split itself (such as how rep is going to work, moderators, etc), have a look at the initial project announcement. The plan was extremely simple, and we stuck to it. Now, we realize that we weren’t exactly hurting for “more challenges in figuring out where to put my post”. That’s why we’re making this really simple: When in doubt, you can always post your question on your local meta. If it’s clearly relevant to the engine or network as a whole, we’ll move it. You can always find your local meta right under the main site in the site switcher in the upper left corner of the site: If you have any input or ideas to share, just go right to your favorite site’s meta and do it there; there’s no need for you to go to Meta Stack Exchange at all. That said, any time you know your question applies to the the whole network, you’re of course perfectly welcome to participate on Meta Stack Exchange directly. The largest beneficiary of this split is probably the Stack Overflow community; our flagship site went without a town hall all of its own for way too long. Splitting the two opens up many more possibilities while alleviating noise for everyone. Young sites don’t generally have, and may never have the sorts of challenges that Stack Overflow did. Now, there’s a place for our smaller communities to come together and figure out what works for them. Do you have some great ideas that could make quite a few communities even better? Take them to your site’s own little town hall, or feel free to bring them to the capital city directly. Do you have ideas that suit the scale of Stack Overflow? Well then, c’mon, get meta, as it was intended."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/04/08/changes-and-guidelines-for-the-protected-question-status/","date":"2014-04-07T22:00:00.000Z","tags":["Background"],"title":"Changes and guidelines for the Protected Question status","text":"Protected status is an often-overlooked feature of Stack Exchange. It’s based loosely on Wikipedia’s semi-protection, and like that tool is meant to be a reaction to persistent abuse from anonymous or unproven participants: when a page attracts a lot of noise or vandalism from outside the community, Protecting it reduces the amount of clean-up needed later on. Protected questions are not answerable by folks who haven’t earned at least 10 reputation from activity on the site where the question resides. This effectively means you need to have posted an answer somewhere else that’s attracted an up-vote or a question that’s earned two. Originally, this functionality was limited to moderators, but during the past several years we’ve made a few changes to encourage more productive use: Privileged users can protect and unprotect any question over a day old. Previous unprotect restrictions lifted as of today. The system (in the guise of the Community user) will automatically protect questions that’ve had either 3 answers from new users deleted – this handles questions that tend to attract large amounts of spam over time. 5* answers from new users scoring <= 0 posted in the past 24 hours – this handles questions that are somewhat topical, and are attracting large numbers of “participants” who aren’t actually contributing anything useful. This is also new as of today. *This value can be higher or lower on sites that have demonstrated “special” patterns of new-user interaction. Guidelines for Protecting questions:¶ Do protect questions that are attracting a lot of non-answers or very poor answers (spam, etc.) from new users. Don’t protect questions just because they’re linked to on a high-traffic news site like Reddit or Ars Technica. While there’s certainly some correlation between sudden spikes in popularity and associated non-answers, not all popular questions suffer from this. Do unprotect questions that aren’t currently attracting a lot of attention and don’t have a long history of unproductive answers. Judicious use of this feature is critical to allowing these sites to handle large amounts of external attention, but over-using it breaks the system: Stack Exchange sites depend on a constant influx of new blood, both to answer new questions and provide updated information on old ones. When in doubt, err on the side of letting new users prove themselves before locking them out."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/03/17/podcast-56-green-or-red-curae/","date":"2014-03-16T23:00:00.000Z","tags":["Company"],"title":"Podcast #56 – Green or Red Curae","text":"Welcome to the Stack Exchange Podcast #56 recorded on Thursday, March 6th 2014, aka the 4th of Adar II 5774, aka the second day of Lent. Today’s podcast is sponsored by Patent Trolls of America. Today’s guest is Micah Siegel, Senior Patent Advisor at Stack Exchange and Professor Emeritus at Stanford. But first, Community Milestones! We’ve already talked at length about The Workplace, but it should be noted that the Workplace community has just graduated. They are now a fully-fledged site, so go check out their design! Arduino is our newest public beta site. (An Arduino is a tiny little computer board thing, according to Jay.) We’ve tried it in the past and didn’t have enough activity, but this iteration is looking much stronger and we’re excited to see where it will go. Also, March 29th is Arduino Day. At long, long last, Personal Finance & Money has graduated. We love money! Longtime beleaguered designer Jin finally has assistance on his design team, so we are working through the backlog of graduated site designs. To commemorate Money’s graduation, we’ve made it Community of the Week. Here are some of the cool questions we discussed: Best way to start investing for a young person just starting their career? In a competitive market, why is movie theater popcorn expensive? Why does gold have value? This site grew out of an SE 1.0 site on the same topic, and it’s therefore one of our oldest sites. Check it out! Next up, we have New Features. Or, we don’t, because we haven’t done anything, and David is demoted. Just kidding: we do! We added the ability to customize your list of communities in the top bar switcher. We made some tweaks to the close vote review queue on Stack Overflow in an attempt to get it down from approximately nine billion flags. You can also sort by tag (or type of close vote), which you could always do, but now it’s much more visible. Here’s how it works. Work is ongoing on our mobile apps, as always. Reminder: you can download our Android app or sign up to alpha test our iOS app. Okay! Let’s talk patents! (Jay loves them, but David says they’re the worst.) It’s been a year since we started the Ask Patents project. Joel walks us through why we got into this area in the first place, and we fixed the problem. Done. Solved! (Kinda.) It’s confusing, because code is both copyrightable and patentable. About 7% of the patent applications submitted to the USPTO are what we call problematic. We decided to pick out the ones we are most concerned about and post them on the site for our communities to peruse and choose prior art. Micah talks through how we chose the patent applications to post, and how it’s been going. (Fun fact: we are the first entity to get a YouTube video accepted as prior art!) By the way, here’s the Planet Money podcast Joel was talking about. We came up with a hack about six months ago to help us make this process scale. Instead of filling out the janky confusing form, we simply started emailing the relevant Ask Patents link directly to the patent examiner. Magic! So is it working? We’ve proven as far as we can tell that if we target a bad application and put enough eyes from Stack Overflow on it, we’ll get good prior art. We know how all of the numbers break down: exactly how many people on Stack Overflow have to see the bad software patent in order for us to get enough prior art that enough of it will be good enough prior art to trigger an email to the patent examiner. What can people do right now if they want to make a difference? Go find some prior art requests and post prior art to help us destroy some patents. (Also, you can follow Ask Patents on Twitter.) Micah is consulting for a few other companies on patent issues, so you can contact him if your company wants to pick his brain. He knows a lot about the current Supreme Court case that might outlaw software patents altogether (but not for a long time). Thanks for listening to Stack Exchange Podcast #56, sponsored by the Patent Trolls of America. See you next time!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/03/03/your-communities-list-is-now-customizable/","date":"2014-03-02T23:00:00.000Z","tags":["Community"],"title":"Your communities list is now customizable","text":"A few months ago, we rolled out a new top bar for all of the Stack Exchange communities. The mission was consistency: Every community gets the same Stack Exchange brand at the top, the same navigation between sites, and the same live updates about new inbox items and reputation changes But we realize that not everybody uses Stack Exchange the same way. Some people focus on one community, others participate in several, and more than a few spend a lot of time lurking now that we have 116 different sites to choose from. That’s why, as promised, we have made the “Your communities” section of the Stack Exchange drop-down fully customizable so you can keep all of your favorite communities right at the top. Here’s how it works: Customizing this list is completely optional. If you do nothing, you will keep the defaults: your top five communities by reputation. But click the edit button and the default rules no longer apply. Instead, you can: Add a community to the list by typing the name and clicking Add Repeat #1 to add as many as you want Change the order of communities in the list by clicking and dragging Click the Save button to apply your changes! You can reset the list to the default at any time, so try it out! Then drop by the Meta post to share your thoughts and feedback."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/02/24/podcast-55-dont-call-it-a-comeback/","date":"2014-02-23T23:00:00.000Z","tags":["Company"],"title":"Podcast #55 – Don”t Call It A Comeback","text":"Welcome to Stack Exchange Podcast #55, recorded on Friday Thursday the 13th with your hosts Joel Spolsky, David Fullerton, and Jay Hanlon! Today’s episode is brought to you by the city of Sochi, Russia. It’s been a long time since we last recorded, so we have a lot to talk about, and we’re going to skip most of it. First we’re going to talk about all our brand new sites, so Joel learn about them for the first time. Pets is a site for (you guessed it) pet owners to wonder why their cats like to watch them making the bed. Also, we already talked about this site. Moving on! We also launched Italian, which is very high quality but unfortunately very slow so far. Jay thought Ebooks would be awful, but it has turned out to be extremely high quality and high engagement. Hooray, beer! Our new Beer site is somehow different from Homebrew, so Joel quits. We launched a Relationships & Dating site, but we broke up with it pretty quickly because it generated too many bad “commitment” jokes (and because the topic was a hard fit for our engine). We launched a site for software recommendations. And discussed it at length. The good parts version: it’s going much better than expected. We almost forgot to talk about Aviation! It launched a while back, and it is a slam dunk for our engine. It’s time for our Site of the Week! (This week was apparently four months long.) Let’s talk about Code Golf. It’s a site for code golf (unsurprisingly!). Links discussed: We’re no strangers to code golf Draw the Olympics logo The Commodore 128 is a thing (though sort of irrelevant to Code Golf). We already talked at length about the new topbar, but it has bred some interesting changes to other areas of our pages. For example: when we moved Hot Questions out of the MultiCollider and into the sidebar, Code Golf started getting huge boosts on their most interesting questions (as did other sites with broadly interesting topics). Code Golf is seeing 11-15% more answers due to the traffic coming in from other sites via the Hot Questions sidebar. Neat! So! Let’s talk about our most exciting new site: Stack Overflow em Português. Localizing our codebase was a dream of ours for a long time, and we finally did it. It’s got 1304 perguntas at the time of recording this podcast. (If you want to know more about why we launched a non-English site, check out Jay’s blog post.) The public beta so far is one of our most successful launches ever. Also, you can go download our Android app or sign up to test our iOS app. Thanks for joining us for Stack Exchange Podcast #55, sponsored by the city of Sochi, Russia – don’t forget to visit the Friendship Tree. See you next time!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/02/19/2013-stack-overflow-user-survey-results/","date":"2014-02-18T23:00:00.000Z","tags":["Background"],"title":"2014 Stack Overflow User Survey Results","text":"In 2013, our Stack Overflow community grew from 21.5 million to 26.9 million monthly visitors from 242 countries around the world. We’re doing a lot to keep growing with the community — we now have localized versions of Careers 2.0 for French and German audiences, we’re developing iOS and Android mobile apps for our entire network, and our first ever localized version of Stack Overflow with the Portuguese site currently in beta. As a way for us to make sure we’re doing the most for our users and community on Stack Overflow, we conduct a survey every year to see what you’re up to, how you’re using our site and what else is on your mind. This time, we analyzed a survey sample of 7,500 responses from 96 countries. As a thank you for the time you spent filling it out, we donated an additional $12,000 to our Stack Exchange Charities. Observations This is the second year we’re calling out mobile, and yes mobile is still growing. While only 7.9% of you classified your occupation as a Mobile Application Developer, the majority of respondents (51.5%!) said that their company has a native mobile app. This is an increase from 2012 when 48.2% of respondents had a mobile app. Android continues to climb while iPhone declines Not only is the Android Phone the most popular mobile device with 63.8% of respondents saying they have one, the most popular native mobile platform supported is an Android Phone app with 39.5%. The iPhone lost more traction with developers this year with 30.7% of respondents saying they own an iPhone compared to 35.2% in 2012. Working Remotely As our Stack Exchange team is growing and we have more employees working remote, we added a number of questions about remote work. While only 10.6% of respondents said they are full-time remote, 63.9% of total respondents say they work remotely at least occasionally. If you’d like to do your own analysis you can download the survey results."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/02/13/cant-we-all-be-reasonable-and-speak-english/","date":"2014-02-12T23:00:00.000Z","tags":["Community"],"title":"Can’t We All be Reasonable and Speak English?","text":"Two weeks ago, we announced the public launch of Stack Overflow in Portuguese, our first-ever non-English Stack Overflow community. Which raises one very obvious question: Have we lost our minds? Wasn’t the whole point of Stack Overflow to aggregate as much developer knowledge as possible in one place? To get all the potential solutions together, and provide one canonical set of answers? Yup. When we set out to “collectively increase the sum total of good programming knowledge in the world,” a big part of the plan was de-fragmenting information previously spread across myriad books, sites, and your brains. It’s why we mark things as duplicates – we want all the precious gems of knowledge stored in the same cave of wonders. So know this: we are at least as worried about fragmentation as you are. And we have a plan: Eventually, all of you are going to have to learn Portuguese. Okay, not really. But, given that one of our core goals was knowledge aggregation, it does seem just a little bit crazypants to start launching sites in new languages, assuming that one very important fact is true: Assumption: All of the serious developers in the world are highly proficient in English. Which… actually sounds plausible. But it’s wrong. Not every developer in the world speaks English. Just reading the comments from our announcement, you’ll see multiple readers sharing that they or their colleagues (and one dad) couldn’t participate on SO due to language constraints. But data beat anecdotes. We don’t have recent numbers for Brazil and Portugal, but we do for China, and they illustrate the same point: 10% of the world’s programmers are in China 1.4% of our visits come from China Only 4.8% of our visits come from China, Japan and Korea combined So, if the data tell us that we’re getting roughly 80% less activity from Asia than we should in the absence of language constraints, why does it feel so obvious that all serious programmers speak English? This may help: Quick – name any famous developer who doesn’t write well in English. I couldn’t. I can name over a dozen famous English-speaking coders. But even if you frequent all the hacker sites and conferences, how many devs have you met who aren’t solid in English? Roughly none, right? There’s just one problem. Try this: Without Googling, name any famous developer from Japan. Or China. Or Russia. Again, I couldn’t. Well, I came up with Shigeru Miyamoto. But he’s apparently a designer. I couldn’t name even one. Not like I can name Carmack or Stallman, or Hopper, or even “DHH.” (Does DHH have an actual name? I personally imagine him as a very handsome, talented, fast-driving set of initials. But I digress.) Is it plausible that there aren’t *any* devs good enough to be famous from those countries? Nope. Here’s what’s happening: It’s easy to assume that there aren’t any devs who can’t speak English because I never see any. But I never see any because I’m hanging around places where devs go to talk to each other in English. The startling truth is this: On the internet, If you don’t speak English, you’re completely invisible to me. I also assumed that since developers have to learn English-like syntax, they must speak English. Which is a bit like assuming that because I can order Uni, Hamachi, and Aji by their Japanese names, I could probably toss back some sake with Morimoto and discuss knife techniques in Japanese. Even when programming languages use words like “if” or “function,” they’re just terms to memorize, and don’t always even mean the same thing in English that they do in programming. It’s almost impossible to feel like part of a community if you’re not highly proficient in the language. Even non-native speakers who are fluent enough to read posts in their second or third languages often aren’t comfortable enough to write in them. I imagine myself at a professional meetup where everyone is speaking French (which I studied through college). How many jokes would I tell? How many would I even understand? Sure, I can function, and understand all the words, but I don’t feel like I belong to the group. Don’t get me wrong – some of our best users aren’t native English speakers, but they’re in that rare group who have achieved a far higher mastery of a language than their peers. When I hear, “Well, I didn’t need a site like this – English is my third language, and I’m in the top 1% on Stack Overflow!” I think: “Yes, that makes sense. You are insanely good at two difficult, language-based things. Most people will find both of them to be a _lot_ more challenging than you did.” The truth is, by requiring fluency in English, we’re shutting out of a lot of developers who may know enough English to read it but not enough to feel comfortable participating. Requiring that all aspiring devs “just go learn English” first isn’t who we want to be. Even if I believed that every programmer must eventually master English, it still wouldn’t make any sense to make them do it first. I believe that everyone – everyone – who can really fall in love with programming should get a chance to. So pre-filtering for the ones willing to learn a foreign freaking language before they first sit down with a code editor to see if it lights some spark in them just feels wrong.Think of the children. The children!! Okay, last quiz, just for the native English speakers: How old were you when you first realized you could type things on a keyboard and control machines? Great. Now, at that age, were you proficient enough in another language to have learned to code without any English? When I tell someone I work at Stack Exchange, my absolute favorite response is: “I basically learned to code from posts I found on Stack Overflow” We want that for every young programmer. Not just the ones lucky enough to be born somewhere that English gets taught in grammar school. Okay, that all makes some sense. But why Portuguese? To be clear, we still don’t think there needs to be a Stack Overflow in every language. We do want as much centralization as possible, and we know that devs who have mastered English will mostly keep going to the English site, since it has the most critical mass. Just like we want them to. So, you won’t need to learn new languages to find good answers – we expect almost every question asked on the Portuguese site to also be asked (and answered) on the English site. We’re really only considering launching sites in languages that: Have large, strong communities of high-talent developers, where A meaningful percent of them aren’t comfortable enough to participate in an English-only community That probably limits the list of potential candidates to Mandarin, Japanese, Portuguese, Russian, Turkish, and Spanish. From there, Portuguese was a no-brainer. The developer community in Brazil is awesome, and growing fast. And we wanted to start with a language with a similar alphabet, to minimize the localization work. And it’s worth a shot. We’ve learned that it’s easier to just watch the future than to try to predict it. So we’re big on just trying stuff out (assuming it can’t break our other stuff). And we’re huge on getting stuff crazy-wrong, refusing to admit it, and instead doubling down on our wrong-minded idea, while nodding crazily er… admitting we made a mistake, and reversing course. So, given the number of user requests, we figured, “why not give it a it a try?” We’re committed to supporting one or two languages and seeing how they develop before we push any further. And so far, it’s an incredible success. Despite an audience limited to portuguese-speaking devs, the site’s activity in its first week was higher than all but 4 out of 120 sites we’ve launched to date, including the original trilogy. More importantly, people who couldn’t ask questions are asking them, and getting great answers. When in doubt, we want to err on the side of helping more people. If just one little girl in Brazil sticks with programming because an answer on this site helped her finish her first project, well… that’s not good enough! I want to help thousands of them. And the boys, too. Still, it’s a good start. Are you an aspiring programming looking for your first break? Stack Overflow Jobs has entry-level positions from all over the world."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/02/10/stack-exchange-api-v2-2-and-the-demise-of-v1-x/","date":"2014-02-09T23:00:00.000Z","tags":["API"],"title":"Stack Exchange API V2.2 – and the demise of V1.x","text":"There’s been a lot of excitement lately here at Stack Exchange, what with the launch of our Android app and the start of our iOS app alpha. A few sharp-eyed users noticed, hidden deep within each app, a new version of the Stack Exchange API. After a few more weeks of testing I’m happy to say that V2.2 is now frozen, documented, and released. What’s new in this release? Creating questions and answers Voting Editing, Deleting, and Flagging Improved OAuth UI on mobile devices …and lots more Almost everything done by our own apps is using our public API, but there are a few notable exceptions: We don’t think the Feed is polished enough for inclusion yet User creation is too sensitive to guarantee stability Login methods that don’t use OAuth can’t be made public for security reasons With the third release of the API V2.x family, we’ve decided to retire the V1.x family at long last. Version 1.0 of the Stack Exchange API was released in 2010, with its last update (V1.1) almost exactly three years ago, and its ultimate deprecation in 2012. Active consumers were notified of its imminent demise earlier this year, but this is the public announcement: V1.0 and V1.1 of the Stack Exchange API will be shut down May 12th I encourage anyone still using the V1.x family to use the coming months to migrate to V2.2. It’s much improved. If you love the mobile trend, you can check out our listings for mobile developer jobs here."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/01/29/ola-mundo-announcing-stack-overflow-in-portuguese/","date":"2014-01-28T23:00:00.000Z","tags":["Community"],"title":"Olá, Mundo! Announcing Stack Overflow in Portuguese.","text":"If you can’t read the rest of this post, it’s because I’m not talking to you. Which is a little weird, since I can’t even read this without help from our Brazilian Community Manager, Gabe, who’s been kind enough to help me write this in Portuguese. Depois de semanas em beta privado, nós temos o prazer de anunciar que hoje vai ao ar o nosso primeiro Stack Overflow internacional. E não se trata de um clone em português do site original, mas sim de uma comunidade completamente nova. Uma comunidade que vai poder decidir como ela quer ser, e como vai poder ajudar os desenvolvedores de língua portuguesa. Tá esperando o que pra criar sua conta? Sempre quisemos ajudar o máximo possível de pessoas Quando lançamos o StackOverflow.com (em inglês), a ideia era ter um lugar onde todos os programadores pudessem resolver problemas juntos. Queríamos um lugar onde desenvolvedores pudessem compartilhar seu conhecimento, num formato melhor do que os fóruns tradicionais. Queríamos que a melhor resposta tivesse destaque e que fosse fácil encontrá-la, tanto para quem perguntou quanto para alguém que pesquisasse sobre o mesmo assunto no futuro. Construímos um lugar onde a comunidade pode editar e melhorar os posts, votar na melhor solução e trabalhar em conjunto para chegar na melhor resposta. Nosso objetivo era dar à toda comunidade as ferramentas certas e o poder de colaborar e ajudar uns aos outros. E deu certo. O Stack Overflow em Inglês tem hoje mais de 6,5 milhões de perguntas, e mais 8 mil delas são criadas todos os dias. Praticamente todas recebem uma resposta correta, que vem logo abaixo da pergunta. E é a comunidade quem faz tudo isso acontecer. O conteúdo, a edição e até a moderação é feita pelos próprios usuários. Gratuitamente. Porque eles querem ajudar uns aos outros. Ou mostrar uma solução elegante. Ou retribuir a ajuda que receberam. Mas é preciso saber falar inglês. Nós não achávamos que o site em uma só língua seria um problema, afinal a maior parte dos programadores fala inglês, né? As próprias linguagens de programação são em inglês, não é mesmo? Mas nos esquecemos de algo muito importante: Não estávamos escrevendo um manual técnico. Estávamos construindo uma comunidade. Demorou um tempo, mas nós finalmente percebemos o que muitos de vocês já sabiam. É muito difícil fazer parte de uma comunidade que, literalmente, não fala sua língua. Hoje o dia é dos programadores de língua portuguesa! Agora vocês tem um lugar só seu, para construir do seu jeito. A melhor parte de participar de um site novo é que há um mundo de possibilidades pela frente: Se você é jovem ainda, amanhã velho será… Então aproveite! As perguntas básicas – aquelas que um dia atormentaram todo programador – ainda não foram feitas. Você pode escrever a pergunta ou resposta definitiva, que vai ajudar dezenas de milhares de programadores no futuro. (Ah, e não se preocupe se a sua pergunta já está no site em inglês. Vocês vão construir um site justamente para que os desenvolvedores que falam português não precisem mais recorrer ao inglês para aprender coisas novas!) Você pode ser o que quiser quando crescer. Apesar do site ser dedicado à problemas de programação, você pode decidir que sua comunidade realmente precisa, assim como aconteceu com o Stack Overflow. Durante o começo do site, sejam mais liberais quanto a perguntas de recomendação de ferramentas ou bibliotecas, perguntas relevantes à administração de sistemas ou outras áreas de TI. Por enquanto, se tem a ver com programação, pergunte à vontade. Por que começar com português? [Nota do tradutor: Porque português é a melhor língua, o Brasil é o melhor país e o Jay não consegue ler o que a gente escreve ;)] Queríamos começar com uma comunidade que atendesse a dois requisitos: Um grande número de desenvolvedores talentosos, em que Grande parte deles se sentisse muito mais confortável em falar sua própria língua do que o inglês Então a escolha foi muito simples. O Brasil conta com uma das maiores e mais fortes comunidades de programação do mundo, e isso sem contar Portugal, Moçambique, Angola e outros países menores que acrescentam ainda mais desenvolvedores talentos a esse grupo. Esse site é de todos vocês. Vamos construí-lo juntos! Crie sua conta. Ou faça o tour (e ganhe sua primeira medalha!)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/01/27/stack-exchange-for-android-is-here/","date":"2014-01-26T23:00:00.000Z","tags":["Company"],"title":"Stack Exchange for Android is here!","text":"This mobile thing will never last, right? We figured if we waited long enough, this whole “mobile application” thing would blow over and everything would go back to the way it used to be. You know, when phones were for calling people, and computers were for typing long, angry rants about how things aren’t the way they used to be. In retrospect, we may have misread that one a bit. It turns out that even for Stack Exchange mobile is eating the world. So today we’re excited to announce that Stack Exchange for Android is finally available for download on the Google Play store, for Android phones version 4.0 (ICS) and up: What? You’re an iPhone user? Don’t worry, the iPhone alpha is coming soon, probably in the next six to eight weeks. In fact, you can sign up for the iPhone alpha starting today . We’ll be inviting people in waves on a first-come, first-served basis over the next few weeks. Meanwhile, keep reading to find out what’s new in the app. One Feed to rule them all Translating Stack Exchange to mobile was… tricky. We have over 110 communities in the Stack Exchange network. On the web they exist as mostly separate sites. We’re pretty new to mobile development, but we felt that releasing 110 mobile apps was probably not the right approach. That meant we had to create an entirely new experience, one that didn’t exist on the web. A single, central location where you can check in on everything relevant to you across the network, whether you participate on one site or many. We dubbed it (not terribly creatively) “The Feed”. Here’s what it looks like: This is a completely new feature for Stack Exchange. It includes: Customized recommendations of questions you can answer, based on the sites and tags you participate in Interesting questions tailored to your interests that will learn from your activity and get better over time Updates when you get upvoted or your answers get accepted, so you can feel good about helping others wherever you are All your replies (answers, comments, chat messages, etc.) in one easy timeline Community events, blog posts, and even recommended jobs for you from Careers The Feed scales to your activity: if you’re only participate on one site, it’ll show you mostly questions from that site. If you participate on many, you’ll see all your updates in one convenient place. Notifications We’ve had instant notifications of replies on the site for a while, but now you can take them with you wherever you go. You’ll get notified anytime you would get an inbox message on Stack Exchange, which includes answers, comments, chat replies, and more. Don’t want those notifications? You can easily turn them on and off via settings, including whether they make noise or vibrate. You can even set quiet hours so you don’t get woken in the middle of the night. Search, Ask, Answer, Comment, and Vote And, of course, all the major things you can do on Stack Exchange are fully supported on the app: you can search for questions, ask or answer new questions, leave comments, vote, and even flag or vote to close. If you want, you can configure your phone to automatically open the app when clicking URLs on websites to make getting into the app even easier. Why Android first? What about iPhone? We set out to create a fully native experience for each platform. That meant designing the app twice, once for each platform, to make sure it felt right to users of each. We started with Android mostly because we’re new to mobile, and the Google Play Store process is more forgiving if we make mistakes! If you’re an iPhone user, sign up for the iPhone alpha today! We’ll start inviting alpha testers soon, and hope to launch the iPhone app in a few short months. What about tablet / chat / missing feature X? This is just the first version, and we plan to keep working on both of the apps in parallel. A tablet optimized version of the app is next, and then we’ll start adding in missing features based on what you tell us we’re missing. So if there’s something you’d like to see in the app, let us know on Meta under the ‘android-app’ tag. Let us know how we’re doing This is still a work in progress! Take the app for a spin and let us know what you think on meta. We’ll be working hard to keep improving it over the coming weeks and months. So download it today! Are you looking to get onboard the Android wave? Check out the Android developer openings on Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/01/23/stack-exchange-cc-data-now-hosted-by-the-internet-archive/","date":"2014-01-22T23:00:00.000Z","tags":["CC Wiki Dump"],"title":"Stack Exchange Creative Commons data now hosted by the Internet Archive","text":"We’ve been publishing an anonymized dump of all user-contributed Stack Exchange content since 2009. Unfortunately, at the end of last year our former host, ClearBits, permanently shut down. So we set out to look for a new home for our data dumps, and today we’re happy to announce that the Internet Archive has agreed to host them: The Stack Exchange Data Dump at the Internet Archive We’ve been big fans of the Internet Archive for a long time, and we’re really happy to be working with them on this. Wait, what’s this data dump? All community-contributed content on Stack Exchange is licensed under the Creative Commons BY-SA 3.0 license. As part of our commitment to that, we release a quarterly dump of all user-contributed data (after carefully sanitizing it to protect user private data, of course). Each site can be downloaded individually, and includes an archive with Posts, Users, Votes, Comments, Badges, PostHistory, and PostLinks (new). You’re free (and encouraged!) to share, remix, analyze and build on top of this data any way you want, as long as you follow the attribution requirements. What are the attribution requirements? In keeping with the spirit of sharing and proper attribution, and as the “attribution” part of the CC BY-SA license, we require that you do the following when you use the data: Visually indicate that the content is from the Stack Exchange network Link back to the original source question or answer Display the author names for each question and answer you show Link back to the author’s user page Those links should be ordinary hyperlinks directly to the Stack Exchange site, without “nofollow” or any obfuscation or redirection tricks plainly visible on the page (we’re looking at you, content farms). I’m too lazy to download this giant zip file. Can’t I just play with it online? You’re in luck! We also make the data available through the Stack Exchange Data Explorer (an open-source project maintained by community member Tim Stone) which lets you run SQL queries directly against a copy of the data. It’s updated weekly, and includes some data that’s not in the data dumps in order to keep the size of the downloads reasonable. If you want to access the data programmatically, we also have a pretty expansive JSON API that returns similar data to the dumps (but updated in real time with the websites). If you need help, we have a whole site for people developing apps on top of the API. So take our data for a spin! We love seeing what people create with it, from apps to research papers or even machine learning contests. Making this data easily accessible is just our way of giving back to the community that has made Stack Exchange so successful. Are you considering turning your data dives into a new career? Discover the opportunities in our data scientist job postings."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2014/01/03/winter-bash-2013-wrap-up/","date":"2014-01-02T23:00:00.000Z","tags":["Community"],"title":"Winter Bash 2013 Wrap-Up","text":"Another holiday season has drawn to a close. We’ve had three glorious weeks with our beloved hats. Now as we pack away the tinsel and the party horns, it’s time to put the hats back in their boxes for another year. Before we move on to 2014 with our bare heads (and our full hearts), let’s take a few moments to reminisce. 76,586 users from all over the network earned 214,172 hats this year – that’s just about twice the number of hats they earned last year. 95 sites opted to participate in Winter Bash, which is more than the total number of sites that simply existed during last year’s event. The most commonly earned hat was the Old Hat, earned 74,631 times (by 35,589 distinct users). The least commonly earned public hat was Oh the Horror, earned just 46 times. And the rarest hat of all was the top-secret Don Draper, earned only 14 times across the whole network. Something new we did this year was keeping the secret hats’ triggers… well, secret. Since the community asked so nicely, it’s now time to reveal the mysteries of the secret hats! In ascending order of rarity: Chuck Yeager was the most commonly earned secret hat, awarded first to Óscar López – the very first user to discover a secret hat. This hat was awarded to users who answered a question within an hour of it being posted, with their answer scoring 2 or more. With Great Power was awarded to moderators (elected or pro tem), former moderators, and Stack Exchange employees. Those who earned three hats in a single day earned Johnny Three-hats for their trouble. The Ghost of Winter Bash Past appeared only to those who earned a Necromancer badge. IG-88 was a less well-known bounty hunter, and the hat that bears his name went to users who tried for a bounty, but didn’t win it. I’m Not Listening was awarded to users who rejected a suggested edit on their own post. For I See Your Point, users had to leave 5 comments on a site meta, each comment scoring 2 or more. Before It Was Cool was awarded to forward-thinking users who asked a question with a brand new tag (that was not deleted or removed). Eureka! was awarded manually by SE staff to users who correctly determined (or guessed) the trigger for any of the secret hats. Don Draper, in homage to everyone’s favorite smooth-talking ad man, went to users who posted a community ad that received enough upvotes to be displayed on the site (usually 6). And finally, we need to send a special shout-out to the top hat earner across the entire Stack Exchange network. This user earned a whopping 44 hats – all of the hats they were eligible for, missing only With Great Power due to not being a moderator. Please join me in giving the eminent Logan M a hearty round of applause! Honorable mention is due to Manishearth, who held the network-wide lead for almost the entire duration of Winter Bash and was only edged out in the final hours by Logan M’s 44th hat. Well done to you both! Lastly, we send our gratitude to each and every one of our users for the tireless and high-quality work you do throughout the year, even when there aren’t any hats to earn. Winter Bash is our chance to kick off our shoes and have some fun during the holiday season, and we hope you enjoyed it! The whole Stack Exchange team wishes everyone a happy and healthy 2014. That’s all, folks! Tags: winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/12/23/stack-exchange-gives-back-2013-2/","date":"2013-12-22T23:00:00.000Z","tags":["Background"],"title":"Stack Exchange Gives Back 2013","text":"This is a time of year of traditions and celebrations — and we have a tradition at Stack Exchange where we set this time aside each year to give back to the groups and organizations that need our help. Each year, we reach out to our moderators and offer to make a $100 donation to charity on behalf of each moderator for their Stack Exchange community. It’s just a small gesture of thanks for the tremendous amount of work every community has contributed to make this entire thing possible. This “giving back” program actually goes waaay back to the beginning when we started with only 18 moderators and three sites. As our ranks grew, so did the donations. So on behalf of the 375 moderators this year, we have made the following donations to charity: It is also important to remember and support the tools and organizations that make what we do possible, so we also made the following donations: HAProxy — $1,000.00 jQuery Foundation — $1,000.00 Linux Foundation — $1,000.00 OpenSTV, the voting engine that drives our elections — $1,000.00 In addition, we continue to be a MathJax Partner with a donation of $20,000 in our commitment to helping math and science communities on the web. As we approach 2014, I think a lot about what we have built here together. I think about the fact that this is all made possible by people who DONATE their time and GIVE freely their knowledge to benefit future readers who come here seeking help. It’s your contributions here that make all this possible. It’s what keeps the lights on and the wheels turning… and what makes this small gesture of giving back possible. I take a lot of pride in what we do — and you should, too. This giving back program is just one of the many things we as a community do that is easy to feel pretty good about. It makes me delighted to be a part of this organization and part of a community that works so hard to help people they will probably never meet. Take care, and see you in 2014!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/12/18/who-are-you-take-the-2013-survey/","date":"2013-12-17T23:00:00.000Z","tags":["Company"],"title":"Who are you? Take the 2013 survey!","text":"Hi folks, just a quick note here to remind y’all that the yearly Stack Overflow User Survey is live! We’ve edited the questions/answers based on your feedback from last year’s survey and suggestions posted on Meta. As a small token of our appreciation, we’ll be donating $1 for each completed survey to your choice of one of this year’s Stack Exchange Gives Back charities (on top of what we’re already donating on behalf of each site). As always, we’ll be posting the results here on the blog once the survey is completed. Take the survey!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/12/16/winter-bash-2013-is-here/","date":"2013-12-15T23:00:00.000Z","tags":["Community"],"title":"Winter Bash 2013 is here!","text":"Ahh, the wintry season… The gatherings of family and friends, the giving and receiving of gifts, the making and/or breaking of New Year’s resolutions – however you and yours celebrate, the end of a calendar year heralds many traditions. Here at Stack Exchange, we wanted to get each of you an awesome, personal gift, and mail it to you as our way of saying “thanks.” But our accountant pointed out that there are 4.5 million of you, which promptly reminded us that the holidays aren’t about _gifts. _The real spirit of the holidays can only be captured with… Hats! That’s right: Winter Bash is back for another three weeks of millinery-related holiday fun. What’s new, you ask? New hats: There are over 30 new hats to earn this year (with many thanks to contract designer Elias Stein). And by “hats,” we of course mean, “things you can stick on your avatar’s face.” And it’s possible that there just might be a couple of secret ones, too. (By “it’s possible,” we mean “there definitely are, because we made them, like with computer code and everything, so there’s not really much doubt whatsoever.”) Hats are transferrable: What? No, you can’t sell them to each other. Hats are transferrable across sites! You read that correctly: this year, if you earn a hat on any site, you can wear it on any participating Stack Exchange site. This was one of our most asked-for feature requests after last year’s event, and it’s a great way for everyone to highlight their achievements on their favorite site across the network. Hat position is adjustable on your face: You remember how crushed you were after finally earning a mustache “hat,” only to discover that on your avatar, it was basically an extremely dapper unibrow? NEVER AGAIN. You can finally reposition hats in the box until Don Draper’s suit fits as well it fits him. (I know, I know… “it’s not a suit; it’s a carousel.” Give it a rest, Don. Not everything is a carousel.) Winter Bash 2013 will run from Monday 16 December 2013 through Friday 3 January 2014. During that time, participate on any Stack Exchange site to earn awesome hats (and other accessories!) Each hat has a different activity to trigger it. You can see all the hats and their triggers on the Winter Bash 2013 homepage. Still have questions? Of the kind that get asked… frequently? Check out the Winter Bash FAQ All the hats will go back into storage at the end of Winter Bash, so get out there, earn some hats, and show them off while you can! Just be careful. We paid a deposit on them. Tags: winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/12/04/a-new-top-bar-for-stack-exchange/","date":"2013-12-03T23:00:00.000Z","tags":["Community"],"title":"A New Top Bar for Stack Exchange","text":"The top bar of a Stack Exchange site has always been a bit of an odd place. It somehow combines user info, navigation, search, and a one-size-fits-all popup that includes hot network questions, a list of 100+ Stack Exchange sites, personal inbox messages, and other system notifications (lovingly referred to as The StackExchange™ MultiCollider SuperDropdown™). It was, in retrospect, overdue for a face-lift which is why we’re excited to roll out a new top bar this week. A Bigger, Blacker Bar The first thing you’ll notice is that **it’s really black***. When we originally conceived of the top bar with the Stack Exchange logo (way back in Ye Olde 2010), one of the main goals was to mark each site as a Gen-u-wine™ Stack Exchange site. Since then, however, we’ve created unique designs for over 40 different sites, and the Stack Exchange logo has started to get a bit… lost. So, in the redesigned top bar, we wanted to make sure that it would look the same across all sites, and make it obvious that you’re on a Stack Exchange site. It turns out that when you try to pick a color to match 40 different site designs, you quickly realize you only have one real choice: black. Jin points out that technically it’s not quite black: it’s #212121. New Achievements popup The biggest addition to the top bar is the brand new Achievements popup. Previously, if you wanted to know your reputation on every site you were active on, you had to visit every one of those sites. This led to some of us, well, compulsively cycling through sites and refreshing to see if we’d gained any rep. Now, there’s one convenient place to check from whatever site you happen to be on: This new popup includes: A reputation counter at the top which sums all reputation you’ve gained on all sites since the last time you checked, updated in real-time Entries for reputation, badge, and privilege notifications, grouped by post and time A summary of reputation gained today Aggregation from every site in the network in one place This should make it much easier to keep track of your reputation and badges across all the sites that you are active on. New Sites List (aka “The Site Switcher”) The old list of sites has gotten a new layout and is now its own distinct popup. The idea is to make it easy to switch between sites if you participate on several, or to find a new site that you don’t participate on regularly: In the new “Site Switcher” you’ll find: The current site at the top, with meta, chat, and blog links for the current site (and Stack Overflow Careers when on Stack Overflow) A list of your top 5 sites, ordered by reputation*, with your reputation for each A searchable list of all sites, with a short description of each We’ll probably let you customize this list in the near future, so you can include sites you like to watch but don’t have much reputation on. New Global Inbox The Global Inbox has been split out into its own popup as well, instead of a subsection of the Stack Exchange popup: We’ve gotten rid of the confusing distinction between “inbox” and “notifications”. All messages will now appear in the inbox, except for reputation and badge events which are in the new Achievements popup. Inbox items also now have a new layout, which should be easier to scan. Feedback Welcome There are a few smaller changes to mention as well: Your name has been replaced with your picture, to make it easier to recognize at a glance that you’re signed in as you (and because some longer names just don’t fit). The help link is now a dropdown with links to the tour and the help center, with a short explanation of what each is. Click areas for everything are now the full-size of the row, to make them easier to click or tap on mobile. The hot network questions have moved to the sidebar on the homepage, since they aren’t really navigation or notifications. The new top bar will be rolling out network-wide, including Area 51 and stackexchange.com, in the next few weeks. As always, meta is the place to go for feedback, suggestions, and bug reports."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/11/08/raised-on-the-net-please-welcome-ana-noemi-community-manager/","date":"2013-11-07T23:00:00.000Z","tags":["Background"],"title":"Raised on The ꞌNet: please welcome Ana Noemi, Community Manager","text":"We’ve spent a good portion of the year trying to build out our teams to handle the increasing load of work here at Stack Exchange. A big part of this has involved bringing on new community managers: with both a larger number of sites and greater numbers of users on those sites, we hadn’t exactly been keeping up with the demand for help and guidance across the network. Tim Post signed on in the spring, followed by Jon Ericson, Gabe Koscky and Pops “Kevin” Chang. Community Management at Stack Exchange is primarily a support role: assist folks in learning how to use the software, then help them learn to work together as they work to build something awesome. Our goal is to facilitate more than to dictate: if you’ve spent some time on a mature site, you know what we’re all working toward, but sometimes folks need a bit of help figuring out how to get there. Jon compares the job to the art of bonsai: patient observation, deliberate and judicious intervention and correction, more patient observation. We’ve been very lucky to attract so many patient, observant gardeners thus far, and I’m excited to announce that we’ve just hired one more: Ana was socialized on The Internet as much as in “real life”. She grew to be wildly fascinated with how social norms developed on the web, finding the factors that led people to bond, collaborate or conflict with one another to be endlessly intriguing. She studied theater, then web design and development, eventually dropping out of college to pursue a more self-directed path as a programmer. When Ana attended events and got to know people within the (then rather small) New York tech community, her new friends threw a wrench into her dev career plans by repeatedly asking for help solving PEBKAC problems. She was hired as the first community manager at a 3D printing company, helping designers and engineers share their expertise and sell their work. It was there that Ana was first introduced to Stack Exchange, observing with interest our approach to community development. She gained further experience in community management at a Node.js-focused hosting company, as well as knowledge of running a tech support team and the idiosyncrasies of open source communities. Ana has a keen eye for patterns in social interaction, and delights in finding ways to help folks work together more effectively. When she’s not working, she can be found exploring the five boroughs of New York, finding the weirdest and most fun electronic music, hacking on small projects, organizing developer conferences, or digging into a sci-fi novel or a book about behavioral psych. We’re still in the process of introducing Ana to all of our communities, so please join me in giving her a warm welcome when she drops in on yours."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/09/25/summer-hiring-happened-so-fast/","date":"2013-09-24T22:00:00.000Z","tags":["Company"],"title":"Summer Hiring, Happened So Fast","text":"We’ve been busy! So busy, in fact, that this post only takes us through the hires we made in June and July. More announcements are coming soon … in the meantime, get to know these 13 wonderful people who now call Stack Exchange home. Jon Ericson, Community Manager, Burbank, CA As an Air Force brat, Jon grew up all over the world but has lived in the Los Angeles area since attending UCLA, marrying his college sweetheart, and starting a family. He taught himself GW-BASIC on the family Tandy 1000, learned Pascal and FORTRAN in the classroom, C on the job, Perl on Usenet, and a bunch of other stuff on Stack Exchange. Fifteen years after getting his dream job subcontracting for NASA’s Jet Propulsion Lab, he leaves with an unblemished record in terms of spacecraft unplanned planetary impact maneuvers. Read more about Jon here. Dean Grant, Senior Account Executive (Ad Sales), New York Dean joined Stack Exchange this summer after spending 10 years in the Wall Street Journal’s ad sales department. Originally from Texas, Dean graduated from Iona college and now resides in Eastchester, NY with his wife and 2 kids (aged 17 and 15). For fun, Dean loves to go fishing, and he coaches his son’s baseball team in his spare time. Max Holley, Account Executive (Careers 2.0), Denver Max grew up in Austin, TX and survived on live music, breakfast tacos, and Tex-Mex. After graduating from Arizona State in 2009, he moved to Denver where he’s mostly lived ever since (excluding a brief stint in Florida). His career history is almost entirely in IT sales. Max’s hobbies include distance running, basketball, tennis, and biking. Joshua Hynes, Senior Product Designer, Mechanicsburg, PA After growing up with a love for art and problem-solving, Josh has been designing online experiences since 1999. After graduating from Cedarville University, he spent 10 years crafting experience for clients before joining Stack Exchange. A proud husband and father of 3, Josh enjoys reading books, listening to music, being involved at his church, watching baseball (especially the Boston Red Sox), and getting to know new people. Marvin Medrano, Kitchen Assistant, New York Marvin graduated from John Jay College. His past employers include East End Kitchen on the Upper East Side of Manhattan, where he met his current kitchen coworkers, Shanna Sobel and Philip Sireci. Marvin loves auto mechanics and custodial maintenance, and he has four beautiful little girls. Jessica Nothnagle, Sales Representative (Careers 2.0), Denver Jessica was born and raised in Rochester, NY and just recently made the move to Denver last July. Prior to Stack Exchange, she was working at Paychex for two years. She knew she wanted to relocate to Denver and all the cards fell into place when she got a promotion with Paychex that transferred her there. Outside of work, Jessica enjoys pretending she knows how to cook, hanging out with friends, and exploring all that her new city has to offer. Angela Nyman, EMEA Marketing Manager, London Angela was born and raised in Sweden but decided to leave it all behind at the age of 18. She lived in the US for a year before heading off to a private university in Italy. She worked as a marketing manager in Spain, France, and the UK, fitting in a couple of ski seasons in between, before deciding to travel the world. In 2009 she settled down in what is now properly her home: London! Angela has a background in marketing for the gaming industry, having run one of Europe’s largest poker tours, The WPT, for years. She is super excited about taking on another challenge in a new industry doing what she loves. Outside of work, Angela loves exploring new places and doing everything yoga, fitness, mind & health related. Samo Prelog, Web Developer (Core), Ljutomer, Slovenia Samo (left) grew up in Ljutomer, studied in Maribor, and now lives in Lenart – all in the “head” of Slovenia’s chicken-like geography. He got into programming by maintaining his high school’s website and developing applications for organizing karate competitions. Besides hanging out with his wife, he also enjoys making music, practicing & judging karate, other (normal) sports, and learning new things by answering questions on Stack Overflow. As an active SO user since 2009, Samo wasn’t able to resist the temptation any longer, and he clicked on the ‘woof from home‘ ad – once. Tania Rahman, Sales Representative (Careers 2.0), London Born and raised in a tiny village in Hampshire complete with thatched-roofed cottages, Tania has been living in London in the heart of the Olympic Village for over 4 years. Tania designed an award winning doughnut aptly named ‘Death By Chocolate’ which was available in petrol (gas) stations across the UK for a limited period. Due to the over consumption of doughnuts, Tania decided the best way to work the extra calories off was by running the London Marathon, which she did in 2013. When she’s not busy checking out the latest pop up restaurant she can be found with her nose in a good book or learning to swim…sometimes both! Phil Sireci, Executive Chef, New York Phil graduated from the French Culinary Institute. His impressive career includes stints at the Gramercy Tavern and Union Square Café; he also owned a restaurant in Provincetown, MA in the past. East End Kitchen was where he met his assistant, Shanna Sobel. Phil loves to play the guitar and has played in a couple of bands. He loves his 2 dogs, PJ and Dinny. Shanna Sobel, Assistant Chef/Pastry Chef, New York Shanna graduated from FIT with Bachelor in Fine Arts. She went on to receive a degree for Pastry Arts from the Art Institute of Culinary Education. Shanna has worked at NYC hotspots Colicchio and Sons, Stanton Social, and East End Kitchen, which is where she met Marvin and Philip. Shanna owns an online cookie company called Couture Cookies LLC, and she enjoys volleyball and abstract painting in her spare time. She’s also a huge Dave Matthews Band fan! Angela Toney, Account Executive (Careers 2.0), Denver Angela grew up in the American Southwest, attended college in rural Virginia, and now calls Denver home. Her sales career started at an educational technology company, and five years later, she is ready to dive in to her role at Stack Exchange! In her free time, Angela enjoys hiking with her husband and dogs, anything fitness-oriented (latest obsession is stand-up paddle boarding), and visiting all the great breweries and restaurants in the Mile High City. Jonathan Zizzo, Account Executive (Careers 2.0), New York Jonathan grew up in Ohio and attended college at The Ohio State University. He spent five years selling medical equipment before joining Stack Exchange this summer. Outside of work, Jonathan enjoys spending quality time with family and friends, traveling, and seeking adventure. _Visit our hiring page to learn all the reasons Stack Exchange is a ridiculously awesome place to work. _Want to see your face in our next new hire announcement? Here’s who we need: Web Developer (NYC or remote) Senior Product Designer (NYC or remote) Sales Representative / Account Executive (London) Sales Representative / Account Executive (Denver) Sales Representative / Account Executive (NYC) Community Manager – bilingual English/Japanese (NYC or remote) Recruiter (London)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/09/16/five-years-ago-stack-overflow-launched-then-a-miracle-occurred/","date":"2013-09-15T22:00:00.000Z","tags":["Community"],"title":"Five years ago, Stack Overflow launched. Then, a miracle occurred.","text":"Stack Overflow officially launched on September 15, 2008. In five short years, you’ve answered over 5 million questions on more than 100 sites, and helped hundreds of millions of people find the answers they needed. Today, we want to celebrate how, together, we changed one small corner of the Internet for the better. We want to hear your stories about how someone on Stack Exchange helped you. “Then, a Miracle Occurs” Before it went into beta, stackoverflow.com had a comic on the landing page that came to symbolize what we were setting out to do: We knew what our goal was, and we had some idea how to start, but the entire thing working was predicated on that middle step: “then a miracle occurs”. The original vision statement was ambitious: It is by programmers, for programmers, with the ultimate intent of collectively increasing the sum total of good programming knowledge in the world. No matter what programming language you use, or what operating system you call home. Better programming is our goal. – from Introducing Stack Overflow It was a gamble: would people really take time out of their busy lives to answer other people’s questions, for nothing more than fake internet points and bragging rights? It turns out that people will do anything for fake internet points. Just kidding. At best, the points, and the gamification, and the focused structure of the site did little more than encourage people to keep doing what they were already doing. People came because they wanted to help other people, because they needed to learn something new, or because they wanted to show off the clever way they’d solved a problem. Which was lucky for us. Because here’s the crazy secret about gamification: In the history of the world, gamification has never gotten a single person do anything they didn’t already basically like to do. In the midst of everyone’s individual reason for coming, somewhere among the hundreds, and then thousands of people who showed up to answer each other’s questions and hammer out how the site should actually work, the miracle actually occurred. An incredible number of people jumped at the chance to help a stranger So far, you’ve provided helpful answers to over five million questions. Those answers are seen by forty-four million people looking for help each month. To put those numbers in perspective: That’s more people helped each month than visit the New York Times, Bank of America, or Apple.com. If the people helped each month were a US state, it’d be bigger than California and almost twice as big as Texas. If they were a country, it’d be in the top 15% of nations in the world, with more people than Canada, Argentina, or Poland. It’d be practically two Yemens. If you put one frog in a football stadium for each of the 44MM people who get help here each month, that would be forty-four MILLION frogs. Think about that. But don’t say it out loud. People are quick to judge. Making the Internet a Better Place The next chapter of Stack Exchange is still being written. A few years ago, we widened our vision beyond programmers. Our new goal was simple, if a bit daunting: Make the Internet a better place to get expert answers to your questions. We asked people what other sites they wanted, and carefully started launching them, one at a time. Each time, we were counting on a group of experts to come together and start asking and answering each other’s questions. There have been a few failures along the way, but overall, the successes have been amazing. We’re now up to 106 sites, including some outstanding ones on System Administration, Computers, Mathematics, Ubuntu, Video Games, and Cooking, and some young upstarts like our site for English Language Learners. If there’s a site you want to see that doesn’t exist yet, you can still propose it on Area 51. At the same time, Stack Overflow is continuing to grow, and we are doing our best to keep it healthy. The short history of the internet is littered with communities that started out great, but slowly petered out under the weight of flame wars, mass-n00bocide, funny cat pictures, or just boredom waiting for the next big thing. We still need your help to keep Stack Overflow focused on its core mission: collectively increasing the sum total of good programming knowledge in the world. Tell Us Your Story We want to hear your stories. Looking at numbers is one thing, but hearing from real, live people about how someone’s effort here helped them is entirely different. So, if someone’s post here ever saved your day at work, or convinced you to buy your daughter an SLR and learn photography together, take a minute to recognize the person who wrote the answer that mattered to you. If you’re somebody who mostly answers questions, share how you got involved and what keeps you coming back. Or tell us about someone who taught you something before we even existed. They deserve to be recognized for the way their investment in you is getting passed on to others here today. If Stack Exchange got you interested in a new topic or taught you a new trick for an old one, we want to hear about it. Stack Exchange has always been about a community of people helping each other out. It was a long shot when it launched, but you made it work. Now, let’s take a few minutes to recognize everything that we’ve achieved together."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/09/06/community-management-by-popular-demand-kevin-chang-joins-the-team/","date":"2013-09-05T22:00:00.000Z","tags":["Background"],"title":"Community Management by Popular Demand: Kevin Chang Joins The Team","text":"I’ve been posting rather a lot of these announcements lately, as we’ve worked to increase the size of our team to where we can actually do our jobs and still occasionally sleep. So I’m gonna cut right to the chase: we hired Kevin “Lord Popular Demand Torgamus” Chang! Kevin lives on the east coast of the US, not too far from where he grew up. He’s been working as a software developer until now, and as such his first experience with Stack Exchange was on Stack Overflow, where he was fairly active until he found Meta Stack Overflow. He liked MSO because it was kind of like SE sites for psychology, UX, communication, HCI and programming all rolled into one, and his love for this tasty amalgam shows in the crazy amount of reputation he accumulated there. When not working, he likes to spend time on personal programming projects, being outdoors, trying out new restaurants and playing board/card/video games. Kevin has been a pillar of the Stack Exchange community for many years, with some especially notable work on our venerable Meta site. His ability to understand human behavior and cut to the root of an issue with his writing has proved invaluable in the past, and we’re extremely happy to have him lending his expertise here full-time. As a sign of just how much he cares about the folks he’s here to serve, his first action as a community manager was to shorten his name to the much easier to remember and type “Pops”. Please give him a warm welcome when you see him pop up around the network!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/08/23/introducing-gabe-the-smiling-community-manager/","date":"2013-08-22T22:00:00.000Z","tags":["Background"],"title":"Introducing Gabe, The Smiling Community Manager","text":"A couple of months ago, we started soliciting applications for a Community Manager candidate fluent in Portuguese and English. Why? Well, as Jay wrote: …We’ve long had a backlog of proposals in Area 51 for sites that are (non-english) language specific, and as we continue to work on localization, we need to start building up the community team with individuals who speak languages that are native to a large number of potential users… I’m happy to announce that Gabe Koscky stepped up to fill this role. Gabe hails from sunny Vila Velha in Espírito Santo, Brazil. Some 15 years ago, he discovered the web and became fascinated by it: all of a sudden he could talk to people from around the world, learn new stuff and find new, more efficient ways to procrastinate. He tried every single piece of instant message, chat or forum software he could find just to see how they worked and what made them different. That interest developed into a passion for the inner workings of the web, leading to a career as a web developer and a lot of research on how people interact with each other using the internet. After many years as a programmer he started to notice he was enjoying helping people out more than he was enjoying coding. So he decided to leave programming for a while and go chase new adventures here with us at Stack Exchange! When he’s not messing around on his laptop or spreading the word of Python to college kids, Gabe will either be playing video games or his guitar (he had the best Foo Fighters cover band no one’s ever heard of). He was a recovering Minecraft addict, until taking this job caused a tragic relapse. While we do have future plans for Gabe’s language skills, his primary role will be the same as the rest of us on the team: providing assistance and guidance to the folks who make these sites awesome. So please give Gabe a warm welcome, and look for him to pop up more often around the network as he learns the ropes. Do you have a unique set of skills that would benefit the growing communities here on Stack Exchange? We’re always looking for more help, and would love to hear from you – whether you’re near our NYC HQ or anywhere else in the world. You get to work with happy, smiling folks like Gabe and help us guide Stack Exchange as it grows. (And if you happen to be fluent in both Japanese and written English, you should definitely apply – we have a special project for you…)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/08/12/finding-a-great-company/","date":"2013-08-11T22:00:00.000Z","tags":["Careers"],"title":"Finding a Great Company","text":"We launched Stack Overflow Careers with the goal of fixing how companies hire developers. Traditional resumes only tell half the story, so we created Careers 2.0 Profiles to fill in the gaps. A few months ago, we released Company Pages with the goal of reinventing the traditional job listing the same way we reinvented the resume. Today, we’re excited to announce a new way to advertise your company to developers with Company Page Ads. What are Company Pages? Company Pages (here’s ours) were created to give developers a better picture of what it’s like to work as a developer at a company. They focus on the obvious questions that every developer asks before taking a job: Who are you and what do you do? What’s your technology stack? Who will I be working with? How well do you treat your developers? Since we launched the feature three months ago, over 800 companies have created Company Pages on Careers. We knew we had struck a real need that companies understood, and found a new way for them to connect with developers. Advertise Your Company Page After we introduced company pages, we started getting requests for some way to show off those company pages to developers. We’ve had job listings on Stack Overflow for a long time, but we wanted a new way for companies to advertise the company itself: their benefits, their developers, and their job listings. So today we’re proud to announce Company Page Ads, a new way for companies to find top developers on Stack Overflow. Company Page Ads come in three flavors that focus on your company: Open jobs Benefits Who you’ll work with These ads show up in the same places ads have always shown up on Stack Overflow — they don’t add anything new to the page. The difference is in their focus on a single company, and on the things that matter to developers. When you click one, you’ll be taken to the Company Page where you can learn more about the company and see what jobs they have open. Company Page ads come in two packages that each run for 30 days. The $1000 standard package includes all three sidebar ads. The $2500 premium package includes both sidebar and banner ads that will run at the same time, giving the company full run of the page with no competition from other advertisers or companies. The Company Pages themselves remain free — if your company doesn’t have one yet, you can create one right now and start using it to tell developers who you are and what you’re all about. If you decide you want to, you can purchase the Company Page Ads at any time through the website. And, as always, all of our products come with a 90-day money-back guarantee. The Big Picture We think Company Pages will fundamentally change the way developers look for jobs. Finding the right company, with the right culture and the right people, is the most important part to finding a great job. Over the next few months, we plan to add more features to let you search and filter companies to find the perfect match, and even more information for companies to fill out on their pages to tell you what you need to know. So stay tuned, and in the meantime check out the list of Company Pages on Careers. If you don’t have a Careers 2.0 profile yet, request an invitation today. And if your company is looking to hire their next great developer, tell them to try creating a Company Page on Careers."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/08/09/please-welcome-jon-ericson-community-manager/","date":"2013-08-08T22:00:00.000Z","tags":["Background"],"title":"Please welcome Jon Ericson, Community Manager","text":"With over 100 sites on various and sundry topics, Stack Exchange has become something of a juggernaught: keeping this many different communities healthy and well-supported can be a bit overwhelming at times. We’d never be able to pull it off if there weren’t so many of you pitching in to help, and so I’m more than happy to announce that we’ve managed to convert another dedicated volunteer to full-time cat-wrangler: Jon Ericson Jon became fascinated with computers when he got to play with his cousin’s Commodore 64 circa 1986. Over the years, Jon went on to write many fine Hello World programs, and dabbled in one online community after another: BBSes, AOL forums, Usenet, mailing lists, etc. Jon has had an interesting relationship with Stack Exchange. Five years ago, he read about the Stack Overflow beta and signed up. A year and a half later, after asking and answering a respectable number of questions, Jon lost interest. That could have ended the story, but when the network expanded to topics outside of technology Stack Exchange’s not-so-secret sauce of voting, editing, focused Q&A, and, yes, reputation dragged him back in. Jon got involved in a few more beta sites, and his renewed interest was solidified by several amazing answers to his Bible questions. Jon’s always been active in supporting the development of the communities he’s a part of, debating policies and suggesting improvements going all the way back to the User Voice days on Stack Overflow. For a long time, Jon didn’t see the point in closing questions and deleting posts (indeed, he once wrote a (long!) answer titled, “Closing Questions Considered Harmful”) after all, it wasn’t like disk space was too expensive. But after years of getting great answers from people who knew their stuff, the idea finally clicked: it wasn’t disk space, but the time of great participants that is at a premium. This sort of knowledge gained from experience has proved instrumental in helping Jon to provide guidance to folks using Stack Exchange for the first time. Just about every minute Jon isn’t online is a minute he spends with family: his wife, ten-year-old son, and boy/girl twins born in January. They enjoy camping, reading, playing games, travel, and church. Jon has repeatedly impressed us with his ability to analyze a situation and produce thoughtful, well-reasoned advice – we’re looking forward to seeing him bring this skill to bear on the various challenges facing the network. Do you have the talent and experience to manage the communities on Stack Exchange? We’re always looking for more help, and would love to hear from you – whether you’re near our NYC HQ or anywhere else in the world. You get to work with awesome people like Jon and help us guide Stack Exchange as it grows. (And on the off-chance you’re fluent in Japanese, you should definitely apply – we have a special project for you…)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/08/05/podcast-51-the-return-of-codinghorror/","date":"2013-08-04T22:00:00.000Z","tags":["Company"],"title":"Podcast #51 – The Return of Coding Horror","text":"Welcome to Stack Exchange Podcast #51, with special guest Jeff Atwood and the usual suspects Joel Spolsky, David Fullerton, and Jay Hanlon. Today’s show was brought to you by Pan-American World Airways! We kick off the discussion with a topic not on the agenda… which is reminiscing about who used to prepare the agenda on the old Joel & Jeff podcasts. Site Milestones! Spaaaace is now in public beta, so you should check it out. We also closed the India proposal, after much discussion about the possibilities for location-based sites. Five years ago today (7/31) was the start of the Stack Overflow private beta! (It’s also Harry Potter’s birthday.) We have a new feature starting this week: featured sites! We’ll grab the most interesting questions from a particular site to highlight the things people might not be aware of. This week, we’re highlighting Open Data. “What’s open data, Jay?” Glad you asked! It’s a site for developers and researchers who are trying to use publicly available data to translate it into more functional systems. (We make our data available, too.) We were reached out to by the contractor running data.gov – neat! We did a minor feature tweak: a new privilege. At 500 rep, you get access to the Late Answers and First Posts review queues. Congratulations! We’re working on an Android app. You can help test it! We’ve started rolling it out to alpha testers. It’s mostly functional – you can view questions, ask, answer, comment, vote, and view your inbox. (Ben wrote a great blog post about what he learned while developing for Android – you should read it.) Let’s turn to our special guest Jeff Atwood. He’s got many honorifics, and Jay got most of them wrong. Jeff has young children, and our hosts have lots of opinions about child things. So! Jeff’s new project is Discourse. Like Stack Overflow, Discourse was born from the negative experience of having to go to ugly, nonfunctional places on the internet because you have to. Jeff walks us through the process of refining this idea and creating the product and highlights some of its best features. Here’s the link to Jeff’s presentation at ForumCon. Side note: Forums and chat systems are incredibly similar, with one key difference: on a forum, you type in a complete thought. In a chat system, you write in half-clauses, and maybe three or four messages together make a thought. Discourse is an instant improvement over many commenting systems (as opposed to forum systems). It was never intended to compete with Disqus, but that’s how BoingBoing is using it and it seems to be working well. Jeff is looking for three major partners. He’s got two already. Listen in to hear the Stack Exchange exclusive on the third Discourse partner! (DISCLAIMER: there is no actual announcement.) Thanks for listening to the Stack Exchange podcast featuring Jeff Atwood! Check out BoingBoing’s forums or How-To Geek’s forums to see Discourse in action. Until next time!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/07/25/podcast-50-listen-to-this-podcast/","date":"2013-07-24T22:00:00.000Z","tags":["Company"],"title":"Podcast #50 – Listen To This Podcast","text":"Welcome to Stack Exchange podcast #50, featuring usual suspects Joel Spolsky, Jay Hanlon, and David Fullerton, plus special guest Shog9 aka Nine Shogs Shogging. And remember, today’s podcast is sponsored by the House of Lords, bringing you excellent laws, 100% free! This is podcast #50… sort of. It’s the 50th podcast since we switched from the Stack Overflow podcast to the Stack Exchange podcast, but we’ll celebrate anyway. Our most recent blog post [had an instruction in the title](http://blog.stackoverflow.com/2013/07/say-hi-to-nine-of-our-newest-newbies/), and 80 people bothered to do so. Apparently, our blog post titles have power. We probably promise only to use it for good. Site milestones, featuring Jaydles. Since our last podcast, we have launched [Space Exploration](http://space.stackexchange.com/). As of this recording it’s in private beta, but it may be public by the time of publishing. The activity level is very good – 150 questions in the first few days. 136 of them are even open! (Amusingly, the proposal faced [some promotional setbacks](http://discuss.area51.stackexchange.com/questions/11018/space-exploration-proposal-promotion-deleted-because-of-area-51-connection) during the Area 51 process.) New features. We redesigned two small but important pages: the [badges page](http://stackoverflow.com/help/badges) and the [privileges page](http://stackoverflow.com/help/privileges), which used to be extremely confusing. We also fulfilled an [ancient [feature-request]](http://meta.stackoverflow.com/q/915/165581) – you can now retract close votes. Jon Ericson is the newest member of the Community Team, and since Community Managers have lots of direct interaction with the community we like to introduce them personally. He’s a top user on [Biblical Hermeneutics](http://hermeneutics.stackexchange.com/users/68/jon-ericson) and we are happy to have him on board. Reason #48923 to [work at Stack Exchange](http://stackexchange.com/about/hiring): we now have two private chefs working for us. They are awesome. Also, today is the rollout of our custom beer pong table. Blame Jay and Michael. What is there that’s left to say about closing? We made some changes to closing. It’s close to our hearts because a) we hate fun, and b) the whole reason that people like us (and also hate us) is because we close all the crap. But people don’t _feel_ that way about closing. So we needed to learn to close less hatefully. Enter: [the War of the Closes](http://blog.stackoverflow.com/2013/06/the-war-of-the-closes/). Jay walks us through what changed. Including statistics! And buckets! So why do we have to close questions at all? Joel has the answer! Because otherwise we would be like Yahoo! Answers. Joel walks us through the history of programming questions, from the Dark Days. It takes a while. Get comfortable. Also, [we still hate fun](http://blog.stackoverflow.com/2010/01/stack-overflow-where-we-hate-fun/). (If you didn’t copy down the question number, [this is the question](http://stackoverflow.com/questions/953714/face-recognition-library) we talk about for a while.) This could be a podcast all on its own. [Here’s the Meta.Travel.SE question we discuss](http://meta.travel.stackexchange.com/questions/13/localized-questions). [Here’s the FlyerTalk example thread](http://www.flyertalk.com/forum/manufactured-spending/1455542-pin-available-now-visa-mc-prepaid-debit-cards.html) Joel was talking about. Joel broke the shades in the conference room. Possibly forever. Then, back to close reasons. We realized we couldn’t ever cover all of the off topic questions, so there’s an “other” free-form reason. Go to stackoverflow.com and search for “closed:1” and click “newest”. This will show you the most recently closed questions. You’ll hopefully find that the new set of reasons makes much more sense. We’re happy with the way Thanks for joining us! Today’s guest has been Nine Shogs Shogging, joining Jay Hanlon, David Fullerton, and Joel Spolsky. Today’s episode was sponsored by the House of Lords. See you next time!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/07/01/say-hi-to-nine-of-our-newest-newbies/","date":"2013-06-30T22:00:00.000Z","tags":["Company"],"title":"Say Hi to Nine of Our Newest Newbies","text":"The year is half over, and we’re still hiring like crazy. This year we’ve added 22 associates, which means our employee count has increased by 23.4% in the past six months. Yay math! Raise a glass to these fine folks, and join me in congratulating them on their new awesome jobs. Matt Charette, Sales Representative (Careers 2.0), New York Matt was born and raised in New Jersey, USA. He began his career at a small start up before making his move to big banking at Merrill Lynch. He spent three years in finance before making his move to Stack Overflow. After hours, Matt loves to hang out with his fiance (Jen) and his dog (Maverick) in Hoboken, NJ. If he’s not hanging with them, he’s out exploring the mountains in northern New York. Ben Collins, Web Developer (Core), Greenville, TX Ben is a Texas native, currently living in a small town east of Dallas. After completing his engineering degrees at Texas A&M University, he started a family and is now a proud husband and dad of 5 (soon to be six!). Ben has been a contributor on Stack Overflow since August 2008. He likes to read theology, watch sci-fi, and is also a budding triathlete. Michael Dillon, Associate Sales Rep (Careers 2.0), New York Mike was born and raised, and currently resides, in the garden state of New Jersey. He recently finished a long journey as a part-time student at Rutgers-Newark with a concentration in chemistry. He never wanted to join the world of research but just had a knack for the hard sciences. He put himself through school as a hair stylist in Hoboken, NJ, and is always available for hair advice. In his free time, he likes to workout, go to the beach, snowboard, and cause trouble in NYC. He is booking a holiday to London for early September and doing his second training in Denver so hopefully will be able to meet the whole team shortly. Tom Limoncelli, System Administrator, New York Tom has traveled around the world but has always lived in the NYC area. He grew up, went to college, and lives in New Jersey. While on his daily train commute he listens to podcasts on a variety of topics include politics, media, economics and technology. His spare time is spent writing books about computer system administration (some of our users on ServerFault.com say they aren’t too bad). He’s excited to join Stack’s SRE team! David Lislet, Sales Representative (Careers 2.0), London David grew up in the sunny and pink city, Toulouse (Southwest of France), and spent his teenage years on a tiny South Pacific island called Wallis (Need a map?? All right – it is close to Australia & New Caledonia). He traveled all around the world and started his career in Beijing, where he became a chopstick master. He enjoys traveling, tasting all kind of food (scorpions in China, kind of crunchy), photography, sketching, and listening old school hip-hop, jazz, and the band Ratatat. An avid sports guy, he played Rugby in New Zealand (not against the All Blacks) and recently joined a Crossfit center in London. Tim Post, Community Manager, Mandaluyong, Philippines Tim grew up in Baltimore, where he took an interest in programming at a young age. He spent most of his career as a systems programmer, which led him to The Philippines to work with his overseas counterparts. He ended up staying, having a family, and working remotely ever since. He joined Stack Overflow shortly after the beta, and after his second year of being a community-elected moderator, he decided that community management was what he really wanted to be doing. Where once he was a programmer for a living and a community manager as a hobby, he’s now a community manager for a living and a programmer as a hobby. Monika Pradhan, Sales Representative (Careers 2.0), New York After graduating from Boston University, Monika headed to NYC for business planning and sales strategy roles at Bloomingdale’s and Michael Kors. Now leaving the fashion industry, she is excited about starting her new sales role at Stack Exchange! Besides being a personal stylist to her friends and family, Monika is a gym-fanatic who blogs about her new workout regimens, inspiring fitness quotes, and favorite healthy meals. Monika also enjoys snowboarding, traveling, playing darts, and high-kicking (yes, that’s right… high-kicking). Sara Rayman, Sales Representative (Careers 2.0), London Sara was born and raised in New York, studied in the Midwest, and returned to her native NY for grad school. She recently packed her bags and moved across the pond to good ol’ London and has since been enjoying her time exploring her new city. In her spare time, she enjoys reading, cycling in the countryside, doing hot yoga, and cooking. She’s very excited to join the team at Stack and work for a really cool company! Allie Schwartz, Sales Representative (Careers 2.0), New York Allie Schwartz is a Brooklyn girl by way of Texas. She’s lived in New York for 6 years, and she spent the last 3 playing mom at Stack Exchange’s sister company, Fog Creek Software. Allie is an amateur cartoonist, a reality TV enthusiast, and a sucker for a good summer blockbuster. Nice to meetcha! _Visit our careers page to learn all the reasons Stack Exchange is a ridiculously awesome place to work. _Want to see your face in our next new hire announcement? Here’s who we need: Web Developer (NYC or remote) Mobile Developer (NYC or remote) Integration Developer (NYC) Senior Product Designer (NYC or remote) Sales Representative / Account Executive (London) Sales Representative / Account Executive (Denver) Sales Representative / Account Executive (NYC) Community Manager (NYC) Community Manager (remote) Community Manager – bilingual English/Portuguese (NYC or remote) Web Support Specialist (London)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/06/25/the-war-of-the-closes/","date":"2013-06-24T22:00:00.000Z","tags":["Community"],"title":"The War of the Closes","text":"It pains me when I hear people say that our sites are unfriendly, or that we chase new users away. But it’s a hard problem, because our highest priority has always been the quality of content on our sites. And it still is. We can’t lower our standards. We won’t. But we have been working hard to make our sites more welcoming, reminding users that feedback can be clear and nice, and helping new users learn the ropes before they get frustrated. And, as of today, we’ve completely overhauled closing. Closing, we just can’t quit you. Oh, closing. You are the watcher on the walls. You are the shield that guards the realms of men. Okay, so it’s possible that I may be thinking of the Night’s Watch. No matter. Closing is a big part of what separates us from other, um… less focused Q&A sites. It’s what ensures that our sites remain the kind of places that experts want to be. Closing… was working. But it wasn’t perfect. Closing wasn’t clear. Our close reasons were designed for _experienced _users, but did little to help the author of the question understand what the heck was going on. Over time, as we tried to make five close reasons address hundreds of question types, they became too broad to actually convey what’s wrong. Identifying the common factors of poor questions was a good idea, but we took it a little too far. It’s confusing ask for help solving a specific programming problem, only to be told that it’s”not about programming”. Or to ask which router to buy, just to learn that you’re likely to solicit “debate, arguments, polling, or extended discussion.” Really? You guys take routers pretty seriously here. Now, it’s not that we want those questions, but we need to convey exactly why we don’t want them. Imagine if police could give out summons that, rather than, “failure to stop at a signal,” just read, “behavioral violation”. When feedback isn’t specific, it’s impossible to fix the problem, but easy to write it off as probably coming from a bunch of grumpy old jerkfaces who’d rather make you look like an idiot than actually help you. Closing wasn’t nice. Having your question closed feels lousy; there’s no doubt about it. Now, we don’t care as much about nice as we do about quality – but that’s not a real dichotomy. We can be more constructive in conveying our standards without lowering them one bit. And we need to, because whether we liked it or not: Having your question closed feels like a personal attack. It is off-putting to be told that your question is “not constructive”. To the poster, “not constructive” doesn’t sound like polite feedback; it sounds like something a slightly detached guidance counselor might say to a child. And,”not a real question”? Does that make the listener want to get “realer” or to snarkily link to a definition of the word “question”? Ironically, we picked those terms explicitly because they were nicer ways to convey what we meant. And they were nicer than, “You’re kind of ranting and being a jackass,” or, “No one can answer that ambiguous nonsense.” But so is prefacing my feedback to my wife with: It could be just me, but I feel like you’re acting completely nutballs crazy. In both cases, we’ve gotten nicer than we started, but we’re still pretty far shy of where someone might actually accept our feedback. Fixing your closed question didn’t work The goal was always for some closures to drive an edit, improve, re-open cycle. The user gets helped, gets better at asking, and the community gets useful content. Unfortunately, since there was no way to know when a question had been improved, this almost never happened. We can do better. We’re not going to lower our standards. But if we want to educate new users, we need get better at three things: make users want to improve questions, not argue about them – “terminated as too sucky; re-submit when less so,” and, “needs more information, add detail to move forward” are different. One makes you want to work your way to the next stage. One makes you want to kick someone’s shins. make it clear exactly what needs to be fixed, or is problematic, without relying on information on another page. provide a clear path for to get questions re-opened – questions that are brought up to our standards should get reopened. Here’s how: “On hold” will replace “closed” on newly closed posts The word “closed” sounded final. Think about “closed” discussions, real estate deals, or job applications. In each case,”closed” means, a) additional revisions are not welcome, and b) the matter won’t be further considered.We led with a word that sounded final, so when we eventually told users they could edit their post, they weren’t listening; they were dusting off the old debate uniform to argue their case.“on hold” better conveys what we always meant: If you can edit your question to better fit our model, we can get you the help you need. Questions _not _re-opened within five days will revert to displaying as “closed,” to serve as a clearer signpost going forward. New close reasons are nicer and clearer “not constructive” and “not a real question” are replaced by: too broad – There are either too many possible answers, or good answers would be too long for this format. Please add details to narrow the answer set or to isolate an issue that can be answered in a few paragraphs. unclear what you’re asking – Please clarify your specific problem or add additional details to highlight exactly what you need. As it’s currently written, it’s hard to tell exactly what you’re asking. primarily opinion based – Many good questions generate some degree of opinion based on expert experience, but answers to this question will tend to be almost entirely based on opinions, rather than facts, references, or specific expertise. They’re much less likely to make the reader defensive, and much more specific about exactly what to fix. “Off-Topic” now includes site-specific close reasons Many communities have decided that some questions that sound like they fall under the topic “headline” (“cooking”, “photography”, etc.) should be explicitly disallowed: On our cooking site, recipe requests are off-topic, (but recipe replacements questions are allowed). On photography – “fix my picture” questions are off topic, (but specific technique requests are allowed). Stack Overflow is about programming, but programming questions you’d solve on a whiteboard or that ask what’s wrong with a large block of code are no good. Each example seems on-topic, but the community definition of what’s allowed has been adjusted to exclude them. These nuanced definitions have always been in each site’s help center (formerly the FAQ,) and are also the new user About page. And, as of today, they are also available to “off-topic” close-voters right in the close dialogue. Users can pick one from the site’s list, or if none apply, they can enter a free-form one which will appear as a comment and as a choice for others voting to close the same question: “Your question appears to be about ferret grooming, which is off-topic for Stack Overflow”. These site-specific reasons will also address situations previously covered by “General Reference” and “Too Localized”. Those were the least used and most misused reasons – moderator and team sampling found a huge percentage of their application to be erroneous. (References to location in a question were particularly dangerous – never mind that a couple of billion people might live there.) But they did have some important uses: Questions that could be answered with a single dictionary search on English, and Unguided requests to debug huge blocks of code on Stack Overflow In almost all of their good uses, they were clarifying what a community, over time, had deemed to be off-topic for their site. Programming questions,_ but not code dumps. _English language questions, but not single search definitions. Duplicates now focus on redirection to the answers you need All dupes now must point to an answered question, and the new language focuses on getting you answers: marked as [duplicate] – this question has been asked before and already has an answer. If those answers do not fully address your question, please edit this question to explain how it is different, or ask a new question. Questions edited by the original poster automatically go to the re-open queue Once there, other users will review and can re-open improved posts. No more flagging your own question, or going to Meta to request a formal appellate review. If you make meaningful edits to your question within five days of being put on hold, it gets considered for re-opening. Oh, one last thing. Thank you. A ton of work has gone into this, and as usual, the best ideas came from user input on Meta, so we hope you’re as proud of these changes as we are. We truly appreciate your feedback, and you’ve been incredibly vocal in your support for almost all of the changes. We know some of you have concerns about moving the good parts of “too localized” into the off-topic menu. We’re listening, and are going to keep a close eye on it as we roll it out network-wide. In particular, we want to know if you’re finding things that you can’t close now, but could before, and we’ll continue to adjust and iterate based on what we learn. It really seems like there should be some kind of badge for reading something this long, but the devs shot that idea down. Hard. Apparently we “will never ever offer badges to promote your endless ramblings, Jay.” It would have felt nicer if they’d told me the idea was on hold. http://www.youtube.com/watch?feature=player_detailpage&v=xGytDsqkQY8#t=17s"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/05/31/welcome-tim-post-our-latest-community-manager/","date":"2013-05-30T22:00:00.000Z","tags":["Background"],"title":"Welcome Tim Post, our latest Community Manager","text":"Community management at Stack Exchange is an… _Interesting _job. Parts sociologist, cat-wrangler, therapist, software analyst and cheerleader, this small band of dedicated people work daily to make sure each individual community has the tools and support you need to be as awesome as you are. Of course, we don’t do it alone: from the very start, Stack Exchange attracted some amazingly helpful and insightful folk who’ve donated their time and effort to help out – and I’m pleased to announce that we’re adding one of them, Tim Post, to our full-time staff of Community Managers. Tim comes from a systems programming background, starting out way back in the dial-up BBS days. He’s been working with and managing communities of various sizes ever since, and describes finding Stack Overflow back in the winter of ’08 like “getting stuck in a huge spiderweb”. His fascination with the system itself (both the software and the game-like aspect that drives so much participation here) led him to become a moderator, first on Webmasters then on Stack Overflow in the spring of ’11. Since then, he’s been a constant help and guide to the many folks using Stack Overflow and Stack Exchange. When he’s not working, Tim still enjoys programming (nowadays simply to satisfy his whims), photography, DIY projects and tinkering with whatever he can get his hands on. He resides in the Philippines, thus extending the reach of our global team into the west Pacific. Tim’s been working with us on a trial basis for a little while now, and enjoyed our motley crew enough to sign on full-time. You’ll be seeing a lot more of him in the coming months, so please give him a warm welcome when he drops in on your site. Think you have what it takes to manage the communities on Stack Exchange? We’re hiring community managers, and if you’re not near our NYC HQ, that’s okay – we love remote workers. You get to work with awesome people like Tim and help us guide Stack Exchange as it grows. (And on the off-chance you’re fluent in Portuguese, you should definitely apply – we have a special project for you…)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/05/20/showing-off-those-valued-associates/","date":"2013-05-19T22:00:00.000Z","tags":["Careers"],"title":"Company pages on Careers 2.0","text":"Stack Overflow has always had a strong focus on individual merit. Although collaboration is encouraged to some extent by the editing features, attribution on posts and the design of user profiles all tend to emphasize rugged individuality, that lone wolf toiling away at a keyboard. But most of us don’t actually work that way. We’re social creatures by nature, and the most challenging part of finding a good job can be finding the pack you want to run with. In spite of the dearth of features aimed at networking, folks have been using Stack Overflow to find and research potential colleagues almost since the day it launched – so a couple years ago, we started looking for ways to make this a bit easier. Well, now it’s done: With Company Pages, we’ve focused on the best ways to tell an interesting company story. And what better way to tell your story than with massive photos of workstations, team outings, hackathons, local attractions, and the people who make the companies who they are? There are tightly designed sections to list your company tech stack and benefits, along with plenty of room to be creative and communicate what makes your company special, what awesome products you’re working on, and the philosophy that drives your team forward. –[Introducing Careers 2.0 Company Pages](http://blog.careers.stackoverflow.com/2013/05/17/introducing-careers-2-0-company-pages/) Go check out the other wolf-packs… or show off your own on Careers 2.0."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/04/25/get-to-know-the-new-stack-employees/","date":"2013-04-24T22:00:00.000Z","tags":["Company"],"title":"Get to know the new Stack employees","text":"It seems like just two months ago (OK, it was exactly two months ago) that I announced our last batch of new hires. Today I’m pleased to introduce our newest employees. There are TEN of them … so get comfy and prepare to learn all about our latest hires, who seem to have an overall fondness for food, sports, music, and the great outdoors. Jessica Brady, Associate Sales Representative (Careers 2.0) New York Jessica was born and raised in warm, sunny Florida, until she packed up and moved to less warm, less sunny Chicago for non-weather-related reasons (okay, it was school). She has lived in New York and worked in television for the last four years, but is excited to make the leap into a brand new industry at a great company like Stack Exchange. In her spare time, Jessica likes to run for fun, take in a baseball game (TV, radio, or in person), hang out with her four-legged friend Cash (like Johnny)…and yes, watch TV. Marco Cecconi, Web Developer (Core) London Marco is from Milan, Italy, and he has been traveling around the world for some years. He studied in Singapore, then worked in France, Portugal, and finally settled in the UK for the past four years where he lives in Kent with his wife and kid. He goes by the handle of Sklivvz on the Stack Exchange network, where he has been a contributor since November 2008 and moderator on Skeptics since February 2011. Pieter DePree, Recruiter New York Native to sunny Florida, Pieter decided to trade in his flip flops and board shorts for a piece of the good life here in the Big Apple. Pieter has a passion for travel and has, at last count, traveled to 27 countries including a year spent living abroad in China. Previously, Pieter has been responsible for high volume regional sales recruitment at ADP, as well as the national sales recruitment at Seamless! Outside of work, you might find Pieter hiking, sailing, or playing volleyball. Pieter is very excited to be helping Stack Exchange grow its global sales teams! Jim Egan, Sales Representative (Careers 2.0) Denver**** Originally from the south side of Chicago, Jim now feels the need to argue with people in bars that Chicago is the greatest city in the world. He’s passionate about the Bears, Bulls, Blackhawks, and White Sox, so Jim couldn’t imagine a better sports town. Leaving that behind and moving to the Rockies was tough but needed. Armed with his trusty sidekick Loomis (pictured here, left), Jim plans to conquer the mountains and everything Denver has to offer. An avid crock-potter and terrible at accents, Jim hopes to fit in nicely. Paul Frey, Account Executive (Careers 2.0) London Paul has lived in London since May 2010 and he loves it! He was born and grew up in Cologne, Germany. Due to this fact he’s a big supporter of his local football club, FC Koeln. But he doesn’t just watch sports; he also loves to be very active, playing European handball up the third German division, and also squash and football. But his biggest passion is cooking and eating! His cooking style is experimental and cross culture…he never uses recipes, he just combines the things he knows and likes. Most of the time his cooking tastes good. Todd Jenkins, Sales Representative (Careers 2.0) London Todd originally hails from Boston (UK not US!) but now lives in London. He’s looking forward to transferring his sales skills to Stack Exchange! He really enjoys trying new foods and new restaurants, and he has a great love of the outdoors and adventurous walks. Apart from enjoying friends’ company in London’s nightlife, he does try to keep very sporty, although he admits shamefully that his two favourite sports are the two he’s the worst at (tennis and swimming). Todd is also a huge fan of Liverpool Football Club!! Shikha Malhotra, Account Executive (Careers 2.0) London Shikha grew up in Brussels / Belgium and has an Indian background. She has been living in London for over 6 years, and is super excited to join Stack Exchange’s growing UK sales team. During her spare time you will find “DJ Shake” mixing the latest Bollywood tunes with a mix of French hip-hop and Arabic flavor, reading books, and learning to play the “Dhol” (Indian drum). Pawel Michalak, Sales Representative (Careers 2.0) London Pawel is from Poznan, Poland and has lived in England for 7 years. He studied journalism and PR, and used to play handball (the best European sport ever!) quite seriously. He’s upgraded to playing football (the best international sport ever!), and can be found on London football pitches falling over, or screaming “Go Arsenal!” in support of the best football team in the world. You might see him on the road scooting cheerfully on his Vespa between angry Londoners stuck in traffic. He’s very excited about starting at Stack, as you can see here (CTAPT means START in Russian). Bryan Ross, Web Developer (Careers 2.0) Denver An LA native, Bryan Ross (everybody just calls him “Ross”) moved to Denver in 2010 after being chewed up and spit out by the rock music industry. A self-taught developer of 15 years, he has an unhealthy interest in language design, expensive keyboards, strong coffee, and music. When he’s not nitpicking about the merits of various programming acronyms, he can usually be found writing, recording, and mixing in his home studio. Derek Still, Sales Representative (Careers 2.0) New York Derek spent the first three years of his career in equity sales & trading, and is excited about making the move to a growing firm with unlimited upside like Stack Exchange. He grew up in Philadelphia, spent summers in Cape Cod, and moved to the concrete jungle in 2010. Outside of the office, Derek spends his time traveling, rooting on Philadelphia sports teams (Go Birds), listening to the Grateful Dead, and hanging out with his brothers and friends. _Visit our careers page to learn all the reasons Stack Exchange is a ridiculously awesome place to work. _Want to see your face in our next new hire announcement? Here’s who we need: Web Developer (NYC or telecommute) Senior Product Designer (NYC or telecommute) Sales Representative / Account Executive (London) Sales Representative / Account Executive (Denver) Sales Representative / Account Executive (NYC) Senior Account Executive, Digital Ad Sales (NYC) Community Manager (NYC) Community Manager (telecommute) Customer & Sales Support Agent (London) Customer & Sales Support Agent (Denver) Inbound Marketing Manager (NYC) Marketing Manager, EMEA (London)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/04/15/introducing-our-careers-2-0-employer-resource-center/","date":"2013-04-14T22:00:00.000Z","tags":["Careers"],"title":"Introducing our Careers 2.0 Employer Resource Center","text":"When we launched Careers 2.0 back in 2011, we set out with a goal: make the job search process better for the millions of programmers who visit our site every month. Part of achieving this goal is educating employers about what you want from them. In the past, our annual user survey helped us help companies change the way they found and hired programmers, while Joel’s book on how to find the best technical talent and his talk on how to stand out and attract top talent are a few other examples of how we’ve worked to educate tech companies on what you really want. Today, we’re taking this one step further: [Announcing the Employer Resource Center on Careers 2.0 ](http://careers.stackoverflow.com/resources) Employers are having a really hard time getting programmers to work for them — hardly a day goes by without another article, blog post or Tweet attesting to this. A study last year found that as many as 93% of employers find a disparity between the technical skills required and the level of the talent they’re able to find while recruiting. As a result, talented programmers are in incredibly high demand, putting you in a position to demand the best jobs, perks, and benefits. In the Employer Resource Center, we offer advice on best practices, recruitment news and trends, case studies and product guides to help employers with developer hiring. We’ll be updating the content regularly (mostly via the new Careers 2.0 blog), so check back often! If you have any tips you think employers should know about hiring developers, please leave a note in the comments below."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/03/08/2013-so-moderator-election/","date":"2013-03-07T23:00:00.000Z","tags":["Community"],"title":"VOTE NOW in the 2013 Stack Overflow Moderator Election","text":"It’s time once again to cast your vote for the next Stack Overflow moderators. The primaries have just ended, and the top ten candidates can be found here: http://stackoverflow.com/election. Why more moderators? We’re running the election now (rather than a year from the last election in June) because veteran moderator Tim Post is stepping down in order to work with us as a Community Manager! While we’re extremely lucky to have his hard-working brilliance brought to bear on the problems we face managing all these sites, his transition does create an immediate need for a replacement on the SO mod team. But of course, we’d be running an election soon anyway; as amazing as the current Stack Overflow moderators are, the workload continues to grow: What moderators do Jeff laid out the basic philosophy in A Theory of Moderation: Moderators are human exception handlers, there to deal with those (hopefully rare) exceptional conditions that should not normally happen, but when they do, they can bring your entire community to a screaming halt — if you don’t have human exception handling in place. As the previous graph indicates, flags – the primary embodiment of those exceptions – are a fairly frequent occurrence on Stack Overflow, purely because of its size. That said, a lot of flags aren’t identifying things that are particularly exceptional: in particular, posts that need to be closed (duplicates, off-topic questions, etc) or are of extremely poor quality aren’t all that uncommon on a site that gets over 7000 new questions and 11K answers each day. While moderators are well-equipped to handle these quickly, they don’t actually require moderators when a sufficient number of experienced users are willing and able to help. The effects of improved community moderation tools I mentioned last year that we were working on tools that would help to distribute the load more evenly between the elected moderators and the community as a whole. Well, eight months after their introduction, I’m happy to report that the revamped Review system is doing exactly that: As Jeff wrote: We designed the Stack Exchange network engine to be mostly self-regulating, in that we amortize the overall moderation cost of the system across thousands of teeny-tiny slices of effort contributed by regular, everyday users. That’s not empty rhetoric – on a site the size of Stack Overflow, it’s absolutely essential. Geoff Dalgas came up with the design for the new review system based on his observations of wikiHow’s Community Dashboard: individual tasks, each focused on a specific need with specific actions to be taken and specific guidance provided for new users. The philosophy: don’t just give people stuff to do – help them learn how to do it. Geoff, Emmett and Kevin have done some amazing work in making these new tools as fast and effective as possible; while there have been some growing pains and a few unexpected challenges, it’s great to see folks jumping in to help so enthusiastically. In the past 30 days, we’ve seen: 9384 suspected low-quality posts cleared, 1608 deleted, 319 edited. 30339 suggested edits approved, 15497 rejected, 4949 improved 17434 posts that’d been voted or flagged for closure closed, 3308 left open, 376 edited 571 posts reopened, 2203 left closed, 56 edited (a detailed breakdown of actions to first posts and late answers can be found here.) That’s a lot of work being done by a lot of people… Heady stuff. To be sure, that still leaves a huge amount of work for elected moderators, but I think it demonstrates the ability of the whole community to step up and assist when the opportunity is provided, that thousands of you are still willing and able to work together to created and maintain the site that you want to be a part of. So as you go to cast your votes today, looking over each candidate’s stats and reflecting on what they’d do as a moderator… Remember that moderation doesn’t start with winning an election."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/02/25/max-oded-wendy-val-shefali-and-mike-welcome-to-the-family/","date":"2013-02-24T23:00:00.000Z","tags":["Background"],"title":"Max, Oded, Wendy, Val, Shefali, and Mike: Welcome to the Family!","text":"We’ve been busy hiring more of the most talented people on the planet! Three cheers for the newest employees at Stack Exchange: Max Horstmann, Web Developer (Careers 2.0) New York __Max joins Stack Exchange as a developer on the Careers team. Originally from Denzlingen, Germany, he previously worked on the Windows team at Microsoft. On a recent one-year career break, he and his wife had a chance to travel to glaciers in South America, deserts in the Middle East, and jungles in Southeast Asia. His mission for the next five years is to sort all the pictures taken on this trip, write a few more mobile apps, and find out which German bar in New York City plays the best Blasmusik. Oded Coster, Web Developer (Core) London A long time Stack Overflow user and contributor (Beta badge, baby!), Oded is highly familiar with the ins and outs of Stack Overflow and promises not to introduce too many bugs. Originally from Jerusalem, Israel, he now lives in London, England with his wife and two children. Wendy Paler, Account Executive New York Wendy grew up in Wisconsin and has been living in New York for over five years. She is very excited to move into the tech field as a member of the Stack Exchange team. Outside of work, you might find Wendy sharing a delicious meal with friends in a restaurant, checking out a concert, show, or museum, taking a spin or yoga class, or pretending to be a Food Network star in her Brooklyn kitchen. Valentina Perez, Office Manager London**** Val was born in Argentina (won’t eat beef), grew up in Ottawa, Canada (hates snow), and has lived in London for 15 years and couldn’t imagine living anywhere else. She has a certificate in Web Application Development from the Open University, and is mega excited to have the opportunity to work for Stack Overflow and set up the way the new London office will be run. On her spare time Val is part of the Jeerios, the jeerleading squad for the London Rollergirls. She also loves music, dancing, baking, and dinosaurs. Shefali Shah, Sales Representative Denver Hailing from the bustling city of Mumbai, Shefali is an interesting mix of the East-and-West. Armed with a BS in Business Admin with an emphasis in Finance and Entrepreneurship from CU Boulder, she is excited to join and contribute to the Stack Exchange team. On the weekends you will find Shefali dancing with her East Indian Dance Company all over Colorado, or just catching a meal or a flick with her homies around town. Michael Hardy, Account Executive Denver Michael is a native of Atlanta, GA who moved to Colorado 11 years ago to go CU Boulder. He met his wife in while in school and decided to trade humidity for all four seasons and a plethora of microbreweries (Belgium, Aged Sours, Cask Ale… Yes Please!). On the weekends you will find Michael chilling with his family, trying a new breakfast joint, exploring the Rockies and/or playing competitive baseball. _Visit our careers page to learn all the reasons Stack Exchange is a ridiculously awesome place to work. _Want to see your face in our next new hire announcement? Here’s who we need: Web Developer (NYC or telecommute) Product Designer (NYC or telecommute) Sales Representative / Account Executive (London) Sales Representative / Account Executive (Denver) Sales Representative / Account Executive (NYC) Community Manager (NYC) Community Manager (telecommute)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/02/01/why-we-still-believe-in-working-remotely/","date":"2013-01-31T23:00:00.000Z","tags":["Background"],"title":"Why We (Still) Believe in Working Remotely","text":"It’s 2013, almost three years after we first raised money and started growing beyond the first four employees. At the time, Jeff wrote a great blog post about working remotely, basically laying out our plan for how we were going to make it work. Now we’re a few years in and it’s time to update it with, well, what actually happened. First, where are we now? Stack Exchange now employs 75 people, roughly evenly split between sales (and sales ops and marketing) and product (development, ops, design, community management). The product side is where our remote working happens: we have 16 full-time remote and 18 in-office developers, sysadmins, designers, and community managers. So we are very much a hybrid team, which I’ve come to believe is the best of both worlds. I’m the lead of engineering, so I’m mostly going to talk about developers, but a lot of this applies to other positions as well. Why we believe in letting people work full-time from home #1: It lets you hire good people who can’t move. Hiring remotely opens you up to an enormous pool of people who can’t move. I can’t stress this enough: for every one person who is in your location or is happy to move there, there are 100 more who are not. They’re tied down by a spouse with a job, a kid in school, a visa they can’t get, or a mortgage they can’t get out of. If you’re hiring for technical positions, hiring remotely is the best-kept, blindingly obvious secret for finding people. By hiring remotely, we have been able to fill our team with awesome people with lots of experience, who were stuck in happily living in places like Corvallis, Oregon or Forest of Dean, UK (Seriously, look it up. It’s basically The Shire.) #1a: You don’t lose people to silly things like their significant other going to medical school. Before I worked at Stack Exchange, I worked at Fog Creek. I watched at least five great people leave because their family situation made it necessary to move, and Fog Creek had (at the time) a strict no-remote-workers policy. This drove me crazy. These were amazing employees, in whom the company had already invested deeply, who were now walking out the door because they couldn’t live in New York any more. At Stack Exchange, we’ve already had two people move away from New York, who are still happily employed doing the same job they were always doing. If we didn’t allow working remotely, we’d be down at least two great developers. #2: When done right, it makes people extremely productive. Private office? Check. Flexible hours? Check. Short commute? Check. I’ll let you in on a secret: most of our remote developers work longer hours than our in-office devs. It’s not required, and probably won’t always be the case, but when going to work is as simple as walking upstairs (pants optional, but recommended) people just tend to put in more hours and work more productively. #3: It makes you focus on more than butts in chairs. As a manager, I can’t easily know how many hours each person on my team is working. This is actually good for me because it forces me to look at what they’ve done. It’s good for the remote person as well: they can’t fool themselves into thinking that just because they’re in an office, surfing Reddit for an hour is work. In a perfect world we’d both already have this perspective, but it’s amazing how easy it is to delude yourself into thinking that “going to the office” = work. What we’ve learned #1: Remote working isn’t for everyone. There’s a tendency to think that working from home is all sunshine and rainbows and working in your PJs. It’s not. You miss out on being around people (which wears even on introverts), doing fun stuff like playing ping-pong or having lunch together, and (sometimes hardest of all) you lose a clear distinction between work and the rest of your life. Some people thrive when working from home, while others wither or just… drift. We’ve had people move both ways: remote people deciding to come in to the office, and people in the office deciding to go remote. The key, for us, is offering both and helping people decide which is best for them. #2: Working remotely is a skill you need to hire for. If remote working isn’t for everyone, you better be sure that the person you’re hiring to work remotely is going to be good at it. The most important thing that we look for is that they must be self-motivating and proactive: self-motivating in finding things to do, proactive in communicating with the rest of the team. Our remote developers are some of the most argumentative people in the whole company, because we hired them to be that way. We like opinionated people. Opinionated people find things they care about to work on and make sure you know what they think, which is essential if you’re not sharing an office together. #3: You have to commit to it as a team (and a company). There’s no halfsies in a distributed team. If even one person on the team is remote, every single person has to start communicating online. The locus of control and decision making must be outside of the office: no more dropping in to someone’s office to chat, no more rounding people up to make a decision. All of that has to be done online even if the remote person isn’t around. Otherwise you’ll slowly choke off the remote person from any real input on decisions. #4: Communication is hard (but it was always hard). I am far from the first to point it out, but the hardest problem in growing a company from 4 to 75 people (and, presumably, to 200) is communication. When there were 4 people, everyone knew everything. When there are 75 people that no longer scales. So you have to work out your channels of communication, and that’s doubly true with remote workers because you can’t rely on overheard conversations or gossip to spread the word. You have to force yourself to be explicit in communication. How we do it #1: Google Hangouts. Google hangouts are the lifeblood of our organization. If you haven’t tried them for video chat, you’re living in the Stone Age. We have persistent hangouts for every team available at URLs that everyone knows. We spin up one-off hangouts for quick video chats. We use them for meetings, for hanging out (no, seriously), for demos, for teaching… for everything. There really is no substitute for face-to-face conversations, and when you get to the point where people in the office are actually preferring hangouts to talking in-person because it’s easier, you know you’re on to something. #2: Persistent Chat. Chat is good for shorter conversations, or quick pings to ask someone a question. It has two big benefits: (1) it’s asynchronous enough that people can get back to you when they have a second, and (2) it’s persistent, so other people can skim it and catch up on what they missed (vital when you’re in different time zones). Every company should have a chat system, whether they have a distributed team or not. It’s better than interrupting someone at their desk or dragging someone into a hangout for a quick question. We built our own chat system, but there are good alternatives like Campfire and HipChat out there. #3: Email. As flawed as email is, it’s still alive and kicking. Email is for fully asynchronous communication (don’t use email if you need a response today), and for communicating status updates and decisions. We have a standing rule that all decisions must be typed up and shared with the rest of the team via email, basically what Jeff described at the beginning. Each team sends out a weekly status update to the whole company giving a high-level overview of what’s going on, so teams don’t get isolated from one another. #4: Trello + Google Docs. We use Trello for keeping track of who is working on what, and Google Docs for notes, specs, designs, etc. Both are excellent tools that you should use even if you’re not working remotely. That’s our story Distributed teams aren’t for everyone, but they are working extremely well for us. Yes, they are more work, but for us it is easily worth it because of the quality of people we get and the quality of life we’re able to offer them. For us, it’s been a part of our DNA from the beginning and something we’re committed to making work long-term. Will it still work when we hit 500 employees? I don’t know, but I’m excited to find out. Did I mention we’re hiring? Sound like the kind of place you’d like to work? We’re hiring, especially developers and designers. We’re still figuring it all out, but we’ve got a great team and some really interesting problems to work on. Come be a part of figuring out what the future of remote working looks like."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/01/29/about-page-2-0-the-quickstartening/","date":"2013-01-28T23:00:00.000Z","tags":["Community"],"title":"About Page 2.0: The QuickStartening","text":"We’ve just rolled out a new Quick Start guide to help new users learn the basics. Here’s one example, but you can find any site’s version by going to sitename.com/about. Imagine you’re visiting a new friend’s home and… “Please, make yourself at home. Oh, actually, could you not sit on that? Yes, it _looks_ like a couch. That’s what makes it so avant-garde. But it’s actually art. Whoah, careful there, too – I see your confusion, as that does _resemble_ a doorknob, but it’s actually a very small furnace. And – I’m sorry, but – could you NOT use a coaster? We’re testing the effects of wet drinks on finished wood, and coaster usage generates noise in our data.” When you’re surrounded by familiar things, but using them the way you normally do leads to different, negative outcomes, it’s extremely disorienting. At Stack Exchange, “weird” is a feature, not a bug. Our sites are different. And that difference is deliberate. The things that confuse folks who are used to forums, or those broad, “ask anything” sites are the very things that we believe make us work better. For us, different is good. Just like my mommy always told me. But it’s still jarring. And when it’s too jarring, potentially valuable contributors are put off and leave. They didn’t get help, and we lost an expert. Being jarring came at a high cost. Easing them into our weirdness. To mitigate new users’ frustration, we need a page that can do three things: Describe just the ways that we’re different. We don’t bother telling users about the things that are similar to the other sites they’ve used. Instead, we focus on the delta – the things that are likely to be surprises to them. For example: Posts are collaboratively edited Chit chat and pure discussion are generally not welcome Some things that sound a lot like what’s on topic are expressly off-topic here, and questions about those things get closed. Now, obviously, users could just discover these things as they use the site, but however much you do or don’t grok our system, surprises suck. Most of life’s surprises fall closer to the kind involving gum discoveries in improbable locations than the ones that come in pony-shaped boxes. Whatever you think about a rule’s merit, learning about it after you’ve broken it tends to adversely impact your view of it. There’s a big difference between giving your wife a poem you wrote her, only to receive a red-lined markup, complete with suggestions as to how to be less derivative, and having her edit one that you’re hoping to submit to a journal after she offered to give you feedback. Explain why we’re different. If you’re going to make someone think, or god forbid, try to change the way they do something, you damn well better convince them there’s a good reason. Why allow users to edit each other’s posts? Because it makes the average quality of our content higher than sites where responses are limited to a single user’s experiences. _Why _edit out harmless chit chat? Because we want to make the best answers _more findable__ _than they are in traditional forums. If you tell someone you don’t allow chit-chat, but you fail to give them the reason, the first time they have their “thank you!” deleted as noise, they’re less likely to think about our “answer findability optimization” than our “tendency toward pedantic, manners-hating fascism”. Get them to actually read it. Research tells us that pages like this are significantly less effective if no one reads them. The challenge is that, surprisingly, most people who arrive at a website with a problem to solve do not seem to have the following first instinct: “I wonder if they have any detailed, hopefully exhaustive documentation that covers their rules, best practices and societal mores. I’d just love to read it in its entirety before trying to get help with my problem!” Now, I do realize that some non-trivial portion of this blog’s audience is like us, and is thinking that that’s actually exactly what we might do. Which is why we love you so much. But, most people, even most experts, are not like us. Please trust me when I tell you this: Most people do not believe they should need to expand their education in any way whatsoever prior to typing in a box on the internet. They just don’t. So, if you want any shot at getting them to read a primer, you need to make it easy on the eyes, and keep it to a length that respects their time, rather than one that implies that they may need to secure some provisions or sled dogs prior to proceeding. So, we pared it to just those topics that were absolutely necessary for a new user to get started successfully. Which was the hardest part; it’s much easier to be comprehensive than brief. Some of our choices may surprise you, but they all resulted from analysis, testing, and discussion. “Tags? Really?” Yep, we felt the same way. Until we did some user testing and almost every single user on the non-tech sites expressed some variation of the following: *“You said I had to add a tag. I didn’t even know what a tag WAS, but I used my context clues and I figured it out. And added one. And now it’s telling me that I NEED MORE REPUTATION TO CREATE NEW &%$ing tags. I hope a rock falls on you. A heavy one.”** Tagging may not seem like something a new user needs to be thinking about, but it’s actually critical because almost invariably, they get it wrong. The same is true for comments and even editing. The subject-matter experts who do stick around long enough to make a few mistakes will learn, but often after frustrating themselves – and site regulars – in the process. Knowing roughly what to expect going in should help to ease the transition for all involved. Which is good, because we can’t afford to have a site’s next Jon Skeet wasting his time casting geologic hexes on me, when we really need him to focus his energy on answering questions. Hopefully, this guide will help."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/01/25/2012-stack-overflow-user-survey-results/","date":"2013-01-24T23:00:00.000Z","tags":["Background"],"title":"2013 Stack Overflow User Survey Results","text":"In December, we launched our 3rd annual Stack Overflow Annual User Survey to learn more about our site demographics and user trends throughout 2012. Compared to last year, we received an even larger sample size this year with almost 10,000 respondents! Here are a few larger trends we’ve observed over the past three years: You like us…you really like us! Since 2009, site traffic to Stack Overflow has grown by a whopping 261.7%! As if this weren’t enough, we’re also now the 86th largest global site, according to Alexa. Our crazy goal of breaking into the top 50 is looking less crazy! Mobile is on the move. No real surprise here, but of the mobile family, the number of users who own Android devices increased 29.2% from 2010 to 2012—a bigger increase than owners of iPhones and iPads combined. Despite the rising mobile trend, we were surprised to learn that only 7.7% of you are employed as mobile apps developers and 51.8% of companies still don’t have a mobile app. You’re getting happier at work. Since 2010, we’ve seen a 2.2% uptick in workplace satisfaction, so 70% of you are happy in your current jobs. We’re not going to point fingers or anything, but we hope there may be some causation for those of you who found your current job from among the 10,000+ roles that were posted on Careers 2.0 last year. In our effort to make all information publicly available, here is a basic report of the results or if you’d prefer to play around with the data yourself, download the survey results."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/01/15/announcing-a-new-way-to-change-your-profile-picture/","date":"2013-01-14T23:00:00.000Z","tags":["Community"],"title":"Announcing a new way to change your profile picture","text":"One of our New Year’s resolutions here at Stack Exchange is to take a hard look at our user experience. As the network has grown and our audience expanded, the system has grown with it – but there are some rough edges in places that can use a bit of smoothing. You’ll be seeing a lot of improvements over the next few months, but today I’d like to announce the first bit of polish: built-in profile pictures. We have used Gravatar to let you manage your profile picture since roughly six to eight weeks before Stack Overflow entered beta. Gravatar is a wonderful service that lets you use a consistent, recognizable image for yourself across many different services and sites. It’s free, it’s fairly easy to add support for it (which made it a great fit for Stack Overflow in the early days), it doesn’t require any special configuration to make it work on multiple sites (which made it a great fit as Stack Exchange grew) and best of all it supports distinct, recognizable default images for folks who haven’t uploaded their own. There’s one problem: if you don’t have a Gravatar account, you can’t have a custom picture. One basic bit of personalization turns into Yet Another Username & Password, which is annoying if Stack Exchange is the only place you would ever use it, and somewhat embarrassing considering our support for OpenID means you don’t need another set of credentials to use Stack Exchange itself! So from now on, anyone who wants a custom picture can simply upload one from their computer or the web. If you hover your mouse over your picture on your profile page, you’ll see a new link to ”change picture”: Click on that, click the “Upload a new picture” button, select a picture from your computer (or enter the URL of an image on the web), and finally click the “Upload” button. That’s it. If you decide to switch back to your Gravatar, you can do that at any time: As always, you can have a different picture and bio for each site, or use the button at the bottom of your profile edit page to copy everything network wide. And since we default to Gravatar for profile pictures, your existing photos (or abstract patterns) will remain unchanged until you want them to change. We would like to thank Alan and team at Imgur for doing the image hosting and being incredibly helpful during the whole process. They turned what would’ve been a major development effort into something we could roll out in a couple of weeks. Try it out, and let us know what you think on meta!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/01/10/podcast-40-2/","date":"2013-01-09T23:00:00.000Z","tags":["Company"],"title":"Podcast #40 – Random Musings (Plus a Surprise Guest)","text":"You’re listening to the Stack Exchange Podcast #40 (We apologize to everyone who expected Wil Wheaton last week) Your hosts are David Fullerton, Jay Hanlon, and Joel Spolsky. We also have a surprise special guest: Britton Payne, professor of Copyright, Trademark, and Emerging Technologies at Fordham University. He knows a lot of things about software patent law, so we grabbed him as he walked by the studio to talk to us. About 15 years ago, Congress passed the Digital Millennium Copyright Act to create some useful guidelines for the new digital landscape. We talk about what actually happens with the DMCA takedown notices, including loophole issues that Joel has discovered. So that’s one part of the DMCA. The other one is anti-circumvention technology, and we go through many of the nuances there. So the technological means of anti-circumvention have to be re-evaluated every now and then. New exemptions were announced in October regarding: ebook reading assisted technologies (like Amazon Kindles being able to read aloud to you); jailbreaking phones (not tablets); and unlocking phone handsets (not tablets). This has been Copyright Update #1 on the Stack Exchange Podcast, brough to you by Britton Payne! So what else is going on in the Stack Exchange universe? We just had a holidays! Part of our celebration included Winter Bash, which ends “today” (at time of recording). You can still check out all the details. Give us your thoughts about it on Meta. …including a “hat” that was a tribute to Jason Punyon, who is in a rock (jazz and disco, really) band. They played our holiday party at the Hotel Rivington, and they were astonishingly good. We have a couple new sites to talk about – Politics & Anime. Each has just over 250 questions, so they’re doing okay, for baby sites. We discuss the pitfalls and strengths of each of these new members of our network (especially Politics). (Somehow we get onto the topic of the Black Hebrew Israelites.) Politics is a difficult site to approach, but it’s not hard to pass the bar of being better than anything else that’s out there on the internet, and we’re well on our way to doing that. We turn to Anime. None of us know very much about anime, but we manage to turn this site into a conversation anyway. No news is good news, new-office-wise! Construction is constructioning. We’re moving in March, or so. There’s a glimmer in Joel’s eye called Stack Overflow TV. They’ll be broadcast live on the Internet on stackoverflow.tv, which we will remember to buy before this podcast is published. Meth questions! Er, meta questions! First, we tackle “How to deal with a highly voted non-constructive question“. What’s the problem with the question mentioned there? How do we solve this? We decide to call them “pivot questions”. The conversation leads us to another common type of easy question: “bike shed” questions. While we’re here, go follow us on Twitter to get the best questions from all of our sites. (It can be a lot to swallow.) We experimented with automated twitter feeds and with manually curated twitter feeds, and have found limited success with both. We discuss how twitter feeds (and other types of feeds) work for our company and our sites. For you people listening at home: We want to take your questions! Go to s.tk/podcastquestions to record your question for us to play and answer on the air. You can also send us a written message… somehow."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2013/01/08/boxing-day/","date":"2013-01-07T23:00:00.000Z","tags":["Background"],"title":"Winter Bash 2012 Conclusion: Boxing Day","text":"So. We’ve torn through the advent calendar, tossed aside all the wrapping paper, and (hopefully) obsessively screencapped our gravatars wearing various kinds of silly hats. As of last Friday, Winter Bash 2012 is officially over! This event was awesome. We had a total of 46,710 users participating across 76 sites, and we gave away 108,924 hats total. The most common hat was the And I Feel Fine hat, which 23,171 users earned for activity on December 21st. The least common hat earned was I Do Say, which was obtained by Bohemian, on Stack Overflow, and kalina, on Arqade for posting an epic 30 up-voted questions. Lots and lots of us were able to find all 7 unlockable secret hats, and a few even found an eighth. Well done! Sadly, all good things must come to an end. We’ve packed up the hats (and archived the JavaScript) until next time. For now, you’ll be able to see the hats you won (and Jin’s excellent artwork) on http://winterba.sh. If you’re curious to see what hats other people earned, check out the leaderboard. I really loved seeing how you all got creative in making your gravatars work with the hats — some of which were comically large! Below are a very small number of the hats I enjoyed seeing. There were just too many hats I liked; I have tons and tons of screencaps of users wearing hats in fun, funny, cool, and/or interesting ways. On some sites, even the Community ♦ user got into the spirit of things: The best surprise (aside from the little blue circle letting me know I’d gotten another hat!) was seeing users I didn’t expect to enjoy hats sporting all sorts of interesting looks. Since Stack Overflow in particular tends to have a stronger “professional” focus, I tend to forget that folks who are passionate about their work get just as passionate about having fun now and again. Seeing some top users from all over the network equipping headgear, well, it caught me off guard and made me smile. Several of you also found the “easter egg” on the Winter Bash site — holding down Ctrl and collecting all the falling snowflakes revealed a snowy pink unicorn! Real Data One of the things I wanted to look into is how a temporary, high-profile badge can alter behaviors. While some users have mentioned that they stuck around more, was this true at large? The data are not really clear. Sites with a very high hats-to-users ratio saw serious increases in posts created during this time, visits, and general positive responses from traffic. Straw polls of the moderation teams would seem to indicate that general site upkeep (things like flags, edit queues, and other mod-actions) held stable. Anecdotally, the review queues seemed extra empty, though whether that was because fewer folks were around the sites or because everyone really wanted Le Magritte isn’t clear. I know I consider this event a real success! It’s been a pleasure seeing everyone get excited, wear silly headgear, and just generally loosen up a bit as the year drew to a close. Special thanks to Stack Exchange developers Emmett and balpha for building this and keeping it running smoothly, to VP of Engineering David Fullerton for coordination, guidance and encouragement, and to the aforementioned Jin for the beautiful design work. The Future of Hats I definitely want to try for some things for the next time: Hats in chat has been requested before. I’d like to push for this for next year. Site-specific hats would be super cool. Some sites unofficially got a hat — Seasoned Advice and Home Improvement — but I’d love to see more sites get their own bespoke hats. More hats! Secret hats seemed to get people the most excited — adding more of those to the batch next year strikes me as a very good idea. If you have suggestions or feedback about Winter Bash, please feel free to answer this post. I’m going to keep an eye on it, and gather ideas and improvements for next year from your responses. When we first tried out this idea on Arqade, it wasn’t entirely clear this would be well-received elsewhere. But, based on what I’ve seen these past few weeks, I don’t think we’ve seen the last of Hats on Stack Exchange. Tags: winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/12/24/podcast-39-the-one-with-wil-wheaton/","date":"2012-12-23T23:00:00.000Z","tags":["Company"],"title":"Podcast #39 – The One with Wil Wheaton","text":"Today’s guest is Jeremy Tunnell, who says it’s great to be here. He’s the new Product Manager on the Stack Exchange team. He works out of Nashville but is in New York with us, recording live in the podcast studio! Also, on today’s podcast, everyone is going to eat a spoon of cinnamon and ten Saltines. Sam tried to eat a spoonful of cinnamon and did not succeed. The Saltine Challenge: also hard. The Gallon Challenge: also hard. Jeremy is the new kid on the block. He started a few weeks ago and is our new resident UX Expert. We should have listeners call into the podcast with their questions, like we used to! (This was before Jay’s time.) Go to s.tk/podcastquestions to submit an mp3 of your question for next week’s podcast. Jeremy is not from Texas, but he is from the South. We’re not sure how he got the horse up past security in the lobby. Back to Jeremy. He’s been focusing on the perspective of the new user (including making lots of brand new accounts). He’s trying to introduce the non-engineer perspective into our development process. He’s currently focusing on the sign-up process, which is critical for user acquisition. Why do we have a homepage URL? In the old days, your name used to link to whatever homepage you put in there. Nobody uses it now, though, so we can get rid of it! Jay points out that we have a fundamental difference between our power users and our casual users. Additionally, we have to wrestle with engineers vs. non-engineer types as users on our sites. Don’t make people think, or learn new things. (Don’t make me think about how you want me to enter my phone number.) Joel got in trouble with his bosses at Juno once upon a time. It had a 29-page wizard to get people to sign up, including a page for what diseases you had, and when your birthday and your kids’ birthdays were, featuring a horrible date picker (18 clicks to choose “August”). The answer to all these arguments? Just test it and see what people do. (Good thing we don’t have to fly to Colorado to do usability testing anymore.) We have a weird maximum age on Stack Exchange sites, so there are a ton of 89-year-olds on our site, apparently. We have heard from a lot of people that our site is impossible to log into. Our site is optimized for programmers. A great example: OpenID! We talk about OpenID and OAuth for… a while. Another example of something that’s a good idea for programmers but confuses everyone else is Gravatar. Gravatar is great if you already have an account, but the experience of trying to upload a picture is too many steps if you have to make a new Gravatar account. Do our listeners know how much Jeremy looks like Wil Wheaton? Check out the Stack Exchange Team page to find out News from the dev team! We had two outages this week, totally unrelated to each other. One was ten minutes and the other less than 30 minutes. (Nowhere near as bad as Tumblr’s catastrophe last night!) (Our status blog is on tumblr.) One was a boring hardware failure, and the other one is a result of the fact that we’re starting to outgrow our search solution. So we’re investigating other options that will make our search even better (and it’s suddenly urgent)! So a side effect of these outages is that our search will get better. We talk about search for a while. So if you’re interested in working on that, we’re hiring for our New York office, or remotely! If you have questions for us, you can go record your question and send it to us! That’s all for this week. See you on ChaCha!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/12/21/stack-exchange-gives-back-2012/","date":"2012-12-20T23:00:00.000Z","tags":["Background"],"title":"Stack Exchange Gives Back 2012","text":"2012 has come and gone, and we have accomplished many incredible things together. Our little corner of the Internet has changed the way people teach and share information with their peers. This has become a place to share the interests you are passionate about — a place to get better what you do, and you do it all with a bit of fun and humor and a chance to show off a bit on occasion. But the biggest motivation that drives what we do is a sense of purpose — a sense that we are all doing something really important here. Stack Exchange isn’t created from the hard work of one individual. It takes the collective effort of much larger community working together. That’s why we take this time of year to remember why we are here. This is the time we set aside to give back to the community. It has been a tradition at Stack Exchange to make a $100 donation to charity on behalf of each community moderator. When the invitations are sent, watching the outpouring of charity selections come racing back in real time is breathtaking. Within hours, hundreds of moderators already selected their charity wishes. That kind of outpouring of support is something we can all feel good about. So… on behalf of the 304 moderators of Stack Exchange, we will be making the the following donations to charity this holiday season: The Humane Society — $2,700 The Red Cross (Sandy Relief) — $3,600 Wikimedia Foundation — $6,800 Electronic Frontier Foundation — $6,900 Doctors Without Borders — $10,400 And to these projects that we use extensively and helped us build our own network of websites: HAProxy — $1,000 OpenSTV — $1,000 DotNetOpenAuth — $1,000 So here’s to 2012. Here’s to the moderators who volunteer their time, their passion, and their leadership to keep these sites humming. Here’s to the incredibly talented team at Stack Exchange who keeps the gears running and the lights on. And here’s to you — the communities who have worked so hard to become part of this shared vision. You are truly the best in the world at what you do. Farewell, 2012. Welcome, 2013!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/12/20/apptivate-ms-the-results-are-in/","date":"2012-12-19T23:00:00.000Z","tags":["Company"],"title":"Apptivate.MS: the results are in!","text":"After almost three months, Apptivate – the application development contest collaboration between Stack Overflow and Microsoft – has come to an end. Let’s get to the big news right off the bat. Congratulations to our two Apptivate.MS Grand Prize Winners: Piano Time and Layout! Congratulations to Piano Time and Layout! Layout is a powerful tool for interaction design that makes prototyping in the early stages of development and design a breeze. Piano Time is a multitouch piano keyboard for your Surface or other Windows 8 tablet device. (It also supports using your keyboard as, well, a keyboard.) It includes recording and playback, a metronome, a learning mode, and more. As grand prize winners, these two apps win a $5,000 cash prize! They will also be featured in MSDN Flash and on the DevRadio show, and they will be promoted by Microsoft throughout the developer community. The grand prize winners came from a pool of 15 finalists and were chosen by a panel made up of Stack Overflow’s own Joel Spolsky and David Fullerton, as well as Microsoft developer evangelists Doris Chen and Jeff Brand. There was some stiff competition for the judges to choose from, and we congratulate all of our finalists. They won’t be going home empty-handed, either – along with the winners of the Reviewer Sweepstakes, they’ll go home with some great prizes, too. The first place winners from each category group win a Surface plus a $500 cash prize. The second and third place winners go home with good stuff, too. Johnny, tell ’em what they’ve won! And you get a Surface! And you get a Surface! EVERYONE gets a Surface! The 15 finalists came from a pool of 50 semi-finalists, which in turn came from the list of over 300 fully eligible submissions to Apptivate. Some more stats about the event: There were 456 apps submitted overall, including deleted and ineligible apps The third week of November was the best week for app submission, with 49 apps coming in that week Apptivate users posted 2646 questions and answers in the [windows-8] and [microsoft-metro] Stack Overflow tags Over the course of the event, 3163 users voted (on apps or on comment threads) 7454 times That’s all for Apptivate… in 2012! The response to this was so positive, we’re already on the lookout for similar collaborations in the new year… So stay tuned!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/12/19/welcome-to-winter-bash-2012/","date":"2012-12-18T23:00:00.000Z","tags":["Community"],"title":"Welcome to Winter Bash 2012!","text":"It’s been an amazing year for Stack Exchange, both as a network of experts and enthusiasts and as an organization. We launched twenty new sites, rolled out tons of user-requested features, and are helping 99% more visitors get answers than we were a year ago. Last year, we celebrated the holidays on Gaming with Hat Dash, where users collected virtual hats by doing various (good, helpful) things on the site. They were sort of like festive, temporary badges (and, like badges, borrowed another good idea from the XBox – earning the ability to customize your avatar). The response from that event was so positive, we decided to extend that to the _entire network_1 this holiday season. Welcome to Winter Bash 2012! What is Winter Bash? From 19 December to 4 January you’ll be able to decorate your gravatar with a special hat. The hats used on Arqade smelled a bit funny, so we made up an all-new set of hats for you to earn this year. In fact, many of these “hats” aren’t even hats! There are sunglasses, moustaches, masks and other assorted headgear. Each hat has different criteria to unlock it, and there are even some secret hats that you won’t find out about until you happen to stumble across them accidentally. Hats show up all over the site, wherever your gravatar is shown (well, except for a few places where they didn’t fit, like chat). To change which hat you’re wearing, or to admire your lovely hat collection, just visit http://winterba.sh or check out your user page: You’ll also get a notification when you earn a new item: For all those of you who really hate hats, there’s an “I hate hats” link in the Winter Bash dropdown. But give it a shot before you turn it off — you might find a hat you like! Check out the Winter Bash FAQ for more details. Why are we doing this? Because it’s fun, and we love fun – at least, constructive fun, in moderation, at the end of a long, exciting and eventful year. Also, hats are awesome.2 1Well. Only those sites that opted to participate. You must opt-in on Stack Overflow. 2 Please note: virtual hats do not protect against the harmful rays of the sun – always wear sunscreen! Tags: winter bash"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/12/14/hey-there-stranger/","date":"2012-12-13T23:00:00.000Z","tags":["Background"],"title":"Hey there, stranger!","text":"It’s that most wonderful time of the year again — time for the Stack Overflow Annual Survey! So, put down that third glass of eggnog and fire up a new tab. It only takes a few minutes – and there are stickers! As the name suggests, we’ve been doing this for a few years now (here are the 2010 results and the 2011 results for your perusal) and we always learn a lot from them. This data is used to support the advertising we sell on Stack Overflow and Server Fault. Advertising helps keep the lights on (and servers humming) around here, so if you use either (or both!) sites, we urge you to participate. For those of you who’ve been around this block with us before, the survey should look fairly familiar. There’s no longer two jQuery options, though you can still jQuery while you jQuery if you need to. There are some questions that are a bit different, so please read each item carefully before you respond. Just like previous years, we’re putting ads like the one above around the site to solicit particpation, and this blog post will help us reach our goal of roughly 3,500 responses. We’ll share the results of the survey with you all in a blog post early next year, and you’ll have the option of signing up to receive a copy of the results emailed to you directly at the end of the survey. So, please take a few moments to fill out the survey and then you can get right back to your holiday festivities."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/12/12/stack-overflow-localizes-careers-2-0-in-german/","date":"2012-12-11T23:00:00.000Z","tags":["Careers"],"title":"Stack Overflow localizes Careers 2.0 in German","text":"After months of work from our dev team, last week marked the official launch of our first localized site with Careers 2.0 in German. We celebrated the occasion in style on December 5 with a blow-out party at Betahaus in Berlin complete with product demos, free food, free t-shirts, oh, and German beer of course. (More pictures here.) But why Germany? Well, aside from the fact that it gave us a great excuse to make these really cool t-shirts, we have a few other pretty good reasons for this expansion: Germans are the largest non-English-speaking group of Stack Overflow users in Europe To date, visitors from Germany represent the fourth largest global audience who visit Stack Overflow on a monthly basis—making this the largest non-English speaking European userbase. And even though many of these users do speak English (at least for programming), employers or hiring managers who don’t speak English can’t use the Careers 2.0 global site as easily as fluent English speakers. With this localization, we hope to bring Careers 2.0 to everyone on both sides of the hiring equation. Better exposure for our German candidates We have more than 3,600 German candidate profiles in our Careers 2.0 database, and in a job market where German tech hiring needs have more than doubled in the past three years, programmer jobs are in hot demand. (In fact, a couple of guys even showed up to our launch party wearing QR code t-shirts in their search for a developer.) Making a German site will hopefully give these candidates even more exposure to all great local companies—not just those who have a hiring manager who speaks English. Germany’s tech market has been growing exponentially It’s been estimated that 11 billion Euros are lost in possible output because German companies can’t hire enough engineers. And as the world’s largest resource for programmers (Google analytics counted more than 30 million unique visitors last month!), we hope to help solve that problem by connecting companies with the software developers they need. It was a good excuse for us to start accepting Euros If you log onto careers.stackoverflow.com/de, you’ll be prompted to pay for your job listings in Euros. If you’ve ever tried to buy something on a site in a foreign currency, you know what a pain it can be to deal with the exchange rates and credit card fees. Now we’re just more accessible for a lot more people. (We’re also now accepting the British Pound on the UK site.) All in all, it’s been a great project for our team (though also a difficult one, as you’ll hear about in a future blog post) and localizing the site was an important way for us to support the German-speaking community on Stack Overflow. As always, we’re open to hearing your feedback, so let us know what you think. P.S. We know we missed some things, so if you speak German, feel free to check out the site and let us know what we still need to fix."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/12/10/windows-devs-on-stack-overflow-when-did-this-happen/","date":"2012-12-09T23:00:00.000Z","tags":["Company"],"title":"Announcing the Apptivate.MS competition semi-finals","text":"When we announced the Apptivate.MS competition two months ago, we were hoping that a few members of this community would create and submit a few solid Windows 8 apps – forty or fifty, maybe. A hundred if it really went well. So when we saw all of the high-quality and innovative app submissions that poured in, we were quite frankly blown away. The Stack Overflow community submitted almost 400 apps. See for yourself! Yet again, the Stack Overflow community has crushed it. The quality and size of the submission pool made our next job really, really difficult: narrowing them down to just 50 apps for the semi-finals, ten for each of the following category groups: Knowledge, Games, Interest, Work, and Social. A panel of Stack Exchange judges (appointed by Microsoft) ranked all the submissions based on the following rubric: Innovativeness/Creativity (30%) Quality of Submission (30%) Use of Windows 8 features, such as the live tile display (30%) Public Appeal (voting) (10%) With these criteria in mind, we put together a killer semi-finalist slate. You can vote for your three favorite apps in each category group between now and December 16th (23:59 UTC). The three highest-voted apps in each category group will win prizes no matter what. They’ll also be eligible for a $5000 cash grand prize, so cast your votes to ensure that the best app wins the day. Not an altruist? Voting in the semi-finals also makes you eligible for the reviewer contest. The three top-voted semi-finalists in each category group will win great prizes! You can also continue to leave comments on any app, which also gets you entry into the reviewer contest – as well as providing valuable feedback to Windows 8 developers. The semi-finals voting phase ends December 16th, 2012, so get your votes in now!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/12/07/meet-the-new-additions-to-the-stack-exchange-clan/","date":"2012-12-06T23:00:00.000Z","tags":["Background"],"title":"Meet the new additions to the Stack Exchange clan","text":"The fun continues — in the past month and a half we’ve welcomed seven new hires! We’re growing at a steady pace and we don’t plan to stop. Get to know our newest coworkers: Maura Bradley, Sales Representative New York __Originally from the City of Brotherly Love, Maura graduated from the University of Notre Dame and recently moved to the Big Apple to join the Careers 2.0 sales team. On summer weekends, you can find her at the (South) Jersey Shore, relaxing on the beach or at a local watering hole. She enjoys running outside, dive bars, puzzles, Broadway plays, activities, and cooking a mean chicken parm. Natalie Eisen, Sales Representative New York A recent graduate of Barnard College, where she majored in Urban Studies and Sociology, Natalie is super pumped to join the Stack Exchange team. Although an Ohio native, Natalie always knew she would live in New York, the land of many cupcakes; she suggests the “Ooey Gooey” at Sugar Sweet Sunshine. Joe Humphries, Recruiter New York Joe is a native of Cleveland, OH who relocated to Brooklyn just over two years ago. He began recruiting for tech startups in 2011, and is thrilled to be working at Stack Exchange. For fun, you’ll find him playing word games on his iPhone (because he’s really cool), eating/drinking at as many different restaurants as possible, and having a general love affair with NYC. Steven Murawski, System Administrator Milwaukee**** Steven joins the crack sysadmin team at Stack Exchange, bringing his humble skill set and the willingness to learn he developed over the past few years. Steven is an avid community member: he runs two local user groups, and presents and teaches at community conferences across the country. He was recognized by Microsoft for his contributions to the PowerShell community with a Microsoft MVP award in 2012. For fun, he loves to read, spend time with his wife and son, and read to his son. Peter Schnelle, Sales Representative Denver Hailing from the great Northern state of Michigan, Peter is a Michigan State grad who bleeds green and white. Growing up with a farm, he is an avid hunter and fisher who loves just about anything to do with the outdoors. This winter he is trying to pick up snowboarding, so watch out Shaun White! Jeremy Tunnell, Product Manager Nashville Jeremy is originally from Tennessee. After getting his engineering degree, he promptly set out for Washington DC to make copies and brew coffee on The Hill. Having had enough, he moved to San Francisco where he cofounded a startup and managed to make less money than a Hill staffer. For stress relief, he used to play saxophone and violin, but stumbled into swing and salsa dancing, which won out. He dreams of owning a bar and music venue. Chris Martin, Sales Representative London Before we start, no he’s not Chris Martin of Coldplay fame, he’s the totally non-famous Chris Martin that now works for the great company that is Stack Exchange! Chris is truly excited to start work at Stack Exchange; it’s an amazingly cool company with really exciting times ahead. He spends most of his free time obsessing with food, whether it’s cooking it or eating it. He believes London has one of the best restaurant scenes in the world, and he intends to try every dish from every restaurant! _Visit our careers page to learn all the reasons Stack Exchange is a ridiculously awesome place to work. _Want to see your face in our next new hire announcement? Here’s who we need: Web Developer – Careers Team (NYC) Web Developer – Q&A Team (NYC or telecommute) Product Designer (NYC or telecommute) Account Executive – Careers 2.0 (London; Denver; NYC) Inside Sales Representative – Careers 2.0 (London; Denver; NYC) Office Admin (London)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/11/26/join-stack-overflow-in-berlin-for-a-blowout-bash-on-december-5/","date":"2012-11-25T23:00:00.000Z","tags":["Company"],"title":"Join Stack Overflow in Berlin for a blowout bash on December 5!","text":"Berlin, wir kommen! It’s our last party of the year, and this time, we’re heading to Germany to meet and mingle with the Stack Overflow community! As you may have noticed, we’ve been tearing up Denver this year with our opening reception of our new office and then again during Denver Startup Week last month. So we thought it was about time to bring the party to Europe. If you’re in or around Berlin on Dec. 5 (or just want to book a last-minute trip), come clink glasses with us at Betahaus (Prinzessinnenstraße 19-20) from 5:30 p.m. – 8:30 p.m. While there, we’ll also be launching our first official translation of Careers 2.0 for German candidates and employers. Join us for a fun night where you can… Meet other Stack Overflow users and pick the brains of our awesome developers Sit in on educational talks and demonstrations from our devs as they discuss how they localized Careers 2.0 for a German audience (you can check out a preview at careers.stackoverflow.com/de) Enjoy free food and drinks all night Rock out to tunes provided by SoundCloud’s DJs Hope to see you there! Let us know you’re coming – RSVP by December 1"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/11/12/get-rid-of-ads-you-dont-like-and-encourage-ads-you-do-like/","date":"2012-11-11T23:00:00.000Z","tags":["Community"],"title":"Get rid of ads you don’t like (and encourage ads you do like)","text":"Ads. Like ’em or not, they keep the lights on. As readers, ads might direct us to a valuable service or product, or they might just be a distracting annoyance. For publishers, ads can provide an added service to their audience and a significant revenue stream, but only if the ads reach their intended audience, and that audience interacts with them. For the advertisers themselves, ads can be a great way to generate sales or awareness, but only if people don’t ignore them. And therein lies the problem: lousy targeting, over-exposure and distracting ad formats have made people prone to do just that, which significantly reduces the benefits to all involved. To make ads work, you have to ensure their relevance to the audience you’re advertising to, which has always been our guiding principle here at Stack Overflow (that, and not have them be annoying). But even then, not every ad is relevant to everybody, and we’ve been working on a way to fix this. We want you to only see ads you want to see, which in turn means that our advertisers will only advertise to people who are actually interested in what they have to sell (which is sort of the holy grail of display advertising). And now this is possible. We’ve worked with Adzerk (our ad server) to come up with a widget that lets you either up- or down-vote an ad (widget will display when you hover over the ad). If you up vote an ad (particularly if a large number of people do) we know the ad is on the right track. If you down vote one, we’ll ask you why, and won’t show you that ad again. Apart from improving your experience, this will also provide a wealth of information as to which ads and advertisers work and which ones don’t, and it will ensure we avoid wasting our advertisers’ money and your time (we hope!). All good things. There are a few things to note: Not all ads are votable yet: some high volume campaigns closed before we decided to roll this out, and we want to make sure we show those ads as many times as we promised to. Until we are able to better gauge the exact effect this feature will have on our overall inventory, we’ll let these run their course as originally sold. The house ads promoting other SE sites and new proposals will also be exempt from voting (these are generated dynamically, and down voting it would mean you’d never see new proposals or sites again). And because we keep track of your voting through a cookie your settings will not carry over from one computer to another, and you’ll lose your preferences if you clear out your cookies. Oh – and like voting elsewhere on Stack Exchange, voting on advertisements is completely anonymous: voting on an ad will never send any personally-identifying information to the owner of the ad (or even us!). Now, go forth and vote!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/11/02/stack-exchange-partners-with-denver-startup-week/","date":"2012-11-01T23:00:00.000Z","tags":["Background"],"title":"Stack Exchange partners with Denver Startup Week","text":"The Mile High City was buzzing last week as it hosted its first ever Denver Startup Week. With more than 80 events hosted by startups all around the city, the week attracted hundreds of entrepreneurs from the Colorado area. Since our Denver office just opened in August, this was a perfect time for us to get to know some of our new neighbors a little better. Startup Job Fair On Tuesday, October 23, after our quick spot on Channel 9 News, we set up shop at the Startup Job Fair to recruit even more awesome talent to our company. After two hours, we brought in nearly 50 resumes—thanks to everyone who showed up! In case you couldn’t make it, it’s still not too late to apply! Check out our job openings here. Denver Startup Crawl More than 20 companies participated in a Startup Crawl that led registrants all around Denver to check out the great office spaces and have a beverage or two. Despite the freezing rain/snow, we hosted more than 40 attendees at our Stack Exchange Denver HQ—and our warm, spiked apple cider was a big hit. If you didn’t make it this time, keep your eyes peeled for our next event… though we can’t promise we’ll have bacon apple whiskey tartlets like this again. Class: How to Hire Developers in a Competitive Market Thursday boasted our biggest event of all—more than 50 of you joined us in our office to learn how to hire programmers in this tough market. Guy Zerega (National Sales Manager) and Korneel Bouman (Director of Customer Support and Sales Operations) flew out from our New York hub to offer up tips on tech recruitment and writing good developer job listings. Complete with brunch (not to mention a full Bloody Mary and mimosa bar), we hope this class helped a few of your with your own recruitment needs. You can sign up for our watchlist for future classes here. Thanks to everyone who attended and helped make Denver Startup Week a success! You can check out the rest of our photos here. We hope to see you at future events going forward next year."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/10/26/super-user-win8-challenge/","date":"2012-10-25T22:00:00.000Z","tags":["Company"],"title":"Take the Super User Windows 8 Challenge","text":"Well, Windows 8 is finally available in the wild. Of course, developers have had access to it for quite a while – our ongoing Apptivate contest would be looking pretty sad otherwise. But now you can actually _buy _the upgrade for your home PC if you’re so inclined, or for your mom’s PC if you haven’t been getting enough tech-support calls from her recently… In recognition of this, Super User is running its own little promotion: We’re having a party and you’re invited. Ask and answer questions to complete the challenge levels, and complete different tasks like editing, voting, and blogging to win the eight tile challenges. Each level you beat and each tile you finish enters you for sweet prizes, including the grand prize of a Microsoft Surface RT! Let’s face it: Windows 8 is a bit… Different. I haven’t upgraded yet – it took Microsoft decades to finally get the taskbar working right, and I’m a bit reluctant to give that up. But if you do decide to take the plunge, Super User is well-prepared to help you through it – or if you’ve already been knee-deep in the change for a while (say, because of that app contest I mentioned above), perhaps you’ve learned something that could help others. Either way, why not double your pleasure by earning a t-shirt, weird-looking mouse or other nifty gear in the process? Introducing the Windows 8 Challenge on the Super User Blog"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/10/17/our-newest-team-members-diandra-robert-adam-nicole-and-casey/","date":"2012-10-16T22:00:00.000Z","tags":["Background"],"title":"Our newest team members: Diandra, Robert, Adam, Nicole and Casey!","text":"In case you haven’t noticed, we’re growing pretty quickly over here at Stack Exchange. But just because they’re last doesn’t mean they’re least – so say hello to our newest hires! Diandra Partridge, Office Manager Denver Diandra steps in as the office manager for our new Denver hub. A graduate of Amherst College, Diandra is happy to be back in her hometown as a member of the Stack Exchange team. Her current obsessions include (but are not limited to) Adventure Time, musical theater, and Tard the Grumpy Cat. Robert Brooks IV, Account Executive Denver Robert is thrilled to join our Careers 2.0 sales team in Denver. Originally hailing from Cleveland, Robert attended Ohio University but now spends most of his time hiking, biking and skiing in the Rocky Mountains. He is also an avid concertgoer, craft beer lover and self-described Apple enthusiast. Adam James DeLanoy, Sales Representative New York Born and raised in Westchester, Adam graduated from James Madison University with a B.S. in strategic communications. He currently lives on the Upper East Side of New York City, where he enjoys wearing “those toe shoes” and checking out the city’s best in the stand-up comedy scene. Nicole Lebbad, Account Executive New York**** A proud alum of Penn State University, Nicole is originally from New Jersey and now lives in Hoboken. When she’s not planning her wedding (to occur in Riviera Mya, Mexico), you’ll likely find her reading. Nicole is also a big Harry Potter fan—she owns at least least five copies of each book (from four countries) and has a tattoo of the Harry Potter lightning bolt. Casey Ashenhurst, Office Administrator New York A native midwesterner, Casey is psyched to join Stack Exchange as the new Office Administrator. After receiving her B.A. from Oberlin College in English and Media Studies, she promptly left the country to live in New Zealand for a year, and proceeded to travel throughout Southeast Asia. Since her return to the U.S., Casey has hung her hat in Brooklyn for the past three years. She is also an avid urban cyclist, DIY enthusiast, and cellist. Want to make these new hires your new colleagues? Join our team – we’re still hiring!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/10/09/stack-overflow-data-visualization-contest/","date":"2012-10-08T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow Data Visualization Contest","text":"We all know everyone loves pretty pictures, chock full of graph-y goodness. You probably also know that about two months ago we started the Stack Overflow Machine Learning Contest, and that it’s now winding down. All models have been (or will shortly be) committed, and we’re starting to gather data for the final judgement. What you may not have known about was the subsidiary Visualization Contest, which is looking to find an interesting and informative way of making sense of the mountains of interesting data in our data sets. You’re free to pull in any additional publicly available information from sources like the Data Explorer or API, but the data set put together for the machine learning contest is a good place to start. Entries will be accepted through October 26th with voting ending November 1st. We’ll choose the most awesome of the top-voted entries based on how interesting and informative the visualization is, with bonus points for focusing on the subject of the machine learning contest. So go out there, find a set of interesting statistics, gin up a cool picture and submit it to the… Stack Overflow Visualization Contest"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/10/01/join-the-stack-exchange-team-were-hiring/","date":"2012-09-30T22:00:00.000Z","tags":["Careers"],"title":"Join the Stack Exchange team – we’re hiring!","text":"We’re growing like crazy! Between launching exciting new sites, developing new features and promotions for existing ones, and branching out geographically, Stack Exchange can use all the help it can get – so we’re currently hiring for seven (7!) different positions, from developers to designers to sales to… well, just look at the list yourself: Product Manager – Q&A Team (telecommute or New York) Web Developer – Q&A Team (telecommute or New York) Web Developer – Careers Team (New York) Senior Systems Administrator (telecommute or New York) Product Designer (telecommute or New York) Account Executive – Careers 2.0 (London, Denver, New York) Sales Representative – Inside Sales – Careers 2.0 (Denver, New York) We’re dogfooding Careers for these of course, since who better to help make the software running Stack Exchange more awesome than the folks using Stack Exchange. Here are a few positions that are especially appropriate to our community: Product Manager – Q&A Team (telecommute or New York) We’re looking for someone to help us design and build the next set of features and special projects for Stack Exchange. We want someone with serious startup experience building and shipping products, from conception to deployment. You’ll take ideas from us and the community, or come up with your own, and work with our designers and developers to get them shipped. Web Developer – Q&A Team (telecommute or New York) We’re looking for a top-notch web developer for the Core Q&A team. You’ll work directly on the engine that powers all the sites to ship new features, fix bugs, and scale and grow the sites. We want someone with serious front-to-back web development experience (C# not required), a track record of getting stuff done, and a history of activity in the community. Web Developer – Careers Team (New York) We’re looking for more top-notch web developers to work on building Careers into the best place for developers to find a job, anywhere. You’ll work on lots of new features, fix bugs, and help us decide the future of Careers. We want someone with serious front-to-back web development experience (C# not required), a track record of getting stuff done, and a history of activity in the community. Senior Systems Administrator (telecommute or New York) We’re looking for a veteran Windows / Linux systems administrator to join our team. You’ll help build out our infrastructure and keep it ahead of the growth curve. We want someone with experience working with both Windows and Linux systems (emphasis on Windows), and a track record of taking on big challenges and delivering blog-worthy solutions. Product Designer (telecommute or New York) Last, but not least, we need a product designer. You’ll work with Jin to help our developers and product managers design new features, create and implement full brand identities for new Stack Exchange sites, and help improve user experience across the network. We want someone with a portfolio of web design and experience working directly with developers and product managers to design products and features. Telecommute? Most of these positions are open to the world: we want to hire the best people, wherever they are. However, there are a few things you should be aware of: You should be awesome at working remotely — self-motivated and aggressively communicative — to make sure you stay on the same page as the rest of your team We still believe in getting teams together at least once a week to talk, and that generally happens between 1 – 5pm EDT. You’ll need to be flexible with your hours There may be some countries that are legally too difficult for us to work with…sorry! A few positions are in-office only, but don’t worry: we have awesome offices. In fact, a few people who started working remotely moved to New York just to get access to our catered lunches. If you do want to move to New York (or our sales offices in Denver or London), we’ll assist you with relocation but you must already have the permanent right to work in the country of the office (US or UK). Apply! Each job has instructions to apply, and we’re hiring immediately. If you see a job that might be a fit for you or someone you know, apply soon. You can also always find a list of open positions at http://stackexchange.com/about/hiring, or click the “jobs” link in the footer of any Stack Exchange site."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/09/26/apptivate-ms-a-windows-8-app-development-contest/","date":"2012-09-25T22:00:00.000Z","tags":["Company"],"title":"Apptivate.ms: A Windows 8 App Development Contest","text":"Windows 8 officially launches on October 26th, and it’s already generating quite a few questions on Stack Overflow. So when Microsoft approached us about sponsoring an app development contest, we thought it was a great idea. Today we’re announcing Apptivate.ms, a Windows 8 App Development Contest sponsored by Microsoft. The contest has two parts: A Developer Contest for people interested in writing applications A Reviewer Contest for people interested in reviewing and voting on apps You can participate – and win prizes – in both categories, so even if you aren’t interested in developing your own app you can still participate by helping others by reviewing their submissions. Developer Contest The Developer Contest awards prizes for the best apps in 5 broad Groups: Knowledge, Games, Interest, Work, and Social. Here’s how it works: Create a Windows 8 app and submit it to Apptivate.MS by December 6 The top 10 apps in each Group (chosen by judges, with input from your initial votes) will advance to the semi-final round December 7 – 9 Vote on the best apps between December 10 – 16. The top 3 voted apps in each category will win the Voter’s Choice Prizes. One winner will be chosen by the Stack Exchange and Microsoft judges to win the Grand Prize on December 19 Two Grand Prize winners* will be awarded: $5,000 Cash Grand Prize + Feature in MSDN Flash and Microsoft’s DevRadio + Promotion in Microsoft’s User Community The top 3 apps in each category will win a Voter’s Choice Prize: 5 first-place winners: $500 + Tablet running Windows RT 5 second-place winners: Tablet running Windows RT 5 third-place winners: Windows 8 Submit early and often. Your first submission doesn’t have to be final — in fact, you’re encouraged to submit early and get feedback to develop your app further. The votes will be reset for the semi-final round so everyone can vote on your final submission. See the full Rules, Terms & Conditions and the Submission Guidelines on Apptivate.ms for more information. Reviewer Sweepstakes Not developing an app? You can still help by leaving comments on apps, asking and answering Windows 8-related questions on Stack Overflow, and participating in the Windows 8 Developer Chats. See the Contest page for a full list of achievements that can be unlocked on Apptivate.ms. Each achievement (up to 30) gives you an entry into one of the reviewer sweepstakes: 3 Gold-level Winners: Tablet Running Windows RT 10 Silver-level Winners: Windows 8 50 Bronze-level Winners: Limited-edition Apptivate.ms T-shirt See the full Rules, Terms & Conditions on Apptivate.ms for more information. Getting Started Thinking about developing an App, but not sure where to get started? Check out the Resources page for some helpful links and tips. Prefer to assist others writing apps? Register your Stack Overflow account on Apptivate.MS now to be eligible for reviewer prizes, and then ask, answer, or share Windows 8 questions on Stack Overflow to get started. Register on Apptivate.ms now! * NO PURCHASE NECESSARY. A PURCHASE WILL NOT INCREASE YOUR CHANCES OF WINNING. OPEN TO AGES 18 AND OLDER AND WHO DID NOT PURCHASE ANY EQUIPMENT FOR PURPOSES OF ENTERING THE PROMOTION. VOID WHERE PROHIBITED. Enter Contest by: 12/6/12. Enter Sweepstakes by: 12/16/12. For Official Rules, prize descriptions, alternate method of entry, and odds disclosure, visit http://apptivate.ms. Sponsor: Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, U.S.A."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/09/20/askpatents-com-a-stack-exchange-to-prevent-bad-patents/","date":"2012-09-19T22:00:00.000Z","tags":["Community"],"title":"AskPatents.com: A Stack Exchange To Prevent Bad Patents","text":"We’ve all heard the stories of seemingly trivial patents being used to mug technology companies. There was the patent on the “Interactive Web” which a troll named Eolas used to extract $521 million from Microsoft–until a jury in East Texas threw out the patents. There are the four patents Lodsys is using to send threatening letters to software developers everywhere–trivial patents that Google says never should have been granted, in fact, Google and Oracle have submitted mountains of prior art to show that the patents should be invalid. Many small app developers have just decided it’s cheaper to settle rather than spend half a million dollars in legal fees fighting in court. What’s going on here? And what can we do to stop it? Anybody who follows patent applications closely and who understands technology may have noticed something odd about a lot of the new patents: they don’t really seem like inventions. Really? They got a patent on that? I wrote that in eighth grade. In BASIC. On a TRS-80. Isn’t a patent supposed to be an invention? Yes. But the escalation of the patent wars has led companies to try to patent everything in sight, so they can build up a portfolio of patents (“to defend themselves,” of course, so that they have something to countersue with when they get sued). The way they do this is by sending lawyers up and down the corridors where the engineers are working, looking for things that they might be able to patent. And the imperative to get a lot of patents means that sometimes they submit things which aren’t exactly inventions per se to the USPTO. Just in case they stick. Now, the patent office works hard, but in order to determine if something is not an invention, they have to find prior art. Prior art could be another patent, something in a publication, or even an implementation, like a shareware software program from 1992 that does the same thing that somebody is now claiming to have invented in 2008. It can be published anywhere in the world, in any language, in any publication, no matter how obscure, to qualify as prior art. And, as you might guess, in the 22.5 hours [DOC] that examiners might have to review each patent application, searching every document published in the entire world in every language is not practical. There’s no possible way examiners can conduct a truly exhaustive search of prior art. And that’s how we get bad patents. Luckily, we got two breaks. The first break we got is a tiny provision in the America Invents Act, the “Patent Reform Act” which, on the face of it, appears to have done absolutely nothing to solve this problem, but if you look closely, there’s a tiny provision in there, which says: “Any person at any time may cite to the Office in writing prior art consisting of patents or printed publications which that person believes to have a bearing on the patentability of any claim of a particular patent…” In other words, as of September 16, the USPTO is required to accept submissions from the public of prior art. The second lucky break is that we have a very good Director at the USPTO right now, David Kappos. Mr. Kappos, who came from IBM, realized that this provision gave the public an opportunity to help patent examiners identify prior art. But it’s not enough just to allow prior art submissions… you have to find a way to get the public involved in looking through patent applications and trying to find prior art that could prevent bogus claims. And that sounds a lot like… a Stack Exchange! We humbly submit that it’s a testament to how good the Director of the USPTO is, that he actually came to us. We were not paying attention. He came–twice!–to the Stack Exchange office in New York City to encourage us to open a Stack Exchange site that would generate heaps of prior art to help the patent examiners do their jobs. Ask Patents is a new Stack Exchange site launching today that allows anyone to participate in the patent examination process. It’s a collaborative effort, supported by Stack Exchange, the US Patent and Trademark Office, and the Google Patent Search team. It’s very exciting, because it is opening up a process that has been conducted behind closed doors for over 200 years. Our hope is that Ask Patents will reduce the number of patents mistakenly granted for obvious, unoriginal non-inventions, especially around software, a field that is near and dear to us. Ask Patents is a collaborative effort, neatly tagged by keywords and classification, and searchable by patent application number. It is inspired by a research project called Peer To Patent, run out of New York Law School. That pilot project, created by Professor Beth Noveck, proved very successful at identifying prior art that the USPTO wouldn’t otherwise have known about. Citizen volunteers and other interested parties will be able to ask about applications that they think are suspicious. Others can answer, identifying possible prior art, and using our upvote/downvote feature to rate any examples of prior art that other people found. The USPTO, complying with the new law, will also provide an online system for submitting prior art. We’re also integrating with Google Patent Search, so every patent application on Google will include a link to discussion on Stack Exchange. Google has also implemented an algorithmic prior art search utility that will be helpful to site participants. On Ask Patents, participants can also ask and answer questions about the nuances of patent law or about specific patent applications. Collectively, we’re building a crowd-sourced worldwide detective agency to track down and obliterate bogus patent applications. Over time, we hope that the Patent Stack Exchange will mitigate the problems caused by rampant patent trolling. It’s not a complete fix, but it’s a good start."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/09/06/join-us-for-our-opening-reception-of-stack-exchange-denver/","date":"2012-09-05T22:00:00.000Z","tags":["Company"],"title":"Join us for our opening reception of Stack Exchange: Denver!","text":"In case you couldn’t tell, we’re very excited about our new office opening in Denver. And though it’s very tempting to just relax on our new roof deck or over a game of pool, we think something this big calls for an even bigger bash. And we’d like you to be there. Stack Exchange is you, the dedicated and brilliant folk who’ve worked to build these sites for the past four years. You’ve made this miracle happen, and if you’re in (or can get to) the greater Denver area, we’d love to meet you face to face. But wait, there’s more! Stop by and get… A tour of our Stack Exchange Denver hub—roof deck included! Snacks and delicious treats from our favorite Denver caterer Free drinks and Stack Exchange swag A chance to meet Joel Spolsky and some of our devs and sales reps We’re planning this shindig for the evening of September 27th, so RSVP today. We hope to see you there!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/09/04/stack-exchange-api-v2-1/","date":"2012-09-03T22:00:00.000Z","tags":["API"],"title":"Stack Exchange API V2.1","text":"There’s been a low-key beta of the latest Stack Exchange API revision, V2.1, under way for the last month or so. I’m happy to announce that it’s official, API V2.1 is public, frozen, and out the door. What’s new in this release? Full Reputation History Notifications Tab Improved Search User Merge history Oh, and our first set of write methods. It’s now possible to create, edit, and delete comments via the Stack Exchange API We’re starting small, with the least important of our content, to safeguard the quality of our content. Comments created with the API show which app created them when you hover over them, like so: The link shown will take you to an app’s Stack Apps post, letting you find new apps right from your favorite sites (as well as report malicious ones easily). The following restrictions apply to the write comment methods: Your app must have an undeleted Stack Apps post Your app_ _must be authorized by a user to perform write operations The authenticated user must have the comment everywhere privilege A user’s daily quota of write operations increases with reputation Quotas are discovered through the write-permission methods So head on over to the documentation and Get Started"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/08/23/stack-exchange-takes-on-denver-welcome-to-our-new-colleagues/","date":"2012-08-22T22:00:00.000Z","tags":["Background"],"title":"Stack Exchange takes on Denver! Welcome to our new colleagues!","text":"We’re in New York, we’re in London, and as of August 5, we’re also in Denver! It’s true — Stack Exchange is growing up faster than we can keep up, but we’re excited to introduce our sales team at our brand-spankin’-new digs in Denver. (Seriously, it’s a pretty sweet office. Check out our before and after photos.) Seth Mortenson, Sales Hailing from Orange County (New York, not California), Seth enjoys the Colorado outdoors and spends his free time hiking, camping, snowboarding, and fishing. On the rare occasions when he’s not being active, you’ll likely find him catching the latest New York Giants game—which he says is the “greatest thing that’s happened since sliced bread.” Erin Gray, Sales Although she spent 10 years of her life overseas, Erin attended high school in Breckenridge, CO and now considers that to be home. While in Colorado, she most enjoys the summer and winter seasons and spends most of her free time snowboarding every ski season. In addition to this seasonal hobby, Erin also loves to attend sporting events. Alicia Del Pardo, Sales Originally from Ft. Bragg, North Carolina, Alicia is a self-identified “Military Brat” and graduated from the University of Colorado at Colorado Springs with a degree in business service management. As her photo exemplifies, Alicia really loves running and is always training for her next race! Aside from church every Sunday, she likes to spend her weekends salsa dancing. Max Applebaum, Sales Born and raised in Westchester County, New York, Max recently graduated from the University of Colorado at Boulder to join our Careers 2.0 sales team in Denver. Despite his west-coast home, Max remains a “sports fanatic” of all things New York: the Mets, Jets and Knicks. In his spare time, you’ll likely find him hiking, playing pickup basketball, or playing tennis. He’s also an avid skier and ski-raced slalom throughout high school. Melissa Noland, Sales Melissa joins our team with Chicago roots and to this day remains a very loyal Cubs fan. She moved to Colorado for school and just graduated from University of Colorado at Boulder, where she played on the club softball team (and has been a softball player for 18 years!). A candy addict but chocolate hater, Melissa’s favorite season is winter because it gives her ample opportunities to wear her Moon Boots. Jordan Conner, Sales Jordan is a Denver native and enjoys doing anything outside in the Colorado air! A world traveler, he participated in the “Semester at Sea” program at the University of Denver and visited 10 countries in 100 days. He’s also a huge Denver sports fan and can’t wait for the Broncos to be Super Bowl-bound this year! Joseph Sondag, Sales Joe is happy to be an inaugural member of our Careers 2.0 Denver sales team! Originally from California, Joe is a Colorado Buffalo who loves snowboarding, hockey, In-n-Out Burger, and the San Jose Sharks. Ironically, despite having a strong interest in meteorology/severe weather, he admits to having a notably irrational fear of getting struck by lightning."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/08/21/stack-exchange-machine-learning-contest/","date":"2012-08-20T22:00:00.000Z","tags":["Company"],"title":"Stack Exchange Machine Learning Contest","text":"Over the last 4 years we’ve built up quite a bevy of moderation tools here at Stack Exchange. We’ve got closing, editing, deleting, flags of all sorts, voting, commenting, review queues, and more. These all work great, but they all require action after a post is made. This is a lot of work for the community, and not particularly friendly toward those posting, particularly new users. In a perfect world, we’d be able to offer specific, targetted guidance for authors whose posts were likely to be shot down, before they ever showed up on the site, and without requiring as much up-front effort from our community. We’ve already expended some effort on this front with some basic tests that reject obviously problematic questions, and automatically flag borderline ones for review, but we feel this can be done much better. This is where you come in We’re running a machine learning contest on Kaggle to find an algorithm that predicts whether (and for what reason) a question will be closed. The idea is simple: we’ve prepared a dataset with all the questions on Stack Overflow, including everything we knew about them right before they were posted, and whether they finally ended up closed or not. You grab the data, build your brilliant classifier, run it against some leaderboard data and submit your results. Rinse and repeat until the contest ends, when we’ll grab the most promising classifiers and run them against fresh data to choose winners. The winners will get our respect, the knowledge they’ve helped make the Internet a better place – oh, and some cold hard cash. 1st prize – $11,000 2nd prize – $6,000 3rd prize – $2,000 There’s also a $1,000 prize for the best visualization of our data. The contest runs from Tuesday August 21st until Tuesday October 9th. We’re also hiring a full-time data scientist, and we’re going to be very interested in talking to the authors of the best classifiers. So head on over now and… Check out the contest Some explanation of how we’ll use the classifiers that come out of the contest, as there seems to be some confusion on that point. First and foremost, there’s no plan to “auto close” questions. Human oversight will always be needed, there are always edge cases, evolving standards, and what-have-yous that won’t be captured in any algorithm. What we’d be really excited to try out is giving users who are composing questions advice on how to improve them while they’re composing them. This would save a lot of time, reduce the overall close rate, and make new users’ first asking experience more likely to be a pleasant one. A secondary goal is to improve our auto-flagging of questions, as our current system is very simple and has some known issues. If you’re keen on machine learning, you can also discover new opportunities in machine learning at Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/08/08/stack-exchange-is-not-a-forum-the-role-of-niceness-on-a-qa-site/","date":"2012-08-07T22:00:00.000Z","tags":["Community"],"title":"Stack Exchange is not a forum: the role of “niceness” on a Q&A site","text":"It’s been a few weeks now since Joel kicked off our “summer of love”. There’ve been some excellent discussions in the blog comments and on Meta, and we’ve tried to present some hard data on how objectively “nice” we are. But it’s high time to talk about what place “niceness” really has on Stack Exchange. And to do that, we need to start by talking about you: You, sir, are a jackass. And that’s ok. Stack Overflow wasn’t created to be some utopian ideal of peace and love. When Jeff & Joel set out to create this system, they knew full well the sort of problems that face online communities: noisy conversations obscuring real information, preferential behavior toward those in the right cliques, bickering, rudeness… The rules we’ve created, the tools we have at our disposal, the very nature of certain features on the sites – these are all engineered to __mitigate the problems that inevitably result from throwing a bunch of jackasses together in one place. Stack Overflow people are nice because we’re good at cleaning up after ourselves… And staying focused on what’s really important. Civility is a tool for communication, not a weapon for order You might think you hang out on SO because people are nice there, but if Stack Overflow was full of very nice, impeccably polite misinformation… It wouldn’t be a valuable resource for professional programmers. It’d be more like some elaborate geek troll. It’s good to keep politeness in mind when writing, as your tone can distract readers from your message. It’s great to have something approaching real data on how “nice” we are. But in the end, this sort of navel-gazing misses the point: we’re not here to pat each other on the back and hand out gold stars, much less waggle our fingers at the jackasses – we’re here to share the knowledge of our craft. Stop and think for a moment about the nicest person you’ve met on Stack Exchange. Chances are, it wasn’t the guy who greeted you by name when you signed on – it was the one who answered your first question, convinced you to clarify what you were asking, and calmly pointed out your misconceptions before pointing you to a solution. Rudeness as a defense against vampires As a traditional forum evolves over time, insular rudeness becomes the weapon of choice against the invading hordes, an immune response by the organism toward infection from outsiders. This is only marginally effective, since the most dangerous invaders have long ago developed a resistance to it. Eventually, rudeness becomes institutionalized, to the point where members start to drive away everyone – including each other. It’s a natural progression. And on Stack Exchange, it’s entirely unnecessary. Everyone loves to quote from the FAQ’s etiquette section, particularly the first “be nice” bit. But it’s the last section that has all the action items: Be honest. Above all, be honest. If you see misinformation, vote it down. Add comments indicating what, specifically, is wrong. Provide better answers of your own. Best of all — edit and improve the existing questions and answers! Tired of seeing crappy questions? Close them. Irritated by lousy answers? Down-vote them. Depressed by the meaningless junk that some people post whenever they see an empty text field? Delete it! Embarrassed by poor grammar or formatting? Edit it! See someone being rude? Flag it! All of these tools exist, and we’re working hard on making them better and more effective. So when you can cast a vote and go on with your life, why would you waste your time ranting? It’s that old message board mentality creeping in. When you leave a comment, recognize that you’re now walking the line between a Q&A site and a traditional forum. If you aren’t actively trying to help someone learn, you’re not helping to defend the realm – you’re just being a jackass. The choice here isn’t between being nice and being right. You can be nice each and every time you guide someone to the right answer or the correct behavior, and doing so is not only better for the community morale, it’s also more effective. That doesn’t take a welcoming committee, it’s something anyone can do. Even jackasses like me and you."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/08/02/stack-exchange-now-60-valued-associates-strong/","date":"2012-08-01T22:00:00.000Z","tags":["Background"],"title":"Stack Exchange: now 60 Valued Associates strong!","text":"Holy smokes… It’s been over three and a half years since Jeff recruited Valued Associate #00002 to work full-time on building Stack Overflow. In that time, a lot has changed. Jeff’s moved on to teasing us with his next project, Jarrod’s gone from spending his days knee-deep in code to managing the Core dev team and being big in Japan. And there are now 60 full-time employees of Stack Exchange, many hired from within the communities on our sites. It’s been far too many months since we last introduced any of them, which is a real shame – these folks work hard keeping the lights on, and there’s no reason to keep them locked in the basement all the time. So without further ado, New Valued Associates Bart Silverstrim – Systems Administrator Bart is the newest addition to our Systems Administration Team. Bart is married to his wonderful wife Norma, an English teacher in PA, and has a stepdaughter in college and a son obsessed with Pokemon. He has three cats named Ruby, Python and Mongo. He knows more about Star Trek than most, and is an aspiring author (try and find him at the local Barnes and Noble!) See also: Welcome, ServerFault Valued Associate #0000004! Jay Hanlon – VP of Community As the new VP of community, Jay will oversee a combined team made up of our existing (and awesome) Chaos and Community teams. Specifically, he’s tasked with driving a 6-sigma confidence level in cloud fluffiness, a 15º improvement in rainbow arc, and a modest 15% lift in unicorn nobility. He comes from a long, if accidental, career in coal mining financial services, where he started as a two-week temp answering phones, and most recently was a Managing Director of Capital Markets (whatever that means). Prior to that, he studied Drama at Dartmouth College and did tried to do a lot of crossword puzzles. Today, he’s a proud husband and the father of the world’s definitively most-awesome one-year-old [citation needed]. Steve Feldman – Office Admin Proudly Polish from New Jersey, Steve helps the ever-expanding office at Stack HQ maintain its efficiency as we keep growing and growing; making sure the NYC team has enough jerky, Red Bull and peanut M&Ms to get them through the day; keeping the shelves stocked with enough swag to keep our users happy and buried in t-shirts and stickers. He graduated from University of Maryland (History) and then the University of Nottingham in England (MA Environmental History), where he found his love of Manchester United. Matt Jibson – Developer Tall Matt is from Colorado and has joined the Development Team in the NYC office working on Careers 2.0. He plays organ and has a website. William Cole – Product Manager Will joins Stack Exchange as the Product Manager for Careers. He hails from Austin, TX and has been in NYC for 6 years (Don’t worry, he still has his cowboy boots). He founded two failed startups – one around news discovery (Know About It) and the other for fantasy sports (Chalq). His hobbies include rec league sports and their online fantasy equivalents. He enjoys reading science fiction and attending political, social, and economic debates. He is looking forward to building products at scale, working in a developer centric company culture, and not being responsible for raising money! Jay Greenbaum – Sales NY born and bred Jay joins the Careers Sales Team in NYC. Jay only left the Empire State for 4 great years as a Florida Gator. In his spare time, Jay loves travelling and eating and is obsessed with golf. Jay recently rescued a mutt dachshund puppy named Layla. Bethany Marzewski – Marketing Coordinator Bethany, a proud graduate of Northwestern University, comes to the Careers Marketing Team with a background in magazine journalism. Bethany’s career in journalism was highlighted by her cat (Freya)’s national magazine debut in Prevention Magazine. In her spare time, she enjoys traveling, singing in her community choir, and growing orchids at her Brooklyn apartment. Jon-Vincent Zampetti – Sales JV joins the Careers Sales Team in NYC. Beach bum, Jon-Vincent (JV) is from New Jersey and grew up in a small beach town, Monmouth Beach. JV is obsessed with all sports and routing for local teams: Giants, Rangers, Knicks, and Yankees. In his spare time, he enjoys pepperoni pizza and Hemingway. Dammand Cherry – Sales Dammand joins the Digital Ads Sales Team. He lives in Brooklyn with his 3 kids and lovely wife. He played football in college and loves to sell advertisements. Dammand is passionate about politics, and in his spare time spends time on his site The Politicus. Ben Kiziltug – Sales Ben joins Dimitar in our London Careers 2.0 Sales Office. Ben is originally from London and went to university in Liverpool. Upon completion he moved to Dubai to work in the headhunting sector where he lived for almost 2 years. Ben then took a hiatus to travel around Central and South America for 11 months. Highlights of Ben’s travels included living in the Amazon with a local tribe for a month, hiking on ice glaciers in Patagonia, swimming with whale sharks off the coast of Mexico and cycling down the world’s most dangerous road in Bolivia all before partying in Brazil for Carnaval. Stefan Schwarzgruber – Sales Stefan joins us in our ever-expanding Careers Sales Team in London. He grew up on a farm in Austria, moved to Vienna for a few years, and now resides in London. In his free time he plays volleyball, even traveling for International tournaments with his teammates! When he does make it back home to Austria he enjoys riding his brother’s horses (never without his permission though as he is the original horse whisperer). Matthew Napolitano – Sales Matt joins our Career Sales Team in NY. Born and raised in the ‘burbs, Matt went to college in Madison, WI, and spent a year as a ski bum out in Lake Tahoe before moving back to NYC. He likes spending as much of his free time outside as he can, often playing tennis, basketball, or anything else he can make competitive. Sean Bave – Sales Sean joins our Career Sales Team in NY. He was born and raised in Westchester County, New York. He is addicted to football and golf. He once won a Chicken Nugget Eating Competition by eating 86 cafeteria nuggets. Robyn Wertman – Finance Manager Robyn joins Stack Exchange as our Finance Manager. Born and raised in central Ohio, Robyn moved from MI to NY in 2011 (with a broken leg!). She and her husband, Brad, have two boys Bryce and Chandler. She loves to spend time with her family, read paranormal romance books on her tablet and visit new places in NYC. If it’s a weekend, you can find her at the local playgrounds and parks. Robert Brand – Sales Robert joins our Career Sales Team in NY. He grew up on Long Island and went to school at James Madison University in Virginia. Robert now lives in Brooklyn with his girlfriend and 3 cats. Robert enjoys playing video games, cooking, and listening to/reading science fiction/fantasy books. Also, he does not have a “real” belly-button (it is a hand made “innie”) Please join me in giving a warm, belated welcome to these fine conscripts!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/07/31/the-hunting-of-the-snark/","date":"2012-07-30T22:00:00.000Z","tags":["Community"],"title":"The Hunting of the Snark","text":"You can’t fix what you can’t measure, so the first thing we did as a part of our Summer of Love campaign was try to measure friendliness in an objective and repeatable way. We gathered 7000 comments from Stack Overflow and submitted them to Mechanical Turk. For each comment, we asked 20 people to rate the comment as Friendly, Unfriendly, or “Neutral/Unclear.” There are different ways of massaging the data, but I do want to give you a flavor for the kind of comments we’re talking about when we’re talking about unfriendly comments. Here is a snapshot of the complete results, showing comments where 95% of the reviewers rated a comment as unfriendly (warning, if there are any kids in the area, you may want to send them away): Can you not google?! Dean, don’t be a f___ing lamer. You clearly don’t have the slightest clue of what your ass… Neurofluxation, haha f you should be f you kid try to give answers. you baby kid shut up your mouth. this is forum to share problems not … yea a__hole im saying send me the code This is not correct, for many reasons, many of which were pointed out by plinth below. I d… @Rich, It is clear (and always was clear) that you don;t care about what anybody else thin… could you please stop reposting all your questions 4 times? You know, I really dislike the attitude here that a question can only be asked once. @cee: And rolling back is not intended to solve whatever gripes you may have with me. If y… Now you’re just proving your douchiness. Editing your question to hide your true intent, … man, you guys have no sense of humor. I don’t see how hundreds of idiotic and non-program… NO. GOD. these comments are getting irritating. Indeed. Although demonstrating a severe lack of ability to ask questions is a bad start. I mean, really, WTF? Don’t vote down, the sooner I sabotage this the sooner we can tell the client f___ you and… @TheTXI: That’s exactly my point. If the person actually bothered to google the damn que… u discuss all kind of questions here but when i ask a question and if u people are not abl… @TStamper: If they haven’t bothered to look through the FAQ, what makes you think they are… It’s amusing for a while, babby, but even the funniest jokes get tedious when they’re done… If you’re so desperate to have your account removed why not just leave and not come back? … He asks lot’s of these troll questions Seriously? WFT Dude? Jesus! Start fixing your question. Spencer, my tone? You sir are political correctness gone mad! If I said your mouse sucked, are you gonna take me out to the parking lot and fight me? i… This isn’t a programming question, it is a psychology question. It doesn’t ask for an expl… @mario why in your opinion should I not link to it? Because of the 5 pageviews the site ga… Rec, you are not asking a question that can be answered in the form at the bottom of this … @user336502, you’re pushing your luck with cruddy questions (http://stackoverflow.com/ques… Jebus, @AKA, did you even read your own question? This is the worst piece of crap I’ve ev… Jeez dont’ people read web sites. What do you think Stackoverflow careers is for? This pla… Hmya, how can 4 in 5 programmers be wrong? Or 1 in 2? We don’t know how your brain works… @M.H: Don’t blame the language because you don’t know how to use it. Don’t blame the gun w… Of course, “friendliness” can be subjective. But when we’re talking about making Stack Overflow a friendly place, we’re not talking about being terse or even snippy — we’re talking about lighting a bag of dog poo on fire and throwing it at people. Of 7000 comments submitted, there were 161 that were rated as “unfriendly” by 75% or more of the reviewers… that’s about 2.3%. If you browse Stack Overflow for a few minutes, it’s likely that you will come across one of these extremely unfriendly comments. Of those 2.3% extremely unfriendly comments, less than 1/5th have been deleted. Most of them are still on Stack Overflow right now. The “friendliness” situation is much better, mainly because our reviewers tend to universally interpret thank you’s as friendly. +1 This is a good question, as this programming practice is even used in some big projects. (www.ogre3D.com for ex.) @Visage Haha, thanks for that Great analogy, @Guffa ! Nice find, Chad Birch! It was tagged javascript before Joel edited it. Clearly it is programming related Thanks much for the feedback everyone i wonder how did you manage to create the compoennts tag? like your question +1 Thanks for the suggestion ! That’s nice. Let us know how it goes! You’re welcome… hehe…that was fun! Thanks, see my edit. @Mike: Thank you. Cool, will do that. Okay, thanks all. O_o That’s very cool! +1 @spudly – apologies, turns out the link I posted was a dud – sorry for wasting your time! Love the question. What you’re after is domain knowledge which is exactly the type of information that a company guards because it’s a barrier to entry to blokes in garages writing television clients Cool. thank you! Ha! I didn’t even catch it in your post. LOVING all the images that have been added thanks.. thats exactly what I was looking for Thanks everyone @meagar wow that looks awesome! I’m only about a several hour drive from there, I’ll see if I can make it. Juggling for the win!!! Of 7000 comments submitted, 557 were rated as “friendly” by 75% of more of the reviewers. I think this proves that the methodology is reasonably sound. I think everyone can agree that the Mechanical Turk reviewers, who were shown comments out of context and who probably did not know anything about our site (all they knew was that it was a “programmer’s discussion forum”), did, nevertheless, produce results that seem to agree with how we, inside the community, would judge the comments. That gives me confidence that we have a reliable measure of friendliness that we can track. There’s a lot of other interesting stuff in the data, so here’s an Excel workbook containing the raw data and friendliness ratings."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/07/23/week-2-of-the-summer-of-love-researching-comments/","date":"2012-07-22T22:00:00.000Z","tags":["Community"],"title":"Week 2 of the Summer of Love: Researching Comments","text":"The quality of the Q&A on Stack Overflow continues to outshine any other on the Internet – thanks to the awesome community. Like any community, unspoken rules eventually become expectations. In the previous post in this series, Joel talks about how the community developed its own set of rules and norms that new recruits simply don’t know about. When a new comer walks into the group and puts her hand up for a high-five and gets chastised by the group because they don’t give high-fives, she walks away embarrassed with head hanging low. That’s unfortunate. This isn’t a new concern of course – almost four years ago, one day after Stack Overflow left private beta, Chris Upchurch wrote one of the most famous pleas for kindness in response to attacks he observed on new users in Could we please be a bit nicer to the noobs? A year and a half later, we saw the opposite opportunity for self-reflection when Satoru.Logic, then a member for just over 4 months, asked Why are Stack Overflow people nice? – which was followed up a year later by veteran member dmckee with Are Stack Overflow people still nice? There’ve been dozens of discussions along these lines over the years, reflecting an increasing perception of our Jekyll & Hyde nature. But always lacking was anything more than anecdotal evidence. And as Stack Overflow grew, it became easier and easier to cherry-pick examples that showed the community as either friendly or fierce. So we decided to gather some objective data: Comment Friendliness: The Science Hammer To investigate, we sampled 7,000 comments written on questions on SO and collected 20 independent ratings of attitude for each and every sampled comment (ratings obtained via experienced raters on Mechanical Turk). Comments were randomly selected over the past 3 years. Then we calculated “friendliness scores” for comments based on all 20 ratings. The first thing we found is that comments on Stack Overflow are, in fact, getting friendlier. As we see in the chart, friendliness ratings are generally positive and continue to trend that way. Since May 2011 at least 75% of all comments sampled are rated positively. Statistical modeling of the data supports these observations: comments now are significantly friendlier than they were three years ago. What about the unfriendly portion? We’ll get to that later. The next thing we looked into is friendliness differences between tags. According to our sample, comments tagged in ‘C’ tend to be rated as less friendly compared to others. And subtly, ‘Android’ is friendliest. However, the data only reflects minor differences so we should interpret this trend with a grain of Kosher salt…nevertheless, this does address another long-standing question: are programmers using certain languages or technologies more welcoming of newbie questions? We found that comments on first posts are significantly less friendly compared to the rest, regardless of time period. Though the total percentage of nice comments is increasing (awesome!), the few unfriendly cases can unfortunately drag down a new member’s experience. Experience has taught us that newcomers tend to really remember their first interactions within a community; in this case the small percentage of rude comments carry disproportionately more weight in the memory of the newcomer and affect their impressions of the community. Conclusions So now that we have some hard data, the question arises: is this a problem, and is it worth addressing? If the majority of comments are friendly and getting friendlier, why risk rocking the boat? The short answer is simply that 3/4 “nice” is still a long way from “Total civility […] one hundred percent of the time.” It doesn’t take an overwhelming amount of rudeness to create that impression in casual readers, and becoming complacent about our “niceness” is the quickest way to become blind to its absence. We’ll delve into this further in our next installment, but for now I’ll leave you with a question from dmckee: Is there something else we can do to encourage our big city to keep the small-town feel we grew up with? If you’re curious on how exactly we collected and analyzed this data, feel free to download the full summary. Look forward to the next post in the series discussing mechanisms and community solutions! And don’t forget; at Stack HQ, we love you all. Update: Comment examples on MSO"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/07/20/kicking-off-the-summer-of-love/","date":"2012-07-19T22:00:00.000Z","tags":["Community"],"title":"Kicking off the Summer of Love","text":"It’s summer here at StackHQ. Have a flower! You’re welcome. Now on to some serious work. Can we talk about cultural anthropology for a minute? I’d like to talk about what happens when a community (online or off) gets to be about… oh, three or four years old. Every community starts out needing to recruit members, so they tend to be very friendly to newcomers. After a few years, an insider group of old-timers forms. They get to know each other. They know the rules. They know the history and the legends of the community. And it’s only natural to get little bit irritated when newbies show up who don’t know the rules. Newbies will show up, make a newbie mistake, like wearing shoes indoors or forgetting to close the toilet lid, and the old-timers will look at each other, roll their eyes, and snort, “Typical!” At this point, if it’s a normal human community, it will start to feel a little bit unfriendly to outsiders. Insular. And the newbies will say, “well, gosh, that’s not a very friendly place.” Not just the newbies who got scolded. Also the 100 passers-by who saw the newbies get scolded. Who might have been great members of the community, and who did nothing wrong, but who are not really interested in joining a community that appears to be full of smug jerks. This is very dangerous. You have to be able to recruit new members to replace the old ones that drift away. The success of the community depends on it. Now that Stack Exchange is getting to about that age, we’re starting to see some warning signs that the community is getting insular. Don’t get me wrong; it’s still a remarkably friendly place. But we have some of our own weird rules, that take a while to figure out. Rules about shopping questions, subjective questions, and “localized” questions. Those are very important rules, but when newbies violate them, we can be somewhat snarky. I did a quick survey and found that about 50% of questions that are closed on Stack Overflow are also accompanied by an unfriendly comment. So it isn’t surprising that newbies are turned off. So we decided to declare the summer of 2012 as The Summer of Love, a.k.a. “The Hunting of the Snark.” The goal is simple: to keep Stack Exchange a welcoming, friendly place without lowering our standards. No, you may not ask “plz send me the code” questions, but if you do, we will explain to you, in a friendly and professional way, what you did wrong. You’ve probably already seen the first phases of this campaign. To kick it off, Shog9 deleted the “What Stack Overflow is Not” thread on meta.stackoverflow.com, which started out with the best of intentions (indeed it was intended to help newbies come up to speed), but it turned into an accidental factory of unfriendly comments. We’ve started talking about how to be civil and we’ll continue that. And to make everything, you know, scientific, we’ve started actually measuring friendliness in comments, automatically, using Mechanical Turk. We’ll share some astonishing results of that study with you soon. Don’t lose track of the big picture. Stack Exchange works because it’s a remarkably good place to get information. Having the correct information always trumps having it in a pretty, perfumed way covered with flowers. If the only person that knows the answer to my question is a remarkable grump and can’t give me the answer without insulting my ancestry, I’ll probably take the answer and lick my wounds later. But that’s not the choice. The way to get great answers is to get lots of people contributing. The way to get lots of people contributing is to recruit more people to participate on Stack Exchange. The way to recruit more people is to be nice. So being nice is not at odds with getting good answers, it supports getting good answers. And that’s why it’s important to us."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/06/26/welcome-to-the-arqade/","date":"2012-06-25T22:00:00.000Z","tags":["Community"],"title":"Welcome to the Arqade: Rebranding a Successful Site","text":"Question: What do Stack Overflow, Super User, and Server Fault have in common that most of the sites on our network don’t? Answer: A unique brand. It’s no coincidence that our three largest sites happen to have their own brands. Unique domain names are more memorable than the subdomains that cover most of our network, which we believe is part of the reason why those sites are so successful. Gaming.stackexchange.com has been growing on its own for a while now: the community is extremely active and it has some of the best traffic statistics of any of the non-trilogy sites. The site has gotten a lot of special attention in terms of internal promotions, and we believe that it has the potential to become one of the largest gaming sites out there. To take it to the next level, it needs a unique brand. TLDR: Gaming.SE is now Arqade! If you want the story behind how Arqade came to be, keep on reading. Naming Gaming Realizing the need for a brand was easy, coming up with it was another story. Good brand names convey what the site is about (in this case: gaming, Q&A, advice, etc), are memorable, don’t require a lot of explanation, and are easy to visualize and design for. To come up with a clever name, we decided to consult some experts in the field: the Gaming.SE community. We made a meta post announcing a special chat room dedicated to a week-long brainstorming session. The rules for the chat room were simple: no discussion, only suggestions. Star suggestions you like, and ignore the ones you don’t. The criteria for the domain name were a bit more complicated: Non-negotiable criteria: the name must be available must be a .com must not be associated with a trademark must not contain hyphens or other similar characters Nice-to-haves: the name should convey the idea of Q&A, advice, knowledge, or community should suggest gaming, or something related (e.g. levels, playing, quests…) should be memorable, such that a strong visual brand can be created around it The Twitter handle should be available We got a lot of great suggestions from the chat, and Arqade.com fit best. It’s pronounced “arcade”, which is clearly associated with gaming, and there’s a convenient “QA” in the middle! Many thanks to NiQAlas T for the idea! Branding and Design Once we had the name, the next step was to create a design around it. Our community really loved Jin’s 8-bit theme, so we didn’t want to change the design too drastically, but we did want to tweak it to make it feel like you’re in an arcade. Jin did a little design magic and proposed the design to the community last week. While change is always difficult, we think the spaceship is pretty awesome and will make for some interesting swag! What does this mean for our other sites? Arqade got a new name because it is growing very rapidly. The community is already very engaged and excited about helping move the site to the next level, and part of that is a name that will distinguish it in the gaming community. Not every site will get its own name, and rebranding is not a “next step” in the graduation process. However, if a site grows to the point where the community is very strong, excited, and we think it can handle a big push, we will definitely consider doing this again. Don’t be upset if your community keeps the brand it launched with though – there are a lot of benefits to being associated with the Stack Exchange network! That’s why Arqade, Ask Different, and Seasoned Advice (among others) all redirect to a .stackexchange.com subdomain, even though they have their own brands. For one, search rank is improved for our entire network. Additionally, many people recognize Stack Exchange as a brand, and might be more likely to visit some of the smaller sites because of that. For these reasons, we’re reluctant to even consider_ re-branding a site until its community is very well-established. And there are other areas where the effort can be better spent: finding ways to convey the unique value of your community to newcomers in as few words as possible is enough of a challenge without trying to force it into a one- or two-word name + domain. As with a lot of the things we do, “Arqade.com” is an experiment. We think it will help the already strong Gaming community grow even more, but the actual effects remain to be seen. If you want to stay updated, follow @thearqade or come hang out!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/06/08/election-participation-badges/","date":"2012-06-07T22:00:00.000Z","tags":["Community"],"title":"Election participation badges","text":"The 2012 Stack Overflow moderator election is off to a good start, with 15 candidates and just under three days left for nominations. Elections are a fairly mature feature of Stack Exchange at this point (Role-playing Games has one in progress now as well), but Stack Overflow remains the largest and I dare say most interesting: with so many members involved (and so many more potentially affected by the outcome) every part of the system is put through the wringer… Including the candidates and voters themselves! Given the importance Stack Exchange places on community governance and by extension moderator elections, it’s sort of curious that we never formally recognized this participation. You could get badges for voting on questions and answers, but when it came to the elections we didn’t need no stinkin’ badges… That’s really kind of a shame. Here in the US, it’s common to at least get a sticker when voting, a token to wear the rest of the day in recognition of your civic-mindedness. Starting today, we’ll be handing out virtual stickers – badges – for visiting and voting: The Caucus Badge is awarded for visiting the election page. This is important at every stage of the process, as even during the nomination phase comment discussions helps to flesh out the nominations. If you can’t vote, you can at least make your voice heard. This is a bronze badge. The Constituent Badge is awarded for voting– at least once – in the final phase of the election. Recognizing the importance of the action it rewards, this is a silver badge. Both of these can be earned once for every election. Over the next day we’ll be awarding them retroactively across the network for participation in past elections; participants in current and future elections will see them within minutes of visiting / voting."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/06/04/2012-stack-overflow-community-moderator-election-begins/","date":"2012-06-03T22:00:00.000Z","tags":["Community"],"title":"2012 Stack Overflow Community Moderator Election Begins","text":"Hard to believe it’s been only six months since the last moderator election on Stack Overflow… Remember A Theory of Moderation? It talks about how moderators are the “human exception handlers” on Stack Overflow, elected to deal with those rare situations the normal community moderation can’t handle. It also notes: The most common moderator task is to follow up on flagged posts. Every post contains a small flag link, which anyone with 15 reputation can use. Over 200K users with at least 15 reputation have accessed Stack Overflow in the past three months. That’s a lot of folks able to raise a red flag – and a lot of them do. With 12 moderators on Stack Overflow, handling the more than 1,300 flags each day has become an increasingly heavy load to bear – so we’re looking for a few good men or women willing to step up and help. If you’re an experienced, community-minded member of Stack Overflow, willing to devote a bit of time each day to assisting your comrades, visit http://stackoverflow.com/election and nominate yourself. Of course, needing more moderators is a good problem to have – it means Stack Overflow is thriving, its community able to recognize when a something on the site needs attention. That said, there’s something a bit wrong with this many flags going to the exception handlers, when many of them can and should be handled by other trusted members of the community. Last fall we started experimenting with ways of presenting some flags – those most likely to require actions available to ordinary users – to the 10K users first, and forward them only to moderators when unresolved in a reasonable period of time. We’ll be expanding this in the next month to put flagging for action (close, delete, re-open, etc.) and voting for action in the same league when it comes to requiring moderator intervention. Stay tuned…"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/06/04/can-stack-exchange-capitalize-on-hot-trends/","date":"2012-06-03T22:00:00.000Z","tags":["Community"],"title":"Can Stack Exchange Capitalize on Hot Trends?","text":"Hello. Sam Brand here. For those of you who don’t know me, I’m part of the CHAOS at Stack Exchange. I handle certain “special projects” across the network, oversee syndication, and occasionally poke my head into our communities to make sure our platform works to deliver killer content to the outside world. A couple weeks ago, I embarked upon one of these experiments. What I did Each day of the week (May 7 – May 11) I dropped into Google Trends: Hot Searches to find a buzzy keyword about which I could ask a question at one of our sites. I did this mostly out of curiosity; I’d never used the vast majority of our 85 sites. Who are the experts at our biology site? How might some of these communities react to a noob? A small part of this experiment was dogfooding to better acquaint myself with the product and communities that it’s my job to know. But that was just a small part… The bigger goal was to see how equipped our network is to take advantage of the most popular, topical keywords on earth. You know, the keywords me, you, your mom and your de-friended friends are most likely to plug into a search field at any given time — keywords like “Dancing with the Stars,” “National Donut Day,” “Barack Obama” and “Facebook” — the most popular search term on earth. Stack Exchange, of course, was built for the long-tail. We thrive on questions that only a few of you have. But that doesn’t mean our communities can’t generate pieces of widely-appealing, high-quality content, and do so happily. Right? Just because something’s “hot” now doesn’t mean it won’t be useful to a Google Goggler on his hoverboard in the distant future. Or does it? Here’s what resulted when I asked six “hot” questions across six sites over five days: Monday, May 7 – “Facebook IPO” – Personal Finance & Money – I am a small retail investor. Can I invest in the Facebook IPO at the IPO price? [Closed] Tuesday, May 8 – “Where the Wild Things Are” – Skeptics – Does ‘Where the Wild Things Are’ frighten children to a degree that author Maurice Sendak failed to comprehend? [Closed] Wednesday, May 9 – “Great Pacific Garbage Patch” – Biology – Is the “Great Pacific Garbage Patch” beneficial for marine wildlife? Wednesday, May 9 – “Barack Obama” & “Same-Sex Marriage” – History – Barack Obama is the first US President to support same-sex marriage. But who was the first head of government in human history to do so? Thursday, May 10 – “Wolfenstein 3D” – Gaming – Wolfenstein 3D is now available for free online. But is this version any different than the original? Friday, May 11 – “Flesh-Eating Bacteria” – The Outdoors – What can an injured person in the outdoors do to prevent infection by flesh-eating bacteria? Click through, or take my word for it when I tell you: Creating high-quality content (based around hot keywords or not) is a challenge. Asking is a challenge. (Quick! Come up with a clever question about Chagas Disease. Go!) Answering is a challenge. (We are very aware how much work our users put into helping others.) There is no silver bullet when it comes creating smart niche content or newsstand-quality content that your aunt wants to read while she gets a perm in a hair chair. However… At some of our sites content creation is more difficult than at others. Skeptics, where I asked my second question, might be the most difficult site to engage on our network. The site is accessible to everyone (Cats!), but the community asks that you become familiar with some strict ground rules before jumping in (Cats AND science!). I didn’t play by the rules when I asked question #2 (a pointless, overwrought question, I admit) and my question got shuttered. I can live with this. Stack Exchange can live with this. In this case, it’s not a too-strict FAQ or a crabby moderator preventing us from adding to the Internet; It’s me. Hate the player, not game played at Skeptics, a site that consistently churns out Q&A leagues more rigorous than any other user-generated content on the net. It is the site’s strict ground rules that enable it to do so. However… Sometimes a site’s rules can get in the way of creating the sort of topical content that would make the net a better place. What happened with Question #1 illustrates this well. A couple Mondays ago, investing in Facebook seemed like a pretty good idea. So, like thousands of others I googled: “How can I invest in Facebook’s IPO?” What resulted were a jumble of links that referred to E-Trade’s involvement in the initial public offering, but no stories that told me directly whether I was eligible to bid on the shares at the IPO price. I just wanted an answer. So I took the query to our Personal Finance site, where the question was quickly closed. The reason for the closure? A similar question had previously been asked at the site, but about Skype’s IPO. Needless to say, Skype is not Facebook, and neither question will ever answer anyone’s question about getting in on any upcoming IPOs. Lacking a canonical answer, this is a case where a site should really learn to love the duplicates. Q: So, what can we do? How can Stack Exchange improve in cases like these when a good question with a hot proper noun gets shut down? A: Vote to reopen. Not enough rep? Ask your friends to vote to reopen. Flag for moderator attention. And make your case in the comments. If you want an expert answer, put in a little work to deserve it. Our moderators, like new users, can use a little poking and prodding. They own the sites as much as you or I. But more than anyone, they can make sites change (Server Fault’s FAQ went through a pretty radical change just this past February). Conclusion Lest you think all my hot topic assaults were for naught, think again. Check out our biology site for a comprehensive answer to my question about the “Great Pacific Garbage Patch.” Read here to protect yourself from “flesh-eating bacteria.” Look here to find out which modern head of state first sanctioned gay marriage. As for Wolfenstein 3D… Several weeks after asking, nobody has yet found any difference between the classic game and the free web-based version. That’s the verdict, for now. Maybe in the future, someone wearing Google Goggles will come along and leave a more definitive answer."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/05/22/encyclopedia-stack-exchange/","date":"2012-05-21T22:00:00.000Z","tags":["Community"],"title":"Encyclopedia Stack Exchange","text":"Remember this old picture? What’s that “Blog” circle supposed to be about, you ask? WHERE’S THE BLOGGING? Since Stack Overflow launched, we’ve been trying to explain that it’s not just a Q&A platform: it’s also a place where you can publish things that you’ve learned: recipes, FAQs, HOWTOs, walkthroughs, and even bits of product documentation, as long you format it as a question and answer. As Jeff wrote: if you have a question that you already know the answer to if you’d like to document it in public so others (including yourself) can find it later it is OK to ask, and answer, your own question on a relevant Stack Exchange site. For a long time we’ve been pleading for people to write more canonical answers so the same questions don’t keep coming up again and again, and we even have the Self-Learner badge which you can only earn by answering your own question. Still, I’m not sure if the message is getting through to everyone, as evidenced by the misguided comments that sprout up whenever someone answers their own question. How can we make this any clearer? Maybe a big bold checkbox will help. Now when you ask a question, you’ll see that checkbox right there, reminding you of the option to answer your question on the spot. Furthermore, the answer will be published at the same time as the question, avoiding that awkward moment where well-meaning people rush in to answer something you’ve already got an answer for. It’s just a tiny checkbox that doesn’t change the mechanics of Stack Exchange in any way, but we have a bold goal for this new feature: we’re trying to move even more of the world’s long-tail, detailed knowledge into Stack Exchange. It works for all 83 sites (and their metas), you get to keep the reputation you earn, and you’ll get a lot more eyeballs than you can get on your blog (no offense… even my blog doesn’t get 24,300,000 monthly uniques)."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/05/21/revamped-notifications/","date":"2012-05-20T22:00:00.000Z","tags":["Community"],"title":"Revamped Notifications","text":"About a year and half ago we introduced the Global Inbox, that lovely little red number our analytics tell us everybody loves. We’re fiercely protective of the inbox, making sure only actionable things directed at you go into it. Comments, answers, a handful of post notices, Stack Overflow Careers messages, and the like. That’s why that little red number is so loved, clicking it shows you awesome, interesting things as a rule. However, since day one we’ve had a another class of general information notifications, badge awards, revisions, election announcements, and so on. Stuff that’s good to know, but not always stuff you can respond to. And here’s how we’ve always displayed those notifications: If that’s not bad enough, notifications make you dismiss every, single, one – while the Global Inbox is a one-click, friction-less dismiss. This means that it’s more work to go through your less interesting messages. This is obviously all out of whack, so we’ve completely reworked the notification system, cribbing liberally from the well received Global Inbox: Notifications are now… …a tab in the Stack Exchange Genuine dropdown …global: get a badge on Stack Overflow and you’ll see the notice on Gaming …dismissed with one click, just like the inbox …available historically: the last 45 are available, rather than disappearing forever once read Since notifications aren’t as important as inbox notices, whenever you have unread inbox messages we’ll display the red inbox indicator rather than the gray notification indicator. Of course, once you open the drop down you’ll see that you also have new notifications. Hopefully this notification change removes just a bit of friction from using your favorite Stack Exchange sites. I know I for one won’t miss Big Slidy Orange one bit. Be aware that we’ve also culled and collapsed some notifications types in recent months, aiming to keep our sites annoyance free."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/05/03/highlights-from-stack-overflow-worldwide-meetups/","date":"2012-05-02T22:00:00.000Z","tags":["Company"],"title":"Highlights from Stack Overflow Worldwide Meetups","text":"Thank you to everyone who organized or attended a Stack Overflow meetup! Our Meetup Everywhere community has grown to over 4,400 people in almost 600 cities, and many of those people signed up for meetups in their areas this year. Many meetups were small, but we hope you all had a good time and that those smaller groups had an even better opportunity to get to know each other. Our official hashtag is #SOmeetup, and we’ve seen a lot of great pictures and stories on Twitter, Flickr and YouTube so far. If you haven’t had a chance to upload yours yet, please do! Take a look at some of what people have shared so far: Milan, Italy The Milan meetup group was our largest this year with 101 RSVPs to their event! Check out some photos and write-ups (some of which are in Italian) – the folks at StartMiUp event streamed their event in HD video online. Barcelona, Spain The Barcelona group made this great video of their meetup! http://www.youtube.com/watch?feature=player_embedded&v=87id1VIM0Sw&lt[/embed] Colombo, Sri Lanka: Cambridge, MA, USA There are at least half a dozen Stack Exchange moderators that live in the Boston area – here’s a shot of some of them at the Cambridge meetup! Kevin (on The Great Outdoors) mattdm (on Unix & Linux) stoicfury (on Philosophy) Thomas Owens (on Programmers and SO user #572) Matt Chan (on Fitness & Nutrition) Kyle Cronin (on Ask Different and SO user #658) You will never find a more wretched hive of scum and villainy delightful group of Stack Overflow enthusiasts: Zagreb, Croatia The Croatian meetup was hosted by Infobip, an IT company based in Pula: Sydney, Australia New York, NY, USA The New York City meetup took place in two parts: the first was a series of talks at Projective Space (a coworking space on Manhattan’s Lower East Side), and the second was socializing over beers and snacks at Onieals on Grand. The first session’s talks provided information on cool new technologies and gave people some conversation topics. Bobby Grace shared knowledge about responsive web design and designing Trello for multiple devices. Kevin Gessner spoke about how elasticsearch‘s database is “magic.” Stack Exchange developer Matt Sherman taught us how to meet “hot singles” in our area – a.k.a what tech recruiters can learn from online dating. We had most of the Stack Exchange core developers and Careers developers on site. Bangalore, India Here’s the agenda our Bangalore group brainstormed on their meetup.com page: Agenda/Plan/Activity Announcement or Meetup start Screening tech talk videos. Lightening talks 5 ~ 10 minute presentations about whatever Talk to the Gurus (If there is anyone with more than 5k reputation or any senior programmer) – Share your experience or QA session. Barcamp style – One track – a ‘lab’ kinda area where people can plugin laptops and show off. Stack Overflow name tags (shown on the left) helped people get to know each other and allowed them to show off their current amounts of Stack Overflow reputation. Paris, France The Paris meetup was hosted by DojoBoost. Though turnout was fairly small, it seems like everyone had a good time and engaged in interesting discussions. Presentations We’ve also found some of the slides online for presentations given at meetups around the world. If you missed this event and want to see what people were discussing, take a look at these: Drungli – a presentation on usability from the Milan meetup Trello – a presentation about designing a product for multiple devices, from the New York City meetup Emerging Architectures presentation from a meetup in Colombo, Sri Lanka Thanks again for being part of our second annual worldwide meetups! And if you have any suggestions for how we can make our next Meetup Everywhere even better, let us know in the comments or on Meta Stack Overflow."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/04/25/when-a-site-grows-quiet/","date":"2012-04-24T22:00:00.000Z","tags":["Area51"],"title":"When a Site Grows Quiet","text":"In the lifecycle of a Stack Exchange site, we’ve long held the philosophy that “it takes as long as it takes” to build a sustainable community: How long can a site stay in beta? The simple answer is, it takes as long as it takes. We’ll wait. If a site needs more activity, go out and evangelize it. As long as your site shows steady progress and continues to make the Internet a better place to get expert answers to your questions, it will march on. But when a site struggles to maintain any semblance of steady progress — when it’s struggling to garner an audience, a healthy core of experts, and a steady stream of questions — it becomes increasingly unlikely that the site will find a core audience to sustain it. Next week, we’re shutting down six sites that fall into this category: Astronomy Economics Literature Firearms Healthcare IT Theoretical Physics There’s nothing inherently wrong with these topics, or with the good folk who put time and effort into trying to make them work. They will likely make great Stack Exchange sites… someday. But so far, the network just hasn’t been able to provide these sites with the audience they need to make them work. Maybe they’ll find a niche on a different site, or be reborn at some later date as the Stack Exchange audience continues to grow. But for now, we’re shuttering the windows before they’re broken. The knowledge that went into these sites is not lost. In keeping with our promise not to hoard what was given freely, all content on closed sites will be available for download from the Area 51 page corresponding to each site, in the same format and with the same open license as the data dumps for graduated sites. We’ve always been reluctant to close a site once it entered public beta. These were difficult choices, as many people are fond of these subjects. Still, we’ve been somewhat remiss in not taking action sooner. If it’s of any consolation, we have learned a lot from watching these sites grow and evolve. We are hard at work on a next-generation Area 51, with the goal of making site creation easier, faster and more educational: one of the most frequent stumbling blocks for new sites has been the learning curve for folks unfamiliar with Stack Exchange – providing them with help and guidance is key to creating a vibrant, healthy site. Thank you all for the the knowledge and hard work you’ve poured into these sites. Because of it, someday there will be a site on astronomy… and economics… and literature… and the rest. Stronger and better than ever."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/04/24/tips-for-planners-of-meetups/","date":"2012-04-23T22:00:00.000Z","tags":["Company"],"title":"Tips for Planners of 350+ Stack Overflow Worldwide Meetups!","text":"In case you haven’t heard, April 28th is the 2nd annual Stack Overflow Meetup Everywhere day! We want all Stack Overflow and tech-themed Stack Exchange users to have a chance to grab a beer, present projects, and spend some time with each other offline. However you format the event is great; this day is about bringing the community together, so plan whatever kind of event you need to in order for your city to have fun. We’re less than a week away from the Meetup day (April 28), so if you haven’t already secured a venue, it’s important to get that done. Several people have asked about company sponsorship for their local events. Stack Exchange’s stance is this: A company donating space/food/drink for the event is fine, but that using the event as an avenue for marketing or as a captive audience opportunity to profit is not ok. At the end of the day, this is about the community gathering together and having fun! In addition to securing a venue, you need attendees! Help spread the word wherever you hang out on- and offline. Here are some suggestions: Use the hashtag #SOMeetup on Twitter, Flickr, and YouTube when posting about Stack Overflow MeetUps Post a link to your local MeetUp page on Facebook and Twitter, email the page to your friends, promote in blog posts, etc. Use the custom Stack Overflow MeetUp widgets Invite a friend or two to come with you (or coworkers!) Remember to bring business cards so you can network at the event, and take lots of pictures! We want to see them posted on Twitter and Flickr (#SOMeetup) afterwards! Tips for organizers For those of you organizing the meetups, we have some tips to help your event run smoothly: Post signs to direct attendees to the right location. If you’re not on the first floor, or if you’re in a room down the hall, or even if you’re right up front in the window of a bar, post some sort of sign to let people know they’re in the right place. (You can download Stack Overflow and Stack Exchange logos from our website.) Have organizers identify themselves. Have a Stack Overflow t-shirt? Wear it! If not, consider posting to your meetup group with an easily identifiable accessory or outfit description. This is another way that people will know they’re in the right place – and they’ll know who you are so they can thank you for making the event possible! Use name tags. Especially with larger groups, name tags will help break the ice and allow people to get to know each other. You can put either your real name, or your username on Stack Overflow, or both. (Bonus: Include your rep or a badge you’re particularly proud of earning, and other people will have something to ask you about.) Have a purpose. If your goal is just to socialize, then meeting in a bar with no planned event is fine. If you want the event to be more educational, have a set of presenters to give talks on tech subjects, and hand out a program with the speakers’ names and presentation titles as people walk in the door. (These don’t have to be fancy – a half sheet of paper with a list of plain text is sufficient.) If it’s a discussion group, have a list of topics in case the conversation starts to fizzle. Knowing what you want to get out of the event will help ensure its success. If you’re still stuck for ideas, check out some of the events that your peers are planning! Ryan Alexander planned the London meetup at the TIMGroup offices, where there will be pizza (and hummus for vegans!), lightning talks, and an Xbox Kinect. Urmo Kaber has tentatively planned the Tartu meetup to include a hacking challenge followed by several presentations on topics ranging from JavaScript tricks to the Khan Academy. The folks in Cambridge, MA are meeting up at a bar and focusing on the “who’s who” of the Cambridge Stack Overflow community, introducing users by name, reputation score, which users are also moderators, etc. Good luck with your planning, and we look forward to seeing you in person and online on April 28!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/04/20/more-notes-on-contest-format/","date":"2012-04-19T22:00:00.000Z","tags":["Company"],"title":"More Notes on Contest Format","text":"A few months ago, I outlined a contest formula called “Hot Topics,” which has become a staple in CHAOS’s site-promotion efforts. For those who missed that post, Hot Topics initially worked like this:**** Pick a topic of the week, and enter everyone who asks a question related to that topic into a random drawing to win a prize. The number of entries a person gets is equal to the number of questions they ask about the topic of the week. We now have a few variations on this contest format.**** Variations on the Hot Topic Format Highest-scored post – Like the name suggests, instead of raffling off prizes, we reward the question or answer that has the highest score. Most-viewed post – Similar to the “Highest-scored post”, in this variation we reward the post that gets the most views during the contest. Showdown – Showdown contests are slightly different than Hot Topic contests because they involve two topics, pitted against each other. Our first showdown contest was Skyrim versus Modern Warfare 3 – a battle to see which game got the most views and which users asked the top-voted question and answer in each category. Skyrim vs. MW3 successfully engaged the Gaming community, but it hinged on a manufactured rivalry that didn’t make much sense. Because of that, we’re now using this form of contest when there is a pre-existing event hinged on a showdown scenario. For example, Marvel Comics’ blockbuster event for 2012 is the mini-series Avengers vs. X-Men. Just as the series pits two premier super teams in battle, the current Avengers vs. X-Men contest running on SciFi goes right along with that by pitting our Avengers questions against our X-Men questions in a battle for views. Drawbacks of the Hot Topic Format The Hot Topics contest and variations thereof are generally successful in engaging the community and celebrating important events, but there are some drawbacks:**** They primarily incentivize posting. While posting questions and answers is arguably the most important component of the Stack Exchange model, there are several other actions that keep our sites running too – voting and sharing to name a couple. Only a few people can win, and whether you win is largely left to chance. That is, while you can promote your post by sharing it with your social networks, it’s mostly out of your control how many votes or views it gets. Because there are only a few winners, the competition tends to be very selfish: you can’t vote for or share other people’s posts without hurting your own chances of winning. Our Newest Contest Format: The Mission To rectify the shortcomings of Hot Topics, we’ve come up with a new kind of promotion: the Mission. Here’s how it works:**** The Mission promotion is pretty simple: design a series of levels, each one more difficult than the last, and give prizes to everyone who completes them. We first tried this style of promotion to celebrate the release of Mass Effect 3 on Gaming, and it was wildly successful. We ran the contest for 3 weeks, and ended with over 900 questions tagged Mass Effect 3! Nine people completed the entire series of Missions (6 total), and over 50 completed Mission 1. Our second contest with this format was held on Ask Different to celebrate the release of the new iPad. Instead of 6 Missions there were 3 Levels, and numbers were adjusted accordingly. Additionally, there was a voting requirement.**** Benefits and Drawbacks of Missions There are several benefits to this type of contest in comparison to Hot Topic or Showdown contests. You can incentivize activities besides just asking and answering questions. You can also change the numbers and actions according to what is most appropriate for the site. The first Level/Mission is relatively easy to complete, and they get gradually more difficult. Therefore, users can choose the extent to which they want to be involved. Instead of giving prizes to a set number of people, everyone who completes a certain set of tasks wins. We do put a limit on the number of prizes we can give out per level just so we don’t go bankrupt, but we try to set the limit to be higher than the number of people predicted to complete the Mission based on average site statistics. (As those of you who completed Level 3 in the iPad contest know, we vastly underestimated you! For this we apologize and will try to do better in the future.) Because multiple people can win each Mission/Level, the contest tends to be less competitive. You can vote for and share other people’s posts without hurting your own chances of winning, which better preserves the way the site works naturally. Winning is more controllable. That is, each Mission or Level lays out a few actionable tasks, such as “ask or answer 35 posts and share 15 posts.” We do impose a minimum score requirement on some of them, but the minimum score is always achievable without having to game the system. These benefits don’t mean that the Mission-style contest is perfect; here are some drawbacks: Sub-par posts are a concern in Mission-contests for a few reasons. First of all, later Missions require users to post a large number of questions and answers, and the focus on quantity may reduce the quality of the posts. Additionally, the extrinsic motivation that large prizes introduce can cause a flood of new questions, which can overburden the moderators and the community in general (see meta threads here and here for more detail). Asking people to share a set number of posts may cause them to exhaust their social networks, making sharing less effective in the future. Mission-style contests require a large time commitment to complete, and we give out a significant number of prizes. Therefore, they are only appropriate when coupled with a very important event in the community, such as the release of a highly anticipated game or product. Clearly, choosing a contest format depends heavily on the site and the event. Any site that is receiving CHAOS attention is eligible for a contest. However, as stated above, Mission contests will probably only be run on sites that already have big events happening in their community. I’m optimistic that with these few basic contest models and the suggestions provided in meta, we can continue to improve and come up with something that fits our sites even better."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/04/10/stack-exchange-api-v2-0-contest-winners/","date":"2012-04-09T22:00:00.000Z","tags":["API"],"title":"Stack Exchange API V2.0 Contest Winners","text":"About six months ago we began work in earnest on the second version of the Stack Exchange API. A few months later, after a short private beta, we opened up a public beta with tantalizing prizes. Now it’s time to announce the winners. First Prize – Stack Remote An Android app by Karan M, supporting all non-meta Stack Exchange sites and a view into your inbox. Karan will be getting an iPad 2 the new iPad. Second Prize – SENotifier This open source app by Greg Hewgill drops your new inbox items into OS X’s menu bar. Greg will be getting an Acer Aspire One. Third Prize – Stack Alert A series of open source browser extension for Google Chrome, Mozilla Firefox, and Opera by George Edison which pull your inbox into the browser. George will be getting a 160 GB Intel SSD. Library – Serel An open source Ruby library written by Thomas McDonald, check out the documentation. Thomas will be getting a Kindle Fire. Bug Reports All these users contributed a substantially to the quality of the API by finding and reporting numerous bugs, and will be getting their choice of a Lilliput Mini USB Monitor and a Kindle Touch 3G. But wait, there’s more! As part of the new authentication feature in Stack Exchange API V2.0, we added an apps tab on user profiles for managing app permissions. Up until now, this tab was only visible to users who had authorized at least one application. Starting today we’ve made it visible to all users, and put some tasteful app suggestions in there for users who haven’t authorized any apps yet. We’re doing this to help those developers who build on our API find an audience for their hard work, in a similar vein to Community Promotion Ads. Here are the current guidelines for getting an app listed: It must be free, and thus available to all our users It must be listed on Stack Apps It must work on all Stack Exchange sites It must be awesome (we’re hand curating these for now) Congratulations to all the winners You should definitely check them out. If none of these apps float your boat there are plenty more available on Stack Apps, or you could jump in and build your own."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/03/28/careers-2-0-new-features-for-hiring-developers/","date":"2012-03-27T22:00:00.000Z","tags":["Careers"],"title":"Careers 2.0 New Features for Hiring Developers","text":"Stack Overflow Careers 2.0 re-launched a year ago, and since then we’ve been steadily making improvements to it. While we’ve added a lot of new features for developers to find great jobs and show off their stuff, we’ve been a bit…neglectful of the employer side. Well, not any more. We’ve just wrapped up a big set of changes to how companies find and track the perfect developers for their jobs. So if you’ve ever considered hiring a developer, read on for the details. Some Background Stack Overflow Careers launched with one goal: help developers find great jobs. We do that in two ways: developers can go looking for jobs on our jobs board, or they can create profiles showing off their work and let employers come to them. From the employer’s point of view, these were two completely separate products. You either bought a job listing and collected applications, or you bought a search subscription and searched in our database. You could buy both, but they wouldn’t share any information between them. No big deal, we thought. Well, it turns out that these products are really complementary and a lot of employers would like to use both. Job listings bring in lots of programmers who are actively looking for jobs, but they don’t reach the pool of really great candidates who already have jobs but may be willing to talk. Candidate search excels at the latter, since 25,000 of the 32,000 searchable profiles in Careers are people who are not actively looking for a job. So we set out to bridge that gap and bring job listings and search together. Messaging First, we tackled messaging. We consolidated all of your messages into one simple new interface: We’re obviously not breaking any new UI ground here: this looks and works like an email client. The important thing is that it combines everything into a nice, clean view: developers can easily see which jobs they’ve applied to and which companies have contacted them, and employers can see who they’ve contacted and who has applied to their jobs. Candidate Tracker The second piece we tackled was tracking candidates. Previously, when applications came in they just went into a big pile of resumes and cover letters, and you couldn’t do anything with them – not even sort them into “keep” and “reject” piles. Similarly, if you found an awesome developer via search, you could message them, but you couldn’t take notes or even easily keep track of their response. So we decided to combine these things together into a new candidate tracker: We took a lot of cues from Trello (which we love – you should really try it if you haven’t): each candidate shows as a card with a picture, name, rating, and a short summary that you can create to keep all the candidates straight. You can drag them around between various states of the hiring process, and you can click them to see all their details: From the expanded card, you can easily see all of a candidate’s information, make notes, and send messages. At each stage of the process you can either advance the candidate, or dismiss them from the list (always reversible, of course). Candidate Search This paved the way for integrating search with job listings. Now when you search, you’re searching to fill a particular position and all the candidates you save will be associated with that job. This makes it possible to keep two separate lists for two jobs (if, say, you’re looking for a front-end jQuery developer and a back-end python/mysql dev), and lets you associate a job listing with each search to get even more candidates. This also let us cross off a frequent complaint: you’ll no longer see the same candidates showing up over and over again in searches. Once you’ve saved or dismissed a candidate, they’ll stop showing up in searches for that job, so you won’t have to keep paging past them to get to the new results. Job Listings Finally, we took another look at job listings and added some stats to help you track where all your applications came from: This page now shows the number of views your job listing has gotten, what percentage of those people clicked a link in your job listing, and how many ended up applying for your job. We also show you where people came from, so if you posted the listing on our board, then tweeted it and posted it on your website you can actually see how many came from each place. We also added embed codes for our fancy new apply button. That means that if you list your jobs on your company website, you can now directly embed a button to apply for the job with Careers. It opens a popup which lets developers apply to the job without ever leaving your website: Conclusion That’s it for this round! This was a big change on the back end, and it sets the stage for a lot more changes we’re going to jump into working on next. If you’re already a customer, let us know what you think on meta.stackoverflow.com or via email. If you’re a developer and you’d really like to work with some kickass fellow developers using Stack Overflow, email your boss or hiring manager and tell them to try Careers!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/03/26/stack-overflow-meetup-everywhere-april-28-2012/","date":"2012-03-25T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Meetup Everywhere: April 28, 2012","text":"Last year’s Stack Overflow Meetups were a success, with over 2000 people participating around the world. We’re happy to announce that the Second Annual Stack Overflow Meetup Day is April 28, 2012. Because the Stack Exchange network grew so much over 2011, we’ve decided our Meetup day should grow, too. This year we’re calling on every hacker, programmer, or designer in the Stack Exchange tech community to meet up with other users, say hello, and maybe learn something. Whether you’re a member of Stack Overflow, Server Fault, Super User, Programmers, Ask Ubuntu, Game Development, or any other technology-themed Stack Exchange site, we want you to be a part of this event.* Why does this event exist? Even though we constantly say that Stack Exchange is not a social network, you (the community) share your knowledge and help our sites grow. The community is important, and since we don’t have friends lists or private messaging, we want to give the community a chance to get to know each other. But we need your help. How do I get involved? Just like last year, we’re using Meetup.com to make it easy for users to organize a local face-to-face event – or to join one that someone else has planned. Visit meetup.com/stackoverflow to find your local Stack Overflow MeetUp group. If there is no group in your area, start one! As other people join, you can choose a venue (library, community center, restaurant, etc.) for the event. Those interested in playing a little bit larger role can volunteer to be planners. If there was a meetup in your community last year, it will be shown in the list on meetup.com/stackoverflow. An event has automatically been created for this year; all you need to do is RVSP and suggest a location. If you search for your city (or a city near you) and don’t see it in the results list, add a new community! What should my event look like? Your event can take whatever shape suits your local community. Feeling generous? Plan group volunteering activities. Have a great open-source project you’ve been working on? Present it! Know someone who loves to talk programming in front of crowds? Ask them to guest speak! Or, plan an Ignite-style event where anyone can present an idea in five minutes or less. The options are endless. To help you get started planning an event, take a look at what some of our users did last year or hop over to the Worldwide Meetup chat room to trade ideas and stories with other Meetup planners. What if I’m busy on April 28th? If you find that you and all the other Stack Exchange techies in your area can’t get together on April 28th, that’s okay! We don’t want you to miss out on the fun, so just pick any other day around the 28th – we don’t mind if people celebrate Stack Overflow for a week rather than a day. How can I help get the word out? Join your local community (or create a new community location) on meetup.com/stackoverflow. Once you’re a member, help us get the rest of the Stack Exchange tech community involved! Use your existing online activity to share details about this event: Use the hashtag #SOMeetup on Google Plus, Twitter, Flickr and YouTube when posting about Stack Overflow Meetups Post a link to your local Meetup page on Google Plus, Facebook, and Twitter, email the page to your friends, promote in blog posts, on HN, etc Use the custom Stack Overflow Meetup widgets Get in touch with other existing tech Meetup groups in your area and see if there are Stack Exchange users among them How will Stack Exchange help? We’re dedicated to the success of these Meetups just as much as you are. We’ll be posting more tips here on our blog to make sure you’re well-prepared to host an awesome event. We’ll put ads on our network to help spread the word, and we’ll share event details via our own social media platforms. We’ll send door prizes to the groups that build up the biggest following leading up to the Meetup Day. We’ll collect your stories, tweets, and photos to share on our blog after the event. * For those of you who aren’t programmers, hackers or designers – fear not! We haven’t forgotten you; stay tuned for news of a possible network-wide event later this year."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/03/22/respect-the-community-your-own-and-others/","date":"2012-03-21T23:00:00.000Z","tags":["Background"],"title":"Respect the community – your own, and others’","text":"In “Why Can’t You Have Just One Site?” Jeff wrote about the rationale for creating three sites instead of one, and the process for determining where a question belongs: Is it really so hard to figure out which community you belong to, and thus, where your question belongs? Ask yourself this: what is your job title? which community do you consider yourself a part of? what are you trying to accomplish? You can use the same mountain to go downhill really fast on snow — but it’s plainly evident to the participant which culture they consider themselves a part of, “skiers” or “snowboarders”. We’ve since grown from a Trilogy to a network of 84 sites. Our audience is large enough to allow a considerable amount of specialization: Apple, Ubuntu, WordPress and Database Administrators all cover topics that previously belonged on Super User, Stack Overflow or Server Fault. But the same philosophy still applies: before you can decide where to ask, you need to know who to ask. And who you ask will depend (at least in part) on who you are… That’s the philosophy. Putting it into practice creates a few wrinkles: some sites have overlapping communities; some sites are named after their audience, but the name doesn’t quite match up to how the community actually sees themselves; in some cases, the community is defined purely by a topic of interest and not any particular occupation or field. These ambiguities lead to some undesirable behaviors: Cross posting: technically multi-posting, asking the same question verbatim on different sites without tailoring it to that site’s audience. Scope Gerrymandering: attempting to micromanage what’s on-topic in order to avoid overlap with other sites or simply drive away users seen as undesirable. Migration hot potato: kicking a question around from site to site until one of them finally accepts it. Over time, these conflicts tend to work themselves out: a community may form around a topic or shared interest, but soon develops into something more than that. No one would mistake Ask Ubuntu for Unix and Linux. The types of questions and answers on Programmers or Ask Different will show you at a glance that you’re not on Stack Overflow or Super User. Spending a few minutes looking around before you post – or reading the site’s FAQ – should tell you all you need to know about what questions belong there, and how the community expects them to be asked. There’s no substitute for taking the time to get to know the locals. With that in mind, here are a few strategies for avoiding these problems as a member of a young Stack Exchange site: Respecting your own community As members of a community, your first loyalty should be to that community. When evaluating a question, you shouldn’t be looking to push it off on some other site; instead, ask if it could be appropriate and on-topic for you, the experts who the author decided to ask. Be a bit jealous of your site – don’t blithely turn askers away simply because their question could be asked somewhere else. Don’t hit them over the head with your scope, help them tailor their question to fit into it – and if that means your site’s scope overlaps a bit with another site’s, so be it. Obviously, there are questions you’ll have to turn away, either because their only connection to your site is via the audience (“How do I make bread as a programmer?”), because it’s completely off-topic (“How do I cook a fish in a dishwasher?” obviously belongs on Cooking, not Home Improvement) or because they’re simply not useful or constructive. But that should be your last resort. Close questions with an eye toward improvement and re-opening, not driving users away. Respecting other communities The migration tool was created to help those unfortunate users who asked good questions on the wrong site. Do your best to remember this, whether as a user (flagging or voting to close) or as a moderator (responding to flags). Don’t migrate poorly-asked or non-constructive questions. Just close them. If you want to help the asker out by recommending a site where their question would be on-topic, go ahead – but also recommend they read that site’s FAQ first! Do leave comments on questions that might get better answers somewhere else. The good folks on English Language and Usage might well be able to give the history of some bit of technical jargon, but if you think that question would get a better answer on the site dedicated to the field where that jargon is used – suggest that! If the asker is unhappy with the answers he got, he’ll have a ready source of better ones. Ditto for unanswered questions gathering cobwebs. Along the same lines, don’t attempt to scavenge on-topic questions from other sites by asking the moderators there to migrate them to yours. Again, there’s no harm in leaving a comment suggesting that a question would be a better fit somewhere else. But focus on the questions that aren’t on-topic, or aren’t getting answered – snatching someone’s question (or answer) away without any forewarning is a slap in their face. Finally, be extremely reluctant to migrate old, answered questions. The votes and answers on these reflect the opinions and work of the community where they originated, and in most cases they’ll be somewhat out of place elsewhere – you want your greatest hits to reflect the best that your community has to offer, not someone else’s. And, again, the migration can come across as rude: if someone has invested serious effort into an answer and has linked to it on their blog or from their résumé, then snatching it from them without due consideration won’t endear them to you. Only migrate these questions when the alternative is deletion. The Stack Exchange software has grown to be extremely powerful, but it’s important to remember that, at their core, these sites run on human beings – and without respect for each other, clever tools solve nothing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/03/06/new-stack-exchange-beta-theme/","date":"2012-03-05T23:00:00.000Z","tags":["Community"],"title":"The New Stack Exchange Beta Theme","text":"I wanted to give you a quick look at the new Stack Exchange Beta theme. Yes, we are retiring the familiar “Sketchy” theme and rolling out a more-polished and finished design for the beta sites. Raise the curtain, cue the trumpet fanfare… Alas, poor Sketchy… Over the course of the next few weeks, we will be rolling out the new Stack Exchange Beta theme to all the sites still in beta. At first glance, the new beta theme looks like an unembellished version of any graduated site: Finished, but without any particular “beta” theme, per se. But that’s sort of the point. The crux of this change is that it’s high time we stopped equating beta sites with being somehow unfinished. Sure, in their earliest days — when a community is defining their scope, building a FAQ, and finding its community leaders — a site might be considered unfinished (i.e. “under construction”). But once you are past those earliest wild-west days of figuring out why your site exists, a site should no longer be considered unfinished. Right out of the gate, the Stack Exchange engines gives you a world-class Q&A suite worth recommending on its own merits. If you’ve been holding back, go ahead; share, promote, and enjoy! There was a time when we thought the average beta period would last, oh… about 90 days. The site would begin and build up enough content and users to reach critical mass. Reaching that tipping point of unstoppable growth defines “graduation.” But getting to that point is hard work, and it usually take longer than 90 days… much longer. So we’re left with this big gap between the time when a site is truly “under construction” to when it finally reaches graduation and gets its own custom design.)In the meantime, holding onto that unfinished-site meme has become actively harmful to community building, and an unproductive source of frustration among the sites; I’ll get back to that later. The idea of Sketchy started out as a whimsical nod to the early days of web development when just about every website started out with a definitive “under construction” theme. In the mid-90’s, webmasters often labeled their sites “under construction” as if to warn hapless Internet travelers that, perchance, something might be added to the site. A funny thing happened along the way: Even as those websites grew, the “pardon our dust” monikers remained as a warning of still more stuff to come — there’s always new pages, new articles, and new features to add. Websites are never “done,” and thus the perpetual under-construction themes endured. So maybe we carried on that “under construction” meme a bit too long. Giving our beta sites a decidedly unfinished look seemed topical for a 90-day beta. But when a beta goes on, sometimes for hundreds of days, folks start to wonder if the site would ever be — quote, unquote — “finished.” A lot of folks like Sketchy. We like Sketchy, and he will be missed. But most communities don’t want to look like they’re still on the drawing board when they’ve been working tirelessly on their site for months or even years. Every Stack Exchange site will still get their own custom design when they graduate. This new Beta Theme doesn’t change that. But this new design gives your beta site a nice, clean, finished look that you can work with and display proudly for as long as necessary."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/03/06/reputation-and-historical-archives/","date":"2012-03-05T23:00:00.000Z","tags":["Background"],"title":"Reputation and Historical Archives","text":"If you’ve been around Meta Stack Overflow the past few days, you’ve seen a fair bit of conversation sparked by the recent changes to how reputation is calculated: To be clear: reputation values are not changing, every action in the system is still worth the same amount. Here’s what will be different: Your reputation will be correct at all times Deletions will have a much more immediate effect on reputation, not waiting on a recalc (but reputation sync takes up to 5 minutes on a delete/undelete action; as to not block the user’s response thread, it’s offloaded to a background queue) Recalcs will no longer be necessary Up/Down vote reversals will restore the correct reputation amount Up/Down vote reversals will correctly adjust to the reputation cap The reputation history in your profile will be more detailed and accurate (e.g. when a post is deleted, you’ll see that in the reputation tab of your profile) This may sound pretty boring – and it is – but it’s a big deal for some of our most avid users, for whom that number at the top of the screen is an at-a-glance indicator of how their contributions are faring on the site. Up until now, the reputation visible next to your name on your profile was a rough approximation of your real reputation – only a recalculation would resolve all the discrepancies that crept in over time. Unfortunately, we botched what should have been a much-welcomed roll out for this feature. See that last bullet quoted above? The one about deleted posts? Anyone who’s been on Stack Overflow for a while has at least a few deleted posts attached to their reputation history, especially those of us who participated early on when exact details of what Stack Overflow is were still being hammered out. Questions that weren’t really questions, answers to one of the many polls or Getting To Know You threads that sprung up, things that were reasonably normal at one time but have since been deleted as we’ve become more focused, or even just information that became obsolete as technologies changed. Deletion is a critical part of the site’s question lifecycle – as Jeff wrote recently, We know that closing the cookie jar is painful. We feel your pain. Nobody likes having their fun taken away. But it’s too addictive and too easy, and in the absence of any moderation, the community would do nothing but add and upvote the easy, fun stuff. And nothing makes you feel that pain quite like reminding you of it with a bright red line every time you visit your profile: As you can see in that screenshot, there’s an actual link to the deleted answer – this is the first time we’ve made that information available! And the response to it was immediate: folks went through their histories, looked at all the deleted questions and answers, and found a bunch of stuff that, while not strictly compliant with current practices on Stack Overflow, probably shouldn’t have been deleted. In short, fixing one bug (inaccurate reputation history) exposed several others (a flawed deletion process and a lack of respect for important past contributions) and created a new one (humiliating display of reputation on deleted questions). So after much discussion on Meta Stack Overflow as to how this should be handled, we came up with the following four fixes: First, if you’ve contributed something worthwhile to the site, you should keep the reputation for that even if it eventually gets deleted. “Worthwhile” here is defined as, A score of 3 or greater Visible on the site for at least 60 days In fast-changing professions, there should be no shame in contributing valuable information just because it eventually goes out of date – and there shouldn’t be a penalty for deleting it when it does. Naturally, editing to bring an answer up-to-date is preferable – but if someone else already posted a good answer with current information, you should be able to remove yours and keep the reward for the time it was useful. Second, we won’t display reputation lost to deleted questions on your profile unless you explicitly ask for it, and won’t display it _at all _to other people (apart from moderators). This was an egregious privacy violation, and we sincerely apologize for not catching it sooner. Third, it should be easier for the community to both delete AND undelete most questions. Previously, it could take hundreds of votes to remove some of these extremely popular questions – that sounds good, but in practice it just meant folks gave up voting and asked moderators to delete for them. Creating more grief for moderators and less democracy was never the intention – from here on out, it will take at least three and at most 10 votes to delete even the most popular questions, and an equivalent number to undelete them. Last but not least, we’re experimenting with ways to keep some of the more useful – or even just fun – questions from the site’s history accessible in some way. To be clear: most of these are not great examples of questions that should be asked today… But some of them are, quite frankly, brilliant – and losing them entirely just because they aren’t a good fit for our strict Q&A format is wrong. For now, we’ve provided a “Historical Artifact” lock that completely freezes a question and its answers, preventing all further editing, voting, answering, and flagging. It will also remove it from the usual lists of questions on the site while allowing it to remain fully accessible and visible to everyone with a link to it. At the moment, this is a completely manual and moderator-only feature: depending on how it works out, we’ll tweak and expand it as time goes on. These changes are currently in the process of being tested and rolled out across all sites. Please report any bugs on Meta Stack Overflow."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/03/02/enterprise-vs-consumer-development/","date":"2012-03-01T23:00:00.000Z","tags":["Background"],"title":"Enterprise vs Consumer: Product Development at Careers 2.0","text":"A few months ago I joined as a developer on the Careers 2.0 team – this is my story of bringing Careers 2.0’s new Apply button to fruition. Or, what happens when an Enterprise boy meets a Consumer Product Development company and gets exposed to how things are done on the other side. One of my first projects after joining Stack Exchange was giving the job application process an improved, stream-lined experience. This experience gave me a different perspective on Enterprise and Consumer product development, which I’d like to share. Probably the most eloquent explanation of the differences between Consumer and Enterprise product development comes from one of my most favourite people in tech, the late Steve Jobs: We’re about making better products, and what I love about the consumer market that I always hated about the enterprise market, is that we come up with a product, we try to tell everybody about it, and every person votes for themselves. They go, “Yes” or “No”! And if enough of them say “yes” we get to come to work tomorrow! … Enterprise Development: hidden requirements and resource constraints In Enterprise IT projects, you’re typically working towards very specific requirements for very few clients, and in most cases those requirements aren’t in the project spec you were given! The stakeholders know their business domain but aren’t very knowledgeable of IT systems, and so the written requirements often don’t match what the client originally envisioned. This results in a lot of back-and-forth (which experience should tell you to always write down) on every iteration to ensure what is being delivered is in tune with what they expect. And each feature is under pressure from resource constraints, re-visited on each iteration; when projects are overrun features get cut, quality gets lost and shortcuts get taken. This is not an ideal environment to produce high quality solutions or high levels of customer satisfaction. Consumer Product Development: putting the user first. All of them… Working on a consumer product is an evolving process where you’re continually looking to improve the end-user experience in a highly competitive environment. Your guiding light is the business as a whole, and everything is done with an eye toward increasing participation, either by acquiring new customers or increasing existing customer engagement. There is no single customer whose wishes become requirements; each new feature affects our entire user base. A feature is worthwhile if most customers will find it of value and it avoids complicating the user interface for those who don’t intend to use it. With every product feature you’re putting your customers front-and-center: what do you want to help them do? The only real, measurable way of determining what customers find valuable is to record user analytics. For me, this was one of the key differences with consumer product development: you must continually monitor the behaviour of your user-base to ensure each change has a positive effect. Designing Careers 2.0 for our users For the Job Application feature, our requirements are pretty straight forward: we want to make it as easy as possible for potential candidates to apply for a job. However, we also want each application to be tailored to the employer, so we require a cover letter on each application. The problem with requiring more fields is that it adds more friction to the process (complicating the UI) which has the potential to reduce new and repeat applications. For this reason every field or screen that is added needs to be justified: if making one set of users happy drives away another, we step back and look for alternatives. Most of our major features start with a mock-up and a spec, handed to us by our designer and containing the major elements and page-flow of each screen. Mock-ups are a great tool to accompany a developer spec, since both parties can get a birds-eye visualization of what’s going on and what needs to happen before discussing the details of each feature. A picture tells a thousand words: there have been countless times where implicit functionality was present on the mock-ups but missing from the detailed spec. To give you an idea of what it looks like, our initial mockups for the apply feature looked like this: By the way: those mock-ups were produced using Balsamiq, which lets us quickly throw together clean (but obviously fake) screens.  We like Balsamic Mockups so much, we partnered with them to make a light-weight version of the tool available on our UX site – check it out! Our “Jaws” moment In the blockbuster movie hit “Jaws”, Stephen Spielberg attributed much of the success of the film to the fact that the mechanical sharks were constantly broken down, forcing him to rewrite much of the script without the shark, instead focusing more on the human element: “The shark not working was a godsend. It made me become more like Alfred Hitchcock than like Ray Harryhausen.” This folk-wisdom hit home with our “online preview” feature displayed on the original mock-ups above. Initially, we wanted to show the candidate a real-time preview of the CV immediately after they uploaded it. The problems with this feature only surfaced after we implemented it. The first was a legal issue only discovered after I implementing a Google Docs viewer solution – straightforward enough apart from the viewer needing direct Internet access to the attachment (which I enabled via a temporary generated URL). Unfortunately it was only after reviewing Google’s Terms of Service that we found the bad news, in Google’s over-reaching legalese: “By submitting, posting or displaying the content you give Google a perpetual, irrevocable, worldwide, royalty-free, and non-exclusive license to reproduce, adapt, modify, translate, publish, publicly perform, publicly display and distribute any Content which you submit, post or display on or through, the Services.” We didn’t want to have any of the uploaded CVs made public, so the Terms of Service meant we needed to look elsewhere. I then tried the Zoho viewer but unfortunately it didn’t support the small resolution of our popup window. Finally I implemented the feature with Scribd which had everything we wanted: a beautiful viewer, the ability to upload private documents… Everything except real-time speed. I tried everything to make it faster, even working with Scribd’s co-founder Jared Friedman directly. But despite all our efforts we couldn’t consistently get the preview time below 7-10 seconds – Scribd is built for producing high-quality results, but not in real-time. Performance is a feature At Stack Exchange, we have a strong emphasis on performance which resonates right through the company from our Co Founder, in the various high-performance libraries StackOverflow has open-sourced, to my own recommendations on the subject. Performance is often a neglected concern in Enterprise development – especially when it doesn’t make it as a line item in the requirements doc. This has a direct impact on the overall usability of your system, but because optimization happens late in the project life-cycle it is one of the first things cut when a looming deadline approaches. If you’re operating in an environment where your business model is hinged on maintaining a happy customer base, then it pays to go the extra mile to try and reduce response times. In general, neither we nor the user want us to keep them waiting and the more popular a particular feature is, the more we focus on performance. Here are some examples of the things I’ve done to achieve better performance: Pre-loading content – So the popup page loads instantly, and user-input fields are pre-populated. AJAX lookups / Client side-validation – Provides instant feedback, and avoids round-trips for bad user-input AJAX file uploads – To start uploading at the earliest possible moment. Hiding / showing sections – To start with an easy-to-use interface for common tasks, while avoiding round-trips to load alternate content for optional features. Loading animations – To reduce the perceived response time for >1s tasks (e.g. creating a PDF from an online profile) Asynchronous / Queued processing – Defer lengthy post-application processing so we can return immediately after we’ve accepted the users application. Redis / Memory – Making use of Redis and avoiding disk when possible – for caching, users sessions and to power our Redis MQ Having a user twiddling thumbs while staring at a loading sprite is a UX sin. So at the 11th hour, we decided to yank real-time previews and instead offer the candidate a download link with which they can preview the results in their own document reader. This wasn’t totally wasted effort however – we’d streamlined the rest of the process as much as possible to allow for the time needed to preview, and with it gone, the process was blazing fast. Measuring and Analytics User Analytics allows you to measure the performance of your feature – at Stack Exchange we use a combination of KissMetrics, Google Analytics and our own custom analytics and reporting tools to fulfill this purpose. It allows us to get valuable insights on how well our features are working and which ones see the most “drop-offs”. An example of the importance of this feedback was when we added the ability for anonymous users to apply without using their online profile. In the original version this feature didn’t seem that useful to us. It turns out we were wrong. After deploying the new feature (unannounced), we saw an overwhelming increase in job applications, practically overnight: We use the high-level overview graph above to track our daily applications and the uphill climb towards the end is just after we introduced anonymous user applications by highlighting its availability in the Employers Post a new Job form. We’ve basically doubled the number of profile applications we received (seen in Red) and the mountainous blue on top are the candidates opting to apply with their own CV – by far the overwhelming majority. This tells us we have to accept (no matter how many features we add to our Career 2.0 profiles) that candidates often prefer to submit their own CVs and that we should optimize this use-case in future. Come join us! Working on this feature from its inception has taught me a lot about the different approaches taken for product development and after spending most of my career working in the Enterprise – it’s a refreshing change. If you’re interested in this Career 2.0 lifestyle choice, come join us! We’re currently on the lookout for talented devs to join the team, and applying for it gives you a chance to test-drive the new Apply feature!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/02/29/lets-play-the-guessing-game/","date":"2012-02-28T23:00:00.000Z","tags":["Community"],"title":"Let’s Play The Guessing Game","text":"We’ve observed a particular pattern of questions emerging on several Stack Exchange sites. All these questions are effectively guessing games. I remember myself playing this a bit childish, but in some ways awesome game, where you control a tank, and can pick up and stack turrets (and maybe something else) from enemy tanks you kill. Maybe they also had different platforms (and if it’s one with wheels then technically it’s not a tank, but hey). It was around 2000 (or maybe even earlier) and the game had 3D graphics. Trying to remember a book I read in the 80s, reptiles are dominant, have language, have human slaves. Northern human tribes attack the reptile settlements. The reptiles have gourds of partially digested food…they use some type of slug creature to clean hair and fur off mammals. Please help me finding the single word for representing a person who guides at right time (at the time of need). I am looking for a children’s book that features a mouse. He lives in a red ticket booth and sleeps in a drawer and rides a motorcycle. It is either a chapter book or a collection of short stories about this mouse. The question owner tries to describe something they can’t quite remember, in hopes that the greater community will “buzz in” to hazard an answer based on the limited information provided, like on a game show. The best guess gets upvotes, and potentially an accepted answer checkmark. It’s fun, right? Our engine is great at these kinds of questions, and they tend to do well: identify-this-game is the 5th most popular tag on gaming story-identification is the 2nd most popular tag on scifi single-word-requests is the 3rd most popular tag on english story-identification is the 2nd most popular tag on literature* Of course, guessing game questions aren’t a new phenomenon; I alluded to them in the Pee-Wee Herman Rule. But after a year of observing these guessing game questions grow and spread to multiple sites with similar effects, I no longer believe that the slight benefit of these questions outweighs the many negatives. 1. Guessing game questions aren’t practical Consider Stack Exchange’s first rule of questions not to ask: You should only ask practical, answerable questions based on actual problems that you face. Chatty, open-ended questions diminish the usefulness of our site and push other questions off the front page. A half-remembered description of something you vaguely recall is not what I’d call a practical, answerable question. Unless the asker has demonstrated a practical reason they need to find this, documented that they’ve invested substantial effort in finding it, and given us something concrete that provides us with a reasonable chance of actually guessing the answer — it’s simply Not a Real Question. At best it is a game show trivia contest. 2. Guessing game questions don’t help others Because these questions are based on vague, broad, half-remembered descriptions, it is unlikely anyone else will be able to find them through a web search. I have a difficult time imagining how you’d construct a web search, either on Google or via Stack Exchange’s built-in search, to find something that you can’t fully articulate. What’s even worse is that these questions, by their very nature, will contain a bunch of broad, speculative “maybe it’s like…” catch-all terms that are likely to trip up future visitors who end up there by accident. Consider the example of Netstorm: Islands at War, a game so apparently difficult to remember that our gaming site contains no less than three exact duplicate identify-this-game questions about it: Help identify a real time strategic game taking place on flying islands (September 18, 2010) What was the Win95-era game based around floating cities and shield defense? (July 1, 2011) Looking for an old PC strategy game, with world hanging in the air/clouds (July 27, 2011) The goal of Stack Exchange is not to construct un-findable single-serving questions that only help one person, but that’s exactly what guessing game questions tend to do. 3. Guessing game questions are unfair If we allow vague and insubstantial questions, we are explicitly opening the door to “do my work for me” questions (or worst case, Yahoo Answers) — no need to expend effort, do research, provide examples … just explain in vague, broad terms what it is you partially remember and we’ll do the rest of the hard work necessary to figure it out for you? That’s a dangerous precedent to set. It is disproportionate and unfair to the experts on the site. Also, an expert in the topic should be able to have at least some confidence that the answer he’s writing answers the question. Take that away, and you’re left with questions that don’t know what they want, and answerers throwing guesses at it hoping one will stick. “Is it mentor?” Nope, try again! “Is it Star Fighter XXIV: The Star Fightening!” Sorry, go fish! 4. Guessing game questions aren’t educational I understand that it’s sometimes fun to guess what someone is thinking of. I also appreciate that it takes a lot of expertise and deep domain knowledge to take a vague, half-remembered description and nail the exact thing. But I would also argue that these questions aren’t educational in any way, because there’s no way to learn about the process of discovery. A particular community member, by virtue of their experience in the field, just happens to be able to take the limited information you remembered and fill in enough of the blanks to guess the correct answer. I urge you to click on the guessing game tags yourself and take a long, hard look at the artifacts these guessing game questions are producing. After a year I am convinced that guessing game questions do not meet our goal of making the Internet better. Quite the opposite, in fact. and when your site’s most popular tag is “book-recommendation”, there are perhaps deeper problems to contend with."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/02/24/stack-exchanges-greatest-hits/","date":"2012-02-23T23:00:00.000Z","tags":["Community"],"title":"Stack Exchange’s Greatest Hits","text":"We have a lot of Q&A; sites in the Stack Exchange network now. 84 at the current moment. That’s … a lot of Q&A; sites. But most people* don’t find us by browsing the site directory; they find us by encountering a Stack Exchange page in their web search results. So that may lead you to wonder: what are the most freqently found questions on a given Stack Exchange Q&A; site? In other words, the “Greatest Hits” of that particular topic. (Trivia: did you know that the Eagles’ Greatest Hits doesn’t include their most famous song?) How do we, as community members, tell which questions are getting the most airplay, are the figurative “Bicycling’s Greatest Hits” or “RPG’s Greatest Hits” of our community? We have a page for this: stackoverflow.com/questions/greatest-hitssuperuser.com/questions/greatest-hitsserverfault.com/questions/greatest-hitsgaming.stackexchange.com/questions/greatest-hitsaskubuntu.com/questions/greatest-hitsapple.stackexchange.com/questions/greatest-hits Yep, just add /questions/greatest-hits to the address bar of any Stack Exchange site. The [Greatest Hits page] divides the number of page views on a question by the total amount of anonymous question and answer feedback received (adding a bonus for high view counts). We exclude questions with less views than the median view count for the entire site. For better or worse, these questions are what the world will see and remember your site for, and a big reason why popularity can be surprisingly troublesome. We haven’t been publicizing the Greatest Hits page much to date because it relies heavily on a feature we only introduced about 6 months ago: anonymous user feedback. If you visited a Stack Exchange question as an anonymous user, there wasn’t much you could do other than answer it. So we added a feedback option under each post. What we quickly learned is that anonymous users aren’t particularly, uh … talkative. Statistically speaking, they very rarely click these feedback buttons — and when they do, it’s often because the post itself is getting a lot of views. So you need quite a bit of time before you can even begin looking at anonymous user feedback, and it’s frequently only useful on large sites, or the super popular questions. We now have a reasonable amount of anonymous user feedback after 6+ months. Enough to take action. We ought to be looking at the Greatest Hits for our sites every so often and actively tending to these highly visible questions and answers — because they truly represent how the world sees your site! I sometimes go through and “touch up” the questions on the Greatest Hits list to make sure they’re as great as they should be. I’d encourage everyone in the community to do the same. Periodically check the Greatest Hits and see if these questions should represent what your site is all about; edit, vote, comment, and flag to ensure that the quality and relevancy of these questions and answers is making your site look as great to the outside world as you know it is. Remember, if you’re not careful, you could end up like Chuck Berry — a rock legend who will forever be remembered for his only number one hit … “My Ding-A-Ling”. this is hardly new news, but for the year of 2011, Google delivered 91% of all incoming traffic to Stack Overflow. It’s not quite as high for Stack Exchange, “only” around 70-80%."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/02/18/stack-exchange-open-source-projects/","date":"2012-02-17T23:00:00.000Z","tags":["Background"],"title":"Stack Exchange Open Source Projects","text":"While we decided a long time ago that we wouldn’t be open-sourcing the core Stack Exchange Q&A engine, we do try very hard to open source as many useful parts of our code as we can. As Stack Overflow is one of the most prominent Microsoft .NET-created sites for software developers in the world, we feel that it’s part of our mission to help lead fellow .NET developers — and the most effective way to do that is by contributing some of the code that we use to build Stack Overflow and Stack Exchange back to the greater .NET developer community as reusable open source packages. This isn’t just a fundamental part of every Stack Exchange developer’s “be more awesome” plan, it’s an explicit goal embedded in the very DNA of the company. In fact, over the last few years, we’ve contributed a number of useful open source projects back to the world: Dapper Dapper is, quite simply, the world’s most elegant .NET micro-ORM™. We created Dapper out of frustration with all the existing .NET ORMs that were out there. It is the simplest and fastest thing that works, the thinnest sensible layer you can put over your database without getting all Enterprisey(C) on you like, uh, some other ORMs. It is a shining example of the KISS (Keep It Simple) and YAGNI (You Ain’t Gonna Need It) principles in action. If you need to access a SQL database from .NET, try it out. You just might fall in love with it. Read a bunch more about Dapper over on Sam’s blog. StackID On Stack Exchange, you can log in with any OpenID provider and any OAuth 2.0 provider, including Google, Facebook, Yahoo, and so on. But as of May 2011, we also issue our own credentials for those people who want to have a traditional username/password arrangement. StackID is the .NET OpenID provider we created, so we can be both an OpenID consumer (we accept all OpenIDs, as well as OAuth 2.0 where available) and an OpenID provider — that is, we issue our own OpenIDs that are valid on any website that accepts an OpenID. This in turn is based on the excellent work of the open source dotNetOpenAuth library. MiniProfiler Here at Stack Exchange, Performance is a Feature, and we found the absolute best way to emphasize our shared family value of performance is to keep webapp performance numbers front and center in every .NET developer’s web browser. Yes, even in production. If you are a developer you’ll see a little number in the upper right hand corner on every single Stack Exchange page you load — that’s how long it took to render the page. And it’s a one click operation to drill down, two clicks to take those performance numbers and share them with blame them on someone else on the team. It’s a wonderful system that I can’t recommend highly enough to every .NET developer who works on a webapp. If that’s you, go download it. Now. Remember, we use .NET partly because it really is blindingly fast, but all it takes is a few lines of errant code to throw all those performance benefits (and more) in the toilet. So download and use MiniProfiler to make sure your fast code stays fast! MarkdownSharp and PageDown Markdown is, of course, the simple plain-text-alike markup language that we use throughout Stack Exchange for formatting. But we have to convert it from “raw” Markdown to “cooked” HTML and that takes code. We provide two implementations, for server-side C# Markdown use MarkdownSharp and for client-side JavaScript real time Markdown preview use PageDown. I did a lot of the work on MarkdownSharp, but Ben did most everything on PageDown and is now officially maintaining both of these. Since this gets asked all the time, yes, it is legal to mix HTML of any kind within Markdown. MarkdownSharp and PageDown don’t do any cleanup of the HTML, they only guarantee that valid Markdown will be converted to valid HTML for display purposes. You must bolt on your own HTML sanitization to taste. If you’re looking for basics, start with this C# sanitization routine and this tag balancing routine. They are mostly loops and regular expressions, so trivially translatable to most languages. Booksleeve Redis is our in-memory key-value store of choice. We started out using it just a little, but now it’s become an absolutely critical and totally indispensable part of our infrastructure, much like HAProxy. We use Booksleeve for pipelined, asynchronous, multiplexed and thread-safe access to Redis via our C# code. Performance here is beyond critical, as we talk to Redis from every web server constantly, and we’ve been through several passes of refinements and improvements already. If you, too, need an in-memory key-value store for your .NET webapp, consider the Redis and Booksleeve combination we use. Works great for us! Data Explorer Everything contributed to Stack Exchange is under a Creative Commons license. Stack Exchange Data Explorer is the open source .NET tool that we built so anyone can browse and analyze our creative commons data via standard SQL, at data.stackexchange.com. So if you’re looking for a highly flexible, general front end to a bunch of SQL data, SEDE is your huckleberry. For more, see the blog entries we wrote about it. Protobuf-net This is technically something Marc Gravell created before he joined Stack Exchange, but we use protobuf-net extensively (and AFAIK exclusively) for high performance, compact serialization of .NET objects before storing them — and I daresay that our heavy use has driven the current version of Protobuf-net to be at least 3x as awesome as it would otherwise be. I don’t think you’ll find a faster and more elegant .NET serialization library in the world. ServiceStack.Text This is part of Demis Bellot’s excellent open source Service Stack REST web service framework. And again, something that he created before he joined us at Stack Exchange. We switched to ServiceStack.Text for all our .NET JSON serialization duties a while ago because it was blindingly fast, much faster than any other JSON serializer we could find for .NET. All of Demis’ open source work is of similarly high quality. And that’s not all! There are a few more awesome bits of our infrastructure we’ll be open sourcing later this year, and someone (sadly, not me) will update this post to include them too. If any of this looks useful or interesting, please check it out! And if you have the time or inclination, contribute patches and forks back to the greater community. I know we will!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/02/15/so-you-want-to-be-a-developer-part-1/","date":"2012-02-14T23:00:00.000Z","tags":["Company"],"title":"So You Want To Be a Developer (Part 1)","text":"A few months ago we had James Portnow of Extra Credits on the podcast. We’re huge fans of everything that they’re doing over at Extra Credits, so when they asked us to help them write an episode on programming, we jumped at the opportunity. Here’s the link: Extra Credits: So You Want To Be a Developer (Part 1) If you’ve never heard of Extra Credits, it’s a weekly show about the video game industry from the perspective of people who actually work in it. It’s a fascinating look into game craftsmanship — not just how video games are made, but what makes them work, what games do well and not so well, and the effects that they have on people. They talk a lot about about game elements and using them for good and not evil, which is something that we think a lot about with Stack Exchange. The episode we helped them write is called So You Want To Be a Developer. It’s part of a loose series of episodes on the jobs involved in making games and how to be awesome at them. They’ve previously done episodes on game designers and producers, and wanted to do one on developers but didn’t have any direct experience with development. That’s where we came in. The episode ended up being a two-parter, because apparently we gave them way too much material to fit into one episode. You can check out part 1 now, and come back next week for part 2. Are you interested in working in the video game industry? Check out the game development openings posted at Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/02/10/survey-results/","date":"2012-02-09T23:00:00.000Z","tags":["Background"],"title":"2012 Stack Overflow User Survey Results","text":"In December 2011, we launched the 3rd ever Stack Overflow Annual User Survey to measure changes in user demographics and trends from last year. First, a big thank you to everyone who participated, and now on to the results! View the survey results Demographics Let’s start off with some basic demographics: the majority (50.3%) of users are between ages 25-34 and very experienced (64.3% of users have 6+ years of programming experience). So, where do all of these developers work? The percentage of developers working at a start-up remained strong with 30.7% of respondents. We then took a look at salary by company size, and, not surprisingly, users who work at larger companies tend to make more money. Knowledge The top 5 languages users reported knowing were: SQL, JavaScript, CSS, C#, Java. Coincidentally, the most common projects were “Web Platform” at 37.1%, followed by “Enterprise” at 24.4%. We dug a little deeper to see if language knowledge impacted salary, and it certainly does. There is a strong correlation between number of languages known and a higher salary. Mobile On the mobile front, smart phone usage showed a dramatic increase. In particular, Android usage actually surpassed iPhone usage with 48.0% of respondents saying they own an Android phone as compared to 34.1% who own an iPhone. Last year, the iPhone was the most popular device (34.3%) and Android trailed in second place (30.4%). RIM’s Blackberry continued to fall out of favor with only 6% of respondents owning one. Reputation Last year, many of you asked to segment the data by reputation, so here goes. First we segmented all of the respondents into three reputation groups and then we cross tabulated the results to see if there were any differences in these groups. You can draw your own conclusions from the table below, but higher rep users tend to be older and more likely to be happy in their jobs than those with little or no rep (however we can’t quite go so far as to say that the WAY to be happier in your job is to spend more time earning rep on Stack Overflow). If you’d like to receive the entire data set, download them from here. If you’re looking to put your SQL, Javascript or other language skills to work, check out Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/02/08/stack-exchange-keyboard-shortcuts/","date":"2012-02-07T23:00:00.000Z","tags":["Community"],"title":"Stack Exchange Keyboard Shortcuts","text":"Scott Hanselman’s article about keyboard shortcuts and web sites reminded me that I inexplicably forgot to blog about our very own totally awesome set of keyboard shortcuts for Stack Exchange! While we haven’t yet integrated keyboard shortcuts into the core site, the Stack Exchange Official Keyboard Shortcuts browser script is explicitly supported and actively maintained by us (mostly through the hard work of Ben and Rebecca). If you’re a website keyboard type of guy or gal, give it a shot. There’s a nice, friendly tag wiki on how to install browser scripts on the Stack Apps scripts tab, but for convenience I’ve included the direct links to install below: click HERE to install with update check – regularly checks for an updated version of this script and notifies you if one is available. Requires localStorage. click HERE to install without update check After installing (and possibly restarting/refreshing), pressing ? should get you started. There are lots of other cool Stack Exchange scripts on Stack Apps, and of course we have a full-blown API for accessing Stack Exchange sites that just went to version 2.0. Check ’em out!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/02/07/farewell/","date":"2012-02-06T23:00:00.000Z","tags":["Company"],"title":"Farewell","text":"Stack Exchange co-founder Jeff Atwood announced that he is leaving the company to spend more time with his family, including his twin daughters Maisie Jane (5lb2oz) and June Adeline (5lb 7oz) who celebrated their 0th birthday (and joined Twitter) last Friday, to the great joy of their parents. It has been a great honor for all of us to have worked with Jeff over the last four years as Stack Exchange grew from absolutely nothing to a world-changing resource with over 30 million monthly visitors. When I first met Jeff, I told him that when Stack Overflow was built, it would become a standard part of the programmer’s toolset… as important as an editor or a compiler. I’m not sure if he believed me at first. Heck, I didn’t believe me. But I’ll never forget the day it shipped, in August 2008, and I tried to ask my first question (something about a regexp for a URL that omitted the trailing dot) and found that it had already been asked, and answered, multiple times, and people had already voted up the best answer, and I knew right then that I hadn’t exaggerated. And now it has been years since I’ve met a programmer that doesn’t know and love Stack Overflow, and none of it would have been possible without Jeff’s amazing contribution. The company has changed a lot in four years: we’ve gone from nothing to 50 employees; we raised over $18 million in venture capital to fund our next expansion; we have a network of 80 Q&A; sites on topics from LEGO to cooking. That the company will continue to flourish in his absence is no doubt a testament to the great work Jeff did creating an institution dedicated to principles of making the Internet better. Farewell, Jeff, we’ll miss you."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/02/03/stack-exchange-api-v2-0-no-longer-beta/","date":"2012-02-02T23:00:00.000Z","tags":["API"],"title":"Stack Exchange API V2.0 No Longer Beta","text":"We’ve spent the last month polishing V2.0 of the Stack Exchange API in a public beta, and I’m happy to announce its final release. Kudos to those who have reported bugs, and made quality suggestions during the beta. At this point the interface to V2.0 is frozen, only bug fixes and performance improvements will be deployed until the next revision. As always, if you build on our platform we will support you so V2.0 will be around as long as it sees significant use. You’ll find our revamped documentation portal at: api.stackexchange.com Alongside the documentation for every method, you’ll also find a test console for rapid experimentation. Try out the console by finding Jon Skeet’s most recent comment. We’ve also thrown together a minimalist Javascript SDK for consumers that just want to use the new authentication features. Although the beta is over, the contest continues. You have until the end of February to list any application or library on Stack Apps to be eligible, and you can continue to hunt the (now rather elusive) bugs left in the API. Some Neat Apps That Are Already Available StinkingBadges, created by agent86, lets you see your progress towards some of the harder Stack Exchange badges. It’s a good example of filling a gap, rather like StackPrinter from V1.0. Stack Alert, created by George Edison, takes advantage of the headlining authentication feature of V2.0 to give you access to your Stack Exchange inbox right in your browser. While decidedly utilitarian, it is already available for Firefox, Opera, and Chrome. StackGeography, created by patridge, plots where on the globe new questions are being asked. Not entirely unlike our own monitor wall, but built on top of the public API. While it’s only half-way through the contest, I’m pretty pleased with what I’ve seen thus far. Of course, there’s plenty of time left to create an application. If you’re interested go read the read the documentation and register your application."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/01/31/the-trouble-with-popularity/","date":"2012-01-30T23:00:00.000Z","tags":["Community"],"title":"The Trouble With Popularity","text":"Way back in 2008, we had Alexis Ohanian and Steve Huffman, the founders and co-creators of Reddit, on the Stack Overflow podcast. We chatted about a bunch of stuff, but one of the things they said that always stuck with me was that Reddit always took an explicitly hands-off, no moderation approach to their content from the very beginning. I found that a bit shocking, since I’ve… never seen that work. Certainly on Stack Overflow and Stack Exchange we are very much pro-moderation — and more so with every passing year. We have literally hundreds of community moderators. We spend a ton of time appointing and electing moderators, as well as conducting weekly moderator chats in the Teacher’s Lounge chatroom, and emailing all our mods a monthly moderator newsletter. The Reddit founders maintained that evil things which require active moderation didn’t happen too often, provided you build the right kind of community voting and flagging mechanisms. I can agree with that. We’ve found that to be true on Stack Exchange as well. It’s almost enough to make you a believer in the fundamental goodness of human beings. Almost. But there’s a deeper, more insidious problem that creeps into systems when the community is unmoderated. Stuff like, say, compilable James Bond Java ASCII art … … or mountain-climbing Skyrim horses and wounded Skyrim NPCs with vivid imaginations. Let us not forget the classics, either: What’s Your Favorite Programming Cartoon? What’s Your Best Programming Joke? What Real Life Bad Habits Has Programming Given You? … and so, so many more. These sorts of posts are wildly popular with the community. The cartoon question alone had over a million views by our extremely strict view counter — which easily translates to at least two million views, possibly three million. We don’t hate fun here, but we discovered that these posts become so popular over time that they truly start to drown out everything else on the site. Ironically, the Reddit community itself now recognizes that [moderation is fundamental and essential](http://www.reddit.com/r/battlefield3/comments/lv3un/can_we_please_not_turn_this_subreddit_into_a/ ): One thing thing that does concern me, however, is that [as this subreddit gets more popular] the amount of image macros, memes, rage comics and generally low-quality content hitting the front page has grown to annoying proportions. The problem with image macros and rage comics (besides generally lacking wit or anything genuinely insightful) is that they’re quick and easy to digest, and thus tend to get upvoted faster than self posts and actual discussions which take thought and time before an appropriate response can meted out. If you’re not careful you end up with something akin to /r/gaming, which is now a burbling, deformed wreck of its former self, with anything remotely resembling intelligent discussion being buried under a sea of vacuous meme-repetition. In my view what this subreddit needs is a touch more moderation to ensure that we don’t end up with a front page full of imgur/memegenerator links, and that people who want to use this subreddit as a medium to discuss the [topic] can do so without having to sift through the crap with a shovel. This is as clear a call for active moderation as I’ve ever seen. And the moderators, to their credit, took charge and instituted changes to help guide their community away from the fatty junk food content: We’ve heard your concerns over the direction the community is heading. We were hoping we could ride it out and things would balance themselves, but it just isn’t working, and things need to change. It’s plain to see that meme-based content attracts many upvotes, and we all love a good laugh, but it is not what we want this community to be. But this isn’t just about memes, it’s about the general tone of the community. We’re making changes to our rules for posting, commenting, and voting here — necessary changes to make [this] the community we first envisioned. This community is for sharing thought-provoking stories, high-level tactics discussions, videos/images of the awesomeness of [topic], suggestions or discussions on mechanics, and it can all be done without resorting to memes or complaining. Reddit never ceases to amaze, I expect to be surprised! If you have any questions, message the mods! We hope you agree and understand these changes. We know that closing the cookie jar is painful. We feel your pain. Nobody likes having their fun taken away. But it’s too addictive and too easy, and in the absence of any moderation, the community would do nothing but add and upvote the easy, fun stuff. This is why community moderators have real power; they need that power to intervene, educate, and refocus the community’s exuberance on more substantive content. People will fight you almost literally to the death over their right to be entertained, and to entertain others: Why can’t you just not look at these fun posts? Why do they have to be deleted? You guys suck! The same reason the moderators and community on that subreddit didn’t decide to “not look” at the fun posts, really: Broken windows. Every ‘fun’ post users see is an open invitation for them to participate in the fun by adding their own fun question or answer. The stuff spreads like kudzu! Pretty soon the entire site is overrun with nothing but that kind of fun. And even if you grandfather a few in, you’ll enjoy neverending requests asking why their fun question or answer has to be removed, while this one over here is allowed to remain. Opportunity cost. Every minute spent participating in an entertaining ‘fun’ post is time that someone could have spent asking or answering a substantive question, something practical that solves an actual problem for hundreds or thousands of people. Entertainment, within reason, is by no means a bad thing — but I experience almost physical pain when I think about a brilliant topic expert spending 10 minutes on one of our sites deciding which hilarious cartoon is their favorite. Popularity is a tough thing. I’m tempted to call it a curse, but what we try to do at Stack Exchange is make sure that questions and answers are popular for the right reasons — because they are amazing resources for learning from your peers. If you want to slip a few jokes in there with the learning, that’s fine, but when the question devolves into little more than entertainment, I hope you can understand why our community moderators are obliged to step in and protect the community from, well … itself."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/01/26/welcome-valued-associates-anna-rachel-carleejean-and-charles/","date":"2012-01-25T23:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associates Anna, Rachel, CarleeJean and Charles!","text":"Anna Lear is joining the Stack Exchange Team as a Community Manager working remotely from Ontario Canada. Many of you may know or recognize her from her role as a Programmers moderator, and – most recently – Stack Overflow moderator. Anna is a software developer and a longtime SO user. In her spare time she writes code for fun, plays video games, occasionally acts on stage, and tries to carve out time to learn guitar as well. The Stack Overflow Careers Sales Team welcomes three new members to Stack Exchange’s NYC office! Rachel Boyman was born & raised in Michigan. Rachel has a background in media and she loves to read books, magazines and newspapers the “old school” way. In her spare time, Rachel enjoys travelling, especially to Michigan games (Go Blue!), practicing yoga and exploring NYC. CarleeJean Cook originally hails from Denver, so needless to say she’s an avid skier. Although she’s quite cooped up in NYC’s concrete jungle, CarleeJean makes the most of her time indoors; she’s a conferences/professional events junkie and has taken courses to become a wine sommelier. During the summer months, CarleeJean loves living on the Jersey Shore. New Jersey born and raised, Charles Bernoskie spent his college years in Washington D.C. playing baseball for Georgetown University. When he’s not at work or spending time outdoors, Charles loves reading reddit and also epic fantasy series novels. Charles is particular about his beverages, preferring black coffee and craft beers. Welcome Anna, Rachel, CarleeJean and Charles!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/01/16/stack-exchange-data-explorer-2-0/","date":"2012-01-15T23:00:00.000Z","tags":["CC Wiki Dump"],"title":"Stack Exchange Data Explorer 2.0","text":"It has been a year and a half since we launched Data Explorer. In the past few months Tim Stone (on a community grant) and I have pushed a major round of changes. Thanks Tim! Recap on last years changes Since we publicly launched data explorer, the most notable change contributed back from the community was support for query plans, big thanks to Justin for submitting the patch. We also added quite a few bug fixes/features, mostly around merging users. Some features were added to defend data.se against an onslaught of public queries. A few features were added to support non Stack Exchange data dumps, most notably a system for white listing. Our very own Rebecca Chernoff ported Data Explorer to ASP.NET MVC3 amongst many other fixes. The current round of changes offers some very cool new functionality, which is worth listing: Query revisions When we created Data Explorer there was no way to track a query’s “lineage”. This was particularly problematic because we had no way of updating featured queries or shared queries. Even I complained about this on meta. The new pipeline works just like Gist, you can track the history of your query as you are editing (attributing the various editors along the way): You can link to a specific revision, or simply share a “query set” by using the permalink. By sharing a “query set” you can later on fix up any issues the query has, without needing to update the link. The new pipeline allows you to “fork” any query created by other users and tracks attribution along the way. Graphs We added some basic graphing facilities, supporting 2 types of line graphs: The first type is a simple graph, where the first column represents the X-axis and the other columns the data points. For example: a graph of questions and answers per month. The second type is a bit trickier, it unpivots the second column in the result set. For example: a graph of questions per tag for top 10 tags. Huge open source upgrade Data Explorer consumes a fair amount of open source libraries. In the past year and a half many have evolved. We took the time to upgrade them all. The excellent Code Mirror was updated to the 2.0 version, the new version no longer uses messy iframes. Marjin wrote a great post explaining the changes, a fantastic read for any JavaScript developers. SlickGrid, which in my opinion is the best grid control built on jQuery, was upgraded to version infinity. 100% more Dapper Dapper our open source micro ORM is the only ORM Data Explorer uses. We took the time to port the entire solution to Dapper. I even added a few CRUD helpers so you are not stuck hard coding INSERT and UPDATE statements everywhere. Data Explorer is a good open source example of how we code web sites at Stack Overflow. It is built on our stack using many of our helpers. Dapper and related helpers are used for data access. It uses the same homebrew migration system we use in production and an interesting asset packaging system I wrote (for the record, Ben wrote a much more awesome one that we use in production, lobby him to get it blogged). It also uses MiniProfiler for profiling. MiniProfiler is even enabled in production, so go have a play. Lots of smaller less notable fixes We now have a concept of “user preferences”, so we can remember which tab you selected, etc. We remember the page you were at and try to redirect you there after you log on. We attribute the query properly to the creator / editor from the query show page. You can page through your queries on your user page. Support for arbitrary hyperlinks Revamped object browser, you can collapse table definitions Lots of other stuff I forgot You too can run Data Explorer At Stack Exchange we run 3 different instances of Data Explorer. We have the public Data Explorer and a couple of private instances we use to explore other data sets. The first private instance is used for raw site database access. The other is used to browse through our haproxy logs. There is nothing forcing you to point Data Explorer at a Stack Exchange data dump, the vast majority of the features work fine pointed at an arbitrary database. Hope you enjoy this round of changes. If there are any bugs or feature requests please post them to Meta Stack Overflow. Data Explorer is open source, patches welcome. Do you enjoy exploring and mining data? Discover new job opportunities using big data on Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2012/01/16/state-of-the-stack-2011-a-message-from-your-ceo-2/","date":"2012-01-15T23:00:00.000Z","tags":["Community"],"title":"State of the Stack 2011 (a message from your CEO)","text":"2011 was another year of fantastic growth at Stack Exchange. We continued our tradition of doubling every year, going from 16 million to over 32 million monthly visitors. We added 42 new sites, bringing us to a grand total of 78. We hired 22 new employees, and raised another $12 million in venture capital, some of which was invested in a remote-controlled, floating shark and clownfish for the office. We’re now ranked #160 on Quantcast, which makes me wonder if maybe our big goal of becoming a “top 50 site on the Internet” was perhaps not ambitious enough. And the question and answer quality throughout our network is still rock solid, with 93% of questions getting at least one upvoted or accepted answer. Anyway, we did one of those fun infographics you kids like so much, to highlight some of the accomplishments of the last year in vivid color, so check it out for more details."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/27/stack-exchange-api-v2-0-public-beta/","date":"2011-12-26T23:00:00.000Z","tags":["API"],"title":"Stack Exchange API V2.0 Public Beta","text":"More than a year and a half ago we unveiled the first version of the Stack Exchange API to the wider world. Since then we’ve had a minor point release, improved app and script listing, and shared some statistics about the consumers of our API. I’ve been pretty pleased with version 1.1, stackexchange.com and our chat software make extensive use of it, there are a good number of useful applications listed, and a couple of parties are pulling interesting statistics out using it. It’s been a success, but the shine’s definitely come off; there are some use cases we didn’t support, some missing features, and just some plain-old mistakes. That’s why I’m pleased to announce… The public beta for Version 2.0 of the Stack Exchange API We’ve been consuming this internally for a bit, and a rather low-key private beta has been going on for the last few weeks. With any luck we’ve flushed out any really bad bugs and functional deficiencies. If you want to hop right in, go take a look at the documentation and then register an app. Just like last time, we’re running a contest to encourage some applications that exercise the sweet new features in V2.0. First Prize For the most awesome application, you’ll get an iPad 2. Second Prize Second place will get an Acer Aspire One. Third Prize For third place, a 160 GB Intel SSD. Library We’ve tried to make the API easy to understand and use, we’re aware of the great advantages of wrapping some complexity away in a library. Building an awesome library makes it easier for future developers to get up and running against our API. The author of the best library will get a Kindle Fire. Bug Reports Even if you don’t have any app ideas, and can’t afford to invest the time needed in building a full library, you can still participate in the contest. Each bug you find makes the API a little bit better for the rest of the community. Those who we feel have contributed substantially to the quality of the API with their bug reports will get to choose between a Kindle Touch 3G, or a Lilliput Mini USB Monitor. The Rules Contest open to every man, woman, and child on planet Earth, except those men, women, or children living in places where contests like this are somehow illegal. Only applications and libraries/wrappers listed on the apps tab of stackapps.com are eligible for consideration. The application or library/wrapper must be written using our API, and work against all of our sites. Libraries must expose all available methods in the API in some fashion. I’d advise comprehensive examples to make it clear you’ve covered everything. While we do have a prize to recognize the best library/wrapper, to be eligible for the first 3 prizes you must build an application. If you live in an area of the world where it is logistically impossible for us to get your prize to you — like, say, because your nearest Apple retailer is 3000 nautical miles away — we’ll make something work. Your app must work against the final, 2.0 released version of the API. The “beta” moniker will have come off the API before the contest ends. If your app depends on an app store for distribution, you must have some way of getting the app to us to judge if it is not yet approved when the contest ends. We’ll contact you to get a copy, but you’ve got to get our notice first so put some real effort into your Stack Apps post. We’ll be judging apps based on how awesome and useful we, the rapidly increasing employees of Stack Exchange, find them. The library prize will be chosen by the development team, and who knows we may pull it into our projects (as Stacky, the previous winner, was into stackexchange.com). While we don’t care about platform, we do care about documentation and examples, so make yours exemplary. The bug report prizes will be sent to anyone we feel went above and beyond in finding bugs in the API, there’s no limit to the number of people who may win. All entries must be listed on Stack Apps by 11:59 PM UTC February 29th, 2012, we’ll be judging entries in the first few weeks of March and announcing winners subsequently."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/25/intro-to-chaos-promotion-seminar/","date":"2011-12-24T23:00:00.000Z","tags":["Company"],"title":"Intro to CHAOS Promotion Seminar","text":"CHAOS is a fast-paced, high-energy team that concentrates on finding new ways to promote Stack Exchange sites. So when the Stack Exchange moderators asked for some help with their grass-roots promotions, we decided to publish a series of posts outlining our most successful efforts. These posts should be helpful to any users who want to promote their own Stack Exchange community. To kick off this “promotion seminar” series, here is a summary of previous projects, lessons learned, and links to more information. Sponsoring (or Crashing) Events When you hear of an interesting event related to your site, get out there and talk to people! Interact with them face to face. It will give you a chance to explain what Stack Exchange does and help spread some of your enthusiasm for the community. NYC Lightsaber Battle (for SciFi): Yes, this happened. We gave away Jedi robes to 35 lucky winners, and everyone there received Star Wars-themed stickers with SciFi questions on them. Rock ‘n’ Roll 10k (for Fitness & Nutrition): We set up a booth, handed out Fitness-branded water bottles and nutrition bars, and brought a massage therapist to give the runners a much-deserved back rub at the finish line. The Stack Exchange Fitness tent attracted a large crowd, which gave us plenty of time to talk to people and take their pictures with Bubbles, the Stack Exchange mascot. Comic Con (for SciFi and Gaming): A band of CHAOS agents (Bubbles included) took NYCC by storm with more Star Wars stickers, SciFi and Gaming-branded stickers, and limited edition t-shirts. Virtual Berry Tasting (for Cooking): Sounds weird right? Actually, it was brilliant! Driscoll’s Moments did a cooking demo and streamed the event so that other berry fans around the country could participate. It was a great way to bridge online and offline communities and introduce Seasoned Advice as a resource for chefs. Important lessons: consider how you are going to capture the attention of the people at the event. Bubbles is great for making people curious enough to stop and talk to us, but there are also other (smaller) things you can do to get attention. The Star Wars stickers and nutrition bars were effective because we had the audience in mind when we got them made. Also remember that the end goal is to drive users to your site. All the swag we give away is branded, and whenever someone wants their picture with Bubbles, we give them a card with our blog url so they can come check it out later (and visit our site in the process). Surfing an Excitement Wave At the beginning of November, everyone in the Gaming community was really excited about the back to back launch of two epic games: Call of Duty: Modern Warfare 3 and The Elder Scrolls V: Skyrim. We capitalized on that excitement by throwing a launch party on behalf of Gaming.SE to see which game generated the most interest. We converted the Fog Creek cafeteria into a gaming hub with food and commentators, and streamed it live. Oh, we also crashed (and filmed) the midnight releases of both games. Important lessons: Capitalize on events that excite your community – it’s a great opportunity to build up a body of questions that will be popular in the coming weeks. As people start to search for these subjects, the depth of questions about them on your site may attract some awesome new users. The Modern Warfare 3 vs. Skyrim promotion is our best example of riding a wave of excitement, and we’re working on new ways to adapt this tactic for other sites. Sponsoring Blogs and Inviting Reviews If there is a Stack Exchange site about a topic, there’s certainly an online community about it somewhere. If you want to reach these people, a few good places to start are the blogs and online magazines they read. We’ve sponsored and been reviewed on several blogs – Young House Love (for DIY), Grammar Girl (for EL&U), and American Stat. News (for Cross Validated) to name a few. Important lessons: Do your research. Choose blogs that are related to your site and familiarize yourself with their content. Make sure the blogger accepts sponsorships, and focus on people who have medium-sized followings so they’ll pay attention to you. One effective method of reaching bloggers is to offer something that benefits the author. The interview on American Stat. News is a great example of this – they published it for free because Cross Validated was useful for their readers. As with any other promotion, remember that the goal is to get new users. So when you sponsor a blog, make sure you have a hook to draw their readers to SE. Don’t just throw an ad up on the blog. Send intriguing questions to link to or interview the blogger beforehand and have them link to that. Put the interview on your site’s community blog and it will act as a gateway to Stack Exchange. Random Acts of Internet Kindness A great way to win people and influence friends is to give back to the people that make your field great. But it’s not always easy to do what we like to call random acts of internet kindness, so here are a few examples… Give out swag Site-specific swag, to be exact. Talk to the community, ask what would be useful, and then get it for them. Connect people When you know someone who needs help and you know someone who can help them, play matchmaker. The Stack Exchange Beta Tester Matchup Program is a great example of this. But you can make efforts to connect people on a smaller scale – like getting an expert to answer someone’s burning question. Make people feel important This is related to the blog sponsorship idea, but it warrants another mention because you can do it without any money. It can be as simple as retweeting or leaving a comment on a blog. If you make enough contact with someone, they’ll start to learn who you are. This is only a brief glimpse of what CHAOS has been up to for the past 5 months. I hope these examples inspire you to launch a few promotional projects of your own. If you have any ideas for promotional events, let us know. We plan to profile more ideas and delve deeper into specific events and promotions, so check back!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/23/earned-a-stack-overflow-gold-badge-badges/","date":"2011-12-22T23:00:00.000Z","tags":["Background"],"title":"Earned a Stack Overflow gold badge” Badges!","text":"After much anticipation, we are happy to announce that our friends at Nerd Merit Badges have created a Stack Overflow GOLD Badge. That’s right: If you’ve earned one of our virtual gold badges on Stack Overflow, you’ve put a lot of work into doing something awesome. We give you flair so you can direct people around the Internet to your profile and show off all the badges you’ve earned, but we wanted to enable you to show off your accomplishment in real life, too. It’s not all fun and games, though; John and Randy point out that this badge comes with responsibility: …this badge comes with a job: if you see someone wearing this badge, it’s your duty to ask them how they earned it…And if they can’t answer you, you’re standing face to face with EVIL. Evil that didn’t EARN the badge, and has no right to wear it. So go ahead: treat yourself to a little extra something this holiday. You look good on Stack Overflow, and now Nerd Merit Badges have made another way that Stack Overflow looks good on you. (Haven’t earned a gold badge on Stack Overflow yet, or are not a Stack Overflow user? Fear not! Head over to Stack Exchange’s online shop for SE fan patches. Or, if patches aren’t your thing, check out t-shirts, stickers, mugs and more!)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/23/stack-exchange-gives-back-2011/","date":"2011-12-22T23:00:00.000Z","tags":["Background"],"title":"Stack Exchange Gives Back 2011","text":"I’m sitting up late this evening trying to think of an inspirational way to end this year with some grandiloquent statement about our growth and the great job everyone has done this year. I don’t know; maybe it’s the glow of the Christmas tree behind me, or the eggnog recipe I’ve been experimenting with… but, really, anything I can say here can only lessen the outpouring that comes following this… Greetings to the Stack Exchange Moderators, In a yearly tradition at Stack Exchange, we set aside this time of year to make sure we are “giving back” to effect positive change in the world. As a moderator, you play such a crucial role in our success, and we would like to include you in that effort. As a small gesture of thanks, we would like to make a $100 donation to charity on behalf of each community moderator. The link below leads to a brief form where you can select which charity you wish to receive the donation. Select Your “Giving Back” Charity It is my hope that, together, we can continue this tradition year after year — and with 220+ moderators, that donation will only continue to increase. So, thanks to everyone who participated in Stack Exchange. Thank you for generously contributing your time, your passion, and your leadership, all of which made these donations possible. – The Stack Exchange Team We started with 12 moderators, then 130 — and now on behalf of the 228 moderators of Stack Exchange, we made a donation to the following charities this holiday season: Unicef — $2,800 Doctors Without Borders — $10,900 Wikimedia Foundation — $7,000 Amnesty International — $2,100 We also want to give back to the people, tools, and projects that inspired us and helped us build this Stack Exchange Q&A network: W3C Consortium — $1,000 WordPress Foundation — $1,000 WikiMedia Foundation — $1,000 CentOS — $1,000 Linux Foundation — $1,000 Internet Archive — $1,000 Creative Commons — $1,000 DotNetOpenAuth — $500 OpenID Foundation — $1,000 OpenSTV — $1,000 Lucene.Net — $1,000 Electronic Frontier Foundation — $1,000 The notes returned in kind — the notes of “thank you” and heart-warming well-wishes — are a great way to end the year knowing that sometimes you just get it right, and that what you do matters. Let me end this year by extending a sentiment from the “giving back” letter to you, the users of Stack exchange: Thank you for generously contributing your time, your passion, and your knowledge, all of which made this fantastic resource possible. Cheers! – The Stack Exchange Team Coming up next: 2012. Stay tuned."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/20/gaming-holiday-promotion-hat-dash/","date":"2011-12-19T23:00:00.000Z","tags":["Company"],"title":"Gaming Holiday Promotion: Hat Dash!","text":"To celebrate the holidays, Gaming Stack Exchange is throwing a little holiday party — specifically, a Hat Dash: Between December 16 and January 6, users can unlock hats for their gravatars on gaming.stackexchange.com by asking and answering questions, voting, sharing links, etc. For more info, read the full blog post: Holiday 2011 Hat Dash: The Hattening There’s also a related contest around the release of Star Wars: The Old Republic with some cool hats and prizes. Why Hats? Well, once you see it in action you realize that those gravatars are basically begging for cute little hats. But video games have a long history of vanity items, and a few years ago Team Fortress 2 really brought hats to the forefront. Since so many Gaming users play Team Fortress 2, hats have become something of a meme on the site. Why Gaming? Gaming has been one of the top Stack Exchange sites in the network for a while, and really took off a month ago with the release of The Elder Scrolls V: Skyrim. Since the holidays are traditionally a big time of year for video games, we thought we’d put together a fun little promotion to try to bring in some new questions and users. And who knows? If it works well, there’s always the possibility of hat-related promotions on other sites (where appropriate!). I hate hats Then this promotion is not for you! Just click the “I hate hats” button at the bottom of every page on the Gaming site to make them go away. I hate video games Well, then… try one of the other 70+ sites! I love video games and hats! Then come to gaming.stackexchange.com and ask or answer some questions! You’ll earn your first hat in no time. But hurry up: after January 6th the site returns to a strict no-hat policy."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/15/own-your-community-2/","date":"2011-12-14T23:00:00.000Z","tags":["Community"],"title":"Own Your Community","text":"Each of our 73 sites has a common goal: to own their community. Taking ownership means (in part) figuring out how to promote the site, make it attractive to newcomers, and make the awesome content and community even more awesome. While we have internal- and external-facing teams of employees to help with this, Stack Exchange is fundamentally driven by the people who use it. Here are a couple of ways that two Stack Exchange communities have come up with to improve their sites.** Answer-a-thon! One of the things we pride ourselves on is the ridiculously high answer rates on our sites. (Some other sites won’t publish their answer rates.) This doesn’t just magically happen, though. It takes a concerted effort by dedicated users. Travel Stack Exchange users held an answer-a-thon event on Halloween to clean up the site’s unanswered questions. What’s special about this approach is that – though they did knock their “unanswered question” count from 19 to 0 in a single evening – they also encouraged users to add new information to already answered questions to keep them fresh and relevant. To create a little camaraderie in the cleanup event, there was a simultaneous chat event, which was announced in the answer-a-thon meta post. Some people might view a list of unanswered questions as a tedious chore, but if you know that friends will be around in chat to keep you company as you work through that list, it makes the task much more enjoyable. And hey, you might get to meet some new interesting people you might not otherwise have interacted with! Since the first event was successful, the Travel SE community is doing it again this month. They are also taking this model and applying it to other housekeeping tasks that can be key differentiators between a good site and an awesome site: for example, the community is now working on sorting out tags and has an ongoing call to fill out tag wikis. (Bonus points if your call to action includes a custom graphic with photos of company founders.) Topic Challenge The Jewish Life and Learning community employs a unique means of encouraging a stream of new topics: their weekly topic challenge. It’s simple, yet effective: users propose topics on meta, which are voted up or down based on what other users would like to answer, and the week’s topic is announced through a separate meta thread every week. Choosing a new theme each week is a tactic that works. I know that, personally, there are sites where I’d love to contribute more, but sometimes coming up with a question can be tough. These topic prompts can break this writer’s block and nudge users into articulating what it is they want to ask. Trying to come up with a single question among the many possibilities of a site’s scope is overwhelming sometimes. In summary, these are two great methods that any Stack Exchange site can adopt to improve their site and strengthen ties among users: Turn housekeeping chores into a party by encouraging users to be in your chat room during the concerted effort at [X activity] – for technical support, discussion of site-related issues, or amiable chatter to help pass the time. Adopt a “Topic Challenge” to encourage a continual flow of new content about interesting topics. Do you participate on a Stack Exchange site that has come up with some good ideas to promote or improve the community? Let us know in the comments if you have great examples that can inspire other users! ** These two are examples; many of our sites have run successful initiatives that they started with little or no help from Stack Exchange employees. But let’s be honest: this post would be far too long if I listed every great thing initiated by each of our sites. Note: The proper method of promotion for these community-inspired initiatives is each site’s meta, or (if the site is graduated) by generating community ads. System messages are inappropriate for announcing a recurring event and should be reserved for truly important, rare occurrences like moderator elections or site maintenance."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/14/come-here-often/","date":"2011-12-13T23:00:00.000Z","tags":["Background"],"title":"Come Here Often?","text":"The holiday season is upon us, and as another year comes to an end, it is Stack Overflow Annual User Survey time again! So, take a break from wrapping gifts and come tell us about yourself. We promise it will only take a few minutes of your time. Of course, as the “annual” implies, we’ve been running a survey for a few years now, including last year’s survey which marked the first time the anonymous data was formally used in support of selling advertising on Stack Overflow and Server Fault. This data is an important part of keeping the lights on around here, and, as a user of either of those two sites, or any Stack Exchange site for that matter, we ask you to participate. For the fine comrades who continue to support us, you’ll find that this year’s survey is similar to last year’s, but with some important updates made to the technology references and a few items of particular interest to users looking at the data. For example, upon several suggestions we’ve added a question measuring reputation for those respondents with an account, using ranges, to make sure things stay anonymous. Also, with developers in high demand, we’ve added a few questions related to our Stack Overflow Careers service and even one shameless plug for Stack Overflow users who have not yet created a programmer profile. As in previous years, we are promoting the survey via banner ads like the above on Stack Overflow and of course right here with this blog post. The survey will be open until we get to enough responses to be deemed statistically significant, which will probably take about 3,500 responses, but of course the more the merrier. Finally, we will be sharing the results in a blog post, and giving you the opportunity to sign up at the end of the survey to receive a copy of the final results via email. So, please take the survey now, and bask in the simple pleasure of checking one more item off your holiday shopping list."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/12/protect-intellectual-property-but-not-like-this/","date":"2011-12-11T23:00:00.000Z","tags":["Community"],"title":"Protect intellectual property – but not like this","text":"Last week, there was a lot of hubbub on Meta Stack Overflow about a system message that ran on Stack Overflow. The system message read: SOPA is a dangerous law. It breaks the Internet and threatens sites like Stack Overflow. Protect the Internet! For the intents and purposes of this post, let’s bypass the controversy surrounding whether or not this is an appropriate use of system messages and simply focus on the important parts: why SOPA and PROTECT IP are bad news for Stack Exchange, the United States, the Internet, and the world. First off, if you’ve got a brain for legalese, you can read the full text of the bill here. The whole thing is very dense and fairly difficult to summarize. People far smarter and better informed than I have already tried, so I will let their work speak for itself: I recommend that you start with the 2-page summary by the Center for Democracy and Technology. Fight for the Future has put together a video that is only mildly propagandist. The Electronic Frontier Foundation has a treasure trove of great articles on the topic for you to get lost in for days. These are only a few of the many resources that you can use to get educated on SOPA/PROTECT IP. Give it a spin around the Googles and you’ll find plenty of information to keep yourself busy. So why are we so up in arms about this? Stack Exchange’s mission is to try to make the internet a better place and SOPA and PROTECT IP do the opposite. Despite _saying _that their mission is to protect intellectual property (supposedly without damaging the series of tubes we all call home), it’s pretty clear that the proponents of these bills are not particularly interested in remembering that last part when they’re swinging a giant banhammer at YouTube. The bills threaten the internet free speech it facilitates in the interest of “protecting” a a tiny portion of companies. Since the bills threaten the internet, they threaten Stack Exchange’s mission. They also have the potential to threaten Stack Exchange directly. Our sites collect and aggregate user-generated content. Under the new laws, the burden would be on the company to find a way to monitor every single piece of content that is posted on any site on the network to screen for copyrighted material. If something got through – say, an illegal YouTube clip from a popular film on our new public beta Movies site – we would be subject to all the terrible implications of the new measure. Under the current DMCA system, YouTube would simply pull the video, or maybe ban the user who posted it. SOPA and PROTECT IP would put Stack Exchange at risk for simply linking to the video – despite the fact that it was actually posted on a different site entirely. SOPA and PROTECT IP wouldn’t make the internet a better place. The bills are harmful to the internet as an economy and an ecosystem, and they aren’t fair. SOPA goes up for debate and markup on December 15th – that’s this coming Thursday. That makes right now the perfect time for U.S. residents to contact their representatives in Congress, and for everyone around the world to keep spreading the word. Let your representatives (and the world!) know how you feel about the potential plan to break the internet."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/09/the-stack-big-board/","date":"2011-12-08T23:00:00.000Z","tags":["Company"],"title":"The Stack Big Board (with Video!)","text":"Anyone who has seen pictures or video from our office in the last few months has probably noticed a small addition in the form of five large screens mounted in the middle of it. The screens came about when we were first hiring CHAOS and realized that we wanted an easy way to visualize and display relevant information (or play video games) during the day. The first iterations where a bit, um, crazier (as evidenced by this rendering that we cooked up). Eventually though, we decided that we needed something that fit in our 8′ ceilings and could be seen by everyone. And so our current version was born (technically, this is version 2.13 – the first version had all 5 monitors oriented in portrait, but we realized that 2 in portrait and 3 in landscape was better). Amazingly, this is actually a relatively easy system to build out. Using truss is also much simpler than wall mounting as aligning the monitors is much easier and the freestanding structure can be moved around to make wiring/adjustments much easier. There are two pieces of 2 meter box truss that make the main upright supports (and each have one of the vertical monitors mounted to them) and one piece of 3.5 meter ladder truss that makes up the span holding the three landscape monitors. All of the TVs are hung directly to the truss using O-clamps (which are secured to the TVs using standard M6 bolts). Wire management is also pretty easy as all of the wiring is run directly through the truss or ziptied to it. So what makes up the Big Board? 5x Sharp PN-E471R 47″ Professional Monitors Milos M290 12″ Truss A custom built PC with 3x Nvidia GTX 580 Graphics cards A Logitech K400 Keyboard w/ Built in Touchpad And what do we run on it? (From Left to Right) Monitor 1: Whatever is current and relevant or general office info Monitor 2: Traffic stats Monitor 3: The CHAOS Trello Board Monitor 4: Careers 2.0 Tracking Monitor 5: Employee Chat Both the traffic stats and Careers 2.0 boards were built using Geckoboard, a service that lets you easily build status monitors (just connect it to your relevant accounts or provide it with feeds from your database and it handles making it look great). You can also check out this video of Joel and I talking about the board and showing off what it can do."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/08/dont-be-afraid-to-use-the-science/","date":"2011-12-07T23:00:00.000Z","tags":["Community"],"title":"Don’t Be Afraid to Use The Science","text":"I saw an interesting Battlefield 3 question on gaming a few weeks ago. I’ve recently unlocked the EOD bot, and while playing around with it (and being hopelessly ineffectual with it) I’ve noticed that after I have driven a certain distance away I will return back to first-person view. Running towards the EOD bot will allow me to take control of it again. How far can I drive an EOD bot away from me before I lose control of it? I play Battlefield 3! Extensively! I’ve used the remote control EOD bot before, but I have no idea what its maximum range is. I’ve never lost control of it. So I could have answered … When I play as Engineer, I’ve never lost control of the EOD bot. Are you sure you’re not doing something wrong? … and that is true, insofar as my in-game experience goes, but it’s kind of my opinion, isn’t it? I was curious myself. How would one figure out the actual range of the bot? I decided the only way to definitively answer this question was to: Start Battlefield 3 Pick the biggest map I knew of Spawn as an Engineer Deploy the remote control EOD bot Drive the bot as far as I possibly could So I did. Which took a solid 15 minutes of my time at least. After doing this I belatedly realized that I had just run a science experiment. Stack Exchange just trolled me into doing actual science. For a freaking game. Wow. Consider the implications. Now, if only we could harness those powers for something useful, right? Well, take a look at this Super User question. When programs are minimized in Windows 7, do they use less memory and CPU than leaving them maximized? The highest voted answer has an official Microsoft Knowledge Base article backing it up, but it’s quite old. Other users dispute whether it’s correct or not. Anecdotally, I’ve read other blogs confirming the behavior described in that MSKB, but a long time ago. At least that answer has a citation backing it up; many of the other answers on the question are little more than opinions. And you know what they say about opinions. Opinions are like … beautiful flowers, everyone has their own favorite. Super User is a technical site for computer geeks; we should be able to do better than a bunch of opinions and a smattering of links. A lot better. As a fellow Super User, I decided the best way to tell what’s going on here was to … Start a common program Do something typical in it Check Task Manager or Process Explorer to see how many resources the program is using Minimize the program Check Task Manager or Process Explorer to see how many resources the program is using … so I did. And I edited the highest voted post to include the results of my little science experiment. We do what we can to help new users understand how to base their answer on something other than an opinion by popping up this little help text when they start composing an answer: Thanks for contributing an answer to {sitename}! Please make sure you answer the question; this is a Q&A; site, not a discussion forum. Provide details and share your research. Avoid statements based solely on opinion; only make statements you can back up with an appropriate reference, or personal experiences. To learn more, see our tips on writing great answers. While we don’t come out and say it quite this way*, the best answers — not just on Stack Exchange, but to any question in life — should probably involve a little bit of science. * but maybe we should"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/08/se-podcast-30-robert-cartaino-rebecca-chernoff/","date":"2011-12-07T23:00:00.000Z","tags":["Company"],"title":"SE Podcast #30 – Robert Cartaino & Rebecca Chernoff","text":"Guests this week are Robert Cartaino and Rebecca Chernoff. Yeehaw! They’re members of our Community Team. The original Joel on Software forums were sort of a progenitor for Stack Overflow. They had strict rules: nothing off-topic was allowed – and discussing the forums themselves was off-topic. So a Joel on Software Off-Topic discussion group was created for all of That Stuff. Joel’s forums are still going strong! What happens if we let a community go on forever? If it’s stagnating or not really growing, it’s not necessarily making the internet worse. It’s just not doing anything. Right? But think about something like an eHow, that has low quality pages that still rank higher for most queries than other pages with real, good information. The Community Team does evaluations of the quality of sites, but they are beginning to make that process transparent to the communities or even have their communities do the checks. Or potentially to hire really deep experts now and then. Or both? What if we have the best site on the web, but it’s for a terrible topic? For example – what if horoscopes.stackexchange.com was the best darn horoscopes site out there. Does the topic still make sense on our engine? This is why proposals are examined so thoughly in Area 51 (and its respective discussion section). If you haven’t checked Area 51 out recently, you should stop by – there are lots of cool improvements that have been made. Robert, Jeff and Rebecca discuss the newfangled Area 51 process, and what sorts of mysterious things happen to a site when it spends its “week” in Private Beta. Sometimes proposals fail and get closed. Game of Go was one of them. It got shut down, but its questions and its users got migrated over to Board Games – which is one of the ideal ways to handle having a young site shut down. Another positive way to handle the shutting down of a site is to let its users regroup in Area 51 and try the proposal again with a different approach. “Wouldn’t it be simpler to just create a catch-all site, answers.stackexchange.com, and split off topics as they grow large enough for their own sites?” Basically, there is no way to grow acommunity through this method, since all the people there would have nothing in common. A counterexample is the split between Stack Overflow and Programmers – but that wouldn’t have worked with someone just asking a question about hardwood flooring on Stack Overflow and having it turn into Home Improvement. Really good moderation is key to everything. There are 260 moderators on the whole network! We start to identify moderators a few weeks into a site’s private beta by looking for active meta participants, editing to improve content, voting to close – doing activities other than simply asking and answering questions. This does not necessarily mean that the moderators must be the highest-rep users! That’s like asking your grandparents to be ushers at your wedding. Rebecca tells us about the changes that were made to the Stack Overflow election system for the recent moderator election. It involves badges. Learn more about elections! The Android elections are going on now. We hold chat-casts with moderators every few weeks to open a channel between the Community Team and the moderators. There’s also a monthly moderator newsletter with highlights of important announcements. That’s so people can get the 5-6 things they need to know without having to be too deeply ingrained in the moderators’ chat room or in metas. Meta Stack Overflow is to the federal government as individual site metas are to state governments. It’s possible to spend most of your time on your local site government, and the newsletter will keep you apprised of the changes on the national level. Moderation and meta activity are huge parts of why Stack Exchange is so awesome, but we can’t forget that it’s the amazing Q&A engine that makes all that awesomeness possible! That’s it for Podcast #30, which is it for podcasts in 2011. See you next year!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/05/free-vote-based-advertising-launches-fourth-round/","date":"2011-12-04T23:00:00.000Z","tags":["Community"],"title":"Free Vote-Based Advertising Launches 1H 2012","text":"For almost two years, we’ve reached out to our programmer communities to support open-source projects. Free Vote-Based Advertising for Open Source Projects It’s time once again to publicize your favorite open-source projects in need of programmer assistance. Every six months, we accept new submissions for free open-sourced advertising to be served in an ad slot on Stack Overflow. The program is simple: Create a 220 pixels by 250 pixel image ad and submit it to the Open Source Advertising – Sidebar. If it receives at least 6 votes, it will be served up to the community! The rules are listed on the site, so please read them carefully before submitting. Submit your ad and vote here! Then, visit the ad summary page and mouse-over the ‘view stats’ link to see how each ad is doing. Congratulations to ELMAH and JS Studio for earning the top votes in the last round! The next round has already begun, so drop by our Graphic Design site and brush up on your image manipulation and illustrator skills. There are a lot of open source projects that need your help to bring them some much-needed publicity! And don’t forget to come back often and vote for the newest entries."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/12/02/the-best-of-blog-overflow-november-2011/","date":"2011-12-01T23:00:00.000Z","tags":["Company"],"title":"The Best of Blog Overflow: November 2011","text":"Ah, it’s that time again — time to recap the best posts from this past month on our Blog Overflow sites. The last time we did this, we featured some really cool posts from all over. This past month, we had even more really awesome posts. We didn’t have over 9000 of them (though one can dream) but still. Lots. Geographic Information Systems I unabashedly called out GIS in the last post, and GIS totally rose to the challenge. Or maybe they just had an entry in the wings. Either way, their entry, It’s all about the data was a thought-provoking entry whose value goes well beyond map-making, with a message that programmers and UX designers and even DIYers can appreciate. Yes [the new map] was beautiful, she said, but not as good as the old one. I was shocked. I’m sure my mouth hung open. You see, one thing we’d done all those years before, with equipment that had less computing power than today’s phones, was add place names. Lots and lots of place names, based on local knowledge. Oh. Our new maps don’t have those. CS Theory I mentioned off-hand that CS Theory has a blog, and in November they provided this interesting entry (note: it’s quite technical!) about quantifier elimination. On its face, it was not even clear that the problem (non-negative rank) was decidable, let alone solvable in polynomial time. But on the other hand, they observed that previous work had already shown the existence of an algorithm using quantifier elimination. Ankur was a little taken aback by the claim, by the power of quantifier elimination. He knew of the theory somewhere in the back of his mind, in the same way that you probably know of Brownian motion or universal algebra (possible future topics in this “Something you should know about” series!), but he’d never had the occasion to really use it till then. I’m going to be honest: despite my math minor, I didn’t fully grasp this entry. It’s also only half the story, which doesn’t help. However, it’s written in a really accessible style, and there’s a lot of really interesting work linked to in this entry. I could very easily see this entry being in a professional periodical within the field, as an overview and “walkthrough” of the subject. Even with the gaps in my knowledge, the polish in this entry was obvious, and so I felt it deserved some spotlighting. TeX This past month, the TeX (pronounced like “tech” for those unaware) blog interviewed one of their top users, lockstep. The interview itself is long but really interesting; he talks about his vocation, his work with TeX, and why he uses our TeX site. It’s absolutely worth a read, even if (La)TeX isn’t necessarily immediate in your life. Paulo: As Joseph mentioned, you are the biblatex expert and the one-man tagging machine on TeX.sx. How did you become aware of this community? lockstep: I occasionally peruse comp.text.tex via Google (I do not participate, though). There was a post about a proposed stackexchange group dealing with TeX, and (half a year later or so) another post that the private beta had started. I decided to give tex.sx a try – it was already in public beta then. The rest is history. English Language & Usage We’ll finish on something a bit more lighthearted: Our English Language blog’s so cool! I’ll read it and learn a new ruleOr other awesome thing That I can then bring To the “Best of Site Blogs” pool! Or, if you prefer: We have here an awesome blog post That could teach one to be the toast Of any cool parties And seem a real smartie, While staying refined, unlike most! Two things that can indicate a good grasp of a language, at least in the case of English, are the abilities to pun and to rhyme. Punning is probably more difficult than rhyming, since it requires not only a good grasp of pronunciation and a swift vocabulary, but also knowledge of the meaning of a great many words and idioms. One of my favourite British pastimes that involves a lot of rhyming and occasional punning, is that of writing limericks. There you have it — a nice assortment of awesome entries from BlogOverflow. Don’t get me wrong; these aren’t the only entries posted this month. Gaming, for example, had a number of really interesting entries this past month, covering everything from videos about game launches to ruining a good game with background “music”. And, as before, if your community’s blog wasn’t featured this month, there are two options. Either post more (I’m looking at you, Cross Validated!) or just wait — I’m doing my best to feature different blogs each month. Happy readings! And, be sure to comment on these entries. Even something as quick as, “Great entry!” means so much to the writers. It’s like upvoting, but with more keystrokes."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/30/question-closed-and-its-probably-best-that-way/","date":"2011-11-29T23:00:00.000Z","tags":["Community"],"title":"Question [Closed]… and it’s probably best that way","text":"If you’ve poked around our network, then you’ve probably noticed that we hate fun at Stack Exchange. Hard-line Q&A is in our evil DNA. And you know what, I kinda like it that way. But I haven’t always been onboard… Flashback to late September, when I asked the following question at our Skeptics site: New York pizza is the best pizza, sure. But is it really because of “the water”? I would link you to the question, but it no longer exists; it wasn’t just closed, but deleted forever by a moderator because the question did not improve the Internet. Or maybe it was because the question was “extremely off topic,” or because it was based on a false premise, or maybe because I did not prove with a hyperlink that anyone, other than myself, actually believes NY pizza is the best in the world. In any case, my lazy grab at an objective answer for a subjective question is now banished to the sewers of the Internet where only one of our savvy devs can retrieve it. It’s probably best that way. But at the time, I thought the moderator might have closed my question because of his own personal taste. His surname is spelled with double consonants and ends in a vowel. He must be, I thought, a hardcore pizza traditionalist. But now I know he’s just a good mod. I know this because the Skeptics site works. It is one of my favorite sites in the network. But I also know this because I’ve seen the light. Even as my questions continue to get shut down across the network, I’ve come to realize that the conservative school of community moderation is the right school of community moderation, at least for Stack Exchange. When Joel & Jeff first sat around the campfire and dreamed up Stack Overflow, they did so with an insight in mind: They weren’t going to just create a forum where a user can receive an answer. SO (and later, SE) would be a platform to encourage intelligent, invested answers deserving of links across the Internet and useful for generations to come. Too local? Take it to Yelp. Too easy? Take it to Google. Too subjective? Take it to Quora. Too fun? Take it to Facebook. Stack Exchange is about objectively correct answers that stand the test of time. There is little room here for questions that ask for something less correct or less permanent. Of course, this focus on “canon” — a word we find ourselves using a lot around here — has its drawbacks. Try promoting Stack Parenting to moms who want to share personal insights about child rearing. Or try selling the Bicycles site to an overwhelmed blogger who seeks for his readers an online outlet where they can continue “the discussion” he started at his own site. Stack Exchange can do little to instantly appease these Internetters. And that makes my job hard. But the toughest jobs are very often the most rewarding. (My job does kick ass.) And the most rigorous answer is very often the most helpful. (See here for just one of countless examples.) Hard human work isn’t necessary to participate in Stack Exchange, but power users and bursts of focused use are the biggest assets we’ve got. Which brings me to yesterday. It was late afternoon. The sky was gray. And I watched over Joel’s shoulder as he personally closed a question that was causing some buzz at the Travel site. Joel said the question was crude and intentionally provocative. I suggested maybe there wasn’t enough information available to make an assumption about the user’s intentions. Joel said maybe, and he proceeded to close the question. I swiveled back to my desk and got back to whatever it was I was doing. We’re pretty serious at Stack Exchange. And I’m pretty sure we’re better off because of it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/30/se-podcast-29-chris-poole/","date":"2011-11-29T23:00:00.000Z","tags":["Company"],"title":"SE Podcast #29 – Chris Poole","text":"Jeff and Joel are joined today by Chris “Moot” Poole, founder of 4chan and Canv.as. It’s a wide ranging discussion from internet memes and tropes to the danger of the SOPA bill that is currently making its way through the house. We need a number display like they have in delis. If anyone out there can get us one on the cheap, Joel would appreciate it so he can always know what podcast number we’re on. Canvas is re-imagining a message board, because the aesthetic of forums hasn’t changed in a very long time. It’s got a focus on remixing and collaborating images. It’s similar to 4chan but interestingly, Canvas requires users to authenticate their login using Facebook to deter trolls, but still allows pseudonymous and anonymous posting. 4chan is weird. Stuff doesn’t last very long there – there’s no archive. Moot gives us a brief history of 4chan and how and why he started it. Its a fast way to get a message out to thousands of people because every post starts out as position zero on page zero. That’s why 4chan has a reputation for “porniness” when that actually represents a small percentage of the content that ends up there. (See the Greater Internet Fuckwad Theory.) Most of the internet’s memes originate on 4chan. They make the internet! The memes migrate to Reddit, where they move to the greater internet as a whole. 4chan and Reddit (and Tumblr and Twitter) reflect a recent trend away from text and toward images, short-form text, short videos, etc. So! Canvas! It’s a real venture-backed company. It’s not going to serve display ads (unlike 4chan which has only been monetized by banner ads). Shifting gears to talk about SOPA/PROTECT-IP. Hollywood wants it, and they spend way more money on campaign financing than the tech industry, so legislators are going to pass it. Hollywood wants the ability to go after ISPs who are resolving DNS entries to overseas sites, which is stupid because the workaround for that policy is simple. It wreaks havoc on the existing DMCA provisions for protecting copyrighted content online. A long, long time ago… people tried to sue telephone companies for allowing calls in which illegal things were discussed. That was ridiculous, and the phone companies were ruled to have no liability for how their channel is used. That’s the precedent that the internet operates on today. Joel describes the current provisions outlined in the DMCA that give copyright holders and websites ways to enforce copyright in a fair way that punishes only the infringer, not the website. It’s demonstrative of the fact that Congress is run by corporations currently; the only things that gets passed are things that companies want passed. Example: pizza is a vegetable. Two important books to read on the topic: Republic Lost and Master Switch. You can also read Larry Lessig’s post on why he’s focusing on trying to reform the whole system Go to americancensorship.org to learn all about SOPA/PROTECT-IP, and what you should do to get involved. (Hint: in the U.S., it involves contacting your representatives.) It’s likely to come to a full floor vote soon, and we need to stop it. Add your name to the list Senator Ron Wyden will read during his filibuster of the bill. We come back to 4chan, where we learn about moderators, janitors, and on-topic-ness rules on the various boards. People apply to be moderators on 4chan, so it’s self-selecting. Chris is on Twitter, as are 4chan and Canvas. Also be sure to check out canv.as and 4chan… but don’t do that last one at work."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/23/se-podcast-28-brent-ozar/","date":"2011-11-22T23:00:00.000Z","tags":["Company"],"title":"SE Podcast #28 – Brent Ozar","text":"Jeff & Joel are joined this week by Brent Ozar, database wizard who has helped tons of companies (including Stack) with their massive scaling needs. The Spanish site is live! It’s sort of strange having a site about learning one language be conducted in another. With French we decided to let them try to conduct the whole site in French. It’s an experiment! Gaming is having a meteoric rise due to Skyrim. Check out the graphs! (Here they are in the show notes!) Skyrim questions have 1.35 million views in ten days, at time of recording. Whoa! Thanks to badp for posting. Anyway! Brent Ozar is our special guest today! He is a SQL Server Master. He has a blog. He has a talk about SQL tuning and whether or not you should even do it. He summarizes it for us, and the gang talks about SQL tuning, caching, load sharing. XML shredding. You know. Database stuff. At Stack Exchange, and especially with Stack Overflow Careers, we are trying to elevate users and show off how awesome they are. Joel’s been reading up on all the Wikipedia pages on personality disorders. Most executives, especially at startups, are indistinguishable from people in insane asylums, apparently. Paranoia is a particularly common form of mental illness among executives. This is relevant because people often say they won’t send employees to a Stack Overflow event because they’ll get poached! (But it’s probably true.) Feel free to poach Jason Punyon, employers. (Scratch “Punyon” off your Podcast Bingo card.) There’s a post on the Server Fault blog about why Stack Exchange isn’t in the cloud. It’s got a nice discussion about the pros and cons of letting somebody else host your stuff, which the gang explores. Answering questions on Stack Exchange is about doing a little science to come up with a canonical answer instead of just posting opinions. Jeff measured the range of a remote controlled robot in Battlefield 3 so as to be able to answer this question. Jeff experimented with posting a question for someone else on Super User (based on this post)- and it does! Well-written questions get better answers. But we eventually have to teach the person to fish (to write their own well-written question and post it themselves). You can find Brent at his website or on Twitter! (Here’s his video about how Stack Overflow scales with SQL Server.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/21/improved-reviewing/","date":"2011-11-20T23:00:00.000Z","tags":["Community"],"title":"Improved Reviewing","text":"Stack Exchange gets a staggering amount of questions and answers every day. Our goal is not only to provide great answers to the huge amount of questions, but to create awesome gems of knowledge that can be consumed by generations to come. New users on our sites need some extra TLC. Without them we can not grow our communities. However, often they are not aware of the rich formatting capabilities and various rules we enforce. Occasionally, they post “answers” that are not really “answers”. Sometimes they simply do not belong in the community they are trying to participate. Sometimes we are lucky, they are awesome and need to be enticed with a few upvotes. In general, most of the “problem content” our sites is created by brand new users. More than 44% of the flags on Stack Overflow are raised on content created by users with less than 10 reputation. In comparison only 11% of the content is created by these users. Together we can help shape up the problem content, upvote the great new answerers and askers and create a site we are all proud of. There is one big problem though. Janitorial work can be boring. To make it more fun and productive we created the review section. When you gain the privilege to downvote a new review link appears in the header. This new section will allow you to track your review progress, but first you will need to unlock the right to review by gaining the Strunk & White badge. As your suggested edits get approved or you edit posts, we will track your progress towards Strunk & White. Once you have this badge you will be allowed to track your review progress and be a candidate for the new Reviewer badge. You will also be able to track progress towards the 2 voting badges, Civic Duty and Electorate and track progress towards the epic Copy Editor badge. The reason we unlock this section is to ensure all questions and answers are viewed by at least 2 users who are good at editing. This means that we are less likely to get flags stating “please sir, edit this for me” and gives new users a better chance. Once two users with the Strunk & White badge review a post the post will “vanish” from the list. The review section focuses on 3 areas. Questions and answers by users with 10 or less reputation. Questions and answers that are caught by our “low quality” heuristic, this heuristic is not perfect but it finds a fair amount of posts that need editing, voting, commenting and flagging. (10k only) Questions that received close votes. More about this on meta. In the review screen you can choose to filter by tag or time frame. You can also vote, flag, comment and edit without leaving the review section. We have had a very noticeable increase in editing and reasonable increase in voting in the last few weeks. If you have a chance, review a few posts in the review screen. Help us create awesome, clean and useful sites we are proud of."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/16/se-podcast-27-dave-winer/","date":"2011-11-15T23:00:00.000Z","tags":["Company"],"title":"SE Podcast #27 – Dave Winer","text":"Jeff & Joel are joined today by Dave Winer, who’s upset that we don’t have a jingle to start the show! He “invented” (well, pioneered, really) the XML-RPC protocol. Dave tells us the story of how and why the protocol came to be. Right now, Dave’s working on a “magnificent symphony of software” – it’s the communication system he wants to use. It involves a minimal blogging tool with only RSS output (plus a dongle that will push the RSS to twitter, etc), a “River of News” aggregator, and an overarching tool for creating content that can be picked apart and included on other platforms. Dave’s philosophy is that some time soon, users are going to realize that they need a place to build and control their content before they post it to any service or platform that’s controlled by an outside company. The gang discusses the nature of comments on blogs (and on Stack Exchange questions and answers), and how to manage them – or whether to allow them at all. It leads to a discussion of creating new pages on Wikipedia, and its requirements for citations and notoriety. Dave suggests putting together a Best Practices manual on managing your content on the web. He suggests that having as few domain names as possible will help people not lose their content (or break all their links). Jeff suggests that Facebook can be that sort of “repository” for many people, but Dave disagrees. (n.b.: He recently deleted his Facebook account.) Companies don’t necessarily last forever – we’re looking at you, Geocities. (Talk of Facebook inevitably pushes the discussion into the realm of what information websites record, and how, and why – generally as related to advertising.) Services like FedEx and UPS can get you your new Kindle Fire on release day because they’ve cut every possible corner – except for the 1% of people who are not a simple case because they’ve moved, or they need their package on time. That 1% outlier idea can’t be applied to freedom (intellectual, personal, what have you), Dave says. Dave wants to buy a bland, uninvolved service that does nothing but provide the service it says it provides. Amazon was doing a great job of that until they kicked WikiLeaks off their storage. Dave is overlooking that incident for now because there is nowhere else to go that provides the whole package (uptime, reliability, etc). Dave wrote a blog post involving the quote: “If you’re not paying for something, you have no reason to expect it to be there tomorrow.” But does that mean that because you are paying for something, youcan expect it to be there tomorrow? The gang explores this philosophy. Suddenly we’re talking about how Dave believes there is no real hard line between government and business… an issue which cannot necessarily be solved in a 60-minute podcast. Twitter solves the subscription process that RSS has. With RSS, you have to go through a bunch of steps to get yourself subscribed. With Twitter, you just have to click one “follow” button, and you’re set. Joel is considering writing fiction! He likes the medium because you don’t have to tell the truth. You tell the deeper truth by manipulating the superficial facts. The coalition of the users doing stuff together independent of Facebook or Google or what have you is valuable and should be encouraged and protected. It’s a conversation that Jeff and Dave will continue offline. You can find Dave at Scripting News, and you should also check out EC2 for Poets."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/11/elder-scrolls-vs-call-of-duty-livestream-4-est/","date":"2011-11-10T23:00:00.000Z","tags":["Company"],"title":"Elder Scrolls vs. Call of Duty – Livestream @ 4 EST","text":"As you may have noticed, we’re throwing a party over on the Gaming site. If you’re not a gamer, you may not know that two huge games came out this week: The Elder Scrolls V: Skyrim and Call of Duty: Modern Warfare 3. Game launches are always big for gaming.stackexchange.com because they’re a unique opportunity to get Google search result share before it vanishes into the void of vBulletin and phpBB. We wanted to throw a big launch party for this year’s game release season, but we couldn’t agree on which game to pick. So instead of deciding, we made it a competition: Skyrim vs. Modern Warfare 3. Each game gets 7 days from when it launches to rack up as many views as it can. Modern Warfare 3 has been out for 3 days and already racked up an impressive 10,000 views, and is still accelerating going into the weekend. Skyrim just launched today, but is already starting to make its move. To make it even more interesting, we’re giving away cool gaming prizes: free games for the top question and answer in each game, and one Grand Prize of a free console or graphics card chosen from everyone who contributed to the winning game (for more details, see skyrimvsmw3.com/rules). Livestream Launch Party To kick off the weekend, we’re throwing a live party at Stack Exchange HQ in New York. We’ll be live streaming the party and gameplay at skyrimvsmw3.com starting at 4pm EST. You won’t want to miss it. We’ll be featuring: 10 gaming systems, including 2 projectors Live color commentary & interviews by a pair of comedians Music, food, and beverages (not included in livestream) If you’re in New York and want to drop by, shoot us an email at team+gaming@stackexchange.com. Otherwise, tune into the livestream at skyrimvsmw3.com starting at 4pm. Skeptical of our comedic abilities? Check out this video some of our CHAOSers shot at the midnight launch of Modern Warfare 3 to promote the contest:"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/09/se-podcast-26/","date":"2011-11-08T23:00:00.000Z","tags":["Company"],"title":"SE Podcast #26","text":"No guest today. Moot had to postpone his appearance on the show. But David Fullerton is here to hang out with us Jeff is packing up to go on an international trip. He’s going to Øredev in Malmö via Copenhagen and London on British Airways. He will take the train from Copenhagen to Malmö – good choice! Joel is full of handy travel tips. Among them: The chip-and-PIN credit card system is vastly superior to the one we use, which is why it can be tough to get cash overseas! Joel also has packing tips for the cold Swedish weather. Also, freezing eyeballs Per a chat room question: there’s no news on DevDays. Though we did have a vendor offer us a refund on money we didn’t pay, but Producer Alex is too honest for his own good. Also, Future iterations will be closer to the original conference. Stack Overflow is accepting nominations for moderators for the next 6 days (at time of recording). So far, the nominations are civil and intelligent (unlike in the real world of course). The gang talks about other sites/forums/chat rooms from years past that have held elections like ours. There aren’t many! Jeff & Joel discuss what moderator elections mean for a community, why communities need moderators, and what makes a good moderator. David Fullerton is here to provide some insight on what makes a Hot Question on the Stack Exchange homepage… and we realize that an algorithm can never replace a good old-fashioned human moderator. Moderation is incredibly important. Jeff & Joel discuss previous elections, and the lessons learned from them which have turned into requirements for this new round of nominations. There are real-life elections today, too, but the weird off-season ones. “Dogcatcher” and “comptroller”. Leave it to the professionals who read the newspaper and listen to NPR every day! (If you were informed enough to vote in your local elections today, good on you!) The Gaming Stack Exchange is having a massive competition in honor of the launches of Call of Duty: Modern Warfare 3 and The Elder Scrolls V: Skyrim. We want to see which game gets the most views on the site in the week after it was released. There are sweet prizes! Jeff will be shocked if Call of Duty wins this particular contest. David thinks Skyrim is going to win, too. It seems that many people feel this way. Can Call of Duty pull it off? Maybe, if we discover The One Question that gets a million views from Google. Also, we’re having a launch party on Friday! If you’re a gamer in New York and you want to come, send an email to team+gaming@stackexchange.com! We will also be livestreaming the party, where there will be 10 consoles playing MW3 and Skyrim. Stack Exchange and Fog Creek employees will be playing games, having snacks, and asking and answering great questions on the site. Spoiler alert for the first Modern Warfare game: it’s a video game where you die! In the campaign story, you die. You have to, and there’s no way around it. You die! That’s sort of rare. Jeff is off to the airport! Go see him at _Ø_redev! We’ll be back next week at the normal time (Tuesday @ 4pm ET) when Dave Winer (the Podfather) will be live in the studio with us. See you then!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/08/the-art-of-organizing-chaos/","date":"2011-11-07T23:00:00.000Z","tags":["Community"],"title":"The Art of Organizing CHAOS","text":"Three months ago, CHAOS was born unto this world. There were just three of us to begin with, and nobody had any clue what our team was supposed to be accomplishing. Well, that’s not completely true: from Joel’s blog post, we knew that our eventual goal was to grow the Stack Exchange communities past some sort of imaginary tipping point at which they would begin to magically thrive on their own. Easy, right? So imagine for a moment that you’ve been hired as part of a team with this goal. You walk into work on your first day, fill out all your paperwork, get your computer set up with all the stuff you need, and learn all about how to adjust your Aeron chair. Now it’s time to get to work, what do you do first? If you said “Perform a series of competitive analyses on almost all of the sites in the network,” you win! We started out by developing some metrics and completing what we called “scorecards” that analyzed each site’s position relative to other resources about those topics out there on the internet. New members of CHAOS trickled into the office during this process, and once we had completed analyses of an arbitrary a carefully predetermined number of sites, it was time to get down to brass tacks. Joel and Alex looked at the data we’d drummed up during our first few weeks and assigned tasks according to a very simple structure: each member of CHAOS got a site to work with. (We started out with Apple, Gaming, English, Android, DIY and Photography.) The first task was to clean up the titles of the top thousand questions on each site. That was a trivial task that only took a few hours and definitely didn’t make anybody want to stab themselves with a ping pong paddle. With the spring cleaning done, we got down to the experimental work. Our instructions: “Try everything.” We had some money and some ideas, so off we ran. While we certainly haven’t tried everything, we’ve done a lot: engaging twitter influencers with our sites, running contests, doing giveaways, hosting events, convincing people to review the sites, scheduled chat events, “seeding” the sites with questions… the list goes on! Not only that, but we grew to 8 team members, and we each picked up a few more sites. But now that we’ve been at this for a few months, and seen some solid results, we’ve got that itch to try another tack and see if we can do even better (after all, we are all about experimentation). So, starting this month, CHAOS is implementing a new strategy: we’re moving away from the “two sites per person, ready, go” model toward a new project-based approach. We’ve put together some mini-teams who will focus on specific projects, like the fellowship program for academic sites and a delegation to the contingent at Stack HQ that’s working on making the Gaming site more awesome. We’re also maintaining a handful of “midfielders” – a crack team of all-arounders who will apply our tactics wherever they seem to fit best. CHAOS agents who are shifting to other areas will begin to wrap up their current projects and hand certain ongoing ones off to midfielders who are incorporating them into their new workflows. It will be a gradual transition over the course of the next month or so. Since we are essentially making up this process as we go along, this is almost certainly the first of many pivots CHAOS will make. We are, as Joel described, inventing a completely brand new method of community building."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/03/12296496289/","date":"2011-11-02T23:00:00.000Z","tags":["Company"],"title":"People are basically good…right?","text":"Some of you might recall that we’ve been reading Here Comes Everybody, by Clay Shirky. In Chapter 11, he talks about the nature of human behavior: “[People] are basically good, when they are in circumstances that reward goodness while restraining impulses to defect” (Shirky 284). Now, for most of us this feels obvious. It’s intuitive — if you don’t have a reason to act like a good person, why would you? Places like 4chan and, well, any unmoderated internet comment/forum section will literally prove this over and over again. It’s why we have trolls! In all fairness, that behavior results from a combination of no accountability plus anonymity. It’s the GIFT that keeps on giving. That said, this is also a principle that economic game theory proves. When given the option to be honest or to cheat (say, with investments) most people will cheat their clients, because the reward from cheating almost always outweighs the costs. In the short term.. Now, this is true 100% of the time when the game is played in a single round. When you add multiple rounds to this game, the person who will defect won’t do so until the last round. So, in an infinite game, the defecting player won’t act against your self-interest until the end. Except there is no end! So they always act in your interest. I know, it sounds circular, but bear with me. Ultimately, this is, effectively, a model of day-to-day business (and, by extension, social) interactions. No broker knows that the transaction they are handling is going to be the last one. There’s a risk of future lost revenue, even when it all gets discounted and adjusted for time. So how can you make sure that you’re not cheated? Always act like this is this first of multiple rounds, the number of which even you don’t know. Act like your relationship will extend into perpetuity and people will act in their self-interest, which will ultimately also be yours."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/03/the-best-of-blog-overflow-october-2011/","date":"2011-11-02T23:00:00.000Z","tags":["Company"],"title":"The Best of Blog Overflow: October 2011","text":"We here at Stack Exchange love our blogs. Blogs! The way our users can have all that fun that we don’t allow here. Not to mention that Jeff and Joel, and CHAOS all blog regularly. We’ve noticed that our site-specific blogs have some amazing content that just isn’t getting the attention it deserves. Maybe some of you don’t know that we have a Theoretical Computer Science blog, or a Gaming blog. Which is why we’re going to give them a bit of a bump and showcase some of our favorite entries from Blog Overflow. Fitness Fitness has a post that struck a chord with a lot of us: Finding a Fitness Niche. The author shares a story that felt a little too close for comfort; despite having done a lot of different athletic things in his youth, he had trouble finding an activity that both piqued and held his interest. It’s something we think many people, techies and geeks and civilians alike, have trouble with. I’m a nerd. I’ve always been one since I was a kid. I never grasped the rules of sports that other kids just seemed to innately understand. I lacked coordination, strength, and speed which resulted in me being picked almost always last for any kind of team sport. That was a regular experience for me since early elementary school all throughout the end of high school. DIY We here at Stack Exchange have something of a soft spot for DIY Home Improvement. Not only have we had one of their top users guest star on our podcast, but a number of us have asked questions on there. So when the site users finally banded together to get a blog up, well, only good could come of it. Our pick for October is this entry: Romancing the Floor: Saving and Restoring Old Hardwood. This entry is fantastic; lots of photographs, step-by-step chatter about the process, and a lot of honesty about how he went about bringing the floor back from the edge of terrible. Plus, the author has a wry sense of humor — always a bonus. Now we were ready for the next step – the power sander! Now this is a step that, quite honestly, should not be undertaken by the faint at heart, or the inexperienced, when you really care about how the floor ends up looking. In our case, the floor was original 1940 hardwood and we figured a little damage was “character” (hey, at 67 years old, see if YOU look this good!). It’s a good thing we didn’t mind too much because learning how to handle a drum sander takes a bit of getting used to. In a similar vein (and a close second) was this entry about patching drywall and popcorn ceilings. Sci-Fi & Fantasy The Sci-Fi and Fantasy blog did a great entry about the order in which to watch the Star Wars movies. This is one of those questions that causes a great deal of angst amongst Star Wars fans. This [question] got me thinking about more than just how I voted on that one question, but how I vote on a lot of questions. I fully support ever answer I upvote, but in all honesty, most of the answers that I have given the “big up arrow” to were ones I just believed were right. But I wanted to change that. I wanted to actually use the information given to me on this wonderful site and put it to practical use. IT Security Over in Security, we have an entry that ties in very nicely with our most recent podcast: Risk Assessments: Knowing What to Protect. This entry sums up the crux of business risk, and why security is not only relevant to everyone, but also a constant struggle, as epitomized by the recent Sony hack. It may seem a surreal comparison, but data exposure can have an impact as substantial as losing a primary building. A bank without customer records is dead regardless of the cash on hand. A bank with all its customer records made public is at risk of the same fate. Illegitimate transactions, damage to reputation, liability for customer losses related to disclosure and regulatory reaction may all work together to end an institution. Honorable mention goes to their post about password strings, based on the recent XKCD comic. We’re going to be doing a round-up of the best of Blog Overflow maybe twice a month or so. Support these communities by commenting on the entries! And, if your community’s blog wasn’t featured this time, either post more (I’m looking at you, GIS) or just wait — we’re going to do our best to feature an array of topics across all the blogs. Happy readings!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/11/02/se-podcast-25-mark-russinovich/","date":"2011-11-01T23:00:00.000Z","tags":["Company"],"title":"SE Podcast #25 – Mark Russinovich","text":"This week’s guest is Mark Russinovich, from SysInternals.com and now with Microsoft. Chatrooms are chaotic! Jeff mentions that lots of spaces need editorial oversight. A lot of good information is available, but it’s a hard to find it in the disorganizations. It’s a chronic problem. Mark and Joel talk about his command-line work. Mark had to reverse-engineer this stuff, almost from scratch. SoftICE was effectively a device driver that took control away from the OS, when it was active. Mark’s become famous for being a Microsoft hacker (yes they exist) and for his work with rootkits, the problems with which are becoming an epidemic. Mark started outside of Microsoft, but later his company was acquired by them. He’s worked on Vista, Windows 7, and a bit of Windows 8, but is now on Windows Azure. For Azure, an OS for data centers, Mark works for the fabric controller team. Like the kernel in Windows, this defines processes and consumes application xml. Basically, he’s all up and down the stack. One of their biggest concerns is upping consistency, to make Azure the best in the industry. One of the project’s other goals is to have a virtual machine deploy in less than 5 minutes, and update in 2 minutes or less. Right now, those times are 8-9 minutes at the 50th percentile. They’re pursuing a variety of tactics to optimize the boot process. There are lots of moving parts to optimize. It’s a fun project, and it’s all new. Not that many companies can deploy a cloud operating system at such a scale. Investment is expensive, although, as Jeff points out, machines today are more powerful than ever before. Still, although Stack Overflow is ranked #180, getting to #150 requires four times the traffic. Mark points out that yes, you can manage the servers yourself, make the investment, figure out all the parts, and so forth. Or, in nine minutes, you can upload your webapp to the cloud and pay only for what you use. The cloud is best for companies who have traffic in bursts and periodic traffic. Companies where, say, there’s a known holiday shopping rush or other specific types of workload patterns. By contrast, Stack Overflow’s traffic is weirdly predictable. Mark notes that the other benefit to cloud computing is replication; if a disk fails (as 3-5% of them do annually) your data is cloned across the country. Mark wrote a novel: Zero Day, which was published in March. It’s a cyber thriller based around a cyber terrorism plot to bring down parts of the world using malware. It’s readable and got lots of verisimillitude. The sequel, Trojan Horse is set to come out next fall. Right now, while direct attacks are less common, spear-phishing (targeted phishing attacks) and good old exploitation of vulnerabilities in a system are still serious threats. Jeff talks about the back-and-forth about putting anti-virus software on our servers. On the one hand, it’s absolutely necessary, especially as Careers 2.0 has users uploading resumes and CVs onto the server. On the other hand, mention “anti-virus” in a Linux room and be prepared to get laughed out. There’s also a serious performance question there. Everyone should go implement 2-step verification on their email accounts (Gmail account!) right now. Well? Go! Do it now! We’ll wait. Mark says he would separate his password into tiers, with the top tier being ecommerce sites. Jeff says that this is part of why he’s been pushing for third-party sign-ins, where the third party isn’t a bunch of idiots. Mark believes we are converging towards this naturally, with the proliferation of Google and Facebook sign-ins. Joel wonders if maybe there just aren’t that many malevolent people in the world. Mark quickly counters with Facebook’s admission that 600k logins are compromised daily. He also points out that while our security is better (compare XP to Vista or 7’s security hardening) the attacks are more sophisticated than ever. Just look at Stuxnet. Be sure to check out our Security and Writers sites. They’re awesome! Next week’s guest is Chris “moot” Poole, from 4chan and Canvas."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/10/26/se-podcast-24/","date":"2011-10-25T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #24 – Eric Ries","text":"Jeff & Joel are joined this week by Eric Ries, author and expert on The Lean Startup. Topics for the chat include: Jeff Atwood is joining the podcast from his vacation. He has an announcement! He is having twins! In February! This will bring the total Atwood Child Count to 3, meaning they will outnumber the adults. Congratulations, Jeff! Talk of children leads to talk of war which leads to talk of Battlefield 3. The core team spent some time playing today. It incentivizes working as a team! ANYWAY. Eric Ries is our guest today! He’s got a new book out called The Lean Startup. What is a Lean Startup? It’s an analogy to lean manufacturing: a system of management about fast cycle time and building quality in from the beginning. Lean startups take those techniques and apply them to startups, where there are a lot more unknowns about the product and the customer. Eric wants to convince Jeff and Joel not to batch deploy anymore. (We deploy multiple times per day. We have at least one per day, and other than that people can deploy as they see that they need to.) The discussion about the way the teams deploy changes leads to a discussion about unit testing. Joel’s criticism of lean startups: the combination of Lean Startups and the fact that any startup can get a huge amount of funding instantly leads to a lot of startups that seem to “pivot” an awful lot. Color is a classic example of this. Eric reminds us thatwinter is coming for entrepreneurship, and this might not be a problem much longer. What is a pivot? A change in strategy without a change in vision. The key to the analogy is that in a pivot, one foot stays planted while you shift around to a new direction. Innovation accounting is Eric’s alternate accounting system that’s designed to tell if you’re getting close to product market fit. ROI, profitability, growth rates – all the traditional accounting metrics don’t apply at the really early stages of a startup. Joel’s dream for the Stack Exchange Network is medical research. The problem is getting a critical mass of people together to make the site work. Currently, we branch into other verticals via “overlapping circles” – starting out with programmers who also have other hobbies. Gaming is one of the biggest sites that has been created out of the “overlapping circles” theory. It’s likely to be an excellent bridge between the existing community of programmers and civilians who also play games, so we are going to put time and effort into figuring out how exactly to make Gaming more awesome. Eric is Mr. Pivot, so let’s get back to that: Pivoting is not necessarily a mistake. It’s the realization that a strategy that you used to be pursuing is working well for a specific customer base, and that you should pursue the parts of it that work. Gamers tend to pick a certain game to obsess over for a while, so it makes sense for the Gaming Stack Exchange to take a more specific approach to games as opposed to the Stack Overflow generalist approach. If you could imagine having An Encyclopedia Of X, there could be a site about X. (There might not be an encyclopedia on Call of Duty, but there would be one about all games in general.) That leads to the generalist approach, which can get messy, but we allow users to participate in segmenting themselves. Joel has decided to attack the Stack Overflow moderator flag queue. Some things he’s noticed: There is a tendency to pile flags on people that don’t speak English natively. The mental load on a new moderator can be very high as they learn the ropes of how to handle particular types of flags. Handling flags requires a lot of effort and decision from moderators. Joel has an idea on how to handle this! Discussion on moderation and flagging ensues. Eric‘s book The Lean Startup, found on Amazon or right on Eric’s website, peaked at #2 on the New York Times bestseller list! Make sure to join us next week (at the usual time of course) when our guest is Mar Russinovich."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/10/19/se-podcast-23/","date":"2011-10-18T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #23 – James Portnow","text":"Our guest today is James Portnow of Extra Credits. We are also joined in the studio by David Fullerton. James Portnow is joining us! Extra Credits has been a thing for a few years. The idea struck back when James was working at Activision. He wanted to open up the conversation about game development and design to the consumer side, instead of continuing to speak in the industry-centric bubble. At Stack Exchange, we’re trying to make learning fun. All of the gamification that we do on the system is in service to the goal of making the internet a better place for learning. Extra Credits did an episode about gaming addiction, which is related to the reason for the reputation cap on Stack Exchange sites. Stack Exchange has sites for gamers and game developers! The Game Development site is distinct from Stack Overflow because developing a game is a bigger set of activities than just writing code. Gamification is a way to get users to “read the manual”, and get them to the point where they don’t need the gamification aspects anymore at all. Games like Simon and Dragon’s Lair don’t give you any choice or control. Games provide positive simulation in various ways – by feeling like you’re acquiring a skill, by keeping things neat in Tetris, or on Stack Exchange, seeing somebody vote up something you wrote. One Chance is a flash game with an interesting mechanic: it leaves a cookie that prevents you from playing the game again. It’s an interesting concept on the bleeding edge of game design. The dark side of gamification… is conditioned actions that make players continue to play FarmVille, slot machines, some MMOs, etc. Players become aware that they are not enjoying the experience, but they are compelled to continue nonetheless. The danger in the Khan Academy is that for the American education system, this is the way to reduce our budget: have people record videos and have other people learn via these gamified websites. This is James’s concern about the Khan Academy. When gamifying education, everybody should start off at 1 and work up from 1 – not get docked points down from A+ or whatever. You also have to incentivize the class to help get each other’s points up, not just each individual’s own points. A high sense of agency is the sense of having control over your own existence and the world around you. When a student falls behind a little bit and does not feel like he or she can catch back up, they lose their sense of agency, and it becomes a monumental task to get the student back on track. Games teach us that outcome is directly related to our own actions, but with more instant results. (Programming is another way to demonstrate this direct impact.) Joel peeled hard boiled eggs in the Israeli Army, so you can cross that off your Podcast Bingo card. James is the hero in his own story. Games teach you that you can always win, and that nothing is unachievable. We will close on that hopeful note! James can be found @JamesPortnow or @ExtraCreditz on Twitter, or over at Extra Credits. Oh, right, news from Stack Exchange: David, interim CTO while Jeff is on vacation, has no news. Except that we have a mascot now. (David had nothing to do with it.) Also, Jeff will be speaking at Oredev, which is November 7-11, and Punyon should probably go with him. Oh, yeah! We have our own URL shortener! It’s s.tk. Check out s.tk/joel and you’ll pick up the gist. Make sure to tune in next week when our guest is Eric Ries."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/10/18/welcome-valued-associate-peter-grace/","date":"2011-10-17T22:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Peter Grace!","text":"Peter Grace joins Stack Exchange as Sysadmin in the NYC Headquarters, expanding the System Administration team to 3 people. George, Kyle and Pete are working hard to make sure our growing sites continue to make the internet a better place. Pete has been married to his lovely wife Kristy for eight years and they have two sons Nate, 3 and Ben, 1. An avid gardener, Pete has successfully grown pumpkins, radishes, cucumbers, swiss chard, snow peas and more. In his spare time, Pete enjoys playing computer games and guns with George. Welcome Pete!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/10/17/meet-bubbles/","date":"2011-10-16T22:00:00.000Z","tags":["Company"],"title":"Meet Bubbles (The Stack Exchange Mascot)","text":"This past weekend, CHAOS was working the New York Comic Con (NYCC) here in New York City. It was kind of amazing. But CHAOS wasn’t the only one working hard this weekend…. Meet Bubbles, the Stack Exchange mascot! Some of you might recognize her from her cameo on the podcast video stream a few weeks ago, but her official debut was this weekend at Comic Con. We’ll be honest: not everyone here at Global Domination Headquarters was completely sold on getting Bubbles. I’m not naming any names, Joel, but some people just didn’t see the value in it. Well, the joke’s on those people, ’cause Bubbles was a smash hit. CHAOS brought Bubbles to Comic Con with the intention of doing some grassroots promotion efforts for a number of our sites. While Sci-Fi and Gaming were the main focus, GameDev and Stack Overflow also got some time in the spotlight. Aarthi kept referring to Comic Con as “nerdvana,” and the description became more and more apt through the weekend. Cosplayers, comic book aficionados, gamers rooting for their favorite players — the showroom and lobby was a crowded hub of excited fannish energy, and CHAOS was right in the thick of it. We had special stickers and swag to hand out to convention attendees — most of it limited edition, no less, so they pretty much gave themselves away. Since we know our users love freehand circles drawn in MS Paint in #FF0000, we’ll break down the swag for you that way. (Except in more colors — red is hard to see.) Seriously, though, these really did just give away themselves. We had almost a hundred t-shirts to give away at the event, plus several hundred stickers of various makes. By 5pm on Sunday, when the conference ended, we were completely out of giveaways. Every Star Wars, Sci-Fi, Gaming, and Game Dev sticker was gone. We have a few shirts left, but people loved getting limited edition things. The best was seeing how excited people would get when we recognized their costumes, knew the answers to the questions, or wanted to take a picture with them. Basically, the weekend was a blast, and we enjoyed just about every minute of it — especially the parts with the mascot. Keep an eye on the Science Fiction and Fantasy Blog for panel reports, a full convention write-up, and more. For your time: You can see all the pictures of Bubbles and her escapades in the album below, or in this Flickr slideshow."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/10/12/se-podcast-22/","date":"2011-10-11T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #22 – Paul Biggar","text":"Joel (but no Jeff) is joined this week by Paul Biggar (who Joel originally met when he was a DevDays London 2009 speaker about scripting languages). Paul currently works at Mozilla, having come off his own (not that successful) Y Combinator startup. Paul’s least favorite scripting language of all time is PHP. Paul works in static analysis, which is looking at a program that is not running, and making decisions about whether or not it will work, how to make it faster, what the security implications are. Paul has solved the Halting Problem… twice. PHP stinks, so we talk about C and C++ for a while. Bjarne Stroustrup wrote a great book on the topic. The people who love language design are not the people that are enthused by PHP, and they were scared off by the “poisonous community” (Paul’s words!). The most popular programming languages that aren’t very well designed: PHP, Perl, JavaScript, shell. Their creators “had no business designing languages”. How did they become popular? Haskell was a programming language that was well-designed but never gained any traction. Paul says there are two types of programming languages: those that start safe and try to build performance, and those that start performing well and try to build safety in. Haskell is the former. It “escaped” from academia… barely. F# comes from the same school of thought. What about Dart)? Google released a spec. They’ve got a full implementation that’s ready to go in Chrome. The cool kids are using MongoDB, CoffeeScript, and tortoise shell glasses. Enough about programing languages! Paul started a YC journalism startup called NewsTilt. It was the Future of Journalism, which is a terrible business to get into. Here‘s why it got shut down. In a nutshell: there were problems with the product, and problems with communication between Paul and his co-founder. Also, not being in Silicon Valley can be problematic… though Silicon Valley is not necessarily the be-all end-all of startup success. Perhaps most important was that it didn’t solve a problem Paul really cared about. Circle CI is a compiler-related startup that does capture Paul’s interest. It’s “continuous integration made easy”! Paul didn’t actually make the slides for his talk. But the message he wants to get out there is that working on compilers is actually very easy, and not something only wizards can do. Paul can be found on Twitter @PaulBiggar, and at PaulBiggar.com. Join us next week when our guest is James Portnow from Extra Credits – same place, same time."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/10/08/improved-global-email-notifications/","date":"2011-10-07T22:00:00.000Z","tags":["Community"],"title":"Improved Global Email Notifications","text":"Our track record on email notifications has been mixed at best. Since early 2009, we’ve had some forms of email notification, including: A checkbox under each question you own, asking if you want email notifications for that specific question. A long since removed “oh, you’ve been away for 7 days, so we will mail you any new comments and answers to your questions as a courtesy” feature. The one remaining option, an email opt-in checkbox at the bottom of every question you’ve asked, seemed more and more nonsensical as time went on and the network grew from 4 sites to 60+ sites. There’s no sane way to remember if you have ticked this checkbox on every question on every Stack Exchange site. So we’re simplifying. Email notifications are now tied to your global inbox. To turn on email notifications, open your profile page by clicking your name as it appears at the top of any Stack Exchange site, and look for the “preferences” option at the top. In the settings, you can confirm your email address — we’ll validate it in this case to make sure the emails will arrive — and specify whether you want emails delivered daily, weekly, or every 3 hours. Bear in mind that we will only email you if you have not checked your global inbox in that time interval. Meaning, if you select the default of “daily”, and you don’t click to expand your global inbox on any Stack Exchange site for a full 24 hour period… you’ll then get an email delivered to you with the contents of your global inbox. And if you don’t check for another 24 hours, you will get another email, and so forth. (This also offers a more aggressive “every 3 hours” option which satisfied a major outstanding request for our previous email notification support — which was not only per question, but at best sent every 24-36 hours, and often much later depending on the timing.) If you’re worried nobody will be able to find this link buried in their profile, fret not. There is a reminder at the bottom of every single question you own, if you haven’t enabled global inbox email notifications yet: Clicking that will expand the same settings inline, letting you opt in without visiting your preferences. (And no, we did not turn this on by default for anyone, even if they had previously enabled email notification for some of their particular questions; global inbox email notifications are 100% opt-in.) One big advantage of this approach is its simplicity. If the message goes in your global inbox for any Stack Exchange site, you can be notified of it via email. That means: Answers to your questions Comments on your posts Comment @name replies to you Chat room @name mentions Some careers notifications, if you are participating on careers Meta posts for community moderators … and so on. No more worrying about per-site email options; everything is handled at the network level across all Stack Exchange sites. We’re still tweaking the layout of this mail a bit, but we believe it’s a big step forward over what we had in place for email before. Give it a shot and let us know what you think! Oh, and if email is your thing, don’t forget we have a set of nifty “best of the week” email newsletters you can subscribe to for any Stack Exchange site, too!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/10/06/steve-jobs-1955-2011/","date":"2011-10-05T22:00:00.000Z","tags":["Background"],"title":"Steve Jobs, 1955-2011","text":"I want to say a word about why we felt it was so important to honor Steve Jobs with a special system-wide message on Stack Overflow, a site for programmers, as well as our Apple-specific site, Ask Different. Remember, for a moment, the first Macintosh. A brilliant computer, but we programmers looked at it and said… wait! It’s not expandable! It has inadequate memory! You have to change the floppy disk every ten seconds! How on earth can you run Serious Programs on this thing? Even then, Steve didn’t give a hoot about your needs as nerdy computer geeks. He was trying to make a computer as simple as a toaster. Because he figured out that until you make computers as simple as toasters, you can’t make the world a better place. Steve Jobs never forgot that quest. The mouse had to have one button. There was never more than One Way to do things in the user interface. The simpler you could make things, the happier he was. And, over the next 26 years, he stuck by that vision, and now, it has been realized. We have unbelievably powerful computers that you can put in your pocket and that anyone can figure out how to use. Anyone. I remember standing in the Apple Store on the day the iPhone came out. It was full of grandmothers from Brazil and kids from the Upper East Side, but the one thing they had in common was that every single human being was able to use every single feature of that phone without reading a manual. And that’s why Steve Jobs changed the world. As we make our code easier to use, we bring more people in. As we bring more people in, we start to have an impact on the world. For better or for worse. Sure, other companies made MP3 players. But Steve Jobs taught us that you can’t start changing the world unless you make “1000 songs in your pocket.” Yeah, the Microsoft Mouse had lots and lots of buttons of all shapes and sizes. But Steve Jobs taught us that you can’t start changing the world until you let people point at things, without learning what all the buttons are for. And now, behold!, we all have these insane, Cray supercomputers in our pockets that tell you exactly where you are on the planet and show you where that is on a map, and where the nearest sushi restaurant is and how good it is and whether it is open and you can touch a button and you’ll be speaking to someone who works at that sushi restaurant, and this changes the world because ANYONE can do it. Not just nerds. So everyone does. The banner running today on Stack Overflow is from the 2005 Stanford Commencement Address. “I’m convinced that the only thing that kept me going was that I loved what I did.” This is very important to me personally. I’ve been on a quest for more than a decade to make programming a career you can love. The one thing that brings everyone on Stack Overflow together is that we love what we do and we can’t get enough of it. Thank you, Steve, for showing us how important it can be. In Hebrew when someone dies you say “יהי זכרו ברוך” — “His memory will be a blessing.” We are all better off for the example that Steve Jobs set and we are blessed to be able to remember his life’s work."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/10/05/se-podcast-21/","date":"2011-10-04T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #21 – David Fullerton & Jason Punyon","text":"This week, Jeff & Joel are joined (in studio, no less) by David Fullerton, head of the NY Dev Department, and Jason Punyon, a developer here in the office. Its a fast moving discussion covering all kinds of topics, like: Stack Exchange 1.0 (which gave users wanting their own Q&A site the Stack Exchange software, without being official Stack sites) is touched on. Jeff discusses the clones that exist and their reason for existing. Trello’s launch caused some kerfuffle on Web Apps.SE when general (and off-topic) help questions started being asked. In the larger sense, they discuss the necessity of applications and products to have their own unique help service. Some recent changes made to Area 51 are discussed, including the restructured voting system for example questions. Joel discusses the problems that arose out of the previous method of judging example questions. Fabian asks about overlapping proposals on Area 51, and David gives an overview of the process that goes along with the decision to merge proposals. Joel admits they aren’t too good at judging whether or not proposals are the right size. Joel gives a call to arms for Area 51! They discuss the soon-to-launch Biblical Hermeneutics site and its relationship to the existing Christianity and Judaism sites. Jeff brings up some other sites on Area 51, including LEGO and Firearms. The validity of a Healthcare IT site is discussed. Alex just access to Stack Exchange’s real-time Google Analytics, so the traffic trends of the site are discussed. Jeff plugs one of his pet proposals, and others discuss theirs (Krav Maga does indeed pop up). Joel shifts the conversation over to Careers. You can visit Joel’s profile here! Careers and Stack Overflow aren’t integrated as well as they should be, and solutions to that are discussed. Jeff and David also talk about cool updates coming to Careers. On a sidenote, if you’ve ever wondered what it’s like to be an intern for Fog Creek, you’re in luck! David talks about that experience briefly. Careers’ relationship with Linked In is mentioned and spurs on a wider discussion about the other career site. The history of Careers’ filter is discussed, including how it ran originally and how it runs now. Notifications on Stack Overflow have been modified recently. Jeff goes into the depth about how this was brought about. The term “yak-shaving” is involved. A discussion about parenting questions on other Q&A sites reminds Jeff of a recent discussion on Parenting.SE, regarding the horrific-sounding “hot saucing”. Join us next week at the usual time when we’ll be joined by Paul Biggar and his wonderful Irish accent."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/10/04/stack-exchange-becomes-an-institutional-member-of-the-tex-users-group/","date":"2011-10-03T22:00:00.000Z","tags":["Community"],"title":"Stack Exchange becomes an institutional member of the TeX Users Group","text":"We’re pleased to announce that Stack Exchange is now an institutional member of the TeX Users Group. The TeX Users Group (TUG) is a non-profit organization supporting the the TeX typesetting system community — or anyone generally interested in furthering the fields of typography and font design. It’s popular within many academic disciplines, several of which are represented in the Stack Exchange network. TeX was originally popular as a tag on Stack Overflow and eventually grew into its own TeX Stack Exchange site through the Area 51 process. This community has actively contributed new packages back to the TeX community, and maintains a community blog. As part of our institutional membership, we can also provide eight members of our TeX community individual memberships: This initiative was driven by the TeX Stack Exchange community itself; thanks for helping us make this happen! And if there are any other ways we can assist in supporting community conferences, associations, or organizations don’t hesitate to float it on your meta!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/30/stack-exchange-api-usage-stats-and-api-2-0-plans/","date":"2011-09-29T22:00:00.000Z","tags":["API"],"title":"Stack Exchange API Usage Stats and API 2.0 Plans","text":"Stack Exchange has a very full featured, albeit currently read-only, API. You can view some of the nifty applications people have created with the Stack Exchange API in the app gallery on Stack Apps, or check out the winners of the Stack Exchange API contest we held last year. We’re currently in the planning stages for Stack Exchange API 2.0. There’s a draft API 2.0 specification on Stack Apps, so head on over there and take a look if you want a voice in that process. As a part of our research process leading up to 2.0, we analyzed usage statistics of the API to date. For the period from 8/21/2011 to 9/21/2011 inclusive, there were 34.2 million requests against the API. That’s about 12 requests per second. API usage skews heavily toward users and questions: The top API calls, by volume, are: /users/{ids}/timeline 7.8m /users/{ids} 5.2m /users/{ids}/mentioned 4.2m /questions 3.4m /questions/{ids} 3.0m /users/{ids}/questions 2.9m /questions/{ids}/answers 1.7m /users/{ids}/reputation 1.3m /users/{ids}/answers 1.3m /posts/{ids}/comments 1.3m /answers 463k There’s a precipitous drop in usage after that. It’s somewhat surprising just how user centric the queries are, given how Q&A; focused Stack Exchange sites are. This suggests that user authentication to get to the tiny bit of hidden user information we have really will be a popular feature — and that is slated for API V2.0. Approximately 6% of API traffic is the result of internal Stack Exchange requests. Chat made approximately 1.1m requests, stackexchange.com made about 250k requests, and careers.stackoverflow made approximately 140k requests. Only Chat actually requires the raised API request limit that we give it. The top applications by API usage are: StackApplet 5.3m Newt 5.2m Stack Exchange Notifier 3.5m StackGuru 1.4m Question Monitor 1.3m Stack Overflow Chat 1.1m New Q! 943k VSCommands Lite 572k SO Live! 535k Droidstack 498k Coding Clue 473k StackMobile 443k StackTack 386k StackMonitor 356k StackAnywhere 291k AskUbuntu Add-on 251k stackexchange.com 251k Swatch for Firefox 185k DFeed IRC bot 180k Area 51 142k Careers 140k StackTrends 128k Roughly 59% of all API requests are from non-web applications. Of the top 20 applications, 8 are non-web applications. This is of some interest with regards to the debate around HTML encoding all output by default, to ensure it is HTML safe. This suggests that there are many opportunities for script injection, although the reach of the attack is somewhat mitigated. API usage growth is basically flat. This is not terribly surprising, since we’re read-only until API v3.0. Getting cache hit rates out of our logs is a bit difficult, but we’ve got an upper limit of 10% based on the numbers. I’d say we can be confident in a 3-5% cache hit rate. We hope these statistics are interesting, if for nothing else than learning about some useful apps that work with the Stack Exchange API that you might not have heard of. You can find out more about these apps, and discover a bunch more, at Stack Apps! Stack Apps is more than an app (and script) directory — there’s also a comprehensive set of documentation, support, and examples for the Stack Exchange API over at Stack Apps — and the entire API is self-documented at … api.stackoverflow.com/1.1/usage … with examples you can run directly in your browser. And naturally, it works against every Stack Exchange site exactly as you’d expect! Thanks to everyone who has built apps against our API. We’ll do our best to support you, and keep evolving the API to add more awesome for you."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/28/se-podcast-20/","date":"2011-09-27T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #20 – John Siracusa","text":"Joining Jeff & Joel this week is John Siracusa, writer for Ars Technica – he’s the one who introduced Macs to the Ars world (and apparently ended up converting their entire staff into Mac users). John didn’t know who Jeff was until the Stack Overflow Podcast started. (Pop quiz: What was the podcast called before Stack Overflow was Stack Overflow?) Jeff and Joel brought everyone with them on their initial journey of setting up the site. Transparency is king. Version numbers don’t matter to Stack Overflow. There’s “current” and “not current” – it’s a constant work in progress. Especially if version numbers are a ploy to get everyone to buy the software again. We are downgrading Joel to an Etch-a-Sketch, since he can’t get his trackpad to work. Good programmers have a temptation to clean up Stack Overflow, and that can lead to everything suddenly looking off-topic. One result is that we get a lot of questions closed as General Reference. The gang discusses the many ways these questions have been handled over the years. There’s even a blog post on the topic. Jeff and Joel have different interpretations of how these types of questions should be treated. So what can be done to encourage good questions? One point of view is that a clearly no-work, no-effort question should not be rewarded with a brilliant answer. Another is that we shouldn’t care about the questioner – the goal is to create a useful piece of information that makes the internet better. We’re here to serve the 15 million people who get answers from the site without ever typing a word. Weakness to be addressed: better canonical answers, better de-duping, better practices at editing questions. The answer might be… better social networking, although that’s been heavily discouraged in the past. It’s promotion on Other Channels that gets eyeballs onto pages. Therefore, promoting things you’ve written is an incentive for asking better questions and giving better answers. We allow (and sometimes encourage) users to ask and then answer their own questions. Ask a good question when you start the project, then keep trying to figure it out yourself. In the meantime, somebody might jump in and answer your question. If not, solve the problem and add the answer yourself! What if the system tried to parse the code you’re typing a little bit? That way questions that aren’t necessarily similar in their vocabulary would be more intelligently flagged as similar to other questions that are actually related. Careers 2.0 doesn’t have an applicant tracking system, which is why Stack Exchange uses Resumator for its internal hiring. Why didn’t we ever think of that before!! (/dripping sarcasm) A Mac v. Windows conversation take us 20 minutes over time, even when it isn’t a heated debate! (Sidebar: conversations about PCs and Windows are generally much more technical than are conversations about Macs and Apple stuff… except among developers.) The main complaint John gets about his Ars Technica articles is requests for reviews of Windows to the same level of technical detail as his Mac reviews. Follow John Siracusa on twitter and listen to his podcast! Join us next week when Jeff and Joel are joined by David Fullerton, the head of our NY (read: SO Careers) Dev Team. Same Place, Same Time."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/27/welcome-valued-associate-sean-gallagher/","date":"2011-09-26T22:00:00.000Z","tags":["Company"],"title":"Welcome Valued Associate Sean Gallagher","text":"I’m very thrilled to announce that Sean Gallagher is joining us as an Art Director. He will be working out of our New York HQ. OK, that’s not Sean. This is Sean. The process of finding Sean did remind me of the movie Seven Samurai, where the villagers were looking for aids. I’ve been looking for design help for a while. Besides excellent web design skills, Sean also has great experience in strategy, conceptual and communications design ranging all media from one-offs to brand campaigns. I believe he’ll be a great asset, especially since we’ve started creating a lot more design materials to promote our Stack Exchange 2.0 sites. Sean lives in NYC and loves Japanese food and robot toys as much as I do. He’s a serious vintage Japanese robo toys collector. Check out his whole collection! Welcome aboard Sean!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/23/bounty-reasons-and-post-notices/","date":"2011-09-22T22:00:00.000Z","tags":["Community"],"title":"Bounty Reasons and Post Notices","text":"It’s been a little over a year since our last improvement to the bounty system. Question bounties have been working well enough that we’re comfortable encouraging even more use of the bounty system. We used to limit people to one question bounty at a time, but now you can have up to three simultaneous question bounties. We also show the history and number of bounties you’ve started or participated in on your user page, on the bounties tab. Upon further reflection, we realized that it can be difficult to tell exactly what a question bounty is for. That is, what is the bounty owner — who may or may not be the question owner — looking for in the answers to this question? What’s the intent of this bounty? How will it be awarded? So we added a choice of bounty reasons that explain why the bounty exists: Authoritative reference needed Looking for an answer drawing from credible and/or official sources. Canonical answer required The question is widely applicable to a large audience. A detailed canonical answer is required to address all the concerns. Current answers are outdated The current answer(s) are out-of-date and require revision given recent changes. Draw attention This question has not received enough attention. Improve details The current answers do not contain enough detail. Reward existing answer One or more of the answers is exemplary and worthy of an additional bounty. Beyond these standard reasons, which we think are typical and should work for most types of question bounties, you can also enter some optional, additional custom text that describes in more detail what you want from the bounty. Both are displayed at the bottom of the bounty notice to help explain what’s going on, and how you can potentially earn the bounty: There have also been a few other minor tweaks to bounties: To assist forgetful bounty owners, there is a new 24 hour grace period at the end of every bounty. During this grace period, the question will not be featured, but the bounty can still be awarded at any time. To discourage overly promotional bounties, if you are starting a bounty on a question you yourself have answered, the minimum rep cost is 100, increased from the standard 50. To prevent “infinite” bounty periods, multiple bounties started on the same question by the same user double in cost every time. So if the first bounty is 50 rep, the next will be 100, then 200, then 400, then the maximum. The featured tab on the homepage gives priority to larger bounties. The last 24 hours of the bounty period are still ordered purely by time of bounty end, but up until then the larger the bounty, the higher your question will appear on the featured tab. We liked this idea of explanatory text associated with bounties so much, we extended it to also apply as a general “post notice” to locked questions like this one on Stack Overflow, and we allow moderators to apply (in some rare cases) arbitrary post notices to individual questions and answers, as you can see on Skeptics. Enjoy these improvements to the bounty system. It’s our hope that more bounties will be used to improve questions and make each Stack Exchange site an even better resource for getting expert answers to your questions — whether you asked them or not!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/21/se-podcast-19/","date":"2011-09-20T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #19 – John Sheehan","text":"Everyone’s back in their home towns this week (Sorry for the audio quality last week. It was Joel’s fault [actually, it was TechCrunch’s fault]). And joining Jeff & Joel this week is John Sheehan, Developer Evangelist for Twilio. Jeff and Joel are bored of board meetings. How do you make them productive or even useful? Brad Feld says you should give out a document beforehand. Joel does this, and nobody reads it, but they at least pretend they did. Maybe Joel should plant money under the attendees’ chairs? Joel launched Trello at TechCrunch Disrupt last week, and they did not have adequate monitors onstage! It was representative of the general A/V “screw-uppedness” of the whole conference. Cool story, bro. Let’s talk about John Sheehan! He’s a developer evangelist at Twilio and doesn’t have enough Stack Overflow reputation. He travels around trying to make developers be more awesome. The future of phones is in things like BBM, iMessage, etc – alternatives to SMS. Voice is a whole ‘nother medium, for when emoticons just aren’t cutting it anymore. Text is useful for transmitting pieces of information, but for more nuanced conversations voice or video is necessary. How fortunate for this conversation that we have someone from Twilio on the line! New in the SE Universe: Linguistics! Joel’s dad thinks it’s full of amateurs. We also have a site on Christanity now. It is less technical than Judaism… which isn’t good. Our engine works better on more technical applications. Jeff: “I’m not 100% sure Christianity is working.” It’s still early, and it is getting more fact-based as it gets older, though. Bitcoin is low on activity until it gets a new question. It’s not what we call a healthy or growing site, but maybe that’s okay for a site like Bitcoin. There is no defined formula, and it is still being figured out. Now private beta participants will be able to invite others to the site while it’s still private. This devalues committing to a proposal slightly, but the private betas sometimes need a little help. John was at the BUILD conference in Anaheim last week. It was like Disney World, but with middle-aged dudes with questionable hygiene! Windows 8 had a developer preview, but it’s probably a year away from launch. John got to play with one of their tablets and says they’ve taken touch and made it completely un-intuitive. The longer he used it, the less he liked it. John is giving it away to the developer of the coolest Twilio app that uses some of the new WinRT or Metro stuff announced. Scrolling is a thing that many people have many feelings about. We got onto the subject through talking about Windows 8 merging its mobile and desktop systems, and how Apple is doing the same thing with iOS and OS X. John asks: Does anyone have any faith in a PC manufacturer making a tablet you would actually want to buy? Joel says no. Alex says no. Everyone keeps doing things like putting stickers about the component brands on a sports car. Totally hot right now: Trello t-shirts. DevDays failed because we did not promise a thousand dollar piece of hardware to every attendee, like developers at BUILD got. Jeff has not been to Burning Man. He likes the idea, but does not like the idea of being in the desert for so long. Joel did that in the army (cross that off your Podcast Bingo cards!), and it isn’t pretty. The Stack Exchange API 2.0 is baking! Take a look at the spec, and provide some feedback if you like. It’ll be released by the end of the year. Stats on the API will maybe be released in a blog post or something. Jeff uses the API as much as anyone that doesn’t work here, rather than using things a special, sneaky way. (You can read about past mistakes with the API on Kevin Montrose’s blog. Jeff, Joel, and John share their opinions on APIs and company/developer relations in general. New changes to the site are in the works. For example, no more duplicate title, and no more “Here code. You fix.” questions will be allowed. If you’re a programmer, and you want a better job, check out all the great new profile features at Stack Overflow Careers 2.0. Join us next week at the normal time when our guest will be John Siracusa from Ars Technica (or as Joel likes to refer to him: “he wrote that really amazing review of Lion”)."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/20/creative-commons-data-dump-sep-11/","date":"2011-09-19T22:00:00.000Z","tags":["CC Wiki Dump"],"title":"Creative Commons Data Dump Sep ’11","text":"While we will always continue to produce Stack Exchange creative commons data dumps, we are moving to a quarterly schedule for all future dumps. We won’t be blogging each and every one, as it gets a bit monotonous. Please subscribe to our Clear Bits creator feed to be automatically notified when new Stack Exchange creative commons data dumps become available! The latest version of the Stack Exchange Creative Commons Data Dump is now available. This reflects all public data in … Stack Overflow Server Fault Super User Stack Apps all public non-beta Stack Exchange Sites all corresponding meta sites … up to September 2011. This month’s Stack Exchange data dump, as always, is hosted at ClearBits! You can subscribe via RSS to be notified every time a new dump is available. If you’d prefer not to download the torrent and would rather play with the most recent public data in your web browser right now, check out our open source Stack Exchange Data Explorer. Have fun remixing and reusing; all we ask is for proper attribution. If you love playing with data and are looking for a full-time gig, Stack Overflow Jobs has the answer. Check out the postings for big data jobs here."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/19/android-vs-ios/","date":"2011-09-18T22:00:00.000Z","tags":["Background"],"title":"Android > iOS (And Other Statistics)","text":"As you can imagine, we’re sitting on quite a bit of data here about programmers and the technologies they use. We’ve used this for various things in the past (for instance, you can use your history on the site to promote yourself on Careers 2.0) but we’ve never done a deep dive into the data and presented what it says about the popularity of various technologies among developers. Well, as you can tell from the title of the post, that ends today. Thanks to the help of our summer math intern Qiaochu, we pulled millions of data points around some of the most popular technologies and are now ready to settle the debate and declare with certainty which technologies developers prefer.* We’ll start with two matchups today, but we’ll be doing some more in the near future. Before we get started, a quick note on the methodology (since I know it will get challenged in the comments): we looked at a number of different metrics and ultimately settled on using % of total users who are active (active being defined as asked, answered, voted, or commented on a question in that month) on the relevant tags. All of the other metrics you’d think of (page views, total votes, etc) tracked pretty closely with the users numbers but were much more likely to be skewed by “blockbuster” questions and were therefore deemed less reliable. And with that out of the way, on to the matchups! #1 – Android vs. iOS WINNER: Android There have been endless articles written debating which platform is more popular with developers, Android or iOS. Some have claimed that iOS is more developer friendly, while the other side claims that Android is bound to win and so developers should focus on that. After analyzing all our data, the verdict is: Android is now more popular than iOS with developers. As you can see below, iOS was running ahead of Android for several years, but peaked and stagnated in June 2010 (following the release of the iPhone 4). Android, on the other hand, has been on a tear since December of 2009 and overtook iOS as of the beginning of 2011. Unsurprisingly, iOS continues to stall (even declining somewhat) whereas Android continues its growth and is now approaching utilization by 10% of all SO developers. #2 – Flash v. HTML5 WINNER: HTML5 This one is another biggie with most people coming down hard on one side or the other (and being fierce about it). But for most, the fact that HTML5 is the winner here isn’t the big surprise: rather, it’s how long its taken HTML5 to overtake Flash. Flash has been on a long (but slow) slide downward as its fallen out of favor in the last few years. That said, there’s a lot of legacy support left for it and a lot of people who still really want it (can you say, restaurants) even with it’s inferior user experience; and as such, there’s still plenty of developers asking and answering questions about it on SO. HTML5 on the other hand has been on a slow and steady climb; not the rocket like growth that Android has shown. Still, we can see that HTML5 is the rising star and Flash is on the way out, but it looks like it will still be around for a while before it does. So there you go, Stack Overflow’s first round of technology face-offs. We’ve got more planned, but feel free to suggest any others that you’d like to see and we’ll try to fit them in. *obviously this line is in jest – but we do still think this is a pretty good approximation and insight into how the usage of various technologies has evolved"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/15/welcome-chaos/","date":"2011-09-14T22:00:00.000Z","tags":["Community"],"title":"Welcome [Valued Associates That Make Up] CHAOS!","text":"For the past couple months, we’ve had a new team starting up out of our NY office, CHAOS (or if you’re not into that whole brevity thing: Cheerful Helpful Advocates of Stack Exchange). You’ve probably seen them around some of the sites or run into them in one of the chat rooms – but here’s your official introduction: CHAOS works directly with Joel and me to come up with, and execute on, new ways to promote all of the new SE sites and bring in new users. Looking at the original job posting we put up, you can get a bit of a feel for what they’ll be doing: “This job will be sort of like being a community organizer at a non-profit. It combines elements of marketing, PR, and sales, but it’s really something different. I don’t expect that there are a lot of people out there who already kn0w how to do this well, so I’m going to train them, personally. Not that I know how to do this, but we’ll learn together. Every workday is going to start with a huddle at 9am and a plan for the day’s activities and an intensive six hours of work. Every workday is going to end with an hour of learning… reading Kawasaki and Godin and Ries and Trout, talking with invited experts, meeting with members of the community about what worked and what didn’t worked. Everyone who joins the program (and survives for a year) will come out with an almost supernatural ability to take a dead, lifeless site on the internet and make it into the hottest bar in town. That’s a skill worth learning for the 21st century.” So, with the “What is it” of CHAOS answered, who are these men (and women) among men (and women)? Aarthi Devanathan (Valued Associate #35): Originally from Texas, Aarthi is a recent graduate of Indiana University, Bloomington and the only member of CHAOS to enjoy “Troping“. Also, she has a four octave vocal range (sounds like we need to do a company karaoke party pretty soon), and randomly, she’s apparently allergic to organic fruits and vegetables – not regular ones, just organic ones. Abby Miller (Valued Associate #36): The second CHAOS member to mention Harry Potter (apparently she was a Prefect in high school, just like Harry), Abby graduated from Northwestern where she spent many a day sailing, playing board and/or video games and cuddling cats. Oh yeah, and you can still see the spot on the wall in her childhood home where she fell down the stairs and dented the wall with her head. Brett White (Valued Associate #37): Brett was hired primarily to add humor and levity to the team (based on his background as a comedy writer) but since then, has found his home working on our gaming and sci-fi sites. That fits in pretty well with Brett’s interests – he’s even managed to assemble a collection of 4,300 comic books over the last two decades. Oh, and if Brett looks familiar, its probably because he played the intern Christmas tree on the Late Show with David Letterman. Laura Dobrzynski (Valued Associate #38): A graduate of the University of Rochester, Laura comes over to Stack from a social media research firm – so she actually understands why everyone is spending so much time on Stack. When not at the office, she enjoys singing while cooking as she travels to the outdoors (or at least she enjoys all those things separately, not sure if she actually does them together). Laura also has VERY specific candy eating preferences: M&Ms must be separated by color and eaten individually while Skittles are to be smashed together and eaten at once. Sam Brand (Valued Associate #39): Sam has been on a slow trek eastward for most of his life: starting off in Los Angeles, then to Michigan for school and finally settling in New York City. When he isn’t being helpful to tourists by giving them directions, Sam enjoys hanging out in Brooklyn in the summer, listening to music, and watching basketball. He is also a (fledgling) meme creator as the mind behind the tumblog Real Baby, Fake Mustache. Lauren Gundrum (Valued Associate #40): Proving that wasting time on the internet is destructive behavior, Lauren dropped out of school to join us at Stack Exchange. If it weren’t for us, she would still be pursuing a PhD in Psychology. While in attendance at Duke University, Lauren didn’t have access to a car, so she got her motorcycle license and rode around on a hot pink Vespa. In between shifts on the CHAOS squad, Lauren enjoys distance running, traveling, and playing violin – sometimes all at the same time! (To which we say: pics or it didn’t happen, Lauren.) Katey Healy-Wurzburg (Valued Associate #43): The next time you’re out at a comedy show and you hear someone sitting behind you, loudly munching away on a cheese sandwich, introduce yourself, because it might just be Katey! A graduate of Hamilton College, she not only watches but also writes and performs comedy around NYC (seeing a trend here, we like hiring funny people). When asked for a random fact about her, Katey replied: “I can ride no hands on a bike, like really well. I also am very good at hand fart noises. I am bad at telling my left from my right, especially now that I don’t drive routinely. I know how to drive a stick shift and I have read the first 4 Harry Potter books over 30 times each.” Seth Rogers (Valued Associate #45): The second of our CHAOSers with advanced degrees, Seth holds a BA and MA from Brandeis (where he was also captain of the tennis team). Despite being an athlete, he’s also a bit of a technology geek, being deeply interested in tech startups and playing with computers all the way back to his first Mac 660av. So that’s CHAOS – make sure to say hi if you see them around the sites – and of course, feel free to suggest any ideas you have for helping to grow the sites and bring in new users."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/14/se-podcast-18/","date":"2011-09-13T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #18","text":"No guest this week as Joel calls in to the show live from the TechCrunch Disrupt Conference in San Francisco since he’s there launching Trello for Fog Creek Software (also why his audio isn’t quite as good as usual, it’s pretty loud there). There’s still a full hour of Jeff & Joel goodness though so make sure to check it out! Joel gives rundown of what he’s seen at the TechCrunch Disrupt conference in San Francisco so far. A discussion about differences between East Coast and West Coast tech startups leads Jeff and Joel to talk about how important centralized locations are for modern day companies. The recent Facebook deal has led to a recent influx of general Facebook support emails. This leads to a discussion about user support and how other companies rate against Stack Exchange. The merits of paying for internet services comes up, specifically thefreemium and 37signals models. Jeff discusses the merits of 37signals and Joel recounts his time using that model. The Most Valued Super User contest is discussed, specifically how this contest gets people to do “the right thing for the right reasons.” Mention of the contest’s prizes spur a discussion about merchandising (and inadvertently, whose head looks best on a plush Buddha). Jeff announces that Stack Overflow and Stack Exchange are getting Nerd Merit Badges. The Bitcoin site launched recently and is proving to be very popular. In other site news, Jeff mentions that enhancements are underway for the SE language sites. Jeff addresses the problem of duplicate questions, specifically on Meta. A little later on, Jeff goes into detail about the defense mechanisms being put in place to block duplicate questions. User interface proves to be a hot topic today between Jeff and Joel. What starts as a discussion about search engine functionality leads to a full-on talk about the ins and out and future of user interface. Listen to find out which user interface Jeff thinks is like a canker sore! Many sites have launched in the last week, opened recently. The new targeted method of advertising proposals may be the cause of this. As new sites open, Jeff and Joel discuss the new sites with overlap of existing questions. This is currently an issue with the existing Physics site and the soon-to-launch Theoretical Physics site. CHAOS member Sam brought up the idea of regional Stack Exchanges. Jeff and Joel support their differing opinions on the necessity of localized Stacks (also known as the “let your freak flag fly” theory vs. the “Hurricane Irene” defense). Tune in next week at the normal time and with our normal in-studio setup (really, promise) for another episode as Jeff & Joel are joined by John Sheehan, developer evangelist for Twilio. See you then!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/07/se-podcast-17/","date":"2011-09-06T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #17 – Kyle Brandt & George Beech","text":"Jeff & Joel are back with guests this week – joining them are Kyle Brandt and George Beech, our very own sysadmins/ops guys/[insert your own term here] After a brief test of the emergency broadcast system, we plunge right into the podcast, including: Joel is late because he had to go up to AOL HQ to pick up some more floppy disks for the office We recently launched Blog Overflow – which was actually a pretty substantial engineering and technical background to making it happen. A huge discussion of the the SE infrastructure setup and why we host our own instead of relying on Amazon or another outside provider. Hint: not only can we roll our own better, but its a lot cheaper too. In the department of little tweaks with big effect, check out our “network apocalypse”: at one point, Stack reconfigured to separate different types of network traffic due to microbursting overloading the network – this simple upgrade greatly increased the throughput and efficiency of the existing infrastructure. In the good news department: Jeff talks about the expanding user cards just introduced and based on a conversation from our podcast a few weeks ago with Michael Natkin In the bad news department: we’ve decided to cancel Stack Overflow DevDays due to low ticket sales – you can read Joel’s full blog post for all the details. Finally, we welcome our newest engineering hire – Demis! That’s it! Tune in next week at the usual time for another episode with more guests!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/06/devdays-2011-is-cancelled/","date":"2011-09-05T22:00:00.000Z","tags":["Company"],"title":"DevDays 2011 is Cancelled","text":"DevDays has been canceled, due to poor attendance. It’s my fault, actually. I took a perfectly good thing (DevDays ’09) and gold plated it until it was a different thing. DevDays ’09 was one day. So even people who couldn’t get their boss to let them go to a conference could take a vacation day or something. Everyone told us “Great conference! Too short!” So version 2.0 had to be longer, we thought. Two days! Oh, also, DevDays ’09 was $99. We pulled that off by being cheap. Really cheap. So even people who couldn’t get their boss to pay could afford to spring for the conference themselves. But the cheapness resulted in lousy A/V, bad or non-existent coffee, very rudimentary food (when we had it), no Wi-Fi, and lots of other minor privations. In the grand spirit of 2.0, we decided to make all this stuff better, and to cover the costs by a modest increase in list price from $99 to $499. Oh, one more thing: DevDays ’09 was in ten different cities. So lots of people could attend without flying anywhere or getting a hotel room. But the grueling schedule of ten cities was incredibly hard work, so we thought, let’s have bigger conferences in fewer cities. All this great 2.0 thinking had us building a really amazing conference series. We had great venues, great A/V, great food, insane Wi-fi, and of course, a schedule of two days of great speakers lined up in each city. What we didn’t have was an affordable, one-day, painless, no-brainer conference. So registration was surprisingly slow. And we just didn’t get enough people to make it work. Ooops. I spent 20 years in the software industry where the marginal cost is close to zero and you can always make version 2.0 better without increasing your costs. That’s my excuse and I’m sticking with it! In the real world, though, $99 conferences are completely different than $499 conferences, and I take full responsibility for screwing up DevDays. FAQ Q: I registered anyway. Will I get a refund? A: Yes, this will happen automatically. If you have any trouble or questions email Alex & Alison at devdays@stackoverflow.com for help. Q: What about the ServerFault Scalability Conference? A: That has been canceled, also. Q: What about the hackathon in Washington, DC? A: We’ll let you know. We are still planning to hold the Stack Exchange company meeting in Washington, so we will try to organize some public event at the same time. Q: Why don’t you just scale back to $99, one-day conferences? A: Unfortunately, the four conferences we planned this year were going to be held at much larger venues and would have cost way too much to put on, so we can’t just trim them back to one day, $99 events. Q: What are you going to do in the future? A: We want to work on a much larger number of much smaller events in far more cities, such as meet-ups and individual talks sponsored by Stack Overflow."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/09/05/expanding-user-cards/","date":"2011-09-04T22:00:00.000Z","tags":["Community"],"title":"Expanding User Cards","text":"As I’ve said many times, the reason any Stack Exchange site works is not because of the magical software bits, but because the people participating are smart, talented, and willing to teach and learn. That’s right, any internet community ultimately succeeds or fails on the strength and quality of its contributors. Shocking, I know! But while recording podcast #15 with Michael Natkin of cooking.stackexchange.com, I belatedly realized we weren’t making it easy to discover information about the smart people answering all those questions. Sure, we show the basics (reputation, name, badges) in the default User Card that every post is “signed” with — but that gives you the barest of context into the person answering, or their professional background in the topic. To rectify that, we now have improved User Cards that expand when you hover over the avatar, displaying location, key links, and an excerpt of the “About Me” field: So now you can quickly discover a bit more about the human being who wrote that post — without needing to click all the way through to their user page. On Stack Exchange, Q&A; is designed to focus squarely on the content of the questions and answers, not necessarily the person. That said, it is sometimes useful to learn a little but more about the author to provide more context for the post. As one (admittedly extreme) example, off-topic questions are strictly forbidden, but we might be willing to stretch the rules a bit if you’re Alan freaking Kay. As it turns out, many of our community members are rather interesting people, even outside that particular Q&A; topic. Hovering over an avatar lets you easily learn a bit more about your fellow community members … if you want to. We treat the expanding user card as a bit of a privilege, so you must have 1,000 or more reputation for it to appear. Any user with less than 1k rep will not have a user card hover by definition. And, of course, there has to be a reasonably complete user profile, otherwise there’s nothing to show! There are some other subtle ways we try to keep this user card hover useful, such as prioritizing any “identity” links like Twitter, Facebook, Linked In, Google+, etcetera — and you can override the excerpt for total control of what displays on your expanded User Card. See our meta post for more detail. This is all completely optional, of course, so to distinguish between the two states, we’ve added a subtle 3D shadow to the avatars that have an expanding user card on hover. So if you’d like to share a bit more about your background with your peers, and provide a bit of additional author context to your questions and answers, don’t hesitate to flesh out your profile!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/31/se-podcast-16/","date":"2011-08-30T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #16","text":"So it’s been a couple weeks since our last podcast, but Jeff & Joel are back and ready to catch up on everything they missed. There’s no guest this week, just 60+ minutes of that Jeff & Joel banter that (we hope) you’ve grown to love. Jeff and Joel discuss “Zombie Poke,” aka facebook.stackoverflow.com deal in depth and dispel rumors of receiving a “dump truck of money.” Details of the deal are discussed, from what the new feature accomplishes and how it came about. Jeff also discusses the state of online identity and the issues that arise with having multiple logins. Joel explains why he thinks Facebook might be the new AOL. Jeff relays a story about a Stack Exchange user who devised a clever way to get his dad involved in the Bicycles Stack Exchange. Joel wonders if this, or something similar, should be undertaken by CHAOS. The duo discusses which Stack Exchange sites don’t meet their personal expectations. The hit list includes Super User, Writing, and Gaming. Jeff goes into depth about his issues with Gaming.SE, even though it’s the fifth most trafficked site. Joel talks about the myth that reputation affects programmers’ career opportunities. A question from the chat room about the Publicist badge spurs discussion about sharing questions on the internet and how it relates to Stack Overflow. We discuss the state of Community Wiki. If you’re looking for a good example of a community wiki answer, look no further than How do I diagnose not being able to reach a specific website as an end user? And of course, if you enjoy the Stack Exchange podcast, make sure to check out the Ask Different Podcast – hosted by our Ask Different (aka apple.stackexchange) moderators! We’re back on our regular schedule now, so tune in next week for another great episode!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/30/welcome-valued-associate-demis-bellot/","date":"2011-08-29T22:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Demis Bellot","text":"The NYC Headquarters of Stack Exchange welcomes Demis Bellot! As a developer on the Careers 2.0 team, Demis is excited to work on a platform with a large and influential reach. Demis is best known online as the creator of http://www.servicestack.net/ – An Open Source Mono and .NET Web Service Framework. An avid traveler, Demis enjoys taking photos in lovely locations, which often look photoshopped (like these). While he isn’t a hobbyist per se, Demis can be easily convinced into a game of tennis or golf. With his multitude of skills, Demis is sure to be a strong contributor to the Dev Team. Welcome Demis!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/30/welcome-valued-associate-kyle-cummings/","date":"2011-08-29T22:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Kyle Cummings","text":"Kyle Cummings joins the Careers Sales team as Associate Sales Representative in the NYC Headquarters. In this role, Kyle is working to help our employer customers fill their open positions and grow the Careers 2.0 service. Born and raised in Florida, Kyle is a third generation alumni from the University of Florida. Needless to say he is a huge Florida Gator fan. Kyle enjoys traveling with his favorite trips being to Jamaica, Las Vegas and of course to Gainesville, Florida for Gator football games. Not just a sports fan(atic), Kyle stays active playing rec sports, and spending time outdoors. While Kyle is still adjusting to the weather “up North”, his favorite thing about New York life is the endless weekend brunch options. Welcome Kyle!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/28/a-bevy-of-new-badges/","date":"2011-08-27T22:00:00.000Z","tags":["Community"],"title":"A Bevy of New Badges","text":"The badge system exists for two reasons: to teach new users how Stack Exchange works to encourage activities we view as positive to the community As the engine grows and evolves, we discover new areas that need badges. In fact, we’ve added a bevy of new badges in the last 6 months or so that we haven’t had time to talk about yet. Visited every section of the FAQ Edited first post that was inactive for 6 months Edited 100 posts that were inactive for 6 months Achieved a flag weight of 500 by reviewing and flagging appropriately Achieved a flag weight of 749 by reviewing and flagging appropriately Approved or rejected 100 suggested edits First approved tag synonym First tag wiki edit Used the maximum 40 votes in a day One post with score of 2 on meta 10 posts with score of 2 on meta Badges are supposed to be a little mysterious; you should view them as minor puzzles with obvious hints. What activity is this badge referring to? How do I perform this activity? Why is this activity important and necessary? Who should normally perform this activity, and when? Most of these are fairly self-explanatory, but I believe the flag weight and review sections do warrant some background. Of course there’s the insanely detailed meta faq about flag weight, but the short version is this: flag things that community moderators agree is helpful, and your flag weight will go up. Your flag weight, if it is something other than the default of 100, will be visible on your user profile under your reputation score. You can view the status of your flags by clicking the flag weight link. There are two flag dispositions, helpful and declined. Generally, so long as you are flagging in a genuinely useful manner that helps make the site better, most of your flags should be of the former and not the latter. If you’re looking for posts to flag — or vote, edit, and comment on — I highly recommend using the review link on the site. At the top of every page you’ll see one of two links: either review (from 200 to 9,999 reputation) or tools (from 10,000+ reputation and beyond). Both can get you to the review page. Click around on the review page and read the explanation on the sidebar to get the gist of it. Please do bear in mind that flagging is no substitute for the normal editing and voting process. We encourage responsible flagging, but if a question should be closed, or a post downvoted, don’t hesitate to take action yourself. Actions from the broader community as a whole speak much louder than actions from community moderators!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/24/facebook-stackoverflow/","date":"2011-08-23T22:00:00.000Z","tags":["Community"],"title":"Announcing facebook.stackoverflow.com","text":"Without question, the greatest asset we have here at Stack Exchange is the members of our community, their collective knowledge, and their desire to help others. Similarly, there’s no greater feeling for us than when others recognize that strength and wonder how they can use it to help their users too — ultimately, it just helps make the internet a better place. So when the largest social developer platform in the world came to us and said they wanted to partner with us, we were all ears. And because of that partnership, we are proud to announce that facebook.stackoverflow.com is launching today as the new official developer support channel for all Facebook developers. But facebook.SO isn’t just a sub-domain, it’s an entirely new feature set that we’ve been considering and working on for months. Ever since launching, we’ve gotten requests to start dedicated communities for niche programming topics, but we’ve always been hesitant to do so for fear of balkanizing the great community we already have. So we came up with a solution that provides the best of both worlds. We can now create a mini-site by selecting relevant tags (in this case, anything Facebook related) and grouping together just the content from those tags. When you visit a mini-site, you’ll see only the content from those tags. Not only will you be able to see only questions related to Facebook, but the reputation on the user ranking pages will also only show reputation earned on questions tagged Facebook. The key to this functionality is that you’re seeing a filtered view of Stack Overflow, much like if you set up a favorite tags view. That means that when you ask a question on Facebook.SO, you’re still getting access to the entire community of 750,000+ users, and any questions you answer there count toward your Stack Overflow reputation, too. If you’re a Facebook developer who is already a Stack Overflow user, we’ve made it incredibly easy to get started. In fact, you don’t have to do anything at all (though you do want to make sure your Facebook account is connected to your SO account — there’s instructions how on the Facebook Developer Blog). If you’re a Facebook Developer who doesn’t already have a Stack Overflow account, just visit facebook.stackoverflow.com and click the Facebook “Log In” button on the right hand side. You’ll be up and running in about 10 seconds. Enjoy! If you want to learn even more about what you can do with Facebook and other new technologies, make sure to register for our upcoming Stack Overflow DevDays conference series, coming up this fall."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/22/careers-2-0-export-and-apply-with-your-profile/","date":"2011-08-21T22:00:00.000Z","tags":["Careers"],"title":"Careers 2.0: Export & Apply With Your Profile","text":"For the longest time, Careers users have been requesting an export feature. We recently released a PDF generator tool to help you turn your profile into a customized résumé. You can find the link in the sidebar on the edit page of your profile. Using the résumé generator, you can customize the info you would like to provide to prospective employers by selecting each item you would like included. Once you get it just right, press the “Export to PDF” button at the top to download your résumé! Check out my sample résumé. Apply with your profile You can now attach résumés generated on site to a cover letter and apply directly to jobs listed on our boards! When you browse our job listings and run across a job you would love to have, click the “Find out how to apply” button and you will see a new, completely awesome button to “Apply with your Careers 2.0 profile” if the job has enabled it. Over 200 job listings are ready to accept your profile today! Don’t have a profile? You can request an invitation here! As always, we welcome any feedback you may have regarding quirks and improvements to this feature."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/20/9166799699/","date":"2011-08-19T22:00:00.000Z","tags":["Company"],"title":"We like our users and want to help them.","text":"That’s why we’re pioneering a brand new future for them! A future involving software testers and the developers who love them. Stack Overflow and Game Development are communities of smart, talented programmers and developers creating more awesome new software than you can shake a stick at. Ask Different, Android, Super User, and Gaming are communities of smart, talented users who are itching to try out some brand new stuff. So we said to ourself, “Self,” we said, “we should probably figure out a way to match these people up!” And lo, the Stack Exchange Beta Tester Matchup program was born… sort of. Our beta testing program is currently in its first round of beta testing. It’s propped up by some janky Google spreadsheets and the actual matching up is done by yours truly, emailing everyone and asking if they’re interested in trying stuff out. But once we’ve proven how awesome this program can be… it’s going to be baller, yo. Baller."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/19/the-future-of-community-wiki/","date":"2011-08-18T22:00:00.000Z","tags":["Community"],"title":"The Future of Community Wiki","text":"When you mark a post community wiki on a Stack Exchange site, that means … this post can be edited by anyone with 100 reputation this post does not generate any reputation for anyone when upvoted or downvoted The main advantage of community wiki — more editing — was nerfed when we introduced suggested edits. With suggested edits, anyone, even an anonymous user, can edit anything — so long as another experienced user reviews and approves their edit. This leaves many wondering — what’s the point of Community Wiki? Community Wiki is not for Fun With suggested edits now in place, you could argue that the removal of reputation from voting is now the only function of community wiki. Unfortunately, this means it is often seen as a magic switch to allow questionable content. One of the first feature requests I saw on Meta Stack Overflow was Moderator Filtering of Highest Voted Questions, which was deemed necessary because questions like Coolest Server Names show the wrong side of the site. The actual problem-solving nature of sites is too easily buried under the weight of all these “fun” community wiki questions. At one point, “Our top voted post is an actual question!” was a point of pride. That’s … not a positive sign for a Q&A network. Even when divorced from reputation, votes are hugely important. Something with a lot of votes means “this is what we deem quality content”, and votes are how we differentiate between answers when there is no single definitive answer. Community wiki should never be used as a get out of jail free pass for joke and fun questions. It may succeed in preventing any single individual from gaining reputation for posting a cartoon or joke, but the question will remain on the site. And it will now and forever be one of the top questions by votes, advertised to the world as one of the top rated things on your site. Is that what you really want? Community Wiki is not a “Quick Fix” Community wiki isn’t only abused for “fun” or “getting-to-know-you” stuff, though. Many sites propose using community wiki to allow content that is on-topic and useful, but can be considered borderline or questionable in other ways. Someone notes that a certain class of question has problems, and proposes using community wiki as a quick fix. If a question is valuable enough that you believe it belongs on the site, chances are you don’t need it to be community wiki! We welcome all contributions which improve the quality of a site and advertise its greatness to the rest of the world. If you allow a certain class of questions, but only under the stipulation that no one can earn reputation from them, you’ve strongly discouraged these sorts of questions. People aren’t going to put in nearly as much effort to ask them. Instead, strive for quality. If you’re unsure a certain question class belongs on the site, don’t tolerate the worst examples — demand that these questions be awesome. Questions shouldn’t be swept under the rug with community wiki; they should get the same respect and treatment as the rest of your Q&A. If those questions are something you are uncomfortable showing to visitors … they probably don’t belong on your site. Many things which “need” to be community wiki simply don’t. Sometimes it’s just a matter of understanding the root of a question: “Software to record video games” can be turned into a great question without needing the crutch of community wiki. Or, you may need to break the original question into smaller parts; a rather well-timed Ask Different Meta post explores this very avenue. I’m relatively new here, but the examples of ‘community wiki’ that I’ve seen so far seem to be actively detrimental to the web site. For example, the ‘What Lion bugs irritate you the most?’ thread takes lots of good questions and answers that could (should?) be individually placed on the main page and effectively hides them in a single thread. Detrimental indeed. Community wiki abuse includes its ability to mask or devalue important quality content just as often as it involves the presence of low quality content. Sometimes you have content which is valuable and on-topic, but is perhaps a bit too popular. It runs the risk of overwhelming the rest of your site if it grows untamed. In these circumstances, community wiki can be a way to preserve the value of these posts while stifling their growth. Keep in mind, though, that in using community wiki to stifle growth, you should actually follow through with it — a site should never have more than one community wiki question for every hundred questions. Having too many community wiki questions defeats the entire purpose. Community Wiki is primarily for Answers If we haven’t said this enough already, questions rarely, if ever, need community wiki. What about answers? We removed the ability for users to make a question community wiki, but left the ability for users to make an answer wiki. The intent of community wiki in answers is to help share the burden of solving a question. An incomplete “seed” answer is a stepping stone to a complete solution with help from others; an incomplete question is a hindrance and an obstacle to getting a solution as no one understands the inquiry. It is in answers that the goal of community wiki, for the community, by the community, shows its truest colors. Yet even in answers, true collaboration is scarce. Most of the time, a single individual can provide a complete answer. There are even times where a question looks like it’ll need a massive effort, but one gallant user steps up to the plate with an impressive and comprehensive answer. Community Wiki is dead. Long live Community Wiki! Most of the time, you should be asking yourself “How can I improve this post so that community wiki isn’t needed?” Community wiki is like a cheese knife: it is a specialized tool to be used sparingly. Community wiki is for that rare gem of a post that needs true community collaboration. That’s when community wiki shines. If your site is teeming with community wiki posts — particularly in questions — you should consider the above points carefully."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/17/9048149395/","date":"2011-08-16T22:00:00.000Z","tags":["Company"],"title":"So you work at a startup and want to get noticed by a lot of people. How do","text":"Link: Currently Reading: How DuckDuckGo got in TIME’s 50 Best Websites of 2011 The link in the title is to a great post about how DuckDuckGo got into TIME’s 50 best websites of 2011 by building relationships. I think DuckDuckGo is pretty neat, and the article also nicely reflects some of Stack Exchange’s values, too. We love our users, and we think they are great advocates for us. We also believe in building relationships over time – NOT just spamming people and demanding that they pay attention to us. A lot of what CHAOS does is find people we want to be friends with, then we talk to them. We’ve met a lot of interesting people through Twitter, blogs, and Google Plus lately, and we hope they’ll be our friends for a long time. Do you know of any other companies with stories like DuckDuckGo’s? Share them here!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/17/the-se-podcast-setup/","date":"2011-08-16T22:00:00.000Z","tags":["Company"],"title":"The SE Podcast Setup","text":"We’ve gotten quite a few questions from people about how we go about recording and producing the Stack Exchange podcast from people interested in everything from the hardware to the software and even the process. Given the recent revamp of the entire setup (which has been happening during our recent break from live shows), I figured this was the perfect time to do it. Our setup is massively more complex than what is normally needed for a podcast (since its normally 2 people sitting in a room talking into mics). We generally have 2-3 people live in studio (Joel, Alex and maybe 1 guest), plus an additional 2-3 (Jeff, the guest, and sometimes a second guest) who all need to be mixed and recorded separately. Because of that, we can’t do one big Skype call and just record that, everyone has to be called individually and then mixed through our audio board. The Equipment Audio Mixer: Yamaha 01v96 w/ MY8-DA96 Card – the heart of the entire setup – the v96 is a 12 input digital board with all of our DSP, FX and routing built right into it. The MY8 card gives us an additional 8 outputs so we can generate enough mix-minus feeds to send to all of the hosts and guests. Studio Mic’s: EV RE-20, Audio-Technica AT-4040, AKG C1000S – We keep several different mics in the studio for different applications (there’s a rationale behind all of them) but generally speaking Joel uses the RE-20, Alex uses the C1000S and the AT-4040 is for guests Headphones: Sony MDR-7506 – The workhorse headphones of audio engineers and studios – you can literally go into any studio in the world and find at least one pair of these Audio Interfaces:  Focusrite Saffire Pro24  – 16 ins and 8 outs means this guy has more than enough I/O for all our applications. Its got great build quality though and the number of I/O options (XLR, 1/4″, SPDIF, ADAT, MIDI) means we can buy multiples of this one unit and use it for all our applications Remote Computers: Mac Mini – amazing computers for a variety of reasons, but given their size, integrated power supplies, dual video outputs, and firewire ports, they fit the bill perfectly Streaming Computer: Dell Desktop – stocked with a quad-core processor and 8 gigs of RAM, it’s got plenty of power for creating our live stream and misc. other production tasks Recording Computer: Mac Pro – An extra computer we had around the office that was re-purposed for recording. It’s spec’d similarly to the Dell desktop and takes all the inputs from the mixer to record for later editing Camera: Microsoft LifeCam Cinema – Small, easy to place and 720p capable Monitors: Various Dell UltraSharp LCDs – Great quality and well priced make these monitors a great choice, but the main thing is that we had a few extras laying around the office The Setup There’s 2 main areas that make up the podcast, the remote connections and the production section Remote The computers that pull in Jeff and any of our remote guests. To be ready for situations where everyone is remote (such as Episode 5) we needed capability for 4 remote callers. The entire setup consists of four mac minis, four audio interfaces, a network switch, and KVM all crammed into a 4u rack. Each mac-mini is linked to an audio interface which then connects to the mixer. There’s also a headphone amp that sits on top of the rack, but that’s just because its convenient – it’s technically part of the production section and serves to feed the guest’s headphones along with anyone watching live in studio. Production The center of the production section is obviously the 01v96 mixer. It takes inputs from the three studio mixes and four remote feeds, creates mix-minus feeds for everyone, and then distributes those feeds. The program audio is then fed via SPDIF to the streaming computer (through an M-Audio Fastrack Pro) and direct feeds for each of the speakers is fed via optical ADAT to the Mac Pro (via a Focusrite unit) for individual recording and later editing. The streaming computer also has the Microsoft LifeCam connected to it and is running Livestream Procaster which encodes the audio and video into three separate feeds (a 300 kbps low/mobile, a 700 kbps medium, and an 1800 kbps HD). Amazingly, generating these three feeds consumes most of the computer’s resources with CPU utilization often topping 80% (despite being a 3.2ghz quad-core machine). The recording computer runs Reaper. a highly flexible and very affordable DAW program. We originally started using Reaper when we needed something that could create mix-minus feeds in software and then output them (it was the only thing we found that would) and loved it so much that we’ve stuck with it. The eight inputs are fed in and recorded for later editing before being posted. The Process The first step for every show is booking a guest – we have a big list of possible guests who we regularly keep in touch with and add to the schedule whenever they’re available. In advance of every show, we send guests a Plantronics Audio 655 headset – it’s a solid (and affordable) headset with great sound. Most importantly, its consistent, so we know that there won’t be headset problems the day of the show. We also typically do an audio test several days in advance to make sure everything is working and sounding good. The day of the show, setup starts about 2pm – gear is checked over and we start up the live stream around 2:30 or 3:00. We do a final audio check with the guests 30 minutes before show and then we’re live! After the show ends, the clean recordings are dumped onto my computer where they are processed and edited into the final episode. That file is uploaded to our distribution points (SoundCloud & IT Conversations) on Wednesday mornings along with the show notes (which are typically written Tuesday evening after the show). The full posts are then published Wednesday @ 3pm ET / 12pm PT. If you’ve got any questions that weren’t covered in this post, go ahead and add them in the comments and I’ll do my best to answer them and add them to the post."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/16/gorilla-vs-shark/","date":"2011-08-15T22:00:00.000Z","tags":["Community"],"title":"Gorilla vs. Shark","text":"Who would win in a fight between a Gorilla and a Shark? OK, maybe you’re thinking that’s a ridiculous question. Perhaps it is. But various forms of this question get asked all the time. Consider this now-ancient Stack Overflow question titled Python v. Perl: Okay, so I’m finally making the jump into scripting languages and I have decided to focus on either Python or Perl. The problem is: I don’t know which to cut my teeth on. Most of my programming experience is in C, Java, and C++. There’s no specific task I would be learning Python/Perl for, other that possibly applying it to my dev work to make life easier in general. What do you think? Which do you use? Is one more industry relevant than another? Just substitute Gorilla with Perl and Shark with Python and I think you can see where this is going. (To be fair, this question is more of a historical curiosity than anything else; it was asked way way way back in the dark ages of late 2008, when we were still figuring out this Q&A; thing. It has been deleted now. It’s visible to 10k rep users, or you can view the Google cache of it.) This question, or anything like it, would be instantly closed as “not constructive” if it was asked on Stack Overflow today. not constructive This question is not a good fit to our Q&A; format. We expect answers to generally involve facts, references, or specific expertise; this question will likely solicit opinion, debate, arguments, polling, or extended discussion. But let’s go deeper. What, specifically, is wrong with asking Gorilla vs. Shark? Nobody needs to know the answer to this question. Do you own a gorilla? Do you own a shark? When was the last time you even saw a gorilla and shark going at it hand to fin? In other words, what is your skin in this particular game? What specific problem, other than idle curiosity, would answering this question satisfy or solve for you … or anyone else? It’s not nearly specific enough. Where will the fight be, in what location? Underwater, or on land? What are the rules of the fight so we can determine a victor? Will it be to the death, or under some type of points system? Can they be trained specifically to fight by trainers, or are they completely on their own? Without any kind of scope, every answer can make any assumptions they like — and there will assuredly be hundreds, all different. It is difficult to learn from these questions. Let’s say, hypothetically speaking, we had animaltrainers.stackexchange.com, a site full of people who have hands-on experience with both gorillas and sharks. And they were, hypothetically speaking, willing to answer such a question to the best of their expert knowledge. In the process, you might learn a few interesting things about both animals, such as that an adult gorilla’s upper body strength is six times more powerful than that of an adult human. Or that shark skin is so tough and hard that before the invention of sandpaper, shark skin was used to polish wood. But this sort of learning is largely accidental at best, like a random walk through an encyclopedia. It might be entertaining as a speculative diversion to compare and contrast these two very different animals in broad terms. But even under ideal circumstances there really can be no absolute answer to this question other than “it depends; both animals are adapted to their particular environment and have certain strengths and weaknesses.” This is a good answer, maybe even the correct answer, but it’s just not that useful. It drives away experts. What serious, expert animal trainer would give Gorilla vs. Shark the time of day? This kind of question attracts the opposite of experts: people who aren’t serious animal trainers, but are willing to engage in idle speculation and discussiony generalities — rather than focusing on the real world, specific, honest-to-goodness questions they face in their day to day work. Any true expert who came to animaltrainers.stackexchange.com would be appalled to see a question like Gorilla vs. Shark appear on the homepage. This is a bit of a strawman because nobody is going to defend asking the Gorilla vs. Shark question on the Stack Exchange network any more than someone would, oh, I don’t know, take a pro-racism stance. It is obviously and clearly not constructive to ask such questions. But there are … subtleties. Let’s examine a better, less abstract question with the same problems. Google+ versus Facebook? This is marginally more credible, akin to asking Gorilla vs. Human. Including two natural competitors means the question no longer smacks of the daydream absurdity of Gorilla vs. Shark. But it still utterly fails to set any scope or terms, and is thus virtually impossible to reasonably answer. Not Constructive. What is it about the UX of Facebook that made it more successful than Google+? Slightly better. Now we have two natural competitors, and we have an arena to fight in — but it’s an arena the size of Mexico City. UX is an incredibly broad topic. Is it the form factor? The price? The industrial design? The touch UI? Could be anything. Impossible to answer with anything other than opinions and guesses. Not Constructive. What’s the single aspect of the UX most responsible for Facebook’s success versus Google+? All we’ve done here is prevent the answers from becoming multi-point essays, and limited them to either crank axe-grinding (I hate that…) or passionate, candid love letters (I love that…). This is not an improvement; it’s a regression. Not Constructive. Are Google+ Circles better UX for sharing among friends than Facebook Groups? Hey, now we’re actually getting somewhere! We’ve scoped to a particular feature under the umbrella of UX. It’s not perfect, but it is a potentially salvageable question. The asker must contribute a bit more work beyond the title, too. We expect questions to do some basic research before even asking. Did you spend time with both features on both sites? Did you compare and contrast them yourself? What are others saying? Share your research! And most critically, give us context. Explain why you’re looking at this, and what you mean by “better” — clicks to share, discoverability, design, and so forth. Put yourself in the shoes of the people you hope will answer. Have you given them enough guidance and specifics so they know how to reasonably answer your question in, say, 15 minutes? Perhaps this is a red herring. I honestly feel a lot of the “this v. that” questions would be better expressed as examinations of the underlying concepts without all the mock conflict. But if you must compare and contrast two things in a Stack Exchange question — and don’t want your question to get instantly closed as Not Constructive — try to keep Gorilla vs. Shark in mind."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/11/8793010940/","date":"2011-08-10T22:00:00.000Z","tags":["Company"],"title":"Winning People and Influencing Friends","text":"So recently, us here at CHAOS read a book — a kind of famous book, you may have heard of it? — called How to Win Friends and Influence People by Dale Carnegie. Despite being full of hokum (what a great word) the book itself has pretty solid real advice about getting people to, well, do what you want and/or be your friend. Carnegie’s advice basically boils down to this: show appreciation, be respectful, cop to when you’re wrong, listen more than you talk, and inspire the other person. It’s actually really good advice; part leadership, part motivational coaching, part human resources. As most of you know, CHAOS Team has been working on doing site promotion and such things for certain specific sites. We’re using the Carnegie advice in our interactions with potential partners (whoo!) but it actually has applications outside of ~professional communications~ such as getting free froyo. I was at a Pinkberry a few days ago and was set to pay for my dessert when I saw my cashier. His earrings were nice (he had in diamond studs) and I told him as much. When he smiled, I laughed and told him his smile sparkled. Corny? Absolutely. Did I mean it? Every word! ‘Cause I’m a nice person, and an ex-cashier, so I’m always extra nice to the checkout guy. He beamed really wide and said my frozen yogurt was on the house, ‘cause I’d made his night. I tried to insist, but he shook his head. Now, I didn’t go into this expecting free frozen yogurt, and that wasn’t necessarily the end goal I was working toward. But it worked — Dale was right. “Be lavish in your praise and hearty in your approbation.” But, more importantly, be sincere, and be detail-oriented. I could have complimented his appearance, but I picked specific things — his studs and his smile — and he appreciated that more than if I’d made a generic compliment. This works no matter what you’re doing, whether it’s getting free frozen yogurt or sponsoring a giveaway. PS: For those of you who didn’t quite understand this entry — it’s done in the style of the book."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/10/documenting-devdays-2011-3-e28093-more-speakers/","date":"2011-08-09T22:00:00.000Z","tags":["Company"],"title":"Documenting DevDays 2011: #3 – More Speakers!","text":"This Stack Overflow DevDays will be the best conference you’ll attend in 2011. You’ll come away with in-depth knowledge of all the latest programming awesome like: Node.js, HTML5, CSS3, CoffeeScript, Cassandra, Hadoop, F#, UI design, Scalability and Performance. Register today to ensure you won’t miss out on seeing these speakers and more! San Francisco, October 12-13: UI Design at Square **Speaker: Tristan O’Tierney **Tristan is a Co-Founder and original iOS Engineer at Square, Inc. Before Square, Tristan worked on Yahoo! Messenger for Mac, Safari, VMware Fusion, Obama ’08 iPhone app, and the first location based twitter client Twinkle at Tapulous. He’s also well known for his online Objective-C tutorial and has enjoyed hacking on projects like FlickrBooth for fun in his spare time. KHAAAAAN **Speaker: Ben Kamens **Ben works on any Khan Academy code that helps scale the influence of a great teacher. Before joining Khan Academy, Ben spent 5+ years at Fog Creek Software, learning how to build a great development culture from some guy named Joel. Compilers and Interpreters and JITs, oh my **Speaker: Paul Biggar **Paul works on the Javascript team at Mozilla. Before joining Mozilla, Paul completed a PhD in compiler optimizations, static analyses and dynamic languages, and started a YCombinator startup. Sydney, 25-26 October: CSS in a post-IE6 world **Speaker: Chris Darroch **Chris Darroch has a passion for building kick-ass interfaces and user experiences. When he isn’t working on UIs, preaching web development standards and best-practices, or attempting to get his StackOverflow profile over 9000, you might find him vying for glory and epic lewts in World of Warcraft, or playing Guitar Hero on expert. Finding Your Place in the World: Google Places API **Speaker: Luke Mahe **Luke is part of the Geo Developer Relations team at Google Sydney where he works with developers from all over the world that use the Maps JavaScript and Places API. Brutal JavaScript: Traps, Hurdles, and Pitfalls Speaker: Dmitry Baranovskiy ****Dmitry has over 10 years experience in creating web applications. Having started as a back end developer, more recently he has changed his orientation to front end development and even pure design. He is most notably known as a creator of Raphaël (http://raphaeljs.com) JavaScript vector library. London, 14-15 November: When the System is the Software: Operations for Developers **Speaker: Jeff Lawson **Jeff Lawson is CEO and Co-founder of Twilio, the technology company revolutionizing telecommunications with simple tools for programmatically making and receiving text messages and phone calls. Jeff brings over 12 years of entrepreneurial experience with product, engineering and business background to the company. Jeff was awarded a 2010 TechFollows Award for Disruptive Innovation, and was named as number 18 on Business Insider’s 2010 Silicon Valley Top 100 List. Prior to founding Twilio, Jeff held founding executive roles for NineStar, Stubhub.com, and Versity.com. NoSQL in the Enterprise **Speaker: Julian Browne** Julian is Chief Architect at Equal Experts, a convivial services and consulting company that blends XP engineering practices with pragmatic designs. Despite longstanding frustrations with architecture practices in large companies, he finds his CV is full of architecture roles in large companies, mostly in the mobile and investment banking sectors. His mission in life is to make enterprise architecture the basis for developers to just make the magic happen. He codes and has never seen an ivory tower, let alone been up one. The Combinator Approach to Creating Domain Specific Languages with F# **Speaker: Robert Pickering **Robert is a fun loving programmer who claims that he is Falling Outside The Normal Moral Constraints. He enjoys travelling round Europe in a big shirt trying to teach people that real programmers use the stack. Robert is a big fan of functional programming and F#. He works for the ultra cool French consultancy Infinite Square and he lives in a quaint French village near Paris with his wife and their three cats. He considering writing a book about life in France as a programmer, as given the success of “Year in Provence”, it would probably sell a lot more that his last effort, “Beginning F#”. Washington DC, December 15 & 16: iPhone/iPad/Android Development **Speaker: Rory Blyth **Rory Blyth, formerly of Microsoft, is one of the most “prolific” answerers on Stack Overflow with the highest vote to answer ratio on the site. Rory is still very focused on iPhone development, in particular MonoTouch by Xamarin. You can find Rory’s new site at Rory.me (once he actually starts blogging there). DVCS, if you’re not doing it – you should be **Speaker: Marco Ceppi **Marco Ceppi is a professional Web Developer and Linux Systems Administrator, though in his spare time he is an open-source developer/advocate and moderator on Ask Ubuntu. He owns Ondina, a web hosting startup designed to revolutionize the hosting industry. For the past four years Marco has been using Git and DVCS tools in and out of the work place, providing talks to employers and the community at large about the effectiveness, efficiencies, and simplicities of DVSC tools like Git. You can find out more about Marco at his website and on Twitter. If you haven’t already registered, head over to our page on Eventbrite to register. Don’t forget to use discount code “blog” to save $100!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/10/reputation-not-rep/","date":"2011-08-09T22:00:00.000Z","tags":["Careers"],"title":"Careers 2.0: It”s About Reputation, Not “Rep","text":"I get an email like Arik‘s every day or two. He wrote: The problem I see is that Careers 2.0 give advantage to developers with high Stack Overflow statistics (which I guess was the point, showing that you know stuff). Unfortunately, SO succeeded so well, that practically no good question remained unanswered. Thus, gaining a respectful reputation in SO is practically impossible these days. Which gives an unfair advantage to veteran SO users. First of all, whoa… have you seen the Stack Overflow homepage lately? We’re getting about 4,000–four thousand!–questions a day. There are puh-LENTY of opportunities to find a question to answer. But more importantly, sheer reputation scores are not how Careers 2.0 works, and it’s not what Careers 2.0 hiring managers are looking for. What they want to see is a sample of your work. They don’t need to see your answers to 7000 questions–they want to see five really good ones. A Careers 2.0 profile is designed to let you highlight your best software development work. You can link to open source projects, link to your favorite books, link to your blog posts, but most importantly, you can pick some of your favorite answers that you wrote on Stack Overflow and link to them. Four or five great answers is enough to prove to a recruiter that you know your stuff. (Here’s what my profile looks like. I’m not actually on the job market; please don’t try to hire me!) If you want to build up a decent Careers 2.0 profile without spending hours a day, I recommend looking for five unanswered questions and just overkilling the answers. There are LOTS of easy questions on Stack Overflow. They tend to drive me crazy; many of them are “do my work for me” type questions. If we had a dollar for every time someone asked how to “replace a bunch of strings in a bunch of files with another bunch of strings, in Python” we wouldn’t have had to raise $18M in venture capital. There are hundreds of questions on Stack Overflow about how to replace strings. Some of them have good answers and some have bad answers but you know what I really want to see? A single, amazing, awesome, EPIC answer that kills this topic so well that it becomes the standard source on the Internet of how to write code that replaces strings. It might start with an exploration of how to use sed and goes into Knuth-like detail on searching strings efficiently. Make your answer so amazing that it gets onto Hacker News and gets dozens of upvotes. This is your chance to write one great answer which is going to prove to a hiring manager somewhere that you deserve an interview. The theme of Stack Overflow is being awesome. Learning, teaching, and, at Careers 2.0, demonstrating your awesomeness. It’s not about hiring managers who want to hire the people with the most points… it’s about letting hiring managers see who you really are instead of just being a list of previous employers and schools."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/10/se-podcast-15/","date":"2011-08-09T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #15 – Michael Natkin","text":"Joining Jeff and Joel this week is Michael Natkin, from our Cooking.SE site. Michael is especially interesting because he is a computer programmer, but he doesn’t answer questions at Stack Overflow, only on the Cooking site (he’s our first guest to do so!) – he also writes over at Herbivoracious (which he started back in 2007). Their discussion includes: Michael is a vegetarian “foodie” (even though he really hates that word) – he and Joel commiserate over the oddities of being a vegetarian trying to eat out Joel wants to know what type of questions usually come up on cooking (and how they maintain their 100% answer rate) Joel thinks that you should never combine chocolate and garlic, but there’s a Cooking.SE thread that disagrees On the topic of what questions should be closed, Jeff points to this Electrical Engineering meta thread with a great example of why we need to keep closing questions Kicking off a whole discussion of creating house rules – Joel and Michael jump into discussing Momofuku and restaurants who create dishes and refuse to alter them for guests Jeff wants to take a deep dive into the top question of the month on Cooking.SE Also interesting about Cooking.SE is that there are very few “modernist” questions on it Make sure to check out Modernist Cuisine if you want to find a REALLY expensive cookbook (but its written by a patent troll, so we can’t recommend it) Michael is still seeing some good user growth with a few new faces coming in to the top users every quarter One big question that comes up when you see a question that is salvageable but needs some work, is it better to just edit it for them or to point out the issue to them and ask them to change it On a related note: should you point out if someone’s question contains a bad assumption or is “doing it wrong” or just answer what they’re looking for – check out this post on Waxy about his favorite sandwich shop and sweet tea We’ve gone back and forth about how much promotion we should do on the individual site “brands” – ultimately we’ve found that we rather promote the individuals actually answering the questions and helping them build their reputations (and remember, once you make it to 2000 rep, we remove the “no-follow” from your profile URL so you get the Google juice) We just improved the individual site Twitter accounts and they now tweet way more info. New community blog posts also show up in the header of each site so users will find out about the new posts We also rolled out massively improved tagging to help users better figure out what tags they should put on their questions Should our new CHAOS folks post their team blog on Tumblr (to make sharing easy) or our own platform (because its ours) If you haven’t checked out our new newsletters – you can get a weekly list of the most interesting questions on any of the sites you’re interested in, but don’t necessarily visit every day. As Joel says, its kind of like a free candy store! Make sure to check out our upcoming conferences; Stack Overflow DevDays – a two day programming conference that will cover all the new technologies you need to know about; and Server Fault’s Scalability Day – helping system administrators learn about massively scaling systems (with speakers from Facebook, Netflix, etc) – plus, save $100 off either conference with the discount code “podcast” Thanks for joining us! We’ll be on “summer vacation” for the next couple weeks, but we’ll be back on August 30th @ 4pm EDT with Anita Graser from GIS.SE (and our first female guest!)."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/10/welcome-valued-associate-grace-note/","date":"2011-08-09T22:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Grace Note","text":"You might know Grace as the moderator extraordinaire on our Gaming Stack Exchange. I appointed Grace to a pro tem moderator position nearly a year ago. I wasn’t an avid user of Gaming SE, but I was continually amazed how often Grace’s name kept popping up in our moderator chat room. Grace was quickly becoming The Person to quote when you needed a clear, compelling explanation of how this community-management stuff should work. Even in our meta community, Grace was earning a ridiculous amount of rep in a short period of time. You should read some of his posts because it’s really good stuff. Grace was a recipient of a community promotion sponsorship to send game releases for community members to write about. Grace exemplifies how much we can accomplish when smart people are willing to volunteer their insights and efforts to help get things done. When we started talking about expanding the Gaming program, Grace expressed an interest in applying for a Community Manager position. I jumped on the chance. Grace is a bit private in nature, but that’s okay; We hire community managers for their online persona, and not their real-world one. Grace’s work with Stack Exchange pretty much speaks for itself; but nevertheless, Grace indulged me with a bit of a bio to include in this announcement, and a picture that really exemplifies what Grace is all about: Grace is a gamer by heart and heritage, and thus a lot of her life comes from his love for video games. Learning artistic skills, practicing creative writing, coding small tests, and a fair amount of documentation occupies the majority of her time. The one thing more he cherishes more is her family, and he greatly enjoys that her new job lets him keep their new home from being a lonely place during the day, even if she can’t keep his mother company during the day proper. It may seem like a quiet boring life, but she manages to keep it interesting enough for stories, whether it’s setting his hair on fire during Biology class or being hounded by a white wasp for the entire length of a highway drive. Grace first found Stack Overflow in a very traditional success story—When she needed assistance for his SharePoint application on a previous employment. When the site continued to come up on future problems, she eventually gave a shot at answering, an experience that soon cascaded to the birth and guidance of the Gaming Stack Exchange that is her main haunt. He looks forward to working with everyone to help continue to sculpt the growth and communities of all of the Network. Grace is not fond of posting her picture online (very strongly emphasized by his lack of presence on any social network), but she endeavored nonetheless to procure an image from his past — from graduation, as it were. She hopes it’ll be satisfactory. ♪ Welcome to the team, Grace! ♪"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/09/improved-tagging/","date":"2011-08-08T22:00:00.000Z","tags":["Community"],"title":"Improved Tagging","text":"Every Stack Exchange question is required to have at least one tag; tags are how we group, order, and find questions. But how do you determine which tags are correct for your question? When you start typing in the tags field we display a simple list of existing tags that match what you’ve typed so far, ordered by frequency. Simple indeed. No explanation, just … activerecord (485). It became increasingly clear to us that were doing a poor job of educating users about not just which tags to use on a question, but also when to use them. And I believe our old tag completer was a big reason why. That’s why we went back to the drawing board and built a bigger, better, badder tag completer. One that not only uses a consistent visual tag style throughout, but crucially includes the tag wiki excerpt along with the tag! It’ll also assist when you’re asking a question on a meta, by helpfully displaying the required tags on a meta question as soon as you enter the tag field. It handles synonyms much more elegantly, too. We’re proud of the work the community has put into their tag wikis, and it’s our hope that the new tag completer will better surface all these fantastic tag wikis to help educate users about what the tags mean, and most importantly, when they should be used. A question with correct, accurate tags is a lot more likely to get a good answer. For this to work, you do need good tag wiki excerpts in place. Fortunately, we made it easy to edit a bunch of tag wikis at once on the redesigned tags page — and here’s our advice on how to write smart, effective tag wiki excerpts: The excerpt is the elevator pitch for the tag. You only have ~500 plain text characters for the excerpt, so don’t feel obligated to cover everything in it! Save that for the 30,000+ character Markdown tag wiki. The excerpt should define the shared quality of questions containing this tag — boiled down to a few short sentences. Avoid generically defining the concept behind a tag, unless it is highly specialized. The “email” tag, for example, does not need to explain what email is. I think we can safely assume most internet users know what email is; there’s no value in a boilerplate explanation of email to anyone. Concentrate on what a tag means to your community. For “email” on Server Fault, mention the server aspects of email including POP3, SMTP, IMAP, and server software. For “email” on Super User, mention desktop email clients and explicitly exclude webmail, as that would be more appropriate for webapps.stackexchange.com. Provide basic guidance on when to use the tag. In other words, what kinds of questions should have this tag? Tags only exist as ways of organizing questions, so if we don’t provide proper guidance on which questions need this tag, they won’t get tagged at all, rendering the tag excerpt moot. Think of it as a sales pitch: in a room full of tags screaming “pick me!”, what would convince a question asker to select your tag? Some tags are common knowledge. Most tags require a bit of explanation in the excerpt, even if it’s only 3 or 4 words. But if the tag is common knowledge — that is, if you walked up to any random person on the street and said the tag word to them, and they would know what you were talking about — then don’t bother explaining the tag at all. Stick to usage of the tag within your community in the excerpt. Even if you have good tag wikis already, it’s healthy for communities to introspect a bit about their use of tags, and what those tags mean. Periodically asking questions like “who would ever subscribe to this tag, and why?” can reveal a lot about the nature of tagging on your site."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/04/supporting-community-conferences/","date":"2011-08-03T22:00:00.000Z","tags":["Community"],"title":"Supporting Community Conferences","text":"One fun way to promote your community is to consider what upcoming conferences, seminars, conventions, events, or meetups appeal to your community and represent an opportunity to attract new, high quality users who love this stuff as much as we do! There are a bunch of ways the community team can support your events; to date we’ve done the following. Flyers One simple method of promoting your community is to have a one-page color flyer available to hand out to interested folks at events. We’ve created a few of these already, both for public sites and for beta sites: Stickers and T-Shirts Of course there are Stack Exchange t-shirts, stickers, hoodies, bags, and lots of other awesome goodies in the Stack Exchange store — and we’re happy to provide any Stack Exchange swag you need for the right event. But we’ve been busy creating site-specific goodies for the top users on each site, too! Naturally if you want to promote your Stack Exchange community at an event, you’d want site swag! We don’t have it for every site in the network quite yet, but we’re getting there — you can browse all the metas for questions tagged swag to see what’s currently available. Business Cards We’ve also begun creating custom business cards for each Stack Exchange site, mostly for the community moderators. We’ve been posting about it on each site’s meta as we go. But these don’t have to be exclusively for community moderators; if you’d like to promote your community at a specific event and you feel handing out business cards is the way to go — just let us know and we’ll get you set up! Sponsoring the Event We have also formally sponsored a few events, which not only helps subsidize the event for the entire community, but also lets us officially get the word out to attendees that we have these fantastic, high signal to noise Q&A; sites. We can provide high-res versions of the logos of any site to place on programs, signage, and other sponsored items. We have a preliminary logos page set up, but if you need any other site art, just post on meta and we’ll be happy to set it up! Underwriting Membership In some cases, there are membership opportunities in related organizations which we can pursue: Do we want StackExchange to become an institutional member of the TeX User Group? OWASP Conference Sponsorship Free League of Professional Sysadmin Memberships We’re happy to join groups to support the activities of these key organizations and underwrite the membership fees, as needed, of top users. Discuss it on your meta to determine what you think makes the most sense, and we’ll try our best to make it so. Sponsoring Community Leaders to Attend Depending on the circumstances and location, we can also sponsor community leaders to attend an event on behalf of their site. We will subsidize your costs to attend, within reason, and provide you with a bunch of swag to use as an ice-breaker when introducing yourself. No, really! We’ve already piloted this with three community leaders from GIS, GameDev, and Security — and we’d love to do more! In return, we do ask that you write up the highlights of your experiences at the conference on your blog, or on your respective site’s meta, so that others in the community can participate vicariously. Nothing giant, just 4-5 paragraphs is sufficient with anything cool you learned or particularly interesting that you saw, and naturally mentioning the sponsorship. Also, during the conference, if you hear any questions (implied or actual) that would make a great question on your site — don’t hesitate to ask those questions on the site! Either in helping experts get answers to their questions, or even asking and answering your own questions. Whatever inspires and interests you at the event, try to turn that into a small public artifact that everyone in your community can learn and benefit from. Anyway, no pressure, the main goal of attending is to go and enjoy yourself — while spreading the word about our community a bit — with a minimum of fuss from us. Sponsoring Community Leaders to Speak Now this one is a bit bigger ask — but if you can speak at an event on behalf of your community, we’re willing to go a very, very long way to support you in this. We call this program Speakers Bureau and we’ve posted about it on some of the top site metas. Under a Speakers Bureau sponsorship, we reimburse immediately for the following expenses: ticket to event hotel room for each day of event travel expenses (possibly even worldwide) $75 per diem In return, we ask that you give the talk dressed as a giant Stack Exchange logo. No, just kidding, we only require Stack Exchange face paint. But seriously, the point of the Speaker’s Bureau is to show off your expertise in the field. Teaching and learning from your peers is what we’re all about, and speaking at an event is a completely natural extension of that. We’re happy to look smart by association with you! How do we Get Started? It’s not enough to just drop a “We should send someone to a conference” post into meta and wait around for someone else to organize it. We’ve had some tremendously successful conference sponsorships, but most ideas don’t go much beyond the suggestion stage. Here’s what we recommend: A meta post is the first step. It’s up to you to raise a discussion on meta to determine which conferences, seminars, conventions, events, or meetups appeal to your community and would be a good way to publicize how great your community is to people who love this stuff as much as you do, but have probably never heard of your site. Or Stack Exchange. Do some research. What is this conference about? When is it? How many people? What are the costs involved? What are your opportunities for speaking, giving away swag, or otherwise raising awareness of your site? Rally support. Bring your ideas to the community. Explain why “this is a good idea, we should do this!” Be really specific and persuasive, and make sure you encourage feedback and ideas. We’ll be looking to this meta thread when deciding which conferences and activities are worthwhile. Bring it to our attention. If the idea has merit and community support, ping us with the details and participants to community@stackexchange.com. It’s up to you to sell us on your best ideas. The more details you have, the more likely we’ll be able to sponsor your community and provide whatever support you need to make this event a great success. And remember, please tell us about conference sponsorship options well in advance of the actual event. It is possible to scrounge things up last minute, but it isn’t as likely that we can do something substantial if there isn’t enough time. If there’s an event coming up that’s interesting to your community, talk about it on your meta, and keep the above “menu” in mind to see what fits — we’re here to support you!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/03/se-podcast-14/","date":"2011-08-02T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #14 – Miguel De Icaza","text":"Miguel De Icaza joins Jeff & Joel this week to discuss everything from Miguel’s many projects to identity on the internet to playdates for toddlers. Miguel is a force in the software world, having initiated and contributed to all kinds of products over the years – he’s also well known for being one of the most productive programmers out there. Check out the full episode for: Miguel has worked on a number of different projects including Midnight Commander, Gnome, Mono, Ximian and more Midnight Commander still continues to be developed to this day (albeit by other people) and it has some interesting new features that have been added Joel reiterates his hate for huge numbers of configuration options and appreciates Miguel not implementing ridiculous option trees in his programs We have a brand new podcasting setup (again!) – keep your eyes open for an upcoming post detailing our whole setup Jeff thinks that Unix couldn’t make the same advances as some other systems (like Apple) because they didn’t have a dictator to force massive changes on the community After leaving Novell (which owns Mono), he launched a new company (Xamarin) that is working on some new projects, while also supporting the existing Mono community Cross platform apps are stupid if they aren’t coded using the native UX and tools (see Word 5 for Mac, Safari for Windows, etc) which makes them look different from every other program on that platform Make sure to check out Area51 to see all of the new sites that are currently in commitment and under consideration of being launched. Support the proposals that you want to see as Stack Exchange sites! Our new Bicycles site just launched as a full site (and gotten its own theme)! We’ve started a new team of people (CHAOS) who will help enhance and promote many of our communities – the first project they are working on is enhancing question titles and converting many of them into actual questions This has also led to a big debate internally over the relationship between great questions and titles and what guidelines we should set for making titles Miguel is the most productive person that Joel knows (besides James Franco) We have a new newsletters feature that allows you to get a weekly newsletter showing the top and most interesting questions from sites that you’re interested in but don’t visit every day. Check out stackexchange.com/newsletters – it’s like a candy store filled with free candy! Sometimes people tell us they are interested in certain topics but their activity tells us something different (which is why we auto customize the homepage for each user) – its kinda similar to people on dating sites… Every once in a while, we have a site that makes it through Area51 despite it “sucking” (eg: freelancers) – the problem with these sites is that there simply aren’t enough questions because its too small a topic – the entire topic can be covered in one book There are two current proposals that present an interesting contrast on this topic: Christianity and Biblical Hermeneutics – the biblical site has great, specific questions, where’s Christianity doesn’t and will likely be a weak site Cross “Joel tells an army story” off your Stack Exchange Podcast Bingo Card! Coming soon: use as many OpenID logins as you want on SE (instead of the current limit of two) One of our developers (Kevin Montrose) wrote a great blog post on how your email is your identity Fair warning: Miguel lies a lot on his twitter feed Make sure you get your tickets for Stack Overflow DevDays (we just announced the first round of speakers for all the cities!) and use discount code “podcast” to save $100! Join us next week for another live episode on Tuesday @ 4pm (EDT) or catch the posted version on Wednesday."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/08/01/how-to-write-a-great-developer-job-listing/","date":"2011-07-31T22:00:00.000Z","tags":["Careers"],"title":"How to Write a Great Developer Job Listing","text":"Among other things, we sell job listings through our Careers 2.0 service, and we thought it might be helpful to determine some of the factors that impact the success of a listing. So we crunched through 6 months of data and these are some of the things we found. On getting seen In order to get people to apply for your job, you will have to get them to your listing first. There are a few places that will help with that: our text ads on Stack Overflow (see image), various places on our web site and our tweets. Due to space considerations there isn’t a whole lot for people to base their decision on (to click or not to click?). They’ll see: The title The employer The location Whether the job is telecommutable Tags (during the research period only on our website) That’s all you have to sell your position with, so you have to make it count. While you (probably) can’t do much about your name or location, the telecommute status, title and tags you choose can make a difference. We provide roughly 60 characters of title space when displaying jobs on Stack Overflow, and yet a lot of jobs simply have “Developer” or some such as a title. It’s like the seller of luscious, beautiful, high piled, soft shag rugs made with the wool of virgin sheep fed nothing but the finest ambrosia taking out an AdSense ad that says: “Rugs for sale”. Wouldn’t you rather click on “C# developer; work on massive, scalable social solutions” (if you were into such things)? Something as simple as mentioning a technology in your title can improve the percentage of people that apply to your job after seeing the listing (apply rate) by about 25%. While it doesn’t necessarily improve the number of views, it improves the relevance of the viewers, leading to more applications. If you can also give some sense of what type of work people will do, all the better. In January we did something new: we added the ability to tag your job listing. As it turned out, this was a good thing. Listings with tags get on average between 40 to 60% more views than jobs without tags. Based on this finding we now also show the tags in our ads on Stack Overflow. It’s still too early to tell if this will make a difference, but we are thinking it will. For telecommute jobs, the numbers are even more dramatic. Jobs that are marked “telecommute” receive on average 2.25 times more views and 2.125 times more applicants. On getting applicants Eyeballs, while important, are at best a measure of how successful you are at attracting people to your listing. The real objective is to get the right people to apply and it turns out there are certain things you can do to improve the number of applicants (just like there are things that will drive most applicants away). To determine what these factors might be we looked at some of the best performing listings and some of the worst ones as measured by apply rate. The difference between the two groups was quite dramatic: The average apply rate for the high performing group was 30.9%, and the average for the lower was 3.2%. For both these groups we looked at a number of factors that might influence a listing’s performance, both positively and negatively, and scored listings accordingly (+1 for positive factors, -1 for negative ones, 0 if not applicable). On average, the well performing listings had twice the score of the low performing ones. Some of the things we found: Do’s The three biggest factors associated with a high apply rate are: Culture description (5 times more prevalent among the well performing listings) Does the work advertised sound cool? (As measured by the admittedly somewhat arbitrary measure of: “would we like to do this?” – 3 times more prevalent). Few bullets (seen in 20% of the high response listings and none of the low response listings). With regards to culture description, we should note that where the culture was mentioned it always was a good one, which may be the real reason this has a positive effect (we’re fairly certain that describing an average or downright sucky culture would not do much to help). So the Do should really read: If you have a great culture, list it. If you don’t, create one, then list it. Not all work is inherently cool. But even then, the way it is described matters. Do you give an example of the type of problems candidates will be working on? Of what their work might mean to others? In short, do you tell potential candidates why they should care? (Wrong answer: to make us more money and keep the shareholders happy – we’re paying you a salary after all) Other things we looked at included company description, whether the listing company was well known, position description, telecommute status, salary range posted, and willingness to sponsor H1Bs, but these either didn’t differ from one group to the other or there were too few listings that had these to say something conclusive about them. Don’ts We also looked at some potentially negative influencers: A plethora of bullets (46% of the low apply rate listings vs. 7% of the top) TL;DR (31% vs. 0%) Generic title (46% vs. 40%) We are talking lots of bullets, 10-15+. There were a even few listings with over 25 bullets between the various sections. The worst offenders had multilevel bullets with no descriptive text. TL;DR really indicated our inability to finish reading the listing, either because of excessive length, dryness or marketing speak. Clear, to the point descriptions of your company and the work the candidate will be doing are good, copying your PR department’s latest press release, not so much. You’re courting here, save your life story for the 3rd date. Final thoughts When you are hiring a developer you enter a highly competitive market, and to attract stand-out candidates, you need a stand-out listing. While your mileage may vary, the above could help you increase the number of applicants by a factor of (almost) 10. We hope this will help both employers (by getting them more applicants) and programmers (by having better listings to choose from). That’s what we found, but we would love to hear from developers and potential employers — what works for you?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/28/stack-exchange-site-newsletters/","date":"2011-07-27T22:00:00.000Z","tags":["Company"],"title":"Stack Exchange Site Newsletters","text":"Have you noticed the new ads appearing on all of the Stack Exchange sites? That’s right, despite a well-publicized aversion to email spam, we’ve added weekly newsletters to all Stack Exchange sites! The site newsletters are meant for all of those sites that you find interesting but aren’t quite addicted to enough to visit every day. They include the top hot questions for the week, new up-voted unanswered questions, and (coming soon!) important moderator announcements. They’re an easy way to catch up on what you might have missed each week. Of course, these newsletters are strictly opt-in, and you can unsubscribe whenever you want. You can sign up via the occasional sidebar ad or on your user edit page, or go to the newsletters page on stackexchange.com to subscribe to any site. If you have any suggestions or ideas for the newsletters, feedback is always welcome. To see previews of all the newsletters and subscribe, check out the newsletters list on stackexchange.com."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/27/does-this-site-have-a-chance-of-succeeding/","date":"2011-07-26T22:00:00.000Z","tags":["Area51"],"title":"Does this site have a chance of succeeding?","text":"Anytime you find yourself answering the same question over and over and over and over … blog post time. This is that blog post. This cycle has repeated itself on more sites than I can remember — When a new community approaches the end of their beta period, users start looking forward to graduation. So when that 90th day looms, anticipation starts to turn into speculation about whether the site is going to survive. Does this site have a chance of succeeding? Is this site viable? Visits per day — should we be worried? At what point will this site grow out of the beta stage? What are the criteria for getting site out of “perpetual beta?” Site Not On Track to Survive Public Beta What happens now? In reality, 90 days is a minimum length a site is expected to to remain in beta. The blog post, When will my site graduate?, explains that a site can stay in beta as long as necessary to reach critical mass. As long as the questions represent real problems and consistently receive great answers, the site isn’t going to get closed down. “It takes as long as it takes.” So why all the angst? Communities should generally know when the site is failing. Questions don’t get answered, quality declines, community up-keep wanes; In short, the site stops providing a good experience. But that doesn’t satisfy the inquisitive analyst in all of us. When users seek out a report on their performance, they turn to the analytics of Area 51. Wow, pretty scary. Right? With big, red letters and “Worrying” stamped all over the place, the angst is understandable. Let me dispel a widely-held misconception… The Area 51 summary does not represent some sort of “report card” filled with pass/fail grades. If you’re expecting someone to show up on the 90th days and say “Sorry, times up. It’s time to go home,” it doesn’t really work that way. So what do these statistics mean? The Area 51 statistics provide an opportunity to see where your site can improve. “Worrying” and “Okay” ratings tell you where to focus efforts to push a site closer to graduation. Questions per day A steady influx of questions is a natural side effect of a growing, healthy site. But when the number of new questions becomes “worrying,” some folks might exhort to “seed” the site to push those numbers higher. Joel suggested a healthier alternative by rallying users around specific events as a catalyst for asking interesting questions you come across in your day to day work. Any event that gets your community going — a hot new release, an upcoming convention, any news-worthy event — Here’s how he did it on Ask Different: Now that OS X Lion is shipping, there will be zillions of Mac users upgrading, and they’ll have lots of questions. And since all those questions will be new, Ask Different will have as good a shot at having the best answer than any of those, you know, competitive sites. Essentially, this is a great time to recruit new members! As you install and learn Lion, whenever you have questions, no matter how silly, ask them here. You’re not the only one having that question. Millions of other people will, too. Ask them even if you think you’re going to be able to find the answer yourself… and if you do find the answer, go ahead and answer it yourself … Read the post and issue a call for questions around interesting events that will be super-popular in your community. Those questions will bring in lots of traffic from search engines and will attract some great new users who will add value for years to come. % Answered The saving grace of the statistics above is having 98% of their questions answered. That’s fantastic. “Excellent” means visitors have a high confidence their questions will get great answers quickly. If your site is teetering near 90% or lower, you can probably do better. A concerted effort to get those hardest-to-answer questions answered should help. If you have a lot of questions not worth answering (i.e. “unanswerable” as asked, or low quality), it might be time for a site-wide cleanup effort. That’s best initiated and organized through a meta post. Go for it. The % answered provides a great “pulse” of the site. The most important criteria of a site should be whether experts enjoy answering the questions. If experts think the questions are stupid, then they’ll lose interest in the site and questions won’t get good answers anymore. This whole thing is about about providing a good experience for the people looking for expert answers to their questions, and the % answered is a good metric to watch. Avid Users Another area you can work on is participation. Having a strong base of ‘avid users’ comes from voting up good content. If you’re not voting regularly, you’re not building up a class of leaders that can help run and maintain the quality of the site. All those other statistics will come in time. Don’t worry about the actual numbers. I get nervous when users start quoting numbers and propose ways to artificially drive them higher. Calls to lower the bar on quality or close less questions are focusing on the wrong thing. There’s more to a healthy Stack Exchange site than having a lot of questions and traffic. It’s about providing a good experience for the people looking for expert answers to their questions. So why is my site so “worrying”? As far as the “worrying” statistics above, it’s not really all that unexpected. Most Stack Exchange sites are not expected to be an overnight success. Most go through a steady period of building up content before reaching critical mass. What we generally see with Stack Exchange sites is nice, steady traffic going kind of horizontally for a while; then, at some unpredictable point, we hit critical mass and POW all the indicators start climbing inexorably. This is the right point for a site to come out of public beta. Can you tell us when we’ll graduate? Unfortunately, we are not yet able to predict when a site will reach critical mass. A large part of this summer will be spent looking at the traffic data we’ve accumulated over the last three years to make sense of it all. If your traffic indicators aren’t dropping precipitously, that’s a good sign. If your traffic is falling, we’ll let you know through meta initiatives. When your site finally reaches that tipping point, Jin will start posting some concepts for the final design. Watch your meta site to provide feedback. As for when that will happen — as soon as we know, you’ll know. In the meantime, focus on keeping your quality high, and use the share links to promote your most intriguing content."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/27/se-podcast-13/","date":"2011-07-26T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #13 – Jin Yang","text":"Jeff & Joel are joined this week by Jin Yang – our resident web/graphic designer here at Stack (the distinction between the two becomes a discussion point). Once we get the proper picture of Jin in the chatroom, he relates everything from his background in design to how he ended up at Stack Exchange and our philosophy behind design. Full topics this week include: Jin refers to himself as a “web designer” as opposed to a “graphic designer” because of the type of work he focuses on. Last week, we discussed this amazing answer from Eric Lippert and how it was a great answer in response to a poor question. Looking over this led Joel to notice that some people will vote to close a question as duplicate because the answers are the same even though the questions are different. In this case, there was already some questions on the topic but Eric decided to write the “canonical” answer that can be referenced from here out. Joel will often do the same thing on some of the other Stack Exchange sites (like in this OnStartups post) Sometimes you do have to have SOME duplication of questions to make sure that the different use-cases are covered, but you want to avoid there being 12 of the exact same question on every site. When applying for Stack Exchange, Jin created a custom site targeted at Joel to show his abilities. As Joel notes (and expands on) Jin went with the always smart tactic of spending a ton of time focusing on the one company he truly wanted to work for instead of very little time on 50 random companies. Many people forget that truly great design is very hard, when you have to meld it with making sure the site stays useful and effective for the users. Talking about continuous improvement: Jin notes an episode of This American Life covering similar topics. Joel likes Robin Williams’ (no, not that Robin Williams) book on design since it has really good and basic lessons on it – The Non-Designers Design Book We use a special CSS structure that lets us have a master CSS file for the entire network and then smaller CSS files for each site that just contain the differences between the generic template and the special parts of each site. We’ve also learned a number of design lessons: like that white on black designs just don’t look very good and aren’t usable. There have been issues in the past with designers creating their designs on macs but those designs then looking funny on PCs because of differences in text rendering – fortunately, thanks to improvements on both ends, that happens less now. While Jin is our in house designer and works on everything, we occasionally have help from some outside designers (such as for English and UX) who are members of the community. Prompted by a question for the chatroom, Jin is really excited about getting to design our RPG site. Anonymous feedback is now live! That means non-logged in users and those with less than 15 rep can give feedback on how good questions/answers are. We haven’t figured out how we’ll incorporate this data yet, but we’re collecting it and will figure that out. Make sure you get your tickets for Stack Overflow DevDays (we just announced the first round of speakers for all the cities!) and use discount code “podcast” to save $100! We’ll be back live next week with a bunch of brand new podcast gear and our special guest: Miguel De Icaza. Join us for the live stream and in the official show chatroom"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/21/documenting-devdays-2011-2-e28093-speakers/","date":"2011-07-20T22:00:00.000Z","tags":["Company"],"title":"Documenting DevDays 2011: #2 – Speakers!","text":"We’re excited to share an in-depth look at just some of the confirmed speakers for DevDays 2011! The program is comprised of heavy hitters on topics picked by you and the rest of the Stack Overflow community. As Joel mentioned, the purpose of DevDays is to provide a top-notch education on several technologies and these speakers certainly live up to that challenge. San Francisco, October 12-13: Salman Khan Sal Khan is the founder and one-man faculty of the Khan Academy (khanacademy.org), a nonprofit with the mission of providing free, high-quality education to “anyone, anywhere” in the world. A former hedge fund analyst with degrees from MIT and Harvard, Khan was helping a young cousin with math in 2004, communicating by phone and using an interactive notepad. When others expressed interest, he began posting videos of his hand-scribbled tutorials on YouTube. Demand took off, and in 2009 he quit his day job. The Khan Academy is the most-used library of educational videos on the web, with two million unique students per month and over 50 million lessons delivered. Scott Chacon Scott Chacon is the VP of Git at GitHub. He is the author of the Pro Git book by Apress (progit.org), the Git Internals Peepcode DF as well as the maintainer of the Git homepage (git-scm.com) and the Git Community Book. Scott has presented all over the world. LinuxConf.au, OSCON, RuPy, Symfony Live, Ruby Kaigi, RailsConf, RubyConf, Scotland on Rails, Euruko to drop a few names. He also does corporate training on Git all over the world. Chris Smith Chris Smith is author of “Programming F#” and was part of the F# team at Microsoft. Now he works at Google bringing next generation language tools and IDE services to the cloud. He has a passion for fruity drinks with umbrellas and writing movie reviews. Sydney, 25-26 October: Sam Saffron Sam is Stack Exchange Valued Associate #00008, joining the team in June of 2010. Living in Australia, Sam is a core developer on the Stack Exchange platform focusing on performance and scalability. Sam enjoys building his own stuff too, most notably Community Tracker, written in Ruby on Rails, and Media Browser, written in C#. Since Sam started working for Stack Exchange he launched the Dapper ORM and Data Explorer open source projects and helped design and launch the MVC MiniProfiler open source project. Sam also built profiling products for Symantec, where he worked as development manager for the performance team for Altiris platform prior to joining Stack Exchange. Ryan Thomas Ryan is a developer on the Confluence team at Atlassian, currently working on Confluence 4.0 and having implemented the current continuous deployment infrastructure. London, 14-15 November: Jon Skeet Jon Skeet is user 22656 on Stack Overflow, where he tends to post about C# and Java. If you want to attract his attention, post a question pointing out a situation where a C# program doesn’t behave in an expected way, citing the specification. Please don’t do so shortly before this talk though, as he’ll be very distracted until he gets a chance to dig into it. In terms of coding-for-money, Jon is a software engineer at Google’s London office, currently working on the Google Offers project. He speaks in a personal capacity, however, not on behalf of Google. Except to say that Google is hiring, and any CVs should be sent directly to him. Marc Gravell Marc is a long-time Stack Overflow user, elected moderator, and has been working on the Stack Overflow / Stack Exchange team since 2010. He also writes some code occasionally (focusing on C#), and is involved in a number of OSS projects in the .NET community. Michael Barker Michael Barker is currently a lead developer at London Multi-Asset eXchange (LMAX) where he spends most of his time scratching his head while thinking about simpler and faster solutions. Intermingled with travelling to various countries around the world, Michael’s 10+ years of experience has been spent battling unnecessary complexity across a variety of industries (finance, telecoms, government) and in whatever technology that happens to have been hurled in his direction (Java/JavaEE, C++, .NET). Michael is also a sporadic Open Source contributor having dropped patches into a number of OSS projects including PostgreSQL, JBoss, GNU Classpath and most recently Mono. Washington DC, December 15 & 16: Rick Minerich Richard Minerich is a Researcher at Bayard Rock, a new company dedicated to applying the cutting edge from academia to solve real world problems. He’s been working in, speaking on, and writing about F# for the past three years and was recently awarded F# MVP of the Year for his work in the Microsoft community. His most recent publication is “Professional F# 2.0”, a guide to F# for the object-oriented .NET developer. Ryan McGeary Ryan McGeary is a freelance software consultant, business starter, speaker, and amateur triathlete. Ryan is the owner of McGeary Consulting Group, a software development and consulting firm in Northern Virginia. He is a partner and co-founder of BusyConf.com, a conference organizing web application. Ryan is also co-founder of Let Me Google That For You. Ryan specializes in web application development and enjoys leveraging new tools and frameworks for his day to day development efforts. Stay tuned for additional speaker announcements as we complete the agenda(s). If you haven’t already registered, head over to our page on Eventbrite to register. Don’t forget to use discount code “blog” to save $100!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/21/power-laws/","date":"2011-07-20T22:00:00.000Z","tags":["Community"],"title":"Power Laws","text":"Hi everyone! I’m the math intern, and I thought I’d introduce myself by sharing a little something from what I’ve been doing. A little about me: I’m a moderator and frequent contributor at math.SE: In real life, I’m a rising senior at MIT. I have a math blog, Annoying Precision, which unfortunately is not very accessible to non-mathematicians (sorry!). I think using the internet to spread knowledge more effectively is great, so I’m a big fan of the Stack Exchange network. This summer, my job is to look at the Stack Exchange network’s data and see if I can find anything interesting. Here’s something I thought was interesting. Suppose I told you that about 25,000 Stack Overflow users posted answers on exactly one day between March 3rd and March 30th. How many users would you expect to have posted answers on exactly two days in March? Three? Four? It would make sense for the numbers to be decreasing, but how quickly? One standard guess is that the numbers satisfy a power law. More formally, you might look at Zipf’s law: the number of users who post on n days should be proportional to 1/ns for some value of s. In many of the well-known examples, s is very close to 1, but as it turns out for the specific case of describing the frequency of contributions by individual authors, a special case of Zipf’s law called Lotka’s law suggests that s should be very close to 2 instead. So you should expect about 6,200 users posting on two days, 2,800 users posting on three days, 1,600 users posting on four days, and so forth. The actual numbers are 5,761 users posting on two days, 2,709 users posting on three days, and 1,586 users posting on four days. Not bad! Here’s a plot of all the actual numbers, together with the predictions from Lotka’s law (I chose the proportionality constant so that the total number of users posting on at least two days turned out right): The fit looks great, but since the numbers decrease so quickly, it’s hard to be sure. The standard way to visually check if you’ve got a power law is to use a logarithmic scale on both axes. If there’s a power relationship y = c/ns between two variables, there’ll be a linear relationship log y = log c – s log n between their logarithms with slope -s. Here’s the same plot again with logarithmic scales: Note that the line from Lotka’s law is not a linear regression. It is a bad idea to use linear regression to check for a power law. With logarithmic scales, the fit looks good, but not perfect: there are more users posting between five and sixteen days than expected and fewer users posting more than sixteen days than expected. But I think the discrepancies from Lotka’s law on a site might tell us something interesting about the site. Here’s the same plot for SuperUser: The fit for users posting between two and seven days is quite good, but the discrepancies are different: on SuperUser, there are more users posting on one day than expected and fewer users posting between eight to ten days than expected. So SuperUser has fewer active users than it should, which suggests that it’s less healthy than it could be, especially compared to StackOverflow. As for the former discrepancy, part of the problem is that SuperUser gets a ton of migrations from StackOverflow, and anyone who posted an answer before the question gets migrated counts as posting once, but that user might not ever visit SuperUser. That ends up accounting for about half the extra users posting on one day, but I think it’s also just easier to feel like you have something worth posting on SuperUser as opposed to StackOverflow. That hypothesis is supported by looking at the same plot for math.SE: Here there are fewer users posting on one or two days than expected! But it’s harder to think that you have the right answer to a math problem than to think that you have the right answer to a question about Windows, for example. Note also that there are more users posting on six or more days than expected. So math.SE has more active users than it should, which suggests to me that it’s relatively healthy. Just for fun, here’s the same plot for ServerFault: It looks like the SuperUser plot, but a little healthier. The tails of the last three plots may look weird, but that’s because fluctuations caused by small sample size get amplified on a logarithmic scale. To get a larger sample size, let’s incorporate data from every 28-day cycle instead of just one (I was using these instead of months so they’d all be the same length): More or less the same patterns as before emerge, although ServerFault looks a little healthier now (and also fits Lotka’s law absurdly well). The corresponding plot for StackOverflow looks almost exactly the same, so I’m not including it. I don’t have a good conceptual explanation for Lotka’s law. There are certain mathematical reasons why power laws are plausible in certain situations, but I don’t know of any good explanations of why certain values of s (like 1 in many examples and 2 here) seem to be preferred. However, given that Lotka’s law empirically appears to hold pretty well in this situation, I think looking at how a site deviates from Lotka’s law as above can give some useful information about how healthy it is. Plus, it’s just convenient to have a compact description of the expected distribution of user activity. I’ll try to describe another interesting thing I’m looking at where it’s handy to have Lotka’s law around in a later post."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/20/se-podcast-12/","date":"2011-07-19T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #12 – Patrick McKenzie","text":"This week, Jeff and Joel are joined by Patrick McKenzie – StackOverflow contributor, internet commentator and SEO expert (especially when it comes to driving traffic for Halloween bingo cards). After a few early tech issues (don’t worry, we cleaned up for everyone at home) we jump right into things, with tons of discussion, including: The big news for Stack Exchange this week: we officially launched our new mobile support! We also recently introduced in-line editing so you don’t have to go to a separate page to edit an answer or question – we really want to encourage editing and have people help make questions better. Patrick is the creator of BingoCardCreator.com – an amazingly popular site for putting together bingo cards for various occasions. Apparently, one of the biggest markets is for Halloween Bingo Cards with the entire month of October being worth $20k in sales. He also has a new tool for helping doctor’s offices remind patients of upcoming appointments. Patrick owns a bunch of “exact match” domain names which provide a huge SEO bonus since Google assumes that anyone who owns a domain exactly matching a search must be credible. The bonus doesn’t apply to hyphenated domains though. Joel suspects (and Patrick confirms) that Google now incorporate WHOIS data into their ranking to discount any domains that are owned by people who have a history of owning crappy domains. (Joel has apparently also never seen Burn Notice) One potential issue with rewriting question titles to be SEO’d is that not everyone searches in the same language that Google ranks for – so you might actually hurt how many people find your questions. Joel misses all the “labor of love” sites that people have written because they truly love a subject – the quality and usefulness of those sites is FAR better than the useless drivel turned out by content farms. Patrick does point out one defense of them though. Jeff has been wanting to talk more about the “Ask Me Anything” concept that originated from Reddit. Jeff thinks the format of Reddit isn’t the best for the AMA idea (and in general has some issues with the format) and likes a new site: AnyAsq.com which is really optimized for it. Ultimately, this leads to a further discussion of the value of various formats for organizing different types of content. Joel & Jeff have often wondered how to prevent the “tyranny of the sort order” in which already upvoted posts (or posts from high rep users) get lots of upvotes on their answer even though there may be a better one. Sometimes certain answers get crazy levels of upvotes – like this one Our math intern, Qiaochu, has been doing some research and found the effect of having an upvoted post on a users propensity to return: Of course Stack Overflow DevDays 2011 is still coming along, so make sure to pick up your tickets now! We’ll be coming to 4 cities around the world this fall with some of the foremost experts on software development, so don’t miss it! Use the code “podcast” for a $100 discount too! We’ll see you next week when our guest is Stack Exchange designer Jin Yang!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/16/mobile-stack-exchange/","date":"2011-07-15T22:00:00.000Z","tags":["Community"],"title":"Mobile Stack Exchange","text":"Another long-standing request, dating all the way back to 2009, is for a mobile optimized view of Stack Overflow. Since … the existing HTML and CSS was (and still is) rather light the original iPhone did a great job rendering Stack Overflow mobile traffic on Stack Overflow is only about 1% of traffic … we didn’t feel this was urgent back in 2009. Or 2010. But things are different now. Great mobile smartphones are (almost) ubiquitous now, with more and more people regularly accessing the web on the go. Performance is a family value, and there’s no question that a proper set of HTML optimized for small screens offers a faster, smoother experience. Also, any work we do on a mobile design is now effective on not just a trilogy of websites, but fifty-seven different Stack Exchange sites! Overall we felt it was time to roll up our sleeves and build a new rendering path for small-screen mobile devices. We’ve had the mobile design in private and public beta for a while to polish up all the obvious rough edges. Now it’s officially blessed for everyone across the entire network. If we detect a whitelisted mobile device user agent, you will automatically receive an optimized mobile view of any Stack Exchange on your smartphone. Mobile Stack Exchange is intended to be a fully functional version of Stack Exchange — that is, you can ask questions, answer questions, vote, favorite, comment and all the other essential things you would expect. Please note, however, that if you do find anything you can’t do on mobile, there are links at the bottom of the page to switch from mobile to desktop view at will. We also remember this setting on a per-user basis. Now go forth and enjoy Stack Exchange sites from wherever you happen to be on whatever mobile device you have. Go ahead. Give it a shot. And after using it, if you have any specific feedback for us on the mobile view, please leave it in this meta question."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/14/how-much-should-you-pay-developers/","date":"2011-07-13T22:00:00.000Z","tags":["Background"],"title":"How much should you pay developers?","text":"We’re at that time of year where we go through everybody’s salary and makes sure it’s reasonable. We’re up to about a dozen in-house software developers, and we’d been paying them based on a compensation system developed by our cousins at Fog Creek, which is different enough from Stack Exchange that there was some chafing. So we sat down and thought out developer compensation from basic principles, and came up with what we feel is a pretty robust way to pay great people. Here were the core principles on which the system is built: The development team at Stack Exchange is an amazing group of programmers who live up to our motto of “smart and get things done” every day. We want to offer them compensation that is fair, easily understood, transparent, and competitive. Fair means no games. Our compensation is not based on how well you negotiate or how often you ask for raises—it’s based on a repeatable predictable system. There’s no forced ranking, so other people don’t have to do badly for you to do well. We don’t have a range of possible salaries for every level, we have a single salary, so everything about the system is algorithmic. Easily understood means that any developer can figure out what their salary should be according to this system. They can see what they need to do to move up in their career. And different managers can figure out how to pay their team members and get consistent and fair results. Transparent reflects Stack Exchange’s core beliefs about running our business in the open, without secrets. It means that if a list of everyone’s salary suddenly appeared on Wikileaks, nobody would be surprised enough to be upset. Transparency is essential to insure fairness. Competitive means that you’re earning at least as much at Stack Exchange as you would earn elsewhere. It’s critical to being able to attract and retain the kind of developers we want working for us. If our compensation system isn’t competitive, we won’t be able to hire the people we want without giving them an “exceptional” salary, and exceptions defeat fairness. One important principle of Stack Exchange is that we do as much as we can publicly, and we try to leave public artifacts of all the work we do. In that spirit I’ve uploaded a complete copy of the current compensation plan so you can see what goes into compensation decisions at Stack Exchange. The only thing that is not public is the actual, final computation that determines each individual’s paycheck, because we have to balance our own philosophy of openness against the individual developer’s right to personal privacy. Stack Exchange Developer Compensation (PDF) Are you looking for new work and new compensation? Find entry-level to senior opportunities over at Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/11/faster-edits-with-inline-editing/","date":"2011-07-10T22:00:00.000Z","tags":["Community"],"title":"Faster Edits with Inline Editing","text":"Every Stack Exchange question and answer pair is intended to be an evergreen, editable resource for future travelers: The editing feature is there so that old question/answer pairs can get better and better. For every person who asks a question and gets an answer on Stack Exchange, hundreds or thousands of people will come read that conversation later. Even if the original asker got a decent answer and moved on, the question lives on and may continue to be useful for decades. This is fundamentally different from Usenet or any of the web-based forums. It means that Stack Exchange is not just a historical record of questions and answers. It’s a lot more than that: it’s actually a community-edited wiki of narrow, “long-tail” questions — questions that aren’t quite important enough to deserve a page on Wikipedia, but which come up over and over again. Editing is what you might call a family value on our network. All the content you generously contribute to any Stack Exchange site is licensed to us, you, and the rest of the world under Creative Commons with the explicit promise that future visitors can help us improve it and keep it up to date — largely through editing. To get an idea of just how much editing goes on, here’s a snapshot of edits performed on Stack Overflow between February 1, 2011 and July 8, 2011: One of the primary ways we try to encourage editing is by making it easier to edit: We added inline tagging in April 2010, which made it much faster for high reputation users to retag questions. We added suggested edits in February 2011, which opened up the world of edits to anonymous users and users with 2,000 or less reputation. How much of the editing total do anonymous and regular users contribute? Here’s a snapshot of suggested edits performed on Stack Overflow for the same time period; the green line is registered users, and the blue line is anonymous users. So, about one quarter of all edits are suggestions from anonymous and regular users. Only a tiny trickle are from anonymous users, on the order of 10 to 30 per day. (If you’re wondering why anonymous edits doubled in June, we made a copy change on the site that helped. Try browsing the site in incognito / inprivate / private browsing mode and see if you can tell what it is.) We think the current level of editing is admirable — and climbing — but we are deeply concerned that there’s not nearly enough editing to keep up with the corpus of almost 2 million questions on Stack Overflow. The English Wikipedia currently has about 3.6 million articles, so if you think of every Stack Overflow question as a potentially editable article, we already have more than half the footprint of Wikipedia to maintain and keep up to date. A scary thought as Stack Overflow nears its third birthday. To address this concern, we relied on another of our core family values: performance is a feature. That is, if you want more editing … make editing faster! That’s why I’m pleased to announce that we now support inline editing on all Stack Exchange sites. There’s no longer any need to visit a separate editing page; simply click “edit” and begin editing the post right there on the question page. This is a much faster method of editing, as the above animation demonstrates. (And for optimal speed, remember to press tab, tab, space to save your edit — we even built in a little ctrl+enter shortcut to jump right to saving the edit.) We’ve only opened up inline editing to editors (users with 2,000+ reputation) for now, but we might extend it to all users eventually. And if you prefer the old editing page for whatever reason, just hold down ctrl when clicking on edit to get it. What’s so special about editing? You might as well ask what’s so special about editing on Wikipedia? Uh… everything? So go forth, be bold, and exercise your new, faster inline editing skills!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/08/documenting-devdays-2011-1-picking-cities-formats/","date":"2011-07-07T22:00:00.000Z","tags":["Company"],"title":"Documenting DevDays 2011: #1 – Picking Cities & Formats","text":"The following post is the first in a series documenting our ongoing planning and production of the Stack Overflow DevDays 2011 conference series. Upon joining the Stack Exchange team in April 2011, one of the first meetings I went to was a sit down to discuss the plans for our DevDays 2011 conference. Most conferences start their planning at least a year out, so we were already a bit under the gun given that we were targeting a September start for the conferences. The first question was about the scale of the conferences. Our only previous comparison was to the 2009 DevDays: a one-day stop in ten cities around the world, each priced very affordably. While the one-day conference, range of cities and low price point made it easy for people to attend, there were substantial shortcomings. First, with only 7 hours of total time for content, we didn’t have time to cover all of the topics that we wanted. Second, there wasn’t time for people to network or socialize outside of the conference session. And third, because of the low price point, we couldn’t afford to put on a quality conference: food was lacking, internet access was intermittent to non-existent, and the missed microphone and video cues were a-plenty. In order to improve the events for 2011, took a serious look at the feedback; We found that a low quality conference just wasn’t an option for us and we needed to “bulk them up” – hence we decided to hold a two-day conference in four cities priced at $499 each. We structured it such that conferences would still be highly accessible to the community, but would allow us to fix almost all of the issues with the 2009 conference. In addition to doubling the amount of time we have for content, a two day format allows attendees to spend with each other at evening networking parties and mid-day breaks. The next decision was where to host them. We knew this would be a hot topic once announced (one only needs to look at the multitude of “Why not in city X” comments that are left on any post discussing locations), so we wanted to make sure that we thought through it well. It was immediately clear that we needed to do events in the Western US, Eastern US, Europe – we also figured on choosing one more “wildcard city”. Western US: This was actually the hardest locale to decide on given just how many cities and options there were. Given the distribution of developers, it was clear that we were going to stick to the coast, which left us with four major options: Seattle, San Francisco, San Jose and Los Angeles. After reviewing demographic data and stats from the 2009 conference, Seattle and SF jumped out to early leads so we dug in and started searching for venues in those cities. Given the size of the conference (and other tech requirements, which we’ll go into all the technical details in a later post), there weren’t that many options for venues, especially in Seattle. After we decided to co-locate the Server Fault Scalability conference with the West Coast DevDays, the decision was locked: we needed to be in the Bay Area. From there we looked long and hard between both San Francisco and San Jose – both had their respective advantages, but ultimately the date patterns and pricing were better in SF. Plus Jeff lives right across the bay and we wanted to be nice and give him a short drive. Eastern US: There were just as many choices for cities on the East Coast as on the west, but thanks to a couple key criteria, it was much easier to make a decision. First, we wanted to stick to a metro area with a major developer community: that narrowed it down to NYC, Washington DC and, Boston. New York was out fairly quickly due to the incredibly high cost of doing anything. DC has a larger community than Boston and is more centrally/conveniently located for others coming from places outside the northeast. We also really wanted to do a community based hack day and DC had the best setup and date pattern to accommodate it. Europe: Another case of a pretty easy decision, as London jumped out to an early lead. We have a huge community in the UK, two of our biggest 2009 DevDays were London and Cambridge, its fairly easy for anyone in Europe to get to, and there are tons of venues to choose from. The UK is also an English speaking country, which makes traveling in much easier for anyone coming in from abroad (given that all of our content is in English, we felt fairly confident assuming that all attendees speak it). Oh yeah, we also have a remote developer who lives in the UK. Wild Card: There were lots of options for the fourth conference: we could have done another stop somewhere in the US or Europe, tried a conference in Asia, or even just gone to Hawaii and relaxed for a week. As we thought about it though, Sydney emerged as a clear favorite: it’s placed apart from the other conferences so we wouldn’t be overlapping too much, Australia has a strong developer community (not to mention they’ve been bugging us for a while to come down under), it’s convenient to Asia, and once again, it’s an English speaking country. Also, in what has become a common theme, one of our developers is based there. Well there you go, the background into how we picked our format and cities for Stack Overflow DevDays 2011. If you haven’t already registered for your city of choice, make sure to head over to Eventbrite (and use discount code “blog” to save $100) and get signed up!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/06/se-podcast-11-2/","date":"2011-07-05T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #11 – Rory Blyth","text":"This week, Jeff and Joel are joined by Rory Blyth (with no ‘e’ as he is very insistent) fresh off his move to a new house in Portland, OR. This week’s topics include: Rory has had a whirlwind of moving and relocating as of late. Today is the first day he got more than 3 hours of sleep, but he is now happily in his new house. Rory hasn’t been writing as much as of lately because of random personal and relationship issues – but he’s free now! Ladies and gentlemen, start your engines! Jeff recommends “Enemy of the State” (even though it stars Will Smith) – it’s a spiritual sequel to The Conversation and it also contains a faraday cage, in case you’re interested in seeing one of those. While working on .Net Rocks! (our podcast competition – so don’t visit that link) Rory moved for a while to New London, CT – and it only took one day to decide to move there. Rory was also part of podcasting way back in the early days (of 2004) while everything was still being decided about formats, styles, enclosures, etc. He was also a featured guest on Podcast #71 of the Stack Overflow podcast in 2009! Jeff wants to know what Rory has been up to for the past couple years: and apparently Rory is still very focused on iPhone development. One of the biggest changes: all the clever hacks that programmers did originally are now supported by real APIs which makes it less fun for the nerds. MonoTouch was recently spun out by Novell after its “restructuring” and is now tied in to Xamarin. Rory loves MonoTouch because of the ease of it and the incredible power that it gives developers, including cocoa bindings, the ability to drop in .NET binaries, efficiencies, etc You can also find Rory’s new site at Rory.me (once he actually starts blogging there) One valid reason to use Objective C over MonoTouch is that it is a much smaller file, Although it has gotten much more efficient recently, according to Rory. Rory argues that fascism is good in tech products: from the iPhone to Xbox, by isolating and controlling everything in the platform it allows the company to control the experience and ensure quality. Otherwise you can end up with things like Windows Mobile / Windows CE. Google runs the risk of running into similar issues with Android. The other question is if they are diversifying out too much (into crazy projects like wind power). How do we keep Stack Exchange questions up to date? The Monotouch vs Objective C question above is 2 years old now and may no longer be fully accurate; we accept edits from anonymous and 1 reputation users now, but how can we motivate them to improve this old question? Rory is also one of the most “prolific” answerers on our site with the highest vote to answer ratio on the site! Rory will also be speaking at Stack Overflow DevDays – so pick up your tickets now if you want to see him (with discount code ‘podcast’ for $100 off) Help us test the new Stack Exchange mobile view on your mobile device by enabling it on meta! (scroll down to the very bottom of the page to enable it there.) There’s no podcast next week (the 12th) but we’ll be back live @ 4pm on the 19th so see you then!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/07/01/its-ok-to-ask-and-answer-your-own-questions/","date":"2011-06-30T22:00:00.000Z","tags":["Community"],"title":"It’s OK to Ask and Answer Your Own Questions","text":"The FAQ has contained one key bit of advice from the very beginning: It’s also perfectly fine to ask and answer your own question, as long as you pretend you’re on Jeopardy! — phrase it in the form of a question. So … if you have a question that you already know the answer to if you’d like to document it in public so others (including yourself) can find it later it is OK to ask, and answer, your own question on a relevant Stack Exchange site. To be crystal clear, it is not merely OK to ask and answer your own question, it is explicitly encouraged. I do it all the time! For example, when I ran into a nasty issue with Java exploits in Google Chrome when browsing for images, I documented that on Super User by asking and answering my own question. Now, others can benefit from my misfortune — and best of all, I got new even better answers beyond what I offered! Overall, a huge win all around. Friend of the company Dana Robinson recently wrote: On a project I’m working on at my current job, I’ve come across some really pernicious problems where there is either no good information available or the good information is buried under a sea of bad information. I’ve kept these issues in the back of my head and, now that that part of the project is winding down and the issues are resolved, I plan to go on Stack Overflow and create a high-value question and answer pair for each issue. That way, the next person who has the problem won’t have to slog through so much misinformation. I might even learn some more about the various issues that plagued us if other experts chime in with their own knowledge. Bottom line — never hesitate to ask and answer your own question on any Stack Exchange site. Please do! It’s all part of our shared mission to make the internet better. Making the internet better is a noble task. It can also boost your career. Discover these junior programming jobs to kickstart your developer employment journey."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/29/se-podcast-10/","date":"2011-06-28T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #10 – Steve Karantza","text":"Jeff & Joel are joined by Steve Karantza, better know as Shirlock Homes, our #1 user on the DIY Stack Exchange. Steve is also our first non-programmer oriented guest on the podcast! Everyone wanted to know how Steve ended up on the site: turns out his son is a computer programmer who has used Stack Overflow for a while and encouraged his dad to check it out. Steve is also a big user of This Old House Pro, a community for contractors hosted by This Old House. The main difference is that he gets answers on This Old House but gives answers on DIY.SE. Steve would also like to see some more contractors join DIY.SE The number one problem he sees is people getting in over their heads. Especially in regards to electrical and plumbing projects, people don’t know or understand the codes and safety issues. How do you know if a contractor is going to be competent and good? Best advice is to get referrals. And once you have them, make sure they are real, go out and actually see how the jobs came out. If you haven’t seen There, I Fixed It, go check it out for great examples of what not to do. Especially, never, ever use a screwdriver as a fuse. One great question that Steve answered was how to estimate the height of a tree: he recommended an old logger method. If at any point during a project you stop and think; how the heck do I do this? It’s time to stop and get advice, either from a contractor or other reliable source. Steve relays the story of a friend who had a fixer-upper and continually called him for advice after getting stuck on a problem for 5 hours. Ever needed to do plumbing work but don’t know how to sweat pipes? Check out Shark Bites which form secure couplings without sweating. Unfortunately – they aren’t cheap. If you want to learn how to do home improvement work: just pick a project and start it. Some contractors will also let you help out on projects on your house instead of one of their lowest level guys (but not all contractors will let you). Steve tried to build his first house at the early age of 22 right after he left the air force – as with all early projects, there were a LOT of lessons learned. Jeff also related how learning building is similar to learning code: ultimately one of the best methods is to simply sit down (or stand up) with someone better than you and work on a project with them One challenge for Steve has been learning all of the intricacies of the software and systems that make up the sites (like the difference between the main and meta sites), since he’s not a computer guy. He’d also like to see some more highly experienced people come into the site. The writing that Steve has done on the site has also spurred his desire to keep writing and based on it, he’s even talked to some of the local papers about doing an “Ask the Contractor” column. Steve also noticed how long people continue to read and vote on his answers over time. Joel pointed out this question on sliding glass doors that still continues to get lots of views even though only 3 people originally answered the question. Steve is excited about the Gardening and Landscaping site (which is currently in public beta) – if you haven’t checked it out, you should! Steve’s son Alex is also launching a new website – Axiom Home Services – to help homeowners with their home inspection questions and needs. Coming up soon, we’ll have a weekly newsletter which will recap interesting and popular questions from the week. We just officially announced the launch of DevDays 2011 tickets (yeah, yeah we’ve talked about it before, but now its official). As always, you can get your tickets with a $100 discount by using the code “blog” Join us next Tuesday for a special surprise guest! Not to mention, audio mixing provided by our very own Jason Punyon."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/27/devdays-is-back/","date":"2011-06-26T22:00:00.000Z","tags":["Company"],"title":"DevDays is Back!","text":"Stack Overflow DevDays, the universe’s best conference series for coders, is back, and it’s bigger than ever! Here’s the idea behind DevDays. You’re a developer. You’d love to learn all the latest hot new technologies. Things like DVCS, HTML 5, Node.js, CSS3, Hadoop, etc. The stuff the cool kids are all talking about on the playground while you’re stuck in the basement somewhere grinding away on Java Enterprise Visual Basic. The idea behind DevDays is a fast, high-bandwidth, fire hose tutorial on at least ten interesting concepts. We’ll assume that you’re a developer, you know what a loop is, but each tutorial starts at the ground level and gives you a whirlwind tour through a technology by showing you actual code. Every presenter launches an editor and writes code from scratch and shows you what it does. There are almost no prepared PowerPoint slides with ten bullet items each containing 10 words explaining the ROI benefits of some new technology. There are not even any PowerPoint slides with cats and pandas doing hilarious things, such as this one: Yes, DevDays contains precisely NO funny pictures of cats. We might have Jon Skeet with a sock puppet, though: (That was Jon Skeet and Tony the Pony from London DevDays 2009.) What we have instead is some great presenters from the community who will write code and compile code and explain it all while you watch, and you’ll come away knowing enough about each new technology to know what it’s good for, what it’s not so good at, how to do the basics, and how to learn more. Bottom line: it’s the best possible way to spend two days and learn as much as you would learn in two years of reading Twitter. We have FOUR, yes FOUR different DevDays conferences coming up this fall. Each one is its own production, and they’re all going to be spectacular. If you came to DevDays last time, prepare to get blown away. This time everything is DOUBLE. Two days instead of one. Better food and coffee. Better locations. Bigger screens to make it easier to follow along. Lots of social activities. And, for the first time ever, we’ll be visiting one city in Australia (shown at right), for an antipodean increase of infinity percent. Anyway, registration is now open. The schedule is: October 12-13 San Francisco October 25-26 Sydney November 14-15 London December 15-16 Washington, DC There are two! special! bonuses! you should know about before you choose a city: In San Francisco, the day after the conference (October 14), Server Fault is holding a one-day High Scalability conference. You may want to go to both for a full three days of amazing amazingness… if you think your heart can handle the excitement. In Washington, the day before the conference (December 14), we’re have a big open source hackathon. The entire Stack Exchange dev team will be on hand and it’ll be a lot of fun. So, go, sign up now. You can save $100 using discount code blog."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/23/blog-overflow/","date":"2011-06-22T22:00:00.000Z","tags":["Community"],"title":"Blog Overflow","text":"Every Stack Exchange site starts with a Q&A site, made up of three pieces that help bring the whole community together: bicycles.stackexchange.com, the main Q&A site meta.bicycles.stackexchange.com, questions about community and administrative matters chat.bicycles.stackexchange.com, the third place for real-time collaborations But wait, there’s more? A couple months ago, the Super User community took it upon themselves to create a blog run by the community. This effort has been so successful that a couple other communities floated the idea amongst themselves. Internally, we recognized this as an opportunity many of our communities might be interested in and brought the operation in-house. We are happy to announce that with Blog Overflow, Stack Exchange communities are able to run a community blog. Several communities have already begun blogging: Super User and Gaming. A blog for your community can be an excellent form of community engagement. So how does my site get a community blog? Starting a blog is easy. Keeping up a blog, contributing to it regularly is difficult. Blogs are hard work. Wanting a blog is obviously the first step, but there are a few things that the community needs to discuss in order to get a blog going. Raise the idea on the child meta. A community blog needs the involvement of community members. These blogs don’t exist to be the personal blog of a community member. They are both for and run by the community. It needs to be something the community collectively wants and will cultivate. Define the scope and purpose of the blog. Is the blog about the site? Is it about the site’s topic? Is it about the industry around the topic? Keep in mind the audience of your community and their interests. Another generic blog about may not be all that interesting. A community blog should be interesting to both current members and potential new members. Recruit contributors. Who will write entries for the blog? Starting a blog is a bit like going through the buffet line. Be realistic – don’t let your eyes be bigger than your stomach. Think seriously about if and how often you will be able to contribute a blog post, including research/prep time. The more contributors there are, the less frequently each contributor needs to post. One post a month is a much easier to stomach than a couple posts every week. Plan a schedule. Given the results of steps #2 and #3, think about a rough idea of a schedule for the blog. Will there be one post a week, posted Mondays? Will there be posts on Tuesdays and posts on Fridays? You don’t need to be pushing out posts daily, but you should post at least once a week. But we don’t have anything to write about. Sure you do! If there was nothing to write about, your Stack Exchange site wouldn’t exist! Stack Exchange sites trick you into writing. Interview top users. Just who is that user who is shooting up the reputation leagues? Highlight top content. What great question was posted on the site recently? Recognize it! Don’t just copy the question and its answers to the blog, blog about the question and its answers. A fine line there, eh? Delve deeper into the question or an answer. Add more context. Compare or analyze answers against each other. There is a lot to work with here. Review a product. Reviews don’t fit the Q&A nature of the sites, but these rules don’t apply on the blog! Between a review written by a random person on the internet and a review written by a user on the site who consistently gets a lot of upvotes, which review would you trust more? Tell us an interesting story. Did you go on an incredible cycling trip? Play a really interesting game? Read a great book on math? All it takes to get started is a set of pictures or screenshots you can share with some narrative stitching it together. So long as it’s topical and you’re excited about it, others in the community would probably enjoy sharing your experience! Explore hot topics. Is there a topic on your site that keeps getting asked about over and over? Maybe some tips or a closer look at the topic would interest the community. Keep up with current events. What is making news for your community? What interests the community? Got any tips? Absolutely! Have someone holding the reins. This person doesn’t need to be the one writing all the posts, just someone that helps coordinate who is writing what and when it is getting posted. Pick a posting schedule and stick to it. It is easier to simply keep up from the get go than catch up if you fall behind. Have a couple draft posts stashed away for a rainy day, ready to go that can be published if there is a lull. Don’t be intimidated. If you can contribute a post to your Q&A site that gets an upvote, you are able to successfully communicate. Posting to the blog is no different! Plan and manage, don’t wing it. Set up a Google Doc, or something similar, that lets you keep track of ideas for posts, who is writing what, etc. Peer review each other. The easiest way to do this is using the built-in WordPress permissions. Not everyone should be an admin on the blog. Set up a simple hierarchy. Have editors that review pending posts and schedule/post them. This frees most people up to write instead of trying to coordinate with a group of people. There is a chat room set up where you can bounce ideas off other people, or ask for suggestions/tips from users that have been blogging. When a new blog is setup for a community, it will go through a beta phase much like the Q&A site. Initially, the blog will be hosted on our .blogoverflow.com network. As the blog matures, grows, and continues to be contributed to regularly, we will move the blog over to our blog..stackexchange.com network and replace the blog link on the Q&A site to the official community blog for the site. So what are you waiting for? Head on over to your meta and see if there’s interest in a community blog. Be sure to check out the Blog Overflow homepage, which lists recent posts from all the blogs in our network. Happy blogging!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/22/se-podcast-09/","date":"2011-06-21T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #09","text":"This week, Jeff and Joel are joined by Greg Wilson, an author, developer, and former university professor, who is also an expert on open source software development. Once make it through the jokes and get his mic sounding great, we can jump in and explore all kinds of interesting topics, like: Everyone’s favorite Canadian airline? Porter Airlines! What makes them so great? They use FogBugz as their customer service software. We’ve hired a math intern to help us mine through all of our Stack Exchange data and (hopefully) improve the site. And to make it better, he’s an MIT student and Math.SE moderator. According to a study of Microsoft data, what was the strongest predictor of bug rates in Windows Vista? The answer: how far apart the developers are in the org charts. The more separate they are, the more likely there are to be conflicting orders or different mind sets. There have been fairly strong opinions for years on what makes a good programming setup/environment, but people are just now beginning to look at actual data to derive conclusions Greg thinks this is LONG overdue, especially given that software development is an engineering backed profession – why weren’t our processes based on science? Even big companies, who have access to the data, have been avoiding actually using data for their decision making: people treat it as a craft rather than an engineering discipline Greg has written several books on how to develop software better – two of which came out this year and are must reads. Making Software: Joel requires that you read this book, because its the first one to take a scientific approach to making software as opposed to the subjective and anecdotal way that most have in the past (eg: everyone who has done one software project and then written a post on HN about how their method is “amazing”). Greg wanted to use the results of his studies to bring actual concrete steps back to professionals on how they could improve their process His favorite chapter: while Test Driven Development is very popular right now, a survey of all of the studies that have been done on TDD have shown that the better the study done, the weaker the signal as to its benefit. Another study recently looked at how much effort goes into maintaining the build system: 5 to 30% of all development effort is spent on maintaining the build system. With the variations being huge even when working on similar projects. Clearly, there’s a huge difference in the efficiency of some developers. Measuring programmer “productivity”: As Joel points out, any metric that you come up with as a method for measuring programmer productivity can be gamed some how. He even made money as a consultant in the past showing companies why they shouldn’t hire consulting companies to improve “productivity” since programmers would instantly game any system (which is how consulting companies appeared to be successful). Ultimately, it’s pretty hard to actually measure. Greg points out that the irony is that the single most correlated measure of productivity is simply lines of code written. Joel counters with that only holds true, so long as the developers don’t know they are being measured based on that (since its so easy to game). His second book is The Architecture of Open Source Applications: its entirely CC licensed so you can read it online for free. if you do buy a hard copy though, all the proceeds go to Amnesty International. Greg decided to publish it for free online after seeing how quickly Beautiful Code was put onto torrent sites. His key thesis behind it is that we don’t teach people how to read code (only how to write it). His example: you wouldn’t hire an architect who had never looked at other designs before. What’s really important isn’t the internals of the code, but rather the architecture – especially when it comes to understand what you’re trying to achieve. The best parts about the book are where the authors stop talking about what’s inside the code and start talking about why those things are there. Deloitte performed a study called “A Random Search for Excellence” (based on a book by Tom Peters called “In Search of Excellence“). They tried to explain the data that Peters used by assuming that all of the companies were on a random walk and found that yes, he didn’t actually prove anything. Joel is reading Henry Petroski’s new book on the difference between science and engineering. TO-DO: Greg needs more data for his upcoming work. So take your favorite piece of open source software (something you find interesting) and take it apart and tell us how it all fits together. Joel’s post on building communities with software Jeff’s take: If you want to get better, work with programmers who are better than you. Period. And since its so important to pick your work family well, consider coming to work at Stack Exchange! Make sure to register for Stack Overflow DevDays 2011! Use the code “PODCAST” for a $100 discount in any city. We’ll also be having a one day hackathon on December 13th in Washington DC – come join the entire Stack Exchange dev team in hacking away on your favorite open source project! We’ve launched a few new sites including Astronomy and Philosophy! Plus, Travel is now in private beta and Personal Productivity is starting soon! We’re going to start a weekly newsletter highlighting the best questions on the sites. We’re targeting this based on some recent data we’ve found that a lot of our users don’t return frequently after their initial visits and activity. Because of how much we love our universal inbox, we’re working on an feature that would email the things that you missed from your inbox. Thanks for joining us again this week – join us next Tuesday @ 4pm when our guest is Steve Karantza (aka Shirlock Homes on DIY.StackExchange). We’ll be live at livestream.com/stackexchange – see you then!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/21/welcome-valued-associate-susan-stewart/","date":"2011-06-20T22:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Susan Stewart","text":"Stack Exchange is starting to look like a Ponzi scheme. You start by creating the world’s largest Q&A site for programming, from which you find and hire of the best programmers on the planet to work on expanding our network, so we can attract and hire from the best community of users, bar none. That’s why it was quite the coup when Susan Stewart was looking for a new career path. You may know Susan as HedgeMage, moderator of the Parenting Stack Exchange: Susan is now donning the title of Community Manager on our Stack Exchange team. Welcome, Susan! Susan works worked as a Drupal hacker from Indianapolis, Indiana with a passion for community building. Her tales of working with the Drupal community and motivating passive users to become active contributors were eerily similar to what we do every day. When she’s not working or spending time with her junior hacker, Susan is writing, backpacking, and practicing martial arts. She is also a co-author of The Definitive Guide to Drupal 7 and president of Drupal Group Indy. Susan dislikes writing about herself almost as much as having her picture taken, so this is a rare opportunity to see Susan out from behind her Binary Redneck persona: “One part hacker, one part farmer.” I’m excited to have Susan join our team. She aced the interview to put it mildly. Her unique insight was already well-known to us, and after talking to her, there was no doubt that Susan would make a great addition to our team. Not many people love their job enough to log in on a Sunday night just to see what’s up. I’ve already caught her running down our virtual halls proclaiming — and this is a direct quote: I am now a community moderator with Godlike powers, so will happily answer any questions pertaining to the site you might have! Welcome to the team, Susan! Take her up on her offer, say “hello” and wish her good luck!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/16/se-podcast-08/","date":"2011-06-15T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #08","text":"This week, Jeff and Joel are joined live “in studio” by Marco Arment, creator of Instapaper and formerly the lead developer at Tumblr. This week’s topics include: What’s the proper numbering format for podcast episodes: decimal, binary, octal? There’s also an extensive debate regarding whether Marco has ever been on the podcast: everyone but Joel agrees that he hasn’t. Marco talks about leaving Tumblr to start his own company (Instapaper) Part of what made the move easier was that he did it on the side for about a year before leaving Tumblr (with the okay of his current boss of course). By the time he left, Instapaper had become a full time job and Tumblr had become far more than a full-time job – it needed even more time and support. It became very stressful knowing that even the slightest mistakes in code could cause 1100 people per second to get error messages Instapaper is also a bit easier to support because it’s inherently designed for offline use, so if the servers go down, people aren’t immediately deprived of the entire functionality like they are if your web service is down. Instapaper was created by Marco to solve the problem of reading on the train and reading old articles that he had found while at work. Marco is currently being confronted by the “big player” problem (aka The Starbucks Problem), now that Apple has introduced their “Reading List” feature in the newest version of iOS and Mac OSX. As Marco points out though, there’s several big reasons that he isn’t really hurt by it: 1) It doesn’t solve the offline problem – it’s only online bookmarks and (2) It doesn’t clean the text to make it easier to read Most importantly, it doesn’t solve everyone’s needs and at the same time, it educates the market as to the value of this type of service, thereby enlarging the entire market and creating more customers for Instapaper. This tends to work really well for the small player when you’re trying to solve a big problem with lots of personal preferences – it doesn’t work well when its one simple task that needs to be completed. Examples of situations that are good for the little guy: RSS Readers, email clients, coffee shops, etc. Examples of situations that are bad for the little guy: .ZIP files, regular bookmarks, etc There’s also tons of successful notes and stock apps, despite Apple providing support for it natively. So many people want more functionality that it creates a whole new market. Ultimately, if someone wants a bit more than what Apple provides by default, they are probably going to go to Instapaper and ultimately increase Marco’s user base.. The key to this model: you have to do it better than the big guy People sometimes also choose random or arbitrary reasons for choosing products (like the color or logo or name) Jeff finds that the effort of queuing things up (especially reading material) is greater than the benefit he gets from being able to read things later. Marco points out that he doesn’t want Instapaper to be seen as an obligation – something that many people ultimately feel it can be To combat this, he is considering a feature where he would email them saying “I noticed that you have X articles more than Y months old, do you want to archive them”, thereby giving them an ‘out’. People don’t find to tend the app while searching for offline reading – they just find that as an additional benefit after they start using it. Joel thinks that Facebook created the “Like” button in order to collect data about web pages that would be very good for creating a search engine Marco also points out that Facebook provides all of these various embed platforms so that they get the cookie on your computer and then can see anytime you visit any of these pages and build a graph of what you (and everyone else) looks at. Bringing it back to Stack Exchange: Jeff points out that we’ve been considering giving anonymous users the ability to vote somehow (currently voting is the most protected form of interaction on the site). One option is a ‘like’ or ‘thumbs-up’ button somewhere on the page. Another option is to collect the votes from anonymous users, but count them in a separate tally or as a fractional vote Fun Fact: there are two important etiquette rules in New York City 1) You should go through the revolving door first so that he is doing the work of pushing the door 2) When getting in a taxi, you should get in first, since the first person in needs to slide across the seat. We’ve rewritten the descriptions for the close reasons of subjective and argumentative to make clear that its for a question that is inviting discussion or outside the scope of the site. Registration for Dev Days in all cities is now open – make sure you register and get more info at http://devdays.stackoverflow.com Join us next week, once again live @ 4pm on Tuesday for Greg Wilson for deep insights into the communities surrounding open source software projects."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/15/codeplex-and-other-gateway-drugs/","date":"2011-06-14T22:00:00.000Z","tags":["Careers"],"title":"CodePlex and other Gateway Drugs","text":"We’ve added a bunch of new features to Careers 2.0 profiles. Based on popular demand, we have added CodePlex, Bitbucket, SourceForge and Google Code as open source hosts. (Plus an “other…” option for those we don’t explicitly support.) Already, over 2,500 people have added over 11,000 open source projects to their profiles! Gateway drugs We think that if you are active in open source, you deserve to be on Careers 2.0. So we’ve added “gateways” for GitHub and CodePlex – log in via those services, we’ll take a look at your activity and (perhaps) auto-invite you to Careers 2.0 on the spot. Real programmers ship Also? A new section on your profile for Apps & Software – for all your other public projects that don’t fall under open source. Something in an app store, bingo card software, a browser plugin… Ramble on And? A place for your writing, such as blog posts. Employers like to know that you are opinionated and articulate. All these new features are driven by our (and your) ethos of show me. Try ‘em out, and if you have suggestions, let us know!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/13/optimizing-for-pearls-not-sand/","date":"2011-06-12T22:00:00.000Z","tags":["Community"],"title":"Optimizing For Pearls, Not Sand","text":"In March 2010, we rebalanced our reputation system to favor answers. While we value good questions (and asking a great question is absolutely an art), we want to explicitly encourage people to provide the best possible answers. Without people interested in providing good answers, the questions are moot. We know that answers have more intrinsic value than questions, and the reputation balance should reflect that. The question asker already enjoys a substantial benefit beyond reputation gain from upvotes on their question — namely, they get great answers to their question! Thus, the asker shouldn’t need as much reputation gain. In November 2010, we began to actively block low quality questions, too: We believe asking questions on our site is a privilege, not a right. If, after a few fair attempts, you haven’t been able to prove that your contributions to a particular Stack Exchange make it at least … not-worse … then we reserve the right to refuse your questions. If we don’t do our part to cull the bad questions, then we risk alienating the true experts who provide what really matters: the answers! Last month we made voting more visible and added 10 additional “question-only” daily votes to encourage people to vote more on questions, so we can better discern their value. Users intuit that answers are the real unit of work in any Q&A; system and tend to favor answers in their voting. Continuing in that same vein, we have two more changes to formally announce today: We now limit users (and IP addresses) to a maximum of 6 questions per day and 50 questions per month. Downvotes on questions no longer cost the casting user 1 reputation, so they are effectively “free”. Perhaps you’ve noticed a theme here. Incoming questions are a universal constant, all around us in countless billions. But answers — truly brilliant, amazing, correct answers — are as rare as pearls. Thus, questions are merely the sand that produces the pearl. If we have learned anything in the last three years, it is that you optimize for pearls, not sand. Consider the question Does torture work well as an interrogation technique? on Skeptics. Is this a brilliant question? Is it even an original question? No, it’s just a mundane grain of sand question that could have been asked by anyone at any time. What makes it remarkable is the incredible answer on that question by Larian LeQuella with over 100 upvotes. Sand, meet pearl. That’s why we’re determined to keep question quality high, even at the cost of refusing a little sand. It’s true that you can’t have Q&A; without questions, but having the wrong sorts of questions is far more dangerous. The fastest way to kill any Q&A; site is to flood it with low-quality questions. I think Mark Trapp summed it up best in this meta answer: To put it another way, when I go to a Stack Exchange home page, I see a list of questions. If most of those are terrible questions with little to no indication that I’d be wasting my time by reading them, the value proposition of visiting and participating is diminished: I have better things to do. Compare that to answers on a specific question: I’ve made a conscious choice to look into what I think is an interesting question. I already made the decision that the question is worth my time. If I find the answers to be useless, I have a few different options, as an interested party, to register my displeasure, including writing my own answer. Being able to write your own answer is key: if your answer is good enough, it’ll rise above the junk answers and everyone will be better off for it. There is no such action for question lists. I can’t say “these questions suck, show me this question I just thought up instead”: that’d be silly. So, it’s imperative the question list have a high signal-to-noise ratio, and removing the penalty for those users who do take the time to read a question and later find it to be useless so they can down-vote is conducive to that. Fundamentally, answers can be filtered in ways that questions cannot. While there is a tension between having “enough” questions and a bunch of amazing, highly skilled answerers twiddling their thumbs waiting around for something to do, in the long run we’d much rather err on the side of having interesting and on-topic questions for these folks to sink their teeth into. We feel that the world is awash in questions, but not answers. Answers are the real unit of work in any Q&A; system. Therefore, the only logical thing to do is to maximize the happiness and enjoyment of answerers. If this means aggressively downvoting or closing unworthy and uninteresting questions, so be it. Without a community of people willing to answer questions, it really doesn’t matter if there are questions at all, does it?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/09/1000000th-user/","date":"2011-06-08T22:00:00.000Z","tags":["Community"],"title":"1,000,000th user!","text":"Like most sites, it’s hard to figure out the number of users on Stack Exchange. The widest possible number is the number of unique visitors, most of whom just read our content and move on. That number is now around 19,000,000 according to Google Analytics or 14,000,000 according to Quantcast – the difference comes from the fact that Quantcast has some “de-dupe” technology to try to estimate the number of human beings while Google Analytics just counts unique cookies. Another number we track internally is “number of human beings who type on one of the Stack Exchange sites”, where we’re happy to count you twice if you type on two different sites, because you’re twice as awesome. And that number just hit 1,000,000, so we’re very excited! Our millionth user account was created by 9monkeys on the GIS site. 9monkeys will be winning a free ticket to Stack Overflow Dev Days, travel expenses included. Congratulations!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/08/se-podcast-07/","date":"2011-06-07T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #07","text":"Jeff and Joel are joined by Sam Saffron (aka Waffles), our only Australian developer at Stack Exchange! Does “Hell Banning” — making a problematic user’s posts visible to just him or her — make sense? You can see Jeff’s post about it over on Coding Horror. When issues like this are presented to the community, the gravity of the situation is often not fully conveyed to the audience. They can’t see all the removed content that tells the story of how destructive that person was to the community. Of course, we always encourage discussion of general moderation issues on the per-site metas. Two pieces of advice about moderation discussions: try to stick to generalized discussions about a broad class of moderation, without delving into minutiae specific to one user and one situation. To keep it useful to the community, avoid devolving into a laundry list of every tiny thing that happened to every user. Also, try to limit discussion about moderation to those users who have an actual connection to the site and these moderation events, and aren’t just stopping by to opine about some abstract, perceived wrong on the internet. (insert XKCD cartoon here) Sam Saffron has been working remotely for Stack Exchange from Australia for about a year now. Sam came to our attention as an avid participant on Stack Overflow and meta, as well as his own homegrown Stack Overflow inspired support tool he wrote, Community Tracker. In addition to being the lead on the Stack Exchange Data Explorer, Sam’s touched almost every area of the engine at this point: improvements to badges, privileges, edits, users page, tags page … We’re starting to build a feature we call emacs.stackexchange.com, which essentially gives users a filtered view of Stack Overflow to specific topic groups, as represented by a set of tags. We have historically shut down Area 51 proposals that would factionalize Stack Overflow, and although we feel this is the correct decision, we are sympathetic to the underlying concern. Stack Exchange sites are intended to be groups of topics, identified by tags, that are of broad interest to people who all love a topic — like, say, programming. This is fine when you follow a large tag like [java] or [c#], but what about when you follow 20 small tags? Yes, you can set up a tag filter, but it might be nice to have some default groupings for certain popular sub-areas — thus, emacs.stackexchange.com instead of the Area 51 site proposal for emacs. The bedrock guideline of our Area 51 site creation process is, “I’d like to ask a question about {x} but there’s no place on the Stack Exchange network to do so”. We’ve been a bit disappointed that the CSTheory community has been unwilling to accept an expansion of their scope, because there are technical computer science questions on Stack Overflow that aren’t being handled correctly and have no other place to go. The German and Japanese proposals are now public! These are our first baby steps into other languages, as guided by the community. It’s already caused a bit of an issue as we “advertise” popular questions to the network that may have very few words in English. This also comes up with http://judaism.stackexchange.com/ questions which can have quite a bit of Hebrew in them. As Joel builds out the CHAOS (NYC community development and evangelism) team out, they start with a generalized online SAT/ACT style aptitude test. Which Jeff did not pass. But the far more interesting test that we’re giving candidates is what we call the “Internet competency test” — how would you test someone to see if they are experts at using the internet? How to find things, how to send email, how to link, what “The Facebooks” and “The Twitters” are, and so forth? Building such a test is an interesting thought exercise. How would you do it? A question from the chat room — are there any metrics around how much the new suggested edits feature has improved the site? One thing we’ve learned is that “simple” edits to fix layout (code formatting) and proper English go a long, long way towards increasing the overall quality of the experience. At Zappos, they went so far as assigned Mechanical Turk tasks to edit and improve shoe reviews! We have noticed that a) some users are hesitant to approve edits that totally rewrite the post, even when it’s necessary and b) we don’t get nearly as many anonymous edits as we expected; most edits come from existing or registered users. The intent of editing questions and answers is to offer more permanent resources that can evolve over time. It is important to displace the old, out of date information that is often entombed in Google; for example with Keyboard shortcut to access the first link in a Google search page? Jeff was surprised to find that almost all the searches he did produced old, obsolete, and sort of incorrect results — so he rolled up his sleeves and created a definitive answer, then edited the question and other answers. Hopefully future internet travellers will find this correct and up to date answer… and they can click edit to improve it, too! We are open sourcing our .NET web performance mini-profiler. This has been huge for us on Stack Exchange, directly leading to 2x-10x performance improvements across the board, and we are pulling it into all our sites. It’s awesome and if you work at all in .NET building websites, I strongly encourage you to check out the .NET web performance mini-profiler for your projects. Kudos to Jarrod Dixon for putting this together in a highly polished, re-usable form, and Marc Gravell for coming up with the genesis of the concept in chat. The brand new Stack Exchange Shop is now officially live! Pickup some of our great stack exchange gear like Shirts, Hoodies, Jackets, Pens and even Beer Steins! Join us next week when our guest is Marco Arment, the creator of Instapaper and the former lead developer of Tumblr. We’ll also be live streaming again, so tune in to http://www.livestream.com/stackexchange starting at 3:30pm – you can also join the live chat at http://chat.stackexchange.com/rooms/512."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/06/01/se-podcast-06/","date":"2011-05-31T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #06","text":"It’s our first test of a live podcast! In case you missed it, we streamed this week’s podcast live during the taping. It’s something we’re playing with and may continue to do in the future if it is popular. You can tune in to the live tapings Tuesdays @ 4 PM Eastern / 1 PM Pacific — check Joel and Jeff’s Twitter feeds for the location. We’ve found that hosting a podcast while running a business is more useful than you might think — because it allows you to introspect on your own thoughts and decisions and have a history explaining why you made those bad decisions at the time. Even if you only have 10 listeners, and one of them is your dad. Jeff is currently reading Super Cooperators which focuses on the prisoner’s dilemma and how it applies to social situations. In the real world, people remember your actions, and that history changes how they interact with you. Ultimately our concept of reputation derives from the realization that your current actions will have future consequences not just on other people, but on society and the greater internet. Some of the NY team went to hear Bing Gordon give a talk on gamification that covered a number of topics. In particular, he noted that almost everyone (except for males age 18-24) prefer a cooperative game to a competitive one, and people are much more likely to continue with something if at least one other person sees and validates what they did. That’s one reason why we’re so gung-ho about everything being public — by keeping everything visible and in the open, you encourage more civic-minded level of behavior than what happens behind closed doors. Sometimes people can be turned off by these types of reputation systems, though. There’s a fantastic article at TheAwl about how Wikipedia made it possible for amateurs who are obsessive about a topic to become, en masse, as reliable as traditional experts. Stack Exchange is now an OpenID provider! We did this primarily for two reasons. First, any time you send people off to another site to sign up, you lose visitors. By keeping everything on Stack Exchange, we increase the success rate of sign ups. Second, while MyOpenID is a great service, it’s free — so there’s no incentive for JanRain to maintain it and keep it in good repair. There have been some recent … incidents … with MyOpenID. Down votes no longer cost you, the down-voter, any reputation points on questions only. We found that too many people weren’t willing to down vote questions because of the -1 cost to the voter. Downvotes on questions are a critically important signal for us in separating the good questions from the not-so-good questions. Upcoming guests include Steve Karantza (Shirlock Homes from DIY.SE), Rory Blyth, Dave Winer, Jason Calacanis, and more. If you have guest suggestions, make sure to add them to the Meta thread! We’re hiring a Community Evangelism Team! They’ll be responsible for promoting our communities and sites out to new audiences, and helping them grow. It’s a great job for anyone who wants to get into the startup world or a recent grad with a humanities degree who doesn’t want to be stuck working at an agency for the next 10 years. For more details, check out the job post. Joel takes his first question from the audience: why does he think great programmers aren’t going to be found developing internal company apps? Tune in next week when our guest is Sam Saffron (aka Waffles) – once again, you’ll be able to watch/listen live on Tuesday @ 4pm as we do the taping. Follow @spolsky and @codinghorror for the link. You can also hang out in the official chat room during the tapings."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/31/community-promotion-ads/","date":"2011-05-30T22:00:00.000Z","tags":["Community"],"title":"Community Promotion Ads","text":"You may have seen our vote-based advertising for open source projects on Stack Overflow — Stack Overflow users create ads for their favorite open source projects, and the community votes for the projects they’d like to see promoted on the site. In response to the popularity of that program, we’ve extended this vote based advertising program to all the public Stack Exchange sites. Per-Site Community Promotion Ads There are likely other activities of interest to your community beyond asking and answering questions, such as: Highlighting and promoting activities in the per-site community blogs Cool applications or open-source projects related to the site The site’s Twitter feed Promoting relevant events or conferences the community should know about Anything else the community would genuinely be interested in The goal is to help visitors find out about the cool stuff your community is doing and help promote activities they find important. And it’s all visible right there on the sidebar next to every question, and the homepage. So how does this work? Start by creating an original 220 x 250 image ad for a product, service, or event of interest to your community. Then head on over to the meta site for that community and find the latest post tagged community-ads to post your submission. (If your site does not yet have a community promotion post on its meta, contact me to request one, or simply post a meta request asking for it to be created.) Here are a few examples: Ask Ubuntu Community Promotion Ads – 1H 2011 WordPress Answers Community Promotion Ads – 1H 2011 TeX – LaTeX Community Promotion Ads – 1H 2011 Your ad has to conform to certain guidelines, and there is a minimum score threshold an ad must achieve (currently 6) before it will be shown on the main site. The ads and voting are reset every six months, so you’ll have to submit a new ad for each cycle. Refer to the individual meta posts for details. Incidentally, we just reset the Free Vote-Based Advertising for Stack Overflow, so get on over there to issue your new ad submissions and vote for your favorite content!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/27/stack-exchange-is-an-openid-provider/","date":"2011-05-26T22:00:00.000Z","tags":["Community"],"title":"Stack Exchange is an OpenID Provider","text":"If you’ve logged in to a Stack Exchange site recently you may have noticed a new button on the login page: That’s right — Stack Exchange is now officially an OpenID provider as well as an OpenID (and OAuth 2.0) consumer! As a provider, we can now offer a totally seamless signup experience for new users. That is, you can create a new account entirely on our site without ever once being redirected to another website in the process. Those users who were uncomfortable with Google, Facebook, MyOpenID, AOL, or any other form of OpenID credentials can now create “local” accounts. And best of all, it’s a valid Internet Driver’s License — that is, you can use your newly minted Stack Exchange account to log in anywhere on the internet that accepts OpenID! The confirmation email you get upon creating a new account explains how: Once you create your Stack Exchange account you can use it to log in on thousands of websites. To log in to a Stack Exchange site: click the ‘Log in with Stack Exchange’ button. To log in to other websites that accept OpenID: enter this URL https://openid.stackexchange.com/ Because we kept getting asked: openid.stackexchange.com is a permanent service we will fully support for as long as we are solvent as a company. Feel free to host some part of your identity with us forever, and we promise to … well, hopefully not suck in the manner to which you have become accustomed. In all honesty, I resisted becoming an OpenID provider for a long time. What the world needs so desperately is more websites that consume public forms of identity. Yet Another Producer stamping out logins and passwords is not making the internet better — it’s making things worse. But then something happened. We got big. Really big. I believe Stack Exchange is now large enough to be a reasonably valid form of public identity on the internet. And like everything else we (attempt) to do, we endeavor mightily to do identity in a way that makes the internet better, not worse. That’s why our login implementation is already built on two excellent open source projects … dotNetOpenAuth OpenID Selector … and we are open sourcing our OpenID provider implementation, for your public code review and forking pleasure, at StackID. Again, I urge caution here: just because you can be an identity provider doesn’t mean you should be one, any more than it’s a good idea for me to decide to break off from the State of California and suddenly form the People’s Republic of Atwoodistan. If you’re happy logging in with your current Facebook, Gmail, Yahoo, AOL, or MyOpenID credentials, fantastic! Stick with it. Whatever works for you works for us. We strongly support and encourage public, reusable forms of identity for login on the internet by being generous in what we accept first and foremost. And so should you! If I want to log in to your site using OpenID or OAuth 2.0 — let me."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/18/se-podcast-05/","date":"2011-05-17T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #05","text":"The podcast is on the road again this week, with Jeff and Joel coming to you live from Jeff’s living room in El Cerrito, CA. They’re also joined by Josh Heyer (aka Shog9) who calls in from Colorado. This is actually the second time we’ve done a podcast from Jeff’s house, the first time being Episode #51. Server Fault and Super User have recently seen a substantial hit in the amount of traffic coming from Google the last few weeks. There’s a number of possible reasons, but Joel wonders if it has to do with long clicks vs short clicks. Joel’s theory is that Google is looking at this ratio as a signal for the quality of a site: high quality sites should have more long clicks (meaning you don’t return to Google quickly) and fewer short clicks (where you click a link and then immediately return to the search page). We’re also wondering if the Google algorithm change is penalizing sysadmin content – since a number of other sites focused on System Administrators / IT Professionals have also seen big drops in traffic from Google. Jeff previously blogged about Google algorithm issues and the fundamental risks of any site relying on a single source for so much of their traffic. If you have any data or observations from running your sites, make sure to hop over to our webmasters.stackexchange question on this topic. Our guest today is Josh Heyer, our new part-time community manager. Josh was originally on Usenet, then moved to forums and Code Project, and joined Stack Overflow right after it launched; he’s been with us from the beginning. One of the first things that Josh pushed to change after joining the team was to make it more clear why accounts were being suspended. Someone would get suspended and then complain about it publicly; they had a reason, but other people didn’t. This sometimes led to lots of heat and noise on meta, detracting from the quality of the site. By making the reason for a suspensions public, you remove the gossiping and public discussion. And if you don’t — you get the Streisand effect. We’re now tackling the last of the low hanging fruit in making the site performance better: serving static content using a CDN. By utilizing a CDN for lower priority/static content (like logos and other images) we can serve files faster to different areas of the world. Make sure to hop over to that blog post and help us (and you!) out by telling us which CDN works best for you. We’ve been using our own home-brew CDN-like setup that offloads all of our static content off the main servers (to reduce CPU loads) and onto a side domain. Unfortunately, these secondary servers were still located in our NY data center, so it did not do anything to reduce ping times to distant locations. In our experience, breaking your static content off onto its own server can have a huge performance benefit, even for small or medium sites. It’s amazing how many highly technical people don’t think to clear their browser cache when they’re having a problem with a website loading. Always clear your browser cache and try again before contacting a site’s support team. Please? We started a logo contest for Lucene.net, the open source project powering our search. If you want to help out by trying your hand at designing a logo for this project, check out the 99designs contest we created on their behalf. Because our search currently focuses on relevance (determined by keyword mentions), we recommend editing good questions to make sure a proper set of keywords appear in them; this makes it easier for others to find these questions in search. Remember that search results have several tabs, but always defaults to relevance. Try the votes, active, and other tabs to get a different sort of your search results. Currently, there’s no way for anonymous users to indicate their satisfaction with a page — should we add something to allow drive-by visitors to contribute? There’s always anonymous editing, of course, and this is the reason we keep view counters on pages – it’s the only way for people who don’t ask or answer, and don’t have the 15 rep “citizenship” required to vote, to make an impact on the questions they visit. How should we handle “missing semi-colon” questions — where someone posts a chunk of code that isn’t working and the only problem is that they had the name of a variable wrong, or forgot a semicolon somewhere? Since these questions will never be of benefit to anyone down the line, there’s no real reason to keep them on the site. This is also why we modified the language for the Too Localized close reason to read “this question will not be helpful to future visitors”. It’s a much clearer explanation of what that close reason is intended for, and we’ve already seen an uptick in usage. There’s no podcast next week, but we’ll be back the week after, so make sure to join us then!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/17/the-speed-of-light-sucks/","date":"2011-05-16T22:00:00.000Z","tags":["Community"],"title":"The Speed of Light Sucks","text":"Our current datacenter is in New York City. Yep, where they make all that great salsa. So whenever you make a request to any Stack Exchange site, the internet tubes must connect from your location to our datacenter in NYC. We are not (yet) immune to the laws of physics, so depending on the distance between you and NYC this … can take a while. As John Carmack once so eloquently said: The speed of light sucks. But there is a workaround of sorts. As of summer 2009 we currently serve all our static content (that is, stuff that does not change on every request) such as JavaScript, images, CSS, etc. from sstatic.net. Since these files don’t change very often, there’s no reason they have to be served directly by us; we can offload our static files to a content delivery network. A good CDN has a network of fast nodes all over the world. With a CDN, when you make a request for, say, favicon.ico — that particular file doesn’t have to be delivered from our NYC datacenter. It can come from a server in the CDN closer to you. Yes, these files are usually cached, but you do have to retrieve them at least once and sometimes a few times a day. The resulting performance improvement can be quite dramatic, particularly for that first click! We’re currently evaluating our CDN options and we want to measure the real-world improvements of a few different CDNs. sstatic http://sstatic.net/js/full.js NetDNA http://sstatic.stackexchange.netdna-cdn.com/js/full.js Amazon http://d1d5ue6vu5b30i.cloudfront.net/js/full.js EdgeCast http://wac.43df.edgecastcdn.net/8043DF/sstatic/js/full.js Make a few requests to each of these links, using Ctrl-F5 / Command-Shift-R to force a redownload instead of using a cached version, and record the typical duration of a download. In Chrome, you can see detailed download times via the “Network” tab of the Developer Tools, which can be invoked via Ctrl-Shift-I. In Firefox with Firebug, download timing is on the “Network” tab, too: The result in the Chrome screenshot is 576ms; in the Firefox screenshot it’s 490ms. Please use this Google form to enter your results. With your data in hand, we hope to choose a killer CDN that makes Stack Exchange faster all over the world! update: now with results! The percentages here mean percent better than sstatic.net which is our default CDN in NYC."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/16/stack-exchange-team-at-mix-11/","date":"2011-05-15T22:00:00.000Z","tags":["Background"],"title":"Stack Exchange Team at MIX 11","text":"A big chunk of the Stack Exchange development team attended this year’s MIX conference. With tons of t-shirts and stickers in hand to give out, naturally! We managed to convince team members Sam Saffron (Australia) and Ben Dumke (Germany) to make the trek to Las Vegas for some, er, “teambuilding”. Even Jin, our designer in residence, was there. He is so money! While at MIX, they chatted with their fellow developers about the great work they’re doing. Some of these artifacts are now online for everyone to enjoy: Herding Code 110: Geoff Dalgas and Jarrod Dixon take everyone behind the scenes at Stack Exchange. Channel 9 Live, Day One: Kevin Montrose, Sam Saffron, and Ben Dumke chat on video with Scott Hanselman about Stack Exchange. Hanselminutes 282: The Rise of the Micro-ORM with Sam Saffron and Rob Conery. This Developer’s Life: Pressure with Geoff Dalgas, Sam Saffron, and Jeff Atwood. See, what happens in Vegas doesn’t have to stay in Vegas — just ask the Stack Exchange team!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/13/sponsoring-lucene-net-logo-design-contest/","date":"2011-05-12T22:00:00.000Z","tags":["Company"],"title":"Sponsoring Lucene.Net Logo Design Contest","text":"Back in January we rebooted our search implementation, replacing it with Lucene.Net. We’ve been quite happy with the results, which are faster, more relevant, and … perhaps not Google quality, but certainly getting closer to the realm of Googlesque. We are also big fans of the Lucene.Net project, which has had some rocky times of late. I asked the core contributors to the Lucene.Net project what we could do to help, and Troy Howard came up with something interesting: We’d love to take advantage of your offer for help. I’ve been trying to think of the most awesome thing that Stack Overflow could do for us, and I think I’ve finally found it. I’ve been following Jeff’s blog for a long time, and I recall very well his initial posts on stackoverflow.com in 2008 and the logo design contest. This was repeated with the serverfault and superuser … You guys are awesome at this. Your logos look great. The process is fun. Everyone wins. We’ve been debating the logo used by Lucene.Net, which all agree is terrible. We would like to have a logo design contest in the spirit of your successful campaigns to get a new logo for Lucene.Net. The new logo would symbolize the rebirth of the project and the new philosophy that goes with it. It’s also a great opportunity to have a publicity stunt which will attract a lot of community interest to the project, both as users and hopefully as contributors. So, what I ask of Stack Overflow, is to host, promote, manage, and pay for our logo design contest exactly as if it was a design contest for your company’s products. Would this be a reasonable request? More than reasonable! In honor of the Lucene.Net hackathon going on right now in Ireland, I set up a 99designs.com logo contest on behalf of the Lucene.Net project. So they can go from these old and busted logos … To something much, much cooler! (As with our previous logo contests, expect some form of prize for the 2nd and 3rd place designs as well.) So please do help us spread the word — both about the Lucene.Net project itself, which powers search across the entire Stack Exchange network brilliantly, and also about the Lucene.Net logo contest!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/11/se-podcast-04/","date":"2011-05-10T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #04","text":"This week, the Stack Exchange podcast travels to England, where Jeff and Joel are joined by Stack Overflow legend Jon Skeet (and son!) along with Marc Gravell. Picking up the discussion from last week’s episode: what constitutes a good question? Our very own “How to Ask” page is a start — and it’s a mandatory page on Stack Overflow for all new askers. It’s partially based on Jon’s own post, Writing the Perfect Question. Why should you downvote a question? Is there such a thing as a bad question? There most certainly is! We generally tend to consider questions where the asker put virtually zero effort into asking worthy of a downvote. Jon has also written a bit about reasons for voting on questions and answers. Two of the most important aspects of a good question, per Jon, are providing evidence that you’ve researched the problem yourself, and providing as much information as possible: detailed code snippets, error messages, objectives, etc. Some users don’t want to answer questions by users with low accept rates. Jon deeply disapproves of the practice of leaving comments nagging users about their accept rate, especially since you can gain far more reputation by writing good answers that are highly upvoted rather than ones that are accepted. Accept rate by itself doesn’t capture all of the information about how good (or bad) a member of the community a given user is. Perhaps accept rate could be expanded into a broader numeric metric of how “civic minded” a user is. Only two things keep Jeff up at night: the size of the constantly growing database, and maintaining quality within the community. We absolutely want a friendly and civil atmosphere, but as the site grows, people have to learn to follow the norms and guidelines of the site themselves without manual hand holding. It doesn’t scale. Ultimately, we can’t save every user, and some have to be turned away from the site in order to protect the overall quality of the community. You must give a little to get. To maintain quality, we started capping the number of questions that can be asked by a user in a given time period. If users are submitting more than 6 questions a day, or more than 50 questions a month … are they really putting the appropriate amount of research effort into their questions? Jon wonders if there are algorithmic solutions to detect users asking low quality questions – similar to how GMail reminds you when you reference an attached document in your email, but forget to actually attach something. Jeff responds that we already do that for answers, and are beginning to aggressively extend it to questions. Following up on the previous conversations about improved flagging tools — we get hundreds of flags per day, and the vast majority of them are valid. (Comment flags … not so much). Even though we’re buried in them at the moment, we welcome flags from the community because nearly every one goes directly towards a better signal-to-noise quality ratio on your site. So keep ’em coming! Jon wonders whether the quality of answers is increasing or declining. Jeff and Joel respond that not only are the percentage of answered questions increasing but that answer quality, to their knowledge, has never been disputed. It’s fundamentally easier to preserve the answer experience than the question experience because users love to vote on answers: good answers go to the top, bad answers to the bottom. But the flow of incoming questions — which make up the entirety of the front page and the top 25% of every question page — have a hugely disproportionate effect on any Q&A system; that’s why we spend so much time focusing on them. The main issues we see with answers isn’t quality per se, but that people misuse the answer field to enter thank yous, pleas for help, and other irrelevancies. We do provide the How to Answer page which is automatically shown when we detect such answers. The Stack Exchange workflow isn’t necessarily the most natural for how most new people ask questions. Most would start out with a small question and proceed to ask a series of followups while leading down a path and escalating the conversation after being assured the other person is engaged as opposed to having to put all of the information in the first post (almost more like an instant messaging conversation). Jeff points out that there are some sites that work like that, such as ChaCha, however it’s a very different model. If you prefer this type of rapid back and forth interaction, don’t forget that there’s always chat.stackexchange.com and chat.stackoverflow.com — our live chat rooms! Is Stack Overflow Dev Days 2011 the best name for the conference or should we come up with something new? Is the term “Dev Days” being used by too many conferences? Over the holidays last year, Jon wrote an epic 45 (!) series of blog posts about reimplementing LINQ to Objects. It’s a fantastic and utterly essential resource for anyone interested in the guts of LINQ. Jon’s old and trusty Samsung NC10 laptop was recently stolen – so he’s now rocking a Chrome OS laptop on his daily commute (which unfortunately means he only has a browser and no compiler on his daily commute). It did however lead to him discovering Compilr which allows you to compile code on the web – he thinks it would be amazing to integrate that into Stack Overflow so you can check code from inside questions. Jeff reveals that of all the SE sites he participates on, his most satisfying answer to date was this post on parenting. Knowing that his answer helped another person with his own child — that’s especially personal and gratifying. Jon needs your help! If he is chosen to speak at DevDays 2011, what do you want to hear him speak about? Enter your suggestions in the comments to this post. Sadly, Jon was having so much fun with the podcast that he forgot to put dinner in the oven halfway through the taping – hence we are left with this picture of the three sitting on their laptops, waiting for dinner to cook while accompanied by a papier-mâché dragon left over from a recent birthday party for Jon’s children. See you next week!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/09/welcome-valued-associate-guy-zerega/","date":"2011-05-08T22:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Guy Zerega!","text":"Guy Zerega joins the Stack Exchange team in the NYC headquarters as Sales Manager of Stack Overflow’s Careers 2.0. In this role, Guy will lead the sales team in acquiring new hiring companies and continuing to develop relationships with current customers. Guy enjoys spending time outdoors, but especially surfing and cycling. Okay, so maybe “enjoying” surfing and cycling is a bit of an understatement. Guy is a competitive cyclist, and has surfed in Costa Rica, Mexico, Australia, Barbados and Puerto Rico. When “trapped” indoors, Guy enjoys reading, music, movies and any of Showtime’s dysfunctional behavior series (Nurse Jackie, Shameless and Californication). Guy is a proud father of a 15 year old son and 12 year old daughter. A proven leader and creative problem solver, Guy embodies Careers 2.0’s mission to do whatever it takes to help employers fill their programming positions with the best technical talent. Welcome Guy!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/06/vote-for-this-question-or-the-kitten-gets-it/","date":"2011-05-05T22:00:00.000Z","tags":["Community"],"title":"Vote For This Question or The Kitten Gets It","text":"When the wordpress.stackexchange.com community asked Why are questions not being voted on … I have noticed a trend that questions (even good ones) that have multiple answers are not being voted on. Out of our 5,550 questions only 41% have at least 1 vote which leaves around 3,000 with 0 votes and a few hundred with negative votes. I had a strong sense of déjà vu all over again. One of the longest running concerns in Stack Overflow and Stack Exchange history is Why aren’t people voting for questions? a question originally posed on Stack Overflow on August 5, 2008 — long, long before we used UserVoice for this sort of thing. At that point, meta.stackoverflow wasn’t even a glint in anyone’s eye, much less Area 51 or the WordPress Stack Exchange. So, yes, we’ve known basically forever that questions don’t get voted on nearly as much as answers. Personally, I’m not convinced this problem is necessarily solvable, because it might represent the natural “market value” of questions and answers. Users intuit that answers are the real unit of work in any Q&A; system and tend to favor answers in their voting. After all, the world is awash in endless questions, but answers — great answers — are a precious and rare commodity indeed. There’s also a serious workflow problem. Consider what happens when you open a question page: Start at the top by reading the question. Scroll down. Begin reading answers. Consider the relative merit of each answer as you read it, and possibly vote on it. Reach the bottom, where the form invites you to provide your own answer. By the time you get to the bottom, you’ve probably spent so much time mentally processing the existing answers and deciding whether or not you want to add an answer yourself that you’ve forgotten the question even exists! That’s a shame, because the quality of the answers and the quality of the question are often related. In both positive and negative directions, I mean. If a question is worth answering, isn’t it at least worth considering whether you should upvote it? Assuming you can remember to scroll all the way back up to get there, that is. So how do we encourage people to remember the questions when voting? Perhaps we should institute a new policy: every time you forget to vote a great question up, or a bad question down — a kitten gets it! Just kidding. Mostly. Because we love kittens, we decided to make basic voting statistics a bit more visible for every user. First, in your user drop-down, you can see how many votes you’ve cast. Second, on your user page, where we’ve broken out your voting in a similar public way. The daily vote limit used to be 30 votes per day; we’ve increased that to a maximum of 40 votes per day — but only if you vote on a combination of answers and questions. This isn’t as significant as you might think, since it is exceedingly rare for users to even hit the 30 vote daily cap. Most importantly, we have added a gentle reminder to the voting process itself. That is, if you haven’t voted on at least one question in the last 15 votes you cast — you’ll now get the “you haven’t voted on questions in a while; questions need votes too!” reminder every time you vote until you do. We also added a voters tab to the users page, so you can get an idea which of your fellow community members are truly exercising their democratic right to vote early and often. I realize we probably won’t solve a basic problem we’ve had since inception of the network overnight. And I still believe that answers are fundamentally more valuable than questions and thus will always naturally garner more votes. But there’s no reason we can’t put our thumb on the scale to help rebalance things a tad. We’ve already seen a big increase in question voting with these latest changes, so I am … cautiously optimistic. So please do try to keep questions in mind as you’re voting. Either up or down. You know, for the kittens."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/04/se-podcast-03/","date":"2011-05-03T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #03","text":"This week, Jeff and Joel are joined by Scott Hanselman – tune in for their discussion of everything from MIX11 to the salads at Jack in the Box. Welcome Scott Hanselman! Be sure to check out both of Scott’s excellent podcasts at Hanselminutes and This Developer’s Life. Joel recently wrote an unintentionally controversial blog post about lunch and how important it is here at Stack Exchange and Fog Creek. Despite the claims that Joel is torturing introverts by forcing them to eat lunch together, the truth is that almost everyone at both companies is introverted and yet enjoy lunch together. Scott wonders how so many people have so much time to sit around on Hacker News and Reddit (and everywhere else) discussing these blog posts when they have work to do. Of course we have to reference Clay Shirky’s classic Gin, Television, and Social Surplus here. Scott is busy putting together a new Synology DiskStation DS1511+ to replace his Windows Home Server setup – unfortunately, there’s a lot of options (and a lot of bad ones out there). Scott is a wired enthusiast, but he does like his optimized wireless N setup, which is based on a Netgear N600. Microsoft has an amazing video conferencing system known as RoundTable — now branded as the Polycom CX5000 — that captures the room in 360 degrees and then automatically detects and shows the person who is talking. Scott also has a mobile remote telepresence device running around Redmond as him, somewhere. He also recommends the Cisco Umi. Over on mechanics.stackexchange.com, Jeff wonders why online car communities are so brand-centric — there are hundreds of dedicated sites for Ford enthusiasts, and Subaru enthusiasts, and so forth. Whereas programmers can have Java and Python installed side by side on the same PC, you have to own a lot of physical, real world vehicles to have experience with many different car brands — or, be an auto mechanic. Perhaps programmers are kinda-sorta mechanics in the sense that they spend most of their time practicing the noble art of maintenance programming. Stack Exchange sites do well in professions where you can open a relevant Stack Exchange site in a window side-by-side with the work you’re already doing on the computer. But what about people who don’t regularly work on computers? Is it realistic to expect people who tend to work offline to take the time and effort to come online after they finish working and keep discussing their work? Or, will the proliferation of computing devices like smartphones and tablets bring the online world to them while they work? It does happen, since diy.stackexchange.com is clearly an offline site but produces a lot of really high quality questions and answers about home improvement. We’ve improved flagging dramatically on Stack Exchange over the last few months. You may have noticed a public flag weight value on some user profiles. Your flags now carry different weight depending on how accurate and helpful your flags have been in the past … and the more you successfully flag, the more daily flags you’ll get, in a sort of virtuous cycle. Scott asks: why should I care about all these points and flags and badges and reputation systems on Stack Exchange? What’s the point of you guys building your own Dungeons and Dragons MMORPG system online? Tune in to next week’s podcast when Joel will be “live” from London and our guest will be the infamous Jon Skeet! Also, if you’re interested in helping us pick content for Stack Overflow Dev Days – check out Joel’s post on it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/05/03/devdays-2011-planning-begins/","date":"2011-05-02T22:00:00.000Z","tags":["Community"],"title":"DevDays 2011 planning begins","text":"A couple of years ago, we ran a series of awesome one-day conferences in ten cities called Stack Overflow Dev Days. People had a lot of fun (read the reviews) and learned a lot, and we’ve been scrambling to get our acts in gear to run more conferences. One thing we decided was that 10 cities is unbearably exhausting. We decided to focus on four conferences: London Washington, DC US West Coast (probably Bay Area) Australia (probably Sydney or Melbourne) The conferences will most likely be in September or October, although exact dates can’t be determined until we’ve got all the venues nailed down. We also decided (based on your feedback) to run these as two day conferences, not one day… the one day conferences were exhausting and didn’t leave enough time for socializing and informal networking kinds of stuff. What’s this conference about? The idea for the original DevDays was to have high-bandwidth, intensive introductions to a wide variety of new technologies… the kinds of technologies that everybody wants to learn but doesn’t necessarily need to use on a project right now. Last time, it was things like iPhone development, Python, jQuery, Google AppEngine, etc. This year, we’re asking you. So far, there’s a lot of interest in DVCS, HTML5, and Node.js. Who’s picking the speakers? You, of course. This is a community project! We’re setting up curriculum committees for each of the four events, and we need your help. If you are interested in joining the curriculum committee, please participate in the Meta discussions: London Washington, DC US West Coast (probably Bay Area) Australia (probably Sydney or Melbourne) Each curriculum committee will work to decide what talks they want to hear, select speakers, and invite them. We’ll take care of the speakers’ and committee members expenses, of course, and we’ll do all the work of actually putting on the conference."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/29/inline-comment-and-post-markdown-help/","date":"2011-04-28T22:00:00.000Z","tags":["Community"],"title":"Inline Comment and Post Markdown Help","text":"We use Markdown for text formatting on all Stack Exchange sites. Markdown isn’t difficult to figure out, particularly since it apes common ASCII formatting conventions — and its simplicity means it is amenable to wiki style differencing and editing, which is a big part of our engine. But that doesn’t mean we can’t do a better job of helping new users figure Markdown out. To that end, we recently added inline comment help which explains the limited subset of Markdown supported in comments, and how to notify other commenters that you’re talking to them. Click “show help” to expand inline comment help, or if you’re a new user, it will be pre-expanded for you. The brand new inline post help we just deployed is much more extensive — posts support the full Markdown spec, such as it is, and even a whitelisted subset of HTML tags. Click the little [?] icon to expand inline help — or if you’re a new user, it will be pre-expanded for you (to the first tab level only). We hope this improved inline help, compared to the rather clunky external help we had before, will lead directly to better formatted, easier to read, diff, and edit posts for everyone. I know, probably won’t happen, but like Parappa the Rapper, I gotta believe!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/27/improved-tag-sets/","date":"2011-04-26T22:00:00.000Z","tags":["Community"],"title":"Improved Tag Sets","text":"Earlier this month, Emmett asked for feedback on what we should improve next on stackexchange.com. The consensus seemed to be that the existing functionality was good, but it could be simpler to use — as expressed by Pekka: I miss the carefully crafted minimalism that I’ve come to love so much on SO. From that perspective, stackexchange.com is not yet doing as well as I would expect from what is the public face of the network, and its official headquarters. I don’t have a clear idea of what needs to be done, but I would like to see the site taking a more intuitive and beginner-friendly approach to exploring the network. Nowhere is this more apparent than Tag Sets, which we originally rolled out last November. Tag sets are actually an incredibly powerful feature, but the UI for it … uh, not so good. We rolled up our sleeves and built an all new, much friendlier interface. We also renamed it to something that’s hopefully a bit clearer: filters. There are also two new built-in, default filters available for every network user: My Sites — all questions on every site that you have an account on Favorite Tags — all questions on every site in the favorite tags you’ve selected on those sites Filters (née Tag Sets) are a perfect way to follow activity on tags across the whole Stack Exchange network, either in the browser or via email subscriptions. If you tried it before and were flummoxed by the UI, please do give it another shot and let us know what you think. Oh, and don’t forget you have a network profile at stackexchange.com, too. Expect more news on this soon!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/27/se-podcast-02/","date":"2011-04-26T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #02","text":"This week on the Stack Exchange podcast, Jeff and Joel are back into the swing of the weekly podcast and jump right into business, including: The algorithm for the Stack Overflow homepage changed a little while back, showing you even more relevant content and questions every time you log in. Content farms and how much they suck (but how amazingly funny and well written “The Content Farm” is. The recent launch of the HowThingsWork Stack Exchange and why it never made it out of its private beta. In particular, it had the issue that it would have turned into almost just another content farm and not fulfill the Stack Exchange mission of making the internet better. The recent move to our new data center and technical changes that have made all of the sites faster and more efficient. How you can utilize improved networking in your data center to greatly improve performance with efficient upgrades The Internet Archive is an amazing service for preserving the history of the internet, but it never seems to get enough support. Go and donate today! Is there such a thing as a question that is too simple? What new guidelines should we give people when posting questions on Stack Exchange. And a fun fact about the Stack Exchange podcast: We have listeners in 85 countries around the world. See you next week when Jeff and Joel are joined by Scott Hanselman. One final note – we’re re-numbering the podcast to start back at the beginning, so this is now episode #02 and last week is now episode #01."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/20/podcast-88/","date":"2011-04-19T22:00:00.000Z","tags":["Company"],"title":"SE Podcast #01","text":"Welcome back to the first episode of the new Stack Exchange Podcast redux! Jumping right back into the old groove, here’s what happens this week: Jeff and Joel discuss missing the openness that the old podcast provided. Since the podcast is just a recording of their weekly call, it gives listeners an insight into the decision making and vision behind Stack Exchange. Some of the Stack Exchange metas have been having vibrant debates and discussions about the role of the community and moderators in shaping debates – but what are the unseen upsides to having this vibrant meta community? Joel has spent many hours over the last few weeks looking at user trends and patterns between the Stack Exchange sites – what has he found? The percentage of “civilians” (users whose first login was to a site other than StackOverflow, SuperUser or ServerFault) on Stack Exchange sites has grown to 36% since the launch of SE. * However, the recent stasis of the ratio not changing isn't due to civilian growth stopping, its that programmers are growing just as quickly. * Most interestingly, some of the \"geekiest\" sites (like Ubuntu, Math, Stats, Physics, TeX) have the highest percentage of \"civilian\" users. Launching this week is the beta of the brand new HowThingsWork community. Jeff and Joel discuss its odds for success, challenges it faces, and lessons learned from the launches of past communities. There have been numerous discussionsover the last few months about the closing of questions for being “too localized” – Joel and Jeff discuss their (strong) feelings on how and when this should be used and why you shouldn’t ask about why there’s a pothole outside your house but you should ask why cities have so much trouble maintaining their roads in general. Plus, did someone successfully troll Joel on this thread? Coming up in September and October this year: it’s Stack Overflow Dev Days 2011! We’ll be doing Dev Days in fewer spots this time (4 instead of 10) but they’ll be bigger and better – plus running for two days instead of just one. Dev Days will be taking place in 4 cities around the world, one each somewhere in the US West Coast, US East Coast, UK and Australia. Stay tuned at the Stack Overflow blog for more details. Help us out – make sure to let us know what topics you want to see covered Joel and Jeff discuss their backup procedures and why you need to be careful whether using hard drives or SSDs. Plus, why you really shouldn’t be too concerned that Dropbox will decrypt your data if they receive a court order. Finally, we’re going to have all kinds of interesting and upcoming changes for the podcast including guests, a live stream, a live chat room and maybe even video. A special thanks to our friends at SoundCloud for setting us up on their amazing audio sharing platform – you can check out this episode on their site or below (and even leave comments at specific times during the audio). Also, a big thanks to Friend of George over on audio.stackexchange.com for the recommendation on live recording software that we’re using for the podcast now."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/15/welcome-valued-associate-alex-miller/","date":"2011-04-14T22:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Alex Miller!","text":"Yup. The team has now hit 32 human beings (plus a lot of unicorns and bacon). Our latest addition is Alex Miller: We haven’t quite figured out an official title for Alex yet… The job description was “Sidekick to the CEO” and the idea was that he would follow me around and do all kinds of random yet useful projects that have been stagnating for quite a while. In the coming months you’ll see several amazing things that Alex has started doing, including the resurgence of Stack Overflow DevDays, the renewal of my podcast with Jeff, and an amazing thing, still secret, involving unicorns. For those of you who watched The West Wing, Alex will be responsible for all the roles that were played by actors other than Martin Sheen. That means he’ll have to walk briskly through the halls of Stack Overflow talking to himself and carrying paper. Alex comes to us from a stint as Director of Marketing at Yext, but many of you already know him as previous Sidekick to Jason Calacanis. Welcome, Alex!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/12/stack-exchange-partners-with-mathjax/","date":"2011-04-11T22:00:00.000Z","tags":["Community"],"title":"Stack Exchange Partners with MathJax","text":"I’m pleased to announce that Stack Exchange is now a major supporting partner of MathJax. MathJax is, of course, an open source JavaScript display engine for mathematics that works in all modern browsers. It’s a joint project of the American Mathematical Society, Design Science, Inc., and the Society for Industrial and Applied Mathematics. We love MathJax, and we use it on six sites in the Stack Exchange network so far with great success: Quantitative Finance Q&A; for finance professionals and academics Electronics Design Q&A; for electronic hardware hacking enthusiasts Statistical Analysis Q&A; for statisticians, data analysts, data miners and data visualization experts Physics Q&A; for active researchers, academics and students of physics Mathematics Q&A; for people studying math at any level and professionals in related fields Theoretical Computer Science Q&A; for theoretical computer scientists and researchers in related fields It turns out math is kind of … important … to a lot of the hard science communities. Who knew? We were thrilled to be able to apply some of our VC unicorn dollars toward making MathJax a great open source tool for rendering math in web browsers — not just on our communities, but across the whole of the internet. That’s our fundamental mission: to make the internet better for everyone. It is quite an honor to be on the sponsors page alongside organizations like Project Euclid and The American Physical Society. That’s the kind of company I am very happy to keep. If you’d like to test out math notation on one of our sites, refer to a LaTeX2 mathematical notation reference and remember that $$ and $$ are the delimiters that indicate when you enter and leave LaTeX2 mode. Pause a few seconds for the real-time preview to kick in and see what kind of math you’ve wrought in your answer. Or, just view MathJax in action on the existing Q&A; at quant, electronics, stats, physics, cstheory, and of course math. Click the edit link (recently made available to all users) on any post to see the underlying markup. Enjoy! We’ll be working closely with the MathJax team to fold back in any feedback, enhancements, or improvements we come up with for the greater math community."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/12/stack-exchange-traffic-still-growing/","date":"2011-04-11T22:00:00.000Z","tags":["Community"],"title":"Stack Exchange Traffic Still Growing","text":"We had a crazy month last month, growing about 18% across the board. Today I was excited to log onto Quantcast, which measures our traffic, to see that for the first time, our network rank now fits into a single unsigned byte! There are several different ways we measure our traffic, and each of them gets vastly different results. For example, Quantcast puts us as 14.1 million people a month (globally). They measure that using a little JavaScript widget you’ll find at the bottom of the HTML on every one of our pages. Quantcast doesn’t provide very robust measurement tools, so we use Google Analytics (“GA”) for internal tracking. GA has great reporting features, but there is one major difference in the methodology: if the same person visits stackexchange.com and superuser.com, for example, because of the way cookies work, GA considers that to be two unique visitors. So with GA we end up “overcounting” people if they visit more than one of our domains. We decided that was OK for our own internal tracking. Someone who visits superuser.com AND serverfault.com is worth “twice as much” as someone who only visits one site. Also, for reasons we have never figured out, Google Analytics just gets larger numbers than Quantcast. Right now GA is showing more visitors (15 million) on stackoverflow.com alone than Quantcast sees on the whole network: Why? I don’t know. Either Google Analytics loses cookies sometimes, or Quantcast misses visitors. Counting is an inexact science. As I said, for our own purposes, we decided to sum up all the GA visitors numbers on the six top level domains we operate, which puts as at about 24 million unique visitors. The one source that’s absolute, complete rubbish is compete.com. They seem to think that we only have 659,000 visitors to stackoverflow.com and that we’re shrinking. This “data” is so utterly and completely out of whack with every other source that actually measures our traffic that I just don’t know what to make of it. The fact that they manage to be off by a factor of 22, and that they think we’re shrinking when everyone else (Quantcast, Google Analytics, even Alexa with their goofy toolbar methodology) has measured us as growing, makes me wonder just what the heck is going on at compete.com. To put it politely."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/10/welcome-valued-associate-greg-drinkwater/","date":"2011-04-09T22:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Greg Drinkwater!","text":"Greg Drinkwater joins the Careers Sales team in the NYC headquarters. As Account Executive, Greg is working to expand our Careers 2.0 jobs board, and most importantly, helping our employer customers fill their open positions. Greg lives on Long Island with his wife and stays busy chasing after his two rescue dogs, Frankie and Jed. Frankie is an active Border Collie Mix and Jed is a 75lb German Short Haired Pointer who thinks he’s a lapdog. Greg is a die-hard Boston Red Sox fan, and enjoys all things sports-related. When not following the worst “best” team in baseball, Greg enjoys travelling, and listening to live music. Welcome to the team Greg!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/08/stack-exchange-network-profiles/","date":"2011-04-07T22:00:00.000Z","tags":["Community"],"title":"Stack Exchange Network Profiles","text":"If you participate on multiple Stack Exchange sites, you now have a global profile page! You can navigate there via the handy network profile link on your user page. From your network profile, you can get a mile high view of all your activity across every site in our network. Yep, all of ’em! The default page on your network profile is what I like to call your “Greatest Hits” — that is, your highest voted questions and answers from all network sites. If you missed the old reputation graph, you’re in luck; you can get a similar graph of your reputation across all sites on the reputation tab of your network profile. If you are logged in to stackexchange.com, there’s also a private inbox tab that will let you access old messages in your global inbox that may have scrolled off. Just look for the “see all” link at the bottom of your beloved global inbox tab. If you only participate on one site in the network, you may not need this stuff — but why stop at one? We hope the new network profiles make it easier and more fun to participate in even more of our Stack Exchange Q&A; sites!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/08/stack-overflow-world-wide-meetups-success/","date":"2011-04-07T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow World-Wide MeetUps – Success!","text":"Thanks to everyone who attended a Stack Overflow MeetUp! We had over 2,000 people sign up. Reading the tweets (#SOMeetup) in chronological order was a bit like New Year’s Eve, with each time zone’s MeetUps beginning one after the other. While not every MeetUp had tons of people, it seemed like everyone had a great time! Updates and pictures have been posted so far on Twitter and Flickr. If you have any pictures or quick stories to share from your MeetUp that you haven’t posted yet, post ‘em (and don’t forget the #SOMeetup hashtag)! Here’s a sampling of the ones so far: Sydney, Australia: Bangkok, Thailand: Kozhikode, India: Washington DC, USA: New York City, New York, USA: Chicago, Illinois, USA: Seattle, Washington, USA: Vancouver: Mountain View, California, USA: This was very much an experiment for us, and I think it went great. A couple of communities have gone in and set up another MeetUp for next month. That’s awesome! We have seen interest in doing MeetUps again, and we’d love your feedback on how we can improve. Does an annual MeetUp make sense? Let us know in the comments or in a Meta Stack Overflow post what you’d like to see happen. Thanks for helping us make this event such a great success!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/07/stack-overflow-around-the-world/","date":"2011-04-06T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Around the World","text":"It’s really inspiring to see Stack Overflow meetup events being held in almost 100 cities around the world. Here’s where the meetup groups are: That made me think again about Stack Exchange in other languages. Now, Stack Exchange isn’t just software. Localizing it isn’t just a matter of translating the strings. It’s a community, so when we have a Stack Exchange site conducting Q&A in, say, Japanese, we’ll need moderators and community coordinators to liaise between that community and the company who speak Japanese. I grabbed our Google Analytics data showing the number of visits we had from the top 30 countries in the last month, and compared it to the population of those countries to get the all-important Stack Overflow Country Ranking, that is, the number of visits we had per 1000 population. The winner? Sweden, with an incredible 71 visits to Stack Overflow per 1000 population. Country Visits Population Visits per 1000 Sweden 671,605 9,422,661 71 Singapore 324,063 5,076,700 64 Finland 321,438 5,380,000 60 Denmark 329,927 5,560,628 59 Israel 431,482 7,708,400 56 Switzerland 402,720 7,782,900 52 Netherlands 849,640 16,659,800 51 Canada 1,753,086 34,409,000 51 United Kingdom 2,984,833 62,041,708 48 Australia 1,066,756 22,611,000 47 United States 13,134,911 311,108,000 42 Belgium 406,232 10,827,519 38 Czech Republic 323,624 10,515,818 31 Germany 1,947,367 81,802,000 24 France 1,222,689 65,821,885 19 Poland 675,256 38,092,000 18 Romania 366,955 21,466,174 17 Spain 746,397 46,152,925 16 Italy 835,370 60,605,053 14 Ukraine 399,344 45,778,500 9 South Korea 370,335 48,988,833 8 Russia 775,040 142,905,200 5 Turkey 361,542 73,722,988 5 Brazil 755,084 190,732,694 4 Vietnam 319,379 86,930,000 4 Philippines 325,977 94,013,200 3 India 4,046,059 1,210,193,422 3 Japan 369,577 127,960,000 3 Mexico 297,180 112,336,538 3 China 717,011 1,341,000,000 1 Even though English is the de facto lingua franca of programming, the dramatic differences in how much Stack Overflow is used in various first-world countries almost certainly reflects linguistic demographics. In my experience, almost every programmer I’ve ever met from Scandinavia is pretty much 100% fluent in English. But the low participation from countries like Japan, where there are tons of programmers who don’t really like to work in English, makes me think that if we want to accomplish our goal of world dominationmaking the Internet better, we’re going to have to make Stack Exchange work for non-English speakers, too. One thing we discovered early on about setting up new Stack Exchange communities is that they only work if you have a critical mass of experienced users who know how the system works. The Area 51 process is designed to insure that we only open sites for which we have a group of committed users. This process has worked well: so far we’ve opened 40+ sites of which only three failed. So when we open the first non-English site, it’s going to have to be pioneered by experienced, bilingual Stack Exchange users. My guess would be that the most valuable local editions would be in Korean and Japanese, countries with a large community of programmers who are evidently under-served by English Stack Overflow, but we don’t do things based on intuition, here: we do things that you tell us to do. So we’re depending on you to tell us how we should launch versions of Stack Overflow in languages other than English. If you speak another language fluently and think that the world would benefit from Stack Exchanges in that language, propose them on Area 51. As usual, if you have ideas or suggestions or want to volunteer your services for how we can establish useful, thriving communities in other languages, bring them up on meta.stackoverflow.com. We’re listening!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/06/a-bookshelf-on-your-careers-2-0-profile/","date":"2011-04-05T22:00:00.000Z","tags":["Careers"],"title":"A bookshelf on your Careers 2.0 profile","text":"We think books are a great conversation starter and reveal a lot about one’s natural curiosity. So, we’ve added a “bookshelf” to your Careers 2.0 profile! It’s all about telling the story of your professional development. Perhaps you deftly implemented an Observer pattern for a chat application. Maybe you educated your manager about the maker’s schedule. Heck, maybe you wrote a book, or several. We are also providing better guidance to help you develop a more thorough profile. Look for the “completeness” widget in the upper right: => …which leads to a clear explanation of what your next steps might be. This comes straight from the feedback employers give us about what they want to know. As you may know, Careers 2.0 profiles are invitation-only. You might receive an invitation based on your activity on Stack Overflow, or through a peer who has been granted some invites of their own. You can request an invitation, too. PS, One of our valued associates created a labor of love on a similar “books” premise, but with slightly different goals."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/05/helping-the-experts-get-answers/","date":"2011-04-04T22:00:00.000Z","tags":["Community"],"title":"Helping The Experts Get Answers","text":"In A Recipe to Promote your Site, Robert provided a great set of guidelines for organically growing your Q&A; community. Buried within was this observation: Reach the right kind of publications and bloggers. Make sure that the key experts in every field know about the site; not just the “Martha Stewart” big names; we want to talk to the people who go to these conferences. But how do you reach writers, bloggers, and other notable experts in the field? Help them get answers to their questions, too! I’ve had the privilege of meeting Tim Bray once in real life at CUSEC ’08. I wouldn’t say he is a friend, per se, but he is certainly someone I admire and respect — and he is a notable expert on a number of topics. So when I saw Tim posit this question on Twitter … … I said to myself, hey, there’s a site for that! Since I like Tim, and I genuinely want to help him get an answer to his question, I asked the question on his behalf: Amazingly, even without any promotion, this question was answered in six minutes flat — correctly! The timestamps don’t lie. (Yes, I did subsequently retweet the question to give it more attention, but my tweet was after the first answer arrived.) By the time Tim saw “his” question, it was already answered, excellently! What better way could there be to introduce an expert to your community than presenting them with an immediate answer to their question? Every Q&A; community we operate is predicated on this simple idea of paying it forward, of peers helping other peers learn together. If you want to attract notable experts to your site, don’t ask what they can do for you — ask what you can do for them: Ask great questions on their behalf. If they write a blog entry or mention something (on their blog, twitter, or facebook) that contains a question — actual or implied — post it as a question! Do what you can to promote it, then wait and see what kind of response it gets. Edit the answers, as I did, to make them exemplary. Then bring it to their attention. “I thought you brought up a great question, and it got some interesting answers here {question link}.” Invite them to weigh in on ‘best of’ interesting questions. Pick a really interesting question, perhaps from the ‘week’ or ‘month’ tab, and appeal to their authority for a definitive expert answer. “We’re not sure how to answer {question link}, do you have any advice for us?” I want to be absolutely crystal clear that you should only do this because you genuinely admire this person, and honestly want to help them — otherwise, why would you be stalkingfollowing them on Twitter or Facebook, or reading their blog? If you want someone to go out of their way to help you, go out of your way to help them first."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/04/01/attend-one-of-stack-overflows-250-world-wide-meetups-2/","date":"2011-03-31T22:00:00.000Z","tags":["Community"],"title":"Attend One of Stack Overflow’s 250+ World-Wide MeetUps","text":"If you haven’t heard by now, April 6 is World-Wide Stack Overflow MeetUp Day! Wondering what the purpose of this MeetUp is? Our developer Ben put it best: “The way I see it is that it’s an opportunity to meet some of those 32×32 avatars in real life. Have a snack, have a drink, talk geek stuff, that kind of thing. Of course if you create a real event with speakers & such, that’s awesome — but it’s about having fun as well.” Some communities have already organized some pretty cool MeetUps! Petrioli Gabriele, a member of the Athens, Greece MeetUp created a query to target the top 100 Greek Stack Overflow users to attend. Chad La Guardia is organizing a MeetUp group for Austinites and University of Texas students at UT’s Austin Campus to mingle and network. Hook ’em Horns! Not sure of what to do in your community? Check out our custom MeetUp chat room. With only a few days left until World-Wide Stack Overflow MeetUp Day (April 6!), it is important to secure a venue and encourage others to attend. The MeetUp folks were impressed at your commitment, and now’s the time to make it count. We’ve also got bragging rights at stake; MeetUp keeps track of the largest events to date, see any group you’d like to beat? Here are some suggestions about how you can spread the word: Use the hashtag #SOMeetup on Twitter, Flickr, and YouTube when posting about Stack Overflow MeetUps Post a link to your local MeetUp page on Facebook and Twitter, email the page to your friends, promote in blog posts, etc. Use the custom Stack Overflow MeetUp widgets Invite a friend or two to come with you Remember to bring business cards so you can network at the event and take lots of pictures! We want to see them posted on Twitter and Flickr (#SOMeetup) afterwards! See you April 6! P.S. We’ve gotten a lot of questions regarding companies sponsoring the MeetUps. Our stance is that a company donating space/food/drink for the event is fine, but that using the event as an avenue for marketing or as a captive audience opportunity to profit is not ok. At the end of the day, this is about the community gathering together and having fun!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/03/30/careers-2-0-now-does-github/","date":"2011-03-29T22:00:00.000Z","tags":["Company"],"title":"Careers 2.0 now does GitHub","text":"careers In our continuing effort to allow awesome developers to demonstrate their …awesomeness… we’ve added the ability to include your GitHub projects on your Careers 2.0 profile. The feature is inspired by a sentiment widely shared among developers and employers: show me. As John Resig put it: The process is easy. Head over to your Careers 2.0 profile, and look for the cute little GitHub guy: …and two clicks later, your GitHub awesome becomes part of your Careers 2.0 awesome – complete with language tags and time span. We give you the opportunity to explain your work, too. Careers 2.0 profiles are invitation-only. You might get an invitation based on your activity on Stack Overflow, or through a peer who has been granted some invites of their own. If you have some good work on GitHub, but haven’t gotten an invitation from us, just drop us a note at careers+github@stackoverflow.com or tweet us @StackCareers with a hashtag of #github. We’ll check it out!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/03/29/r-i-p-envelope-hello-improved-user-pages/","date":"2011-03-28T22:00:00.000Z","tags":["Community"],"title":"R.I.P. Envelope, Hello Improved User Pages","text":"If you’ve used any Stack Exchange site over the last year, you’re probably familiar with “the envelope”. The envelope was a notification system that … sort of … let you know when things happened on the site. As time went on, it became clear that the envelope was a deeply flawed design. I began thinking of it as a curse, as our Windows Vista. Yep. That bad. What was wrong with the envelope? So many things: It was schizophrenic. An envelope implies “things that were addressed to you”, and part of its functionality involved replies, but it also folded in revisions to your posts, badges you earned, favorite changes, and reputation. This made zero sense. It was unreliable. The envelope was notorious for lighting up unpredictably and arbitrarily. There were literally dozens of meta posts about envelope notification oddities. We couldn’t get it right. Yes, partly because we suck, but also in all fairness because the envelope was a horribly flawed concept from the start. You can’t build on sand. It was obscure. Clicking the envelope took you to this other, private place on the site, divorced from your user page and all other normal locations. It was like moving behind a curtain. This is at odds with the Stack Exchange philosophy of keeping as much public as possible. It was not discoverable. As a new user, how would you figure out that this little envelope next to your name lighting up … meant anything at all? It certainly wasn’t about email! It was partially obsolete. Once we got the Stack Exchange global inbox up and running, that completely subsumed the role of notifying you of replies. But even better, because it notified you of replies not just on the current site, but anywhere on our network of Q&A; sites. Clearly, the envelope had to be terminated … with extreme prejudice. We decided to refocus on two things: Showing detailed reputation changes Improving the core, public user page experience a lot That’s why there is a new hover menu on your username. It contains a quick overview of where your reputation (and badges) are coming from, right now. And a handy live UTC clock, too, since all our days are measured in UTC. It also contains deep links to new, improved top-level tabs in your user profile — tabs that now have numbers on them indicating how many new things there are since you last checked. The old reputation graph was boring and honestly kind of useless. It mostly went monotonously up and to the right, with some occasional flat areas if you stopped participating. The redesigned reputation graph is far more practical. You don’t need to rely on the graph, either; you can view reputation breakdowns by post or by time in great detail by clicking the appropriate sub-tab. In addition to the counter on the tab, the responses tab and the reputation tab will actively highlight things that are new since the last time you visited that tab. You may notice that the accounts tab on your user page has improved substantially as well, and is in “natural” order of reputation. We still have some work to do on the favorites support, but we feel these changes are substantial improvements over what the envelope attempted (and largely failed) to do — and are much more discoverable."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/03/25/welcome-valued-associate-josh-heyer/","date":"2011-03-24T23:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Josh Heyer","text":"Our community team has been growing by leaps and bounds: Robert Cartaino — Palm Bay FL — Apr 19, 2010 Rebecca Chernoff — St. Louis MO — Jan 4, 2011 Dori Smith — Healdsburg CA — Feb 25, 2011 We’re serious about building community — and that means having a full time team dedicated to you. The community team’s role is to participate deeply on our network of Q&A; sites and help figure out, with the assistance of the community, ways to for us to serve our community better — in whatever form that takes. I’m pleased to announce that, under the leadership of Robert Cartaino, we’re adding a fourth member to the community team: Josh Heyer, aka Shog9, from Colorado. Josh will be an adjunct community coordinator working part time with the rest of the community team. Josh is as old school as it gets; his Stack Overflow user id is 3 digits. I think it’s fair to say he’s been here from the absolute beginning — not just on Stack Overflow, but on UserVoice (our first meta system), through the birth of the original trilogy, and beyond. Josh is an avid student of online community too, and he’s grown with us as we’ve figured this stuff out. I’m continually amazed how many smart people we have in our network who grok our mission of high signal Q&A; that makes the internet better, and are willing to volunteer their effort and insights to help us get there. I wish I could hire all of you. But until that time comes, Mr. Heyer will have to do."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/03/24/redesigned-tags-page/","date":"2011-03-23T23:00:00.000Z","tags":["Community"],"title":"Redesigned Tags Page","text":"In the spirit of our recent redesign of the users page, we felt it was time to enhance the tags page, too. As you can see, the tags page now shows a bit more information about each tag, namely: The first three lines of the tag wiki excerpt for the tag. The number of questions asked in that tag over the last two relevant time intervals — day, week, or month. These intervals are also clickable so you can zoom into recent questions with the tag. It is my strong belief that the tags page is an essential map of what your community is, and is not, about. Thus, putting the tag wiki excerpts front and center on the tag page is an opportunity to educate your community about the tags you’ve selected and what they are for. Tags are the de-facto map of allowed (and implicitly disallowed by omission) topics on your site. Reliable tag cartography is essential to navigation and exploration in any expert Q&A; community. That’s why the first two pages of tags should have excellent tag wiki excerpts at a minimum. If they have great, complete tag wikis, that’s even better, but you have to crawl before you can walk. Focusing on the ~500 character excerpt is a simple way to get started — and that text is surfaced in a bunch of places on the site, including tag mouseovers. We need your help to make the page 1 and page 2 tags great — so please pitch in and contribute a tag wiki excerpt or edit a tag wiki excerpt to make it better. To invite editing, there’s a small edit link that will dynamically appear as you mouse over the tags page if you have enough reputation. Here’s a few words of advice on writing tag wiki excerpts: The excerpt is the elevator pitch for the tag. You only have ~500 plain text characters for the excerpt, so don’t feel obligated to cover everything in it! Save that for the 30,000+ character Markdown tag wiki. The excerpt should define the shared quality of questions containing this tag — boiled down to a few short sentences. Avoid generically defining the concept behind a tag, unless it is highly specialized. The “email” tag, for example, does not need to explain what email is. I think we can safely assume most internet users know what email is; there’s no value in a boilerplate explanation of email to anyone. Concentrate on what a tag means to your community. For “email” on Server Fault, mention the server aspects of email including POP3, SMTP, IMAP, and server software. For “email” on Super User, mention desktop email clients and explicitly exclude webmail, as that would be more appropriate for webapps.stackexchange.com. Provide basic guidance on when to use the tag. In other words, what kinds of questions should have this tag? Tags only exist as ways of organizing questions, so if we don’t provide proper guidance on which questions need this tag, they won’t get tagged at all, rendering the tag excerpt moot. Think of it as a sales pitch: in a room full of tags screaming “pick me!”, what would convince a question asker to select your tag? Some tags are common knowledge. Most tags require a bit of explanation in the excerpt, even if it’s only 3 or 4 words. But if the tag is common knowledge — that is, if you walked up to any random person on the street and said the tag word to them, and they would know what you were talking about — then don’t bother explaining the tag at all. Stick to usage of the tag within your community in the excerpt. Even if you have good tag wikis already, it’s healthy for communities to introspect a bit about their use of tags, and what those tags mean. Periodically asking questions like “who would ever subscribe to this tag, and why?” can reveal a lot about the nature of tagging on your site."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/03/22/welcome-valued-associate-amanda-zompetti/","date":"2011-03-21T23:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Amanda Zompetti!","text":"Amanda Zompetti takes over as Office Manager in the Stack Exchange NYC headquarters. As Office Manager/Den Mother, Amanda ensures that all the behind-the-scenes-daily-operations run smoothly. During her first week she was faced with many challenges including the installation of a ping pong table. In all seriousness, Amanda is already a strong contributor to the team. In her spare time, Amanda brews her own beer and enjoys cooking (and eating, and talking about food, and looking at food….), and she also plays ultimate frisbee. Welcome Amanda!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/03/17/stack-overflow-meetups-april-6/","date":"2011-03-16T23:00:00.000Z","tags":["Community"],"title":"Stack Overflow MeetUps – April 6","text":"We’re excited to announce that Wednesday, April 6th, 2011, is World-Wide Stack Overflow MeetUp Day! We commonly say that Stack Overflow is run by the community. We also commonly say that Stack Overflow is not a social networking site. There’s no private messaging. There’s no “friends” list. The entire focus is on the knowledge shared. So, when interest arises to organize world-wide “meet ups”, we need a little help from you. Stack Overflow users are a diverse group of people, spread all over the world (there’s a lot of green on that map!). To get everyone involved in this year’s MeetUp, we would like to organize into local groups by getting everyone in each area together… all at the same time. We are making it easy for anyone to organize a local group or find one of the groups already meeting up face-to-face. Meetups.com provides just that service. Get Involved Go to meetup.com/stackoverflow to find your local Stack Overflow MeetUp group. If there is no group in your area, start one! Once some other folks in your area say they’re interested, you can choose an exact location (library, community center, restaurant, etc) to meet. Someone can even step up to be the organizer to help move the process along. Get to Know the Community There is a lot of flexibility in what you can do with your MeetUp. Meet just to chat, host a special guest speaker, organize volunteer activities, or just organize a social gathering with some virtual friends (RockBand anyone?). We’ve set up a room on Stack Overflow’s chat where you can trade ideas. Get the Word Out! Join your local community (or create a new community location) on meetup.com/stackoverflow. If there’s not yet an organizer, you can sign up to organize the event or leave that for later. Once you’ve joined your community, help us spread the word to other members of the Stack Overflow community so that they get involved too! The more people that join, the better the MeetUp will be. Here are some suggestions about how you can spread the word: Use the hashtag #SOMeetup on Twitter, Flickr and YouTube when posting about Stack Overflow MeetUps Post a link to your local MeetUp page on Facebook and Twitter, email the page to your friends, promote in blog posts, on HN, etc Use the custom Stack Overflow MeetUp widgets We want these MeetUps to be a huge success, so we’ll do our part to help by sending out door prizes to meetups that build up a good following. At the MeetUp, take lots of pictures! We can’t wait to see pictures and hear stories of your MeetUps get posted after the event. They may just show up in a blog post reminiscing about the wonderful stories of the World-Wide Stack Overflow MeetUp 2011! See you April 6!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/03/09/a-new-name-for-stack-overflow-with-surprise-ending/","date":"2011-03-08T23:00:00.000Z","tags":["Company"],"title":"A New Name for Stack Overflow (with surprise ending)","text":"It’s been a while since we’ve done something arbitrary, complicated, and confusing, so today I’m happy to announce that the name of the company has been changed, effective immediately, to Stack Exchange Inc! There’s a method behind this madness, of course: we want to emphasize the importance of the 45 sites in our network, which has long since stopped being about programmers: That, plus, whenever we told The New York Times that we were “Stack Overflow,” they would go to stackoverflow.com and have a heart attack. At least this way people wondering about the company understand that we’re about more than just programmer questions. We have Battlestar Galactica too! Now the surprise ending. When we first raised venture capital way back in the long-ago year of 2010, we actually had quite a few great investors interested in buying our stock. And since then, the buzz hasn’t abated. We were pretty sure that given the current market conditions, we could easily raise a big pile of new Unicorn-bucks without losing control of the company. We made a few phone calls, took a few meetings, I flew to London and Boston, and hey presto, we sold another $12 million worth of the company to some great investors. The new investors are Index Ventures, based in Geneva and London, and Spark Capital, based up in Boston. Our first investor, Union Square Ventures, will also put in more money so as to keep the same ownership percentage that they had before (this is called a “pro-rata”). Needless to say, the new investors will want to keep an eye on all that money, so Neil Rimer from Index will be joining the board of directors, and Bijan Sabet from Spark will be an observer on the board (he can come to meetings but he can’t vote). And to keep from tipping the board to the investors, the “common shareholders” (that is, the founders and employees) will be entitled to elect another representative of their own to the board. We picked Anil Dash, who has been blogging for even longer than I have and has been one of our most valuable advisors. Now, you may be wondering how we plan to spend all that money. First of all, of course, we need new stickers and T-shirts. And a ping pong table… We’re also improving the employee snack room a little bit: If you would like to receive your own totally free commemorative 1,000,000 Unicorn Buck Bill and a Stack Exchange sticker, send a self-addressed stamped envelope to: Stack Exchange Inc. 55 Broadway 26 FL New York, NY 10006 If you live outside the United States, include about a dollar worth of whatever kind of weird thing it is that you use over there for money (no goats or Yap coins, please)."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/03/08/peer1-hosting-exclusive/","date":"2011-03-07T23:00:00.000Z","tags":["Company"],"title":"PEER 1 Hosting – Making your data center more awesome!","text":"In 2003, Fog Creek Software (aka Joel’s other baby) moved offices, and decided to ditch its internal T1 and look for a colocation provider. Joel was impressed with PEER 1 Hosting’s customer service, the shiny new data center in NYC, and PEER 1 Hosting even volunteered to host Joel on Software – for free! When we decided to move our Stack Exchange Network to the East Coast to better serve our global customers, PEER 1 Hosting was the logical choice because of the success that Fog Creek had. We began to migrate part of the data center in May of 2010, and finalized the move of all live sites from Oregon in October of 2010. After all the sites were set up at PEER 1 Hosting, we noticed some awesome results and thus we started a discussion with PEER 1 Hosting about how to extend the same benefits to the community. We think it’s a win-win! As an advantage of being part of the community you get an awesome data center at a discounted price – Win! The more business Peer 1 Hosting does with people in the community, the more support they can provide to power Stack Exchange – Win! Here’s a look at our servers hosted at PEER 1 Hosting:"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/03/07/stack-overflow-and-the-computer-history-museum/","date":"2011-03-06T23:00:00.000Z","tags":["Background"],"title":"Stack Overflow and the Computer History Museum","text":"Last summer, we sponsored the Computer History Museum. The sponsorship coincided with a massive 25,000 square foot museum renovation for a new exhibit which opened in January, Revolution: The First 2000 Years of Computing. I finally got a chance to visit, and it is stunning. They took all the computers in their giant visual storage area and meticulously placed them in historical context, with lots of nifty multimedia guidance through the timeline of each section. I could have easily spent hours there — I had no idea the scale of this new exhibit. It is incredible. Amazing, even. If the Computer History Museum was a “must-visit” for geeks in the area before, it is now mandatory on penalty of death. There’s nothing like it anywhere else in the world. And that’s on top of the the functioning PDP-1 (with Space Wars!) and Babbage Machine they already had! But we were on a toddler schedule, so we had to rush a bit. We took tons of photographs, which you can view on my wife’s Flickr page. If you can’t come to Mountain View, California and see it in person, you should at least visit it in spirit! The most important photographs, of course, are these two: As decided on meta, the text for our sponsor brickplaque is: stackoverflow.com Dedicated to the expert programmers whose tireless work made this plaque possible The Computer History Museum is an inspiring place. It’s quite humbling to think that together on Stack Overflow we’re building a small piece of computer history, too — one that will be inevitably and inexorably transformed into something even greater 10, 20, or hundreds of years from now. Visiting the museum emphasizes not only how far we’ve come, but also how far we have to go. The computer may not be a baby any more, but it’s certainly not out of its teenage years yet, either. The history of the computer is still being told, and I’m eager to be a part of what happens next with all of you. (special thanks to Mehrdad Afshari, who took a picture of the “live” plaque at the CHM just after opening, and went out of his way to update meta so the community could check it out early!)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/03/01/redesigned-users-page/","date":"2011-02-28T23:00:00.000Z","tags":["Community"],"title":"Redesigned Users Page","text":"After 2.5 years of being almost unchanged, we decided it was high time the Users page got a redesign. The old user page was fine, in a late 2008 sort of way, but it ultimately became a bit monotonous — every time you viewed it, you’d see more or less the same list of top users. At least, on a mature site you would. And we don’t think anyone was using those oldest, newest, and name tabs at all. The new user page is much more … dynamic. And hopefully more useful and interesting as a destination. I opened a post on meta asking for design feedback and we incorporated a lot of that feedback into the revised Users directory page: We default to showing the users who gained the most reputation in the current week. You can switch to viewing month, quarter, year, or all time. All Time is the same as the old default users page view. We list the specific tags each user gained reputation for in that time frame. We show the location of users, if they have populated their location field — we have a surprisingly diverse worldwide audience. Searches are “match anywhere” again, but the minimum match is now 3 characters. Also, you can only match users with more than 1 reputation on Stack Overflow due to the size of the user table. This is partially inspired by the still-awesome Stack Exchange reputation leagues, and it is intended to complement them. Mostly we wanted to highlight and showcase the efforts of any active users, not just the all-time top users. We also added a link to the leagues on your individual user page — a dynamic link that indicates your current percentile ranking relative to your peers within the current week, month, quarter, or year. Clicking through on this link will permalink you to your best current Stack Exchange reputation league rank. Hopefully you’ll agree, as we do, that this redesign makes the users page a lot more fun and useful than it was before. We have a few more tabs we want to add to the Users page, but haven’t quite gotten to yet. So check it out, and feel free to propose new tabs or provide further feedback on meta."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/28/our-advertisers-want-to-know/","date":"2011-02-27T23:00:00.000Z","tags":["Background"],"title":"Our advertisers want to know…","text":"We recently ran a survey (thanks again to all that participated) and that did not go unnoticed. Some of our best advertisers saw this, and reached out to us because they had some questions of their own that needed answering: Who are you (not personally but as a group) and what do you do? What tools do you use? Do you know about us, and better yet, do you use our stuff? The requirement for these types of surveys is that they do not bias the type of respondents one way or another, and to guarantee this the survey announcement cannot include the name of the company that’s sponsoring the research in the ad soliciting participation. The downside of this is that this may give the ads and survey a SPAM-y appearance (the advertiser will, however, be revealed at the end of the survey). While we had some worries about this, in the end we decided that it would probably be a good thing if we as a community could help the companies that advertise on Stack Overflow create better products, and decided we would do a test run. So if you see an ad like this (or similar) it’s not spam, but a legitimate request for help by one of our long-time advertisers: This is a test to see if this will work for all involved. If it does, we may run more, if it doesn’t we won’t. Let us know if you have any questions or comments about this, either in the comments, on http://meta.stackoverflow.com or by emailing us at adsupport@stackoverflow.com. PS: If you do take the survey, and find out whom the ads are for, please don’t compromise the survey’s validity by sharing with everyone – kthxbai."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/25/welcome-valued-associate-dori-smith/","date":"2011-02-24T23:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Dori Smith","text":"With forty-three sites and counting, there’s no shortage of communities needing attention. Thank goodness there’s also no shortage of enthusiastic users willing to volunteer their time to help their communities. But once in awhile a user stands out as truly exceptional. That’s why I am really excited to announce that Dori Smith has joined us as a full-time member of our community management team. You may have seen Dori in her role as moderator of Ask Different, the Apple Stack Exchange, but she is also actively involved in the Programmers Stack Exchange, as well as Super User, English Language & Usage, and our own meta Stack Overflow. When I talked to Dori about joining our team, she was essentially the same person that comes across on the sites: even-tempered, well-spoken, self-motivated… and just outspoken enough to keep me (and the communities) on our toes. Dori will be working out of Healdsburg, CA. Dori has a degree in Computer Science and speaks professionally about a wide variety of topics. And, wow, has she ever authored an impressive collection of published articles and books. Throw in her deep background as an experienced speaker, teacher, trainer, and community leader, and you have someone who is custom-built to be an outstanding community manager and technical evangelist! Dori will start out with a unique role on our team. She is going to dedicate a significant portion of her time organizing the communities to help them jump-start some of their own promotional activities. We have long wanted to get these sites organized and involved in activities like sending users to attend conferences, speaker bureaus, blogger- and Twitter-outreach, sponsorships, and media relations. With Dori on the team, her experience will bring us a long way towards helping these communities excel with new and exciting programs. Welcome to the team, Dori!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/23/careers-2-0-launches/","date":"2011-02-22T23:00:00.000Z","tags":["Careers"],"title":"Careers 2.0 Launches","text":"One day, you’ll be telling your grandchildren about getting a programming job, version 1.0. You would send a “resume” to a “recruiter.” It included all kinds of silly information required by the esoteric resume ritual (foreign languages spoken, whether or not you play ultimate Frisbee, Microsoft-veteran status). This so-called “information” was utterly useless at determining whether you could program or not, but if you spelled everything right and used suitable fonts, you could come in for a day of interviews at which you would be asked to perform mundane programming tasks on a whiteboard. Over here at Stack Overflow we feel a certain responsibility to make that process better for the millions of programmers who frequent our site. Our dev team in New York has been working day and night to rethink and rebuild our Careers section from the ground up, so today, we are excited to announce Careers 2.0. Here are some of the biggest changes we’ve made. 1. It’s free (to job seekers)… but invite-only. We used to charge job seekers $19 to post resumes. That was supposed to be a basic sanity filter, to make sure that everyone in our system was really looking for a job. You didn’t like that, and we had to agree. There are better filters than money. Starting today, posting a profile on Careers 2.0 is 100% free, but you have to be invited. Invitations come from your peers. We’ll give members a few invites to distribute to programmers they know and trust. Or, contribute to Stack Overflow (and our other sites), get voted up by a lot of smart people, and you may get an automatic invite. By the way, if you paid in the past: thank you! Your account is free for life. But if you don’t think it was worth it, just email us for a full refund. 2. Profiles are much better Our goal is that a Stack Overflow Careers profile should be the ultimate programmer’s portfolio. We’ve redesigned it to look great, and we’ve given you a clean public URL you can use as your professional home on the web (Here’s what mine looks like). Most importantly, we now let you choose your favorite answers which will appear right in the portfolio. You can pick the answers which best demonstrate your expertise. (Here’s mine. Don’t forget to vote it up!) 3. Support for passive candidates Our goal is to help awesome programmers find great jobs. However, we’ve found that: People don’t always want to signal that they’re looking for a job A lot of candidates don’t even realize that there are better opportunities out there Creating a complete profile is a lot of work So, what we want is a way for people to be “passively” looking for a job—they’re willing to get an occasional offer from a company, even if they’re not actively looking for a job right now. And we want it to be frictionless, because if somebody is passively looking for a job then by definition they’re not going to do anything to seek it out. Passive candidate search lets employers search people’s public profiles based on tags and location. For example, they could search for “Python” and “San Francisco” and find a few dozen users who have “San Francisco” as their location and have answered questions in the Python tag. They can view their public profile information, including their top answers. Remember, we’re never revealing anything which isn’t already part of your public profile. If they find a candidate they really like, the employer can request to contact them. We’ll notify that user in the Stack Exchange inbox that there’s an employer who is interested. That user can choose to receive the employer’s message, block that particular employer, or even block all employers. We’ll be watching this closely to see how it works and make sure it doesn’t become annoying or spammy, and we welcome your feedback on how best to serve passive candidates. 4. Much better search Finally, we have completely revamped the way employers search. It’s much faster and cooler, and shows nifty statistics while you search, so, for example, when you say that you are looking for programmers in Chicago, you can instantly see charts breaking down the skills of Chicago programmers. Search for Ruby programmers, and you can see where they’re located on a map of the world. You can test-drive the search interface for free, and see some sample profiles along with basic information about how many candidates match your search. Of course, to see the full results you’ll need to subscribe. The future of jobs In the future, automatic robot recruiters will use mental telepathy and nuclear fusion technology to get people the perfect jobs. When that happens, rest assured that those robots will be wearing Stack Overflow insignia, but until then, Careers 2.0 is a big leap ahead."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/22/are-some-questions-too-simple/","date":"2011-02-21T23:00:00.000Z","tags":["Community"],"title":"Are Some Questions Too Simple?","text":"On Podcast #58, Joel and I had a disagreement. Not the first, and certainly won’t be the last: Joel says that the only bad simple question is a duplicate simple question. I say simple questions are OK as long as they’re actually interesting (in some way) for other users to consider and answer. To prove his point, Joel actually asks the question on Stack Overflow: How do I move the turtle in LOGO? Do you think this question adds value? We still have this disagreement. Our community is now struggling with the very same issue across multiple network sites: Should “trivially easy to find” be a benchmark for moderating the site? (scifi) Should “general reference” questions be asked and answered here? (cooking) Should we require some reasonable research being done? (aka Questions that can be answered by opening an online dictionary) (english) Too many clueless users? (gis) We’ve seen it come up enough times now that I’m comfortable making a final decision: yes, some questions are too simple to be answered … at least on our sites. Not because they’re bad questions, mind you, but because these types of questions can be definitively and permanently answered by a single link to a standard internet reference site with no additional explanation necessary. We discourage “answers” that are links, but for these questions, it’s hard to argue that anything else is required. The problem is coming up enough in the network that we’re thinking about adding a new standard close reason for it. General reference: this question is too basic; the answer is indexed in any number of general internet reference sources designed specifically to find that type of information. User Borror0 ran with this concept and came up with this clever mini-flowchart for determining if a question is too simple to be answered on our sites: The key distinction to make here, in my mind, is that all questions are ultimately in service of the people answering them. That is the audience you need to satisfy if you want to have any hope of creating and sustaining a community of peers learning from each other. The minimum bar for a question is not “is this on-topic?”, but rather “is this somewhat interesting and on-topic?”. I’m not saying every question needs to be utterly fascinating, but please endeavor to make your questions more than a constant stream of no-duh underhanded softballs requiring nothing more than a quick cut and paste from Wikipedia, IMDB, or some other standard internet reference site. There’s nothing useful any expert can learn from ultra-basic questions. Allow your Q&A; community to fill itself with enough “General Reference” type questions and you’ll soon find no experts there at all."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/18/stack-apps-and-scripts/","date":"2011-02-17T23:00:00.000Z","tags":["API"],"title":"Stack Apps and Scripts","text":"As part of our ongoing improvement to our 1.1 API release, and the site that supports our API, stackapps.com, we’ve extended Stack Apps to support the listing of browser scripts. Since Stack Overflow began, there have been tons of nifty browser scripts people have created to enhance their experience — and they usually work on any site in our network. In fact, you may remember that the favorite / ignored tags feature now built into every site originally started life as a user script listed on userscripts.org by Jonathan Buchanan aka insin. We’re making user scripts a first class citizen on Stack Apps by … giving them their very own script tab on the homepage powered by the [script] tag. updating the /faq and introductory messages to emphasize that browser scripts which enhance the Stack Exchange experience are welcome, even if they don’t technically use the API. continuing to publicize the cool and useful scripts our community is creating from within our own community. If you’re wondering how browser scripts work, the good news is that GreaseMonkey support is almost standard across most major browsers now. We updated the script tag wiki to walk you through the process of installing user scripts in your browser. It’s easy — really! Take Ned Batchelder’s script on How to not get reputation points on Stack Overflow, for example: // ==UserScript== // @name No answering on Stackoverflow // @namespace http://nedbatchelder.com/greasemonkey // @description Hide the answer box on Stack Overflow // to stop obsessive behavior // @include http://stackoverflow.com/* // ==/UserScript== GM_addStyle( \"@namespace url(http://www.w3.org/1999/xhtml); \" + \".question-page #post-form { display: none; }\" ); That’s a very, very simple browser user script which hides the question answer form on Stack Overflow. If you’re using Google Chrome for example, all you need to do to install that little fragment of code in your web browser is click the no-so-answers.user.js link — like so: User scripts can be managed by clicking the wrench icon in the toolbar and selecting Tools | Extensions, or of course by entering chrome://extensions in the title bar. That’s how easy it is! We’ve already contacted everyone via email who had user scripts posted on Meta Stack Overflow. We’d like to get those all migrated to Stack Apps so the community has one place to go for a centralized directory of cool, useful scripts that make our sites work better. So if you have a cool user script that works on a Stack Exchange site, and you think others might find it useful or interesting, please list your script on Stack Apps!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/16/blekko-and-stack-overflow/","date":"2011-02-15T23:00:00.000Z","tags":["Background"],"title":"Blekko and Stack Overflow","text":"I’ve been a longtime fan of Rich Skrenta, who you might know as the author of the world’s first computer virus. He’s also on our board of advisors, and he founded a search startup — blekko.com. Blekko’s claim to fame is that it attempts to meld human curation with traditional Google-style search algorithms. It’s what they call slashtags. As originally announced on meta, the Stack Overflow community has agreed to help curate the programming side of blekko hashtags. So far that includes: /android/bsd/cloud/couchdb/css/directx/dotnet/emacs/freebsd/fsf /hackerspaces/hadoop/hpc/ipadapps/it/java/js/lego/linux/mongodb /ms/nosql/open-source/opengl/perl/php/python/rails/ruby/so /sql/tech/techblogs/ubuntu/unix/utf8/ux/videogames/vim/webdesign/windows I encourage you to check out blekko — I really think they’re on to something here, particularly if you consider that the official Google Chrome “block sites” extension is rather similar in tone to a curated slashtag. If you’re an experienced Stack Overflow user interested in helping us curate these programming-related slashtags, just email us at team@stackoverflow.com with your Stack Overflow account information and we’ll make sure you get provisioned as a slashtag editor on Blekko!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/14/welcome-valued-associate-jamie-gingerelli/","date":"2011-02-13T23:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Jamie Gingerelli","text":"New Jersey born-and-bred, Jamie Gingerelli joins the Stack team in the NYC headquarters as Ad Operations Campaign Manager. Jamie is leading the ad operations of Stack Overflow; insuring that our advertisers receive the most bang for their advertising buck. With strong organizational skills and a passion for customer service, Jamie is sure to be a huge contributor to the Stack Overflow team! Jamie loves is obsessed with snowboarding, and recently returned from an awesome snowboarding trip to Park City, Utah. During the warmer months, she enjoys reading (especially about vampires), running on the pier in Hoboken, going to concerts,  and spending time with her fat bulldog Holly. Welcome Jamie!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/11/stack-exchange-api-1-1-and-improved-app-gallery/","date":"2011-02-10T23:00:00.000Z","tags":["API"],"title":"Stack Exchange API 1.1 and Improved App Gallery","text":"We just rolled out version 1.1 of the Stack Exchange API. To see what’s new, browse the revised documentation at: api.stackoverflow.com/1.1/usage Rebecca took an informal survey of the API developer community at Stack Apps, and determined that what everyone wanted most (beyond v2 of the API, yes, I know) was an improved application gallery. So we’ve made the default page on the site the application gallery, and spruced it up to be more visually friendly to average users. This should make it easier for Stack Exchange users to find your app and start using it! Do bear in mind that we heavily promote stackapps.com both with house ads, and in the footer of every Stack Exchange site we launch. So developers, we have your back. If you build on our API, we will continue to fully support you in every way we can! So browse our new, improved app gallery and check out our latest API additions. Even better, start building your own totally awesome apps with the Stack Exchange API! To make sure your app looks its best in the stackapps.com app gallery, be sure to follow the directions on How to List Your Application, Library, or Wrapper Here."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/10/community-conference-sponsorships/","date":"2011-02-09T23:00:00.000Z","tags":["Community"],"title":"Community Conference Sponsorships","text":"In A Recipe to Promote your Site we noted that we would match community effort with funds: Any community that shows sufficient effort and innovative ideas to promote their site will be offered a budget and resources to make those ideas happen. Think of it as matching funds — except we’re matching effort, innovation, resources, and ideas from the community. And it has to come from within your community. You’re the experts, not us! Matching effort with funds assure that recipients have a stake in helping the site work, and communities know that their efforts to help themselves make their site great will be reciprocated. We’re still in the early phases of figuring this stuff out, but we know that sponsoring community leaders to attend interesting, relevant, useful conferences is strongly reflective of our core values, and we want to get started now. So we are! I’m proud to announce that, after asking on each site’s respective meta, we’ve sponsored 3 community leaders by fully covering their airfare, hotel, per diem, and of course the conference fees: In response to our meta post, Kirk volunteered to attend the 2011 ESRI Developer summit in Palm Springs, CA on behalf of the GIS community. In response to our meta post, Jesse (aka Tetrad) volunteered to attend the 2011 Game Developers Conference in San Francisco, CA on behalf of the game developer community. In response to our meta post, Rory volunteered to attend the San Francisco Security B-Sides conference on behalf of the security community. Congratulations Kirk, Jesse, and Rory — thank you for electing to be the guinea pigs in our experiment. I wish you safe flights, and I truly hope you enjoy the conferences. Sending community members to conferences is something we are very serious about, because we believe so deeply in learning. Going to a conference to speak or participate — and bringing that experience back to our community — is a great way to share what you’ve learned. That’s the very principle our communities are founded on, this idea that we’re all there to learn from each other. And that’s all that we ask in return — that these community members share their experiences with their respective communities, and the greater internet, in some way. It doesn’t need to be (and shouldn’t be) a chore. The sharing can be anything from a few blog posts about the experience, to actually speaking or having a roundtable at the conference, or something else entirely. And of course, we will supply you with plenty of swag to take with you and share with your fellow conference attendees at your discretion. If this sounds exciting to you, get started on your own community! Open a meta question asking which conferences it would make sense for someone from your community to attend — so that we can all benefit from their experience."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/05/suggested-edits-and-edit-review/","date":"2011-02-04T23:00:00.000Z","tags":["Community"],"title":"Suggested Edits and Edit Review","text":"The Stack Exchange engine draws inspiration from a number of sources. We continue to be great admirers of Wikipedia, but we’ve always missed out on one crucial aspect of their system: we never allowed anonymous users to edit content. No, that required earning privileges through participation — specifically, the retag privilege at 500 reputation and the full editing privilege at 2000 reputation. Well, as of today, I’m proud to announce that we allow anonymous and new users to edit content in our system! The surface area of this change is huge — it means the millions of drive-by anonymous users that visit our sites every day can submit an improvement or correction. Furthermore, you can earn up to +1000 reputation for submitting valid edits. We do currently limit anonymous edits to questions and answers more than 10 minutes old (and with some different caveats, wiki pages too). Millions of posts now have that ubiquitous edit link at the bottom. Click it, and you’ll be sent to the standard editing interface, albeit with a small disclaimer at the top. There are a few additional requirements when submitting an edit suggestion: You must enter a reasonable comment describing your edit. To prevent noise and friction, your change must be more than 6 characters. After the edit is submitted, it goes into an edit suggestion queue of a fixed size. (If the queue is currently full, we temporarily stop accepting edits.) Users who have earned the editing privilege can now vote to accept — or reject — the suggested edit. There are two ways to view suggested edits: Suggested edits for a post are always visible on the post itself. If edits are pending on a particular post, the post’s edit menu will have a counter next to it. Clicking on the edit from a post will show it inline in a floating panel, so you aren’t interrupted. If you have 10,000 reputation, a counter will appear at the top of the page showing the size of the edit suggestion queue (if it’s greater than zero, of course). Clicking this counter will take you to a new /review tab that lists all suggested edits in the queue. Once you click on a suggested edit, you get a diff view that shows you the original post on the left, and the edited version on the right. All additions and deletions are highlighted. You can also toggle between HTML and Markdown views via the toolbar buttons on the left. From here, you can approve or reject the edit. When an edit is approved, the editor receives +2 reputation — up to a maximum of +1000 total per user. Contributing good edits is now a nice way to gain reputation and bootstrap less active users into full members of the community. To keep this post a sane and readable size, I have glossed over a lot of the other rules that we have in place to handle edge conditions with edit suggestions. If you have further questions or want lots more detail, please read Sam’s meta post before leaving a comment here. So, in summary: Anonymous, unregistered, and 1 reputation users may now submit suggested edits to most content on our sites. Experienced users with 2,000 reputation or more can review these edits and approve or reject them. When registered users’ edits are accepted, they earn +2 rep, up to a maximum of +1000. I’ve always wanted to extend some form of editing privileges on our site to everyone on the internet. I just apologize that it took us over two years to figure out how to do it!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/04/welcome-our-new-trilogy-moderators-for-2011/","date":"2011-02-03T23:00:00.000Z","tags":["Community"],"title":"Welcome Our New Trilogy Moderators for 2011!","text":"The trilogy elections are now complete. Welcome our new trilogy moderators for 2011! Stack Overflow Server Fault Super User I hereby declare the new election process, at least as judged by the quality of the final candidates and the eventual winners, a resounding success! Thank you for so generously contributing your time to keep your community safe, sane, and organized!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/02/02/moderator-messages/","date":"2011-02-01T23:00:00.000Z","tags":["Community"],"title":"Moderator Messages","text":"First, a quick update on the Stack Exchange moderator election schedule. Ending today, so get those votes in! serverfault.com/election superuser.com/election stackoverflow.com/election Ending soon: programmers.stackexchange.com/election cstheory.stackexchange.com/election gamedev.stackexchange.com/election Just started: webapps.stackexchange.com/election askubuntu.com/election gaming.stackexchange.com/election Coming soon, in this order, at 3 per week: webmasters.stackexchange.com/election (Feb 7) cooking.stackexchange.com/election (Feb 7) photo.stackexchange.com/election (Feb 7) stats.stackexchange.com/election (Feb 14) tex.stackexchange.com/election (Feb 14) english.stackexchange.com/election (Feb 14) unix.stackexchange.com/election (Feb 21) apple.stackexchange.com/election (Feb 21) (as always check out Yi Jiang’s awesome Stack Exchange Moderator Candidate Statistics page for insanely detailed election stats on any of the above.) As you can see, we have a lot of community moderators! That’s why we’ve been working so hard lately on improving our moderator tooling, to make sure our new class of incoming moderators have as pleasant, polished, and smooth an experience as possible. One thing we haven’t helped much with, historically, is when serious behavior problems occur. We encourage direct one-on-one communication to resolve serious behavior issues before they become irreconcilable. Unfortunately, the only way for a community moderator to do this was to email the user from his or her personal email account. Ew, right? Far from an ideal solution, but it was the only one we had… until today! To make these sensitive moderation scenarios easier, we just rolled out on-site moderator messaging. This accomplishes several things: All moderator to user messaging is done on-site; no email is required, and it’s a private communication between the user and the moderators. A duplicate courtesy notification email can optionally be sent to the user’s email account. This email comes from do-not-reply@stackexchange.com (or the trilogy domain equivalent) so no personal emails are ever revealed. We provide a set of prefab moderator template emails which cover most of the common-ish moderator direct contact scenarios we have experienced. This provides ambient guidance on a few situations you might expect to encounter at some point. It also reduces the “don’t make me think” of composing these difficult messages, and helps guide both parties into a (hopefully) constructive and positive interaction. The vast, overwhelming majority of users are perfectly well behaved, so it’s rare to even need direct contact. But by the time we have to contact a user directly … it’s either something very, very good … or something very, very bad. When it happens, we try our best to keep the interaction constructive. It’s not about the specific user, it’s about the specific behavior. Addressing the behavior is our only goal. We have some other exciting changes coming for moderators that are complementary to the improved moderator flagging for users — so stay tuned. Good luck to all our moderator nominees. We’re rooting for you, and we will keep improving the moderator experience as we go to make it as painless and easy as possible."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/28/area-51-gets-organized-lets-talk/","date":"2011-01-27T23:00:00.000Z","tags":["Area51"],"title":"Area 51 Gets Organized. Let’s Talk!","text":"Dust off your tuxedo; notify the paparazzi. You are invited to the hottest ribbon-cutting ceremony this side of Rovio. Stack Exchange is launching the long-awaited Discussion Zone of Area 51! The Discussion Zone is similar to a meta forum where users can bandy about proposal ideas, discuss promotions, and decide how to best mix and match these proposals into great sites. For example: Should we merge the and proposals? Do we really need another site about ___? Would a site about ___ work in the Stack Exchange network? But there’s so much more going on under the hood than a new discussion forum. The Area 51 proposals have also been organized and grouped into a series of “Categories.” Area 51 Categories Categories provide more than just a cataloging system to help find interesting proposals. Categories form the basis of building communities around users with similar interests: Area 51 was long overdue for a v2.0 makeover; it hasn’t changed much since it launched last June. With almost 700 proposals vying for attention, users were having a hard time organizing and rallying around individual proposals. Some of those proposals will make great sites. But the listings are fraught with duplicates, overlapping ideas, and subsets of similar proposals — and a few genuinely great ideas that are simply struggling to find its audience. We hope that, by creating this collaborative association, users will sort and distill the proposal list down into a collection of viable topics; proposals that need little more than the time to gather support. The concept behind the new Area 51 design is simple… Each time you visit a proposal, you should find yourself surrounded by activities of interest: related proposals, interesting discussions, like-minded users; all working together to discuss how best to create great sites from these proposal ideas. Assigning Categories to proposals will also help us introduce Stack Exchange sites to proposals of interest. The added visibility will help promote the next generation of even more diverse Q&A sites. It’s hard to predict just how these “Discussion Zone” forums will be used. They may not be the silver bullet that I’m hoping for. But at the very least, it gives everyone a voice."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/28/area-51-gets-organized-lets-talk/","date":"2011-01-27T23:00:00.000Z","tags":["Area51"],"title":"Area 51 Gets Organized. Let’s Talk!","text":"Dust off your tuxedo; notify the paparazzi. You are invited to the hottest ribbon-cutting ceremony this side of Rovio. Stack Exchange is launching the long-awaited Discussion Zone of Area 51! The Discussion Zone is similar to a meta forum where users can bandy about proposal ideas, discuss promotions, and decide how to best mix and match these proposals into great sites. For example: Should we merge the and proposals? Do we really need another site about ___? Would a site about ___ work in the Stack Exchange network? But there’s so much more going on under the hood than a new discussion forum. The Area 51 proposals have also been organized and grouped into a series of “Categories.” Area 51 Categories Categories provide more than just a cataloging system to help find interesting proposals. Categories form the basis of building communities around users with similar interests: Area 51 was long overdue for a v2.0 makeover; it hasn’t changed much since it launched last June. With almost 700 proposals vying for attention, users were having a hard time organizing and rallying around individual proposals. Some of those proposals will make great sites. But the listings are fraught with duplicates, overlapping ideas, and subsets of similar proposals — and a few genuinely great ideas that are simply struggling to find its audience. We hope that, by creating this collaborative association, users will sort and distill the proposal list down into a collection of viable topics; proposals that need little more than the time to gather support. The concept behind the new Area 51 design is simple… Each time you visit a proposal, you should find yourself surrounded by activities of interest: related proposals, interesting discussions, like-minded users; all working together to discuss how best to create great sites from these proposal ideas. Assigning Categories to proposals will also help us introduce Stack Exchange sites to proposals of interest. The added visibility will help promote the next generation of even more diverse Q&A sites. It’s hard to predict just how these “Discussion Zone” forums will be used. They may not be the silver bullet that I’m hoping for. But at the very least, it gives everyone a voice."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/24/stack-exchange-2011-elections-begin/","date":"2011-01-23T23:00:00.000Z","tags":["Community"],"title":"Stack Exchange 2011 Elections Begin","text":"After running a beta community moderator election on math.stackexchange, and launching 2011 community moderator elections on the trilogy sites, we are now rolling out community moderator elections to all the public Stack Exchange 2.0 sites. When we selected Moderators Pro Tempore on the public beta sites, we tried to be quite clear that the eventual goal was always to have the community elect its own moderators. That’s why I am in the process of identifying and organizing a team of provisional moderators from within each community (about three per site, starting about seven days into the public beta). This is a temporary, short-term appointment. Pro tem moderators focus and expedite the essential needs of each new site. By the end of beta, the community will be better suited to hold their own elections. There are a lot of public Stack Exchange 2.0 sites that are due for moderator elections — but we’re starting slowly: gamedev.stackexchange.com/election cstheory.stackexchange.com/election programmers.stackexchange.com/election We’re still refining the election process; after these three complete, we’ll proceed rolling elections on even more public sites. I’ve outlined the election rules before, and those rules are also on the individual election pages — so please refer there first. We have a deep respect for all the work that the pro tem moderators do to help govern their communities, particularly in the tumultuous early beta days of a site when we’re still figuring out the 7 essential questions. However, in the spirit of fairness and representative democracy, pro tem moderators must run for election if they wish to continue on as community moderators. They are encouraged to, of course! If you’re looking for a ton of detail and statistics on all the nominees, you just gotta check out this amazing election page community member Yi Jiang put together using the Stack Exchange API: The page runs entirely in your browser. Click the icon of the site you want to see election details for … and prepare to be blown away. Our election pages pale in comparison, but we do present the essential information about each candidate, including their introduction, user card and a brief summary of their meta participation. Democracy is a highly imperfect process, but it is a participatory imperfect process. Please participate in your community elections — by nominating yourself as a community moderator, if you’re so inclined, and always, always by voting. Your vote is your voice, so use it!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/24/state-of-the-stack-2010-a-message-from-your-ceo/","date":"2011-01-23T23:00:00.000Z","tags":["Background"],"title":"State of the Stack 2010 (a message from your CEO)","text":"2010 was an absolutely amazing year here at Stack Overflow. We grew from 7 million visitors to over 16 million, putting us in Quantcast’s top 400. We raised $6 million in venture capital, and we went from three full time employees to 27. We built a 7500 square foot office in New York, and we launched a ton of new features and sites, like Stack Exchange, a network of 33 Q&A; sites on diverse topics from cooking to computer science. Stack Exchange grew 51% in December alone. Wow. The expert Q&A; model that Stack Overflow pioneered is really working. The statistic I’m proudest of is the percentage of questions that get a good answer, over 80% (and many of the new Stack Exchange sites have 100% answer rates!) Traffic The true measure of success for any Internet company is how often people come up to me in swank hotel lobbies and offer to buy me meals, let me use their corporate jet, etc. But since there is a great deal of disagreement as to how to measure that, we track a reasonable proxy called “eyeballs,” on the theory that if a site is useful, people will load it up in their browsers and eyeball it. Traffic to Stack Overflow grew 131% in 2010, to 16.6 million global monthly uniques. Uniques are counted by cookies, so the number of human beings is less. We also measure the number of page views (top level pages loaded, which doesn’t count images and supporting files), which has similarly grown from 31.8 million per month to 72.8 million per month, i.e. 129% growth. Based on the number of people who do come up to us in hotel lobbies, we’re pretty sure that ALL the programmers in the world use Stack Overflow. (Source: completely made up. But seriously, when was the last time you met a programmer who didn’t use “El Stack”?) In order to keep growing and making the Internet more awesome, we have to expand into new subject areas, like Molecular Biology and Harley Davidson Belt Buckles. That’s what Stack Exchange is all about. Stack Exchange growth is insane. In six short months, we’ve gone from zero to 1.5 million monthly visitors, growing 51% in December. If, as planned, we continue growing at 51% a month, we will be bigger than Facebook in 15 months. We’re ALREADY bigger than ocn.ne.jp (No, I’ve never heard of that either. But we’re bigger). Jeff and I are already planning who will play us in the Aaron Sorkin movie. (Tyler Labine and Zac Efron, obviously.) Now, obviously, all this TRAFFIC isn’t worth a thing if people aren’t getting answers to their questions. That’s why our favorite thing to measure is “percent of questions answered.” And not just any answer will do, either: to count a question as “answered”, either the original poster has to accept the answer, or a third party has to upvote the answer. This is where Stack Overflow really shines compared to other Q&A; sites: we actually get questions answered. Three of our sites actually have 100% answer rates! New Sites Last summer, we relaunched Stack Exchange as a democratically-driven network of sites on topics chosen by our users. Some of these sites are directly related to programming (for example, Game Development), but some are quite far afield, from English Language to Cooking. We call it the Stack Exchange network, and at StackExchange.com you’ll find a directory of all of them, along with some hot questions, statistics, leaderboards, and other tools so that you can follow the sites and tags that you’re interested in. We learned a long time ago that the only way to get questions answered promptly is to have a critical mass of knowledgeable users, so we have an onerous process called Area 51 where sites are proposed, discussed, and voted on. If a proposed site doesn’t have critical mass, we just won’t create it. Even if it does get created, it has to maintain a certain level of traffic and quality or we’ll close it down. So far, 13 sites have gone all the way through the Area 51 process and launched. Dozens more are already in beta. Hundreds more are in active discussion and will launch when they reach a critical mass of interested participants. The development team has been knocking out new features at a constant pace. They built an amazing web-based chat system, and we’ve added literally hundreds of new features and improvements to the core Stack Overflow engine which we roll out continuously. The Company At the beginning of the year, Stack Overflow LLC was just three developers working from home. In the spring, we raised $6 million in venture capital from Union Square Ventures and a long list of celebrity angel investors, which allowed us to expand rapidly. We hired a team of great people, including several of the high-reputation users that you know from Stack Overflow. We now have community managers, a sales team, two full time system administrators, and Very Important Administrative Overhead like myself, but most importantly, we have a great team of developers, in New York and around the world, building the next generation of cool features, like the important “wheel of blame” feature, which we can run at any time to calculate precisely who is responsible for anything that went wrong. (Contrary to popular belief, it’s not always Jason Punyon.) To make room for all these people, or, at least, those who live in New York, we rented a 7500 square foot, class A, super-elite batcave in New York and then fixed it up to be nice, with cool furniture including Aeron chairs and height-adjustable desks, and lots of glass to bring views and daylight deep into the batcave. And of course, we have private offices with a half dozen gigantic 453-inch monitors for each developer. And there’s an amazingly cool Star Trek couch. Does your company have a Star Trek Couch? I didn’t think so. We also have Rovio, a little robot that our remote developers can use to visit the office “virtually.” (There. I said “virtually.” Are you happy now?) Overall 2010 has been a real breakout year for Stack Overflow, which is now the largest programmer website in the world (source: me) and the best, fastest-growing Q&A; website in the world (source: also me). We’ve got an incredible team firing on all cylinders, so we’re really looking forward to 2011."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/22/free-vote-based-advertising-launches-third-round/","date":"2011-01-21T23:00:00.000Z","tags":["Community"],"title":"Free Vote-Based Advertising Launches Third Round","text":"The start of the new year brings with it another round of our Free Vote-Based Advertising for Open Source Projects. The ads from the last round have been retired to make room for new ads for the first half of 2011. This is the third round of our program. For the past year, Stack Overflow has been providing free advertising to open source projects looking for programmers. The ads shown are fully driven by the community: user-created ads are voted on by our users. The top-voted projects from the second half of 2010 each received approximately one million impressions. Stack Overflow is now regularly getting well over two million page views a day. This community driven program is a simple way to get your project some publicity. So let’s get started with round three. Round 3 Each round of advertising runs for about six months. We have reset the voting and cleared the ads board for the first half of 2011. If you have an open source project that is looking for programmers, we know where you can find them, and the Free Vote-Based Advertisement for an Open Source Project is a great way for you to reach them. Here’s how it works: Visit the the special meta.stackoverflow.com question thread for this advertising period. It will always be tagged [open-source-advertising]. Construct a 220×220 image advertisement for the open source project that you would like to publicize to your fellow programmers. Your ad should be an original creation which has not previously appeared as an ad on Stack Overflow. Post an answer containing your image to the question. It must be in exactly the right format, as documented in the question itself. Get at least six up-votes for your answer. Your advertisement will now be featured in Stack Overflow’s remnant ad inventory, in the sidebar ad slot on most pages. Throughout the next several months, you can visit the ad summary page, and mouse-over the ‘view stats’ link to see how each ad is doing. So, fire up and create an ad to publicize your open source project! Submit your ad here Come back often to vote on new ads!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/19/trilogy-2011-elections-begin/","date":"2011-01-18T23:00:00.000Z","tags":["Company"],"title":"Trilogy 2011 Elections Begin","text":"After vetting the new, improved election process on math.stackexchange.com we’re ready for the next big step: 2011 community moderator elections on Stack Overflow, Server Fault, and Super User. If you’ve ever thought to yourself, “Hey, I’d make a great community moderator!” — now is your chance to nominate yourself: serverfault.com/election superuser.com/election stackoverflow.com/election Don’t worry — all our excellent community moderators on the trilogy will carry on as moderators. It’s only on new Stack Exchange 2.0 sites with Pro Tem Moderators that existing moderators must run in the first election to continue their terms. The community moderator election process is documented on the individual election pages in great detail, but in brief, here’s how it works: Nominations — seven days In the nomination phase, any community member in good standing with at least 2000 (3000 on Stack Overflow) reputation may nominate themselves — and only themselves — as a candidate in the moderator election. Nominations require writing a brief introduction explaining to the greater community why the candidate would make a good community moderator. Comments are encouraged in this phase, along with plenty of editing to make the introduction better, but there is no voting. The top 30 nominees (ordered by reputation) proceed to the primary phase unless they opt to withdraw. Note: If there are 10 or less candidates at the end of this phase, we skip directly to Election. Primary — four days In the primary phase, all community members with at least 150 reputation can cast an up or down vote on each candidate, resulting in a public tally. No comments are allowed in the primary; any opinions on the suitability of each candidate should be expressed as a simple up or down primary vote. The top 10 candidates by score will proceed on to the election phase, unless they opt to withdraw. Election — four days Once the election begins, there will be per-user site notifications to all eligible voters. In the election phase, all community members with at least 150 reputation can cast three votes: 1st choice, 2nd choice, and 3rd choice. All votes are private until the election is complete, at which point the election data file (the vote totals for all the candidates; no identification of who voted for whom) will be freely and permanently downloadable by anyone. We will calculate the winners using OpenSTV and the Meek STV method. In a little over two weeks, the election process should hopefully produce several new democratically elected community moderators! Democracy only works when the community participates, so if you know someone who would make a great community moderator, urge them to nominate themselves. And as always, please vote!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/17/real-questions-have-answers/","date":"2011-01-16T23:00:00.000Z","tags":["Community"],"title":"Real Questions Have Answers","text":"In Good Subjective, Bad Subjective, we made a pretty solid first stab at defining a constructive subjective question, one that I’ve been happy with so far. Constructive subjective questions: inspire answers that explain “why” and “how”. tend to have long, not short, answers. have a constructive, fair, and impartial tone. invite sharing experiences over opinions. insist that opinion be backed up with facts and references. are more than just mindless social fun. But the six guidelines above depend partly on the questions, and partly on the answers. They’re a fine starting point for determining what a good subjective question generally looks like — but I couldn’t fully explain what makes a bad subjective question. That was before I saw Aarobot’s epic meta answer on poll questions: Should all poll questions be closed? That is where it starts to get dicey. For you see, the term “poll” is itself subjective, and whether or not a given question is in fact a poll is often open to debate. For me, and I think I speak for many others, the only time you really know you’re looking at a poll is when you see those one-line answers. But we can only close questions. Is it always the fault of the questioner that the answers suck? Do they deserve all the blame for the fact that people with nothing useful to say want to participate anyway and bring their reddit-style “tweets” into the answers? Sometimes the questions really are bad. When someone asks, Which programming language do you really hate?, and doesn’t bother to elaborate at all, that is just screaming for crap answers. It’s hard for me to begrudge any of those participants their answers (okay, maybe I begrudge them a little) because the question itself was so ridiculously open-ended that any answer would technically be a “correct” one. Then again, some questions that are worded as very obvious polls actually get reasonably good, well-written answers. See Best practices that you disagree with for an example. On Seasoned Advice (Cooking.SE), I can point to several examples of weak questions or even joke questions that, given an early, comprehensive answer, did not devolve into pointless blathering. On the flip side, I’ve seen questions that were definitively not phrased as polls that were still greeted by dozens of poor-quality answers; take, for example, one of Stack Overflow’s oldest: Practical non-image based CAPTCHA approaches? Recently I’ve actually taken to using Metafilter’s guidelines as a rule of thumb. Yes, yes, it’s a long post, almost TL;DR, but it’s gold. Read it anyway. You may remember Aarobot from his previous discovery about meta-tags. It should come as no surprise that MetaFilter, which has been doing high quality Q&A; since 2004, figured this stuff out years ago. They’re a huge influence — up there with Wikipedia in my estimation. That’s why we had Josh Millard, a MetaFilter admin, on an early podcast. I’m just kicking myself for not discovering the particular page Aarobot referenced until now. Effective immediately, the FAQ for all sites now includes specific guidance on what a bad subjective question looks like. What kind of questions should I not ask here? You should only ask practical, answerable questions based on actual problems that you face. Chatty, open-ended questions diminish the usefulness of our site and push other questions off the front page. To prevent your question from being flagged and possibly removed, avoid asking subjective questions where … every answer is equally valid: “What’s your favorite __?” your answer is provided along with the question, and you expect more answers: “I use __ for __, what do you use?” there is no actual problem to be solved: “I’m curious if other people feel like I do.” we are being asked an open-ended, hypothetical question: “What if __ happened?” it is a rant disguised as a question: “__ sucks, am I right?” If your motivation for asking the question is “I would like to participate in a discussion about __“, then you should not be asking here. If your motivation is “I would like others to explain __ to me”, then you are probably OK. All based on the MetaFilter FAQ entry My Ask Metafilter question was removed as chatfilter. What does that mean?, with their explicit permission and proper attribution. I realize this is a lot of rules, a lot of guidelines, a lot of thinking. But it’s simpler than it looks. As Aarobot said in his post: real questions have answers, not items or ideas or opinions."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/17/welcome-valued-associate-nick-larsen/","date":"2011-01-16T23:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Nick Larsen","text":"2011 is starting off with a bang! I’m excited to announce that Nick Larsen has joined the Stack Overflow team in our NYC headquarters. Nick relocated from Atlanta, GA with his lovely wife Mary Paige, a graphic designer, and their rescued dachshund Maddy, a nap enthusiast. They’re settling into their new apartment on the Upper East Side conveniently located near the “small dog” park and a tequila bar. As if this isn’t enough to keep him busy, Nick also builds and launches high power rockets. As part of the Stack Overflow Careers programming team, Nick is working to take the user experience to the next level."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/16/creative-commons-data-dump-jan-11/","date":"2011-01-15T23:00:00.000Z","tags":["CC Wiki Dump"],"title":"Creative Commons Data Dump Jan ’11","text":"IMPORTANT: This torrent was originally uploaded incomplete. Our apologies. If you downloaded it before ~ 8 pm Pacific on January 16th, 2011, you should re-download it now. The correct size is > 3 GB; anything smaller is incorrect. The latest version of the Stack Exchange Creative Commons Data Dump is now available. This reflects all public data in … Stack Overflow Server Fault Super User Stack Apps all public non-beta Stack Exchange Sites all corresponding meta sites … up to Jan 2011. This month’s Stack Exchange data dump, as always, is hosted at ClearBits! You can subscribe via RSS to be notified every time a new dump is available. Please read, this is not the usual yadda yadda! Three things: Because the dumps are quite a bit of work for us, we’re moving to a tri-monthly schedule instead of monthly. Meaning, you can expect dumps every three months instead of every month. If you have an urgent need for more timely data than this, contact us directly, or use the Stack Exchange Data Explorer, which will continue to be updated monthly. The attribution rules have changed to forbid JavaScript generated attribution links. As of November 2010, we enhanced the format of the data dump to include more requested fields, full revision history, and many other pending meta requests tagged [data-dump]. That’s why the dump is so much larger, but we did break it out in individual files per site within the torrent, so you can download just the files you need. If you’d prefer not to download the torrent and would rather play with this month’s data dump in your web browser right now, check out our open source Stack Exchange Data Explorer. Please note that it may take a few days for the SEDE to be updated with the latest dump. Have fun remixing and reusing; all we ask is for proper attribution."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/14/improved-flagging/","date":"2011-01-13T23:00:00.000Z","tags":["Community"],"title":"Improved Flagging","text":"We’ve had a Craigslist-inspired post flagging system in place since the middle of 2009. But we haven’t improved it much since then, and given the recent influx of traffic, we are struggling to keep up while educating question askers and educating answerers. There’s no way even the most avid community moderator could possibly keep tabs on 2,500+ questions and 7,500+ answers per day. In order to keep our community tidy and on topic, we need everyone to help us flag the unusual stuff! The concept is simple: if you are a registered user with at least 15 reputation, when you see something bad happening on the site — flag it! That’s why every post has a small flag link underneath it. We felt the old flagging dialog was a bit too … intimidating. Flags are not to be taken lightly, yes, but they shouldn’t be scary, either. So in our redesign, we tried to create a kinder, gentler moderator flag dialog — one that explains typical flag scenarios in a bit more detail. (the appearance of the flag dialog is highly context sensitive, and varies both based on the post and the reputation level of the user who clicked the flag link. So what you see when you click flag may differ slightly from what’s pictured above.) Clicking each option expands some explanatory text that provides context: it needs ♦ moderator attention A few canned common reasons, including “low quality”, “not an answer” (for answers), and a 500 character (expanded from 150 characters) area for anything else you’d like to let the moderators know about. it doesn’t belong here (generate a mod flag using any existing close reason as a template) it is spam This question is effectively an advertisement with no disclosure. It is not useful or relevant, but promotional. it is not welcome in our community This question contains content that a reasonable person would consider offensive, abusive, or hate speech. One thing we realized is that the mod flag dialog ends up being training wheels for closers. That is, users who do not yet have the right to cast a close vote (earned at 3k reputation), but do have strong feelings that a given question does not belong based on our standard set of close reasons. You know, off-topic, duplicate, too localized, etc. We welcome anyone who is willing to help, so we made this easier. We also show how many remaining flags you get of each type per day in the dialog itself. In order to encourage more flagging, we have increased the number of general moderator flags available to 10 per day, plus one per every 1k of reputation, up to a maximum of 100. So if you have 15k reputation, you now have 25 moderator flags to use each day as you see fit. The existing spam and offensive flag allocation of 5 per day has not changed. Another change we’ve instituted, based on the popular Newgrounds flash game portal, is the concept of “flag reliability”. If a particular user keeps moderator flagging for reasons that we consider invalid, their flag weight decreases. And for those users who continually flag reliably, their flag weight increases. Due to the large amount of abuse to Newgrounds by malicious users we have implemented features that allow users to help police the site. A user’s Whistle level can go up or down depending on how accurately the user flags questionable content. If a user abuses their use of the whistle to flag portal entries and reviews that do not violate our terms they will lose points and eventually be stuck with a broken whistle. Users with broken whistles have no effect on anything they attempt to flag. However, users with a broken whistle may still receive negative or positive points so they can either dig themselves a deeper hole or try to regain a normal level and effectively flag entries once again. Users who blow the whistle accurately many times can increase their whistle level to bronze, silver, gold or deity levels. Users with a higher whistle level pull more weight when they use it. We need community flagging to work, and work well, if we want to have any hope of scaling without losing the fundamental level of quality that we as a community have enjoyed so far. Rest assured we haven’t just been working on the flag front end — we’ve made a ton of improvements to the moderator and 10k tools pages on the back end to assist in handling this increased volume of flags. The bottom line is this: if you see anything on the site that you think is serious enough for a moderator to take a peek — flag it!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/12/twitter-question-feeds-for-stack-exchange/","date":"2011-01-11T23:00:00.000Z","tags":["Community"],"title":"Twitter Question Feeds for Stack Exchange","text":"If you ever listened to our sadly defunct podcast, you probably heard about Twitter … a lot. I’ve been a longtime user (since 2007) and I was always surprised how much utility I got out of the thing. Even Joel Spolsky, a longtime skeptic of the service, is a believer now. We decided to create Twitter accounts for each Stack Exchange 2.0 site that will broadcast interesting questions every so often. Believe me — I despise spam as much as anyone, and I fully realize that Twitter is not RSS … … but the fact is that a lot of questions generated on our sites are really quite interesting. The more people that discover our high quality Q&A; and join us — the better the community becomes for everyone! With that in mind, we’ve set up the following Twitter accounts to publish the most interesting content on each Stack Exchange site every three hours — without ever repeating themselves. Android StackAndroid Apple StackApple StackApps StackApps Audio Recording & Production StackAudio Bicycles StackBicycles Board and Card Games StackBoardGames Cooking StackCooking CS Theory StackCSTheory Home Improvement StackDIY English Language & Usage StackEnglish Database Administrators StackDBAs Personal Finance and Money StackFinance Game Development StackGameDev Gaming StackGaming GIS StackGIS Homebrewing StackHomebrew Mathematics StackMath OnStartups Answers StackOnStartups Photography StackPhotos Physics StackPhysics Programmers StackProgrammer Electronics and Robotics StackRobots Role-Playing Games StackRPG IT Security StackSecurity Statistics StackStats TeX StackTex User Interface StackUI Ask Ubuntu StackUbuntu Unix and Linux StackUnix Web Applications StackWebApps Pro Webmasters StackWebmasters WordPress StackWordPress Writers StackWriters As of June 2011, the authoritative list of sites and Twitter accounts will always be at the official stackexchange.com/sites directory. Just look for the little Twitter icons next to each site. Although it’s always possible to subscribe to a site’s questions through the copious RSS feeds we provide on every page — and also via email — I guess you can consider Twitter “RSS for the casual internet user”. We’ll try to feature the Twitter accounts on each site in some unobtrusive way, so people have another way to follow the stream of Q&A; from a given site topic without being overwhelmed by it. We also plan to get our master Stack Exchange twitter account hooked up and broadcasting a sampling of the best questions network-wide, just like the stackexchange.com homepage already does. This is now working, so if you want the “greatest hits” questions across the entire network, follow this user: twitter.com/stackexchange (Also, a special thanks to community member George Edison who put together a great Twitter ‘bot sample app in Mono for us to use as a reference — you can view his source code at quickmediasolutions.com/stackbot and contribute to it as you see fit!)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/11/survey-says/","date":"2011-01-10T23:00:00.000Z","tags":["Background"],"title":"Survey Says","text":"In December we launched the Stack Overflow Annual User Survey in order to measure the user demographics that Google Analytics can’t provide us with. Finding out the user demographics became necessary due to the growth that Stack Overflow had in 2010. Of the 2,813 surveys started, 2,532 were completed, for a completion rate of 90%! Thank you to everyone who participated. View a report of the survey results Or if you’d like to do your own analysis you can download the survey results. Now, for some interesting facts ripped from the headlines: Job Satisfaction ReadWriteWeb reported that according to a Gartner analyst, more than 1/3 of IT professionals are interested in switching jobs. According to our poll, users were slightly more satisfied with 31.6% of respondents indicating job satisfaction of “FML”, “I’m not happy in my job”, and “It pays the bills”. On a good note, the remaining 68.4% of respondents were satisfied with their jobs responding “So happy it hurts” and “I enjoy going to work”. Smart Phone Wars The Android community reported on January 7 that in of all US Smartphone Subscribers in November 2010, 26% used Android, 25% iPhone, and majority 33.5% BlackBerry. November 2010 marked the first month that Android beat the iPhone in total number of users. Our results looked slightly different, with iPhone and Android having the biggest pieces of the pie. In fact, iPhone beat out Android by about 4 percentage points — 34.3% iPhone and 30.4% Android. BlackBerry use within our community came in at dead last with 6.9% of users, a drastic contrast from the majority 33.5% of all smartphone subscribers. If you’re looking to work in this exciting battlefield, we have listings for both iOS and Android developers. Start-Ups Especially in New York City, technical positions are in high demand at start-ups. In our survey, the majority of the respondents, 28.2%, work at a start-up – classified by us as 1-25 employees. Of those working at a start-up, the projects and job roles varied from the overall average. Web Application Developer was still the most popular job role, but by an even larger margin. 50.6% of those in start-ups work as a Web Application Developer as compared to 40.3% on average. Web platform is still the leading development project, but also at a larger percentage for start-ups — 41.8% as compared to the average 33.3%."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/11/tag-favorites-and-tag-subscriptions/","date":"2011-01-10T23:00:00.000Z","tags":["Community"],"title":"Tag Favorites and Tag Subscriptions","text":"There is now a small, informative tooltip that appears when you hover your mouse on a tag. The primary goal is to make it easier to follow a particular tag: Click subscribe to receive a daily email summary of new questions in this tag. Click again to unsubscribe. Of course, every email we send will also offer a link to unsubscribe at any time. Click star to favorite the tag. This is what we used to refer as an “interesting” tag, but the concept is otherwise identical. Click again to unfavorite the tag. Click rss to discover the standard feed for the tag, which is compatible with Google Reader or any other feed reader you’d like to use. The subscription functions are handled by our most excellent network hub at stackexchange.com, where you can also follow tag sets across multiple Stack Exchange websites. The tag tooltip also contains the wiki page for the tag. If you’ve ever wondered “what the heck does this tag mean?”, hovering your mouse over the tag will reveal more about it. The links at the bottom also invite you to explore the tag: Click faq to see the most referenced and linked posts within that tag. If you want a question to appear in the faq for a tag, link to it from other questions! Click info to see (and potentially edit) the complete wiki entry for this tag, beyond what the excerpt summary offers. And if the tag doesn’t have a wiki summary, help us build one if you are so inclined! Click top users to see the users with the most upvotes and reputation generated within this tag. If you’re looking for experts on a particular tag topic, they’re right here. It’s our hope that this new, expanded tag tooltip makes individual tags easier to follow, understand, and ultimately discover. As always, give it a shot and let us know what you think."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/08/how-to-say-thanks-in-an-answer/","date":"2011-01-07T23:00:00.000Z","tags":["Community"],"title":"How to Say Thanks in an Answer","text":"After successfully implementing assistance for new askers, we’d like to do the same thing for new answerers. So we’ve been analyzing characteristics of answers by new users to determine what makes an answer fundamentally good or bad. One strong predictor of a poor quality answer may surprise you: the presence of the words thank or thanks in a short answer. That’s right, the humble, innocent desire to thank your fellow man (or woman) for some question or answer they have contributed was sadly choking our system in thousands upon thousands of florid thank you “answers”. While there’s nothing at all wrong with the sentiment, we have a firmly established convention already in place for thanking our fellow users: vote up their post or comment! Every upvote is an implicit “thank you”. But, to be fair, it takes a registered account and a minimum of 15 reputation before you earn the right to upvote anything. So legions of thankful drive-by anonymous users were exploiting the only avenue available to them: leaving Yet Another Thanks Answer. There is a far better way to thank your peers for helping you, even for totally anonymous users. If you found an amazing answer on a Stack Exchange site and want to thank us — do it by pitching in and helping to answer someone else’s question! That’s exactly the model of peers helping peers that we founded the network on: pay it forward. It’s polite to say thanks. But paying it forward and contributing to the community in kind is a more constructive form of thanks. We’ll never change the world, but it sure is nice to be able to improve our little corner of it, even just a little — and that requires us all to contribute more than a mere “thank you”. Based on our experience with “thanks” answers, we knew that very short answers were kind of suspect. It’s something I originally heard from Paul Graham: Long but mistaken arguments [on Hacker News] are actually quite rare. There is a strong correlation between comment quality and length; if you wanted to compare the quality of comments on community sites, average length would be a good predictor. Probably the cause is human nature rather than anything specific to comment threads. Probably it’s simply that stupidity more often takes the form of having few ideas than wrong ones. Whatever the cause, stupid comments tend to be short. And since it’s hard to write a short comment that’s distinguished for the amount of information it conveys, people try to distinguish them instead by being funny. The initial minimum post size I chose way back when was 15 characters. When we sorted answers by length, we were horrified to find that a huge proportion of these extremely short answers were absolutely terrible. After kicking myself, I immediately doubled the minimum post size. Yes, it is possible to have a correct and useful answer in 30 characters, or even 15 characters, but I assure you: this is exceedingly rare. We now have some basic heuristics in place to check for the short answer, and the short “thank you” answer. If the answer is by a new user and matches enough of the heuristics, we provide automatic guidance — as originally suggested on meta by Kop — in the form of a How to Answer page . Beyond that, we’re also experimenting with a set of review pages that focus on contributions by new users. It’s incredibly important to vet and review contributions by new users, as that’s your first and best opportunity to educate. It’s also how you’ll find and reward your most talented newcomers."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/05/the-wikipedia-of-long-tail-programming-questions/","date":"2011-01-04T23:00:00.000Z","tags":["Community"],"title":"The Wikipedia of Long Tail Programming Questions","text":"Have you ever noticed how certain questions come up again and again on Stack Overflow sites? Oh look, my PC is freezing. Should I use SELECT *? Oh, and, how can I host a server from home? Really, people, do you want to be answering these same questions ten years from now? How about when you’re 65? That doesn’t sound so appealing now, does it? We predicted this problem, even before we launched Stack Overflow. Why? Because the same thing happened on Usenet, where: Most users could only see a few days or, at best, one month of archives for any given newsgroup. It was literally impossible to search the archives. I know that’s hard to imagine for you youngun’s, but this was before the web was even invented(!), and every Usenet site had to store their own copy of every newsgroup they were interested in reading, so there just wasn’t enough room for archives. As a result, newbies would frequently ask the same beginner questions. Ye Olde Timers got Ye Olde Tired of this. What happened next depended on the newsgroup. If the old timers were feeling generous, someone would write a FAQ, and re-post it every week or two. This was supposed to prevent simple questions getting asked again and again. These FAQs evolved into one of the early, great reference sources on the Internet before the WWW was invented. Otherwise, the basic questions would just get asked again and again, and the old timers would grow bored and leave. The quality of the newsgroup would then deteriorate to approximately the level you would expect if seventh-graders were left to themselves, in other words, Lord of the Flies. Stack Overflow does have a memory, and it has numerous mechanisms to prevent duplicates from getting through. We try to detect them even before the duplicate question has been asked. We have ways to close questions that are exact duplicates, we have ways of merging two questions that are identical if both questions already have quality answers, and we have extensive editing capabilities. The editing capabilities are sometimes overlooked. With 100 reputation points, you can edit any post that has been marked as “community wiki.” With 2000 reputation points, you can edit anything. The editing feature is there so that old question/answer pairs can get better and better. For every person who asks a question and gets an answer on Stack Overflow, hundreds or thousands of people will come read that conversation later. Even if the original asker got a decent answer and moved on, the question lives on and may continue to be useful for decades. This is fundamentally different from Usenet or any of the web-based forums. It means that Stack Overflow is not just a historical record of questions and answers. It’s a lot more than that: it’s actually a community-edited wiki of narrow, “long-tail” questions — questions that aren’t quite important enough to deserve a page on Wikipedia, but which come up over and over again. When you see a question that seems like it might reflect a common problem, don’t just answer it to get a few points. That doesn’t make the Internet any better. Instead, help us build up a library of canonical questions and answers that are more generic versions of the same question, and then start closing all the exact duplicates. Here are some guidelines: Don’t answer questions that have already been answered elsewhere. Yeah, you might earn a couple of points of reputation, but, because you are duplicating content, you are actually making the internet worse. Why? Because that answer might be true today, but as technology changes, it might not be true tomorrow. There are almost certainly thousands of wrong facts on Stack Overflow already, which may have been true when they were written but are no longer true. These facts will pollute the Internet for years. This problem is not tractable if we allow Stack Overflow to become just an endless river of questions and answers. It has to be more like a Wikipedia of Questions and Answers, with canonical answers that can be edited in one place, if we are ever going to stand a chance of keeping all the information that we expose to the Internet at least reasonably correct. If you’re going to close a user’s question as a duplicate, it has to be a real duplicate. For example, if a user asks, “What does the IP address 128.0.1.1/24 mean?” it’s OK to close that as a duplicate of a more general question like “What do IP addresses of the form a.b.c.d/e mean?” But it’s not OK to close it as a duplicate of a twenty-seven page guide to netmasks. That’s the moral equivalent of saying “RTFM.” Stack Overflow is not meant to be a library of reference manuals. It’s supposed to contain the same information as a library of reference manuals, in the form of millions of questions and answers. Combined with Google, that gives us the magical power of a library of reference manuals you never have to read! It’s like, you got to the library, and there’s a wizard there at the door, and you ask your question, and, instead of being told to read a book, you just got (are you sitting down?) the actual answer! That’s why we actually don’t mind having several versions of every question, where there are variations in wording or circumstances. The more chance that someone types a question into Google and finds their exact question already answered, the better a job we’ve done. It is OK to edit a question to make it more general. With the power of editing comes the power to take someone’s selfish, very specific question, and edit it a little bit until they’re asking the more general question that hundreds of people encounter. For example, if someone asks, “I set up a web server at home but I can’t access it from work,” it’s OK to rewrite the question as, “What things should I check when a web server running at home is not visible on the Internet?” In fact, sometimes selfish, stupid questions of the “do my homework” variety can be easily edited into a form where the answer will provide an extremely valuable resource for the internet at large. Help us build a great library of canonical answers. If you keep seeing the same form of questions, whether it’s mod_rewrite rules on Server Fault, freezing computers on Super User, or how to use regular expressions to parse HTML, write a great, canonical answer, once and for all. Make it community wiki so that as many other people as possible can make it great. Work really hard on writing something that is clear, concise, and understandable by as wide an audience as possible."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/04/welcome-valued-associate-nick-craver/","date":"2011-01-03T23:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Nick Craver","text":"I’m pleased to announce that we’re kicking off 2011 with some new blood on the team, starting with Nick Craver. Nick will be working remotely for us from North Carolina. Nick is an old friend of Jarrod Dixon, so he comes highly recommended. Jarrod always told me how great Nick was, and although I implicitly trust Jarrod’s opinion, I sort of waved him off with a yeah, yeah. But then this happened: When you top the Stack Overflow reputation leagues for 2010, rest assured you now have my full and unfettered attention. Apparently Nick’s membership to Stack Overflow predates even Jon Skeet’s, but he didn’t get serious about participation until he dropped his World of Warcraft habit. Sounds like a good idea to me — why not spend your time on a MMORPG that teaches skills that make you better at your profession? Every day, my guild leader faced a decision: play WoW, or work toward becoming a paramedic. If she played WoW, she’d have fun, and advance a character or improve the guild in some small but measurable way. If she worked toward becoming a paramedic, her progress would be much less visible. It’s easy to say that on any given day, the decision doesn’t really matter. But every day spent on WoW drove her in circles, and every day spent studying paramedicine would have brought her one day closer to her goal. And days add up, like it or not. We cannot stop them from doing so. What we can do is decide what they add up to. I didn’t want to look around one day and discover I’d turned into my guild leader, dreams on the horizon but unachieved because my days added up to nothing. The idea frightened and depressed me. So I quit. I quit hard enough that the way the game had pulled me in the last time wasn’t an option anymore. And instead of spending an hour every day doing my daily quests in-game, I spent an hour every day doing “daily quests” in real life – I started working out. I started leveling my actual skills and stats. — Doing My Dailies: Why I Quit WoW And Started Working Out This strategy certainly worked for Nick. I have to say, as MMORPGs go, he has totally crushed this one. Welcome to the team, Nick, and we all look forward to the additional awesome you’ll be adding to the project!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2011/01/04/welcome-valued-associate-rebecca-chernoff/","date":"2011-01-03T23:00:00.000Z","tags":["Background"],"title":"Welcome Valued Associate Rebecca Chernoff","text":"I’m pleased to announce that we’re kicking off 2011 with even more new blood on the team, including Rebecca Chernoff. Rebecca will be working remotely for us from Missouri, in a hybrid role of technical evangelist and community coordinator. If you’ve spent any time at all on our network — and in particular on our (excellent, amazing, best-in-class, choose your superlatives, they all apply) web chat system — you’ve probably run into Rebecca and her unusual backwards smileys at some point. In addition to being one of our very first pro-tem moderators for Webapps, she is apparently everywhere! In fact, when we took informal polls of who from the community we should hire as another community coordinator, she was almost universally at the top of everyone’s list, including our own list. Yes, she is that cool. In addition to writing a whole bunch of useful userscripts for Stack Exchange sites and chat, Rebecca also worked extensively with the Stack Exchange API to build StackFlair. Rebecca’s role is somewhat unique within the company, in that she will work with Robert Cartaino as a supporting Community Coordinator, and also with the core team in a Technical Evangelist role. That is, she will assist in supporting our API and making sure the overall experience on our sites — whether through the API or as an end user — is as polished and smooth as possible. Since we have 35+ sites now, and 130+ community moderators, we can sure use the help. Welcome to the team, Rebecca! (:"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/12/25/stack-overflow-gives-back-2010/","date":"2010-12-24T23:00:00.000Z","tags":["Background"],"title":"Stack Overflow Gives Back 2010","text":"In 2009, Stack Overflow LLC had three employees, and three primary sites — Stack Overflow, Server Fault, and Super User. Plus our careers site at careers.stackoverflow.com In 2010, we incorporated as Stack Overflow Internet Services with venture capital funding. We also grew to twenty-four employees, and 38 primary sites (of which, to be fair, 19 are currently beta). We also created our fantastic network hub at stackexchange.com and the democratic, community driven site creation process at Area 51. My, how time flies when you’re having fun! But the community is far bigger than us. Our fellow community moderators generously contribute their time, passion, and leadership to make their sites worth visiting and participating in. We now have over a hundred and thirty community moderators across 38 sites. Can you believe it? As a small gesture of thanks, we offered to make a $100 donation to charity on behalf of each community moderator. I’m happy to report that through the generosity of our community moderators, the following donations were made this holiday season: Unicef — $3,200 Doctors Without Borders — $4,400 Wikimedia Foundation — $2,600 Amnesty International — $2,800 Our community moderators give their own time to cultivate sharing knowledge within their expert communities — they make it possible for everyone to learn together. A worthy cause, and this $13,000 donation is provided in that very same spirit. I also wanted to give back to the tools, people, and projects that inspired us and helped us build our own network of websites. To that end, the following donations were made: W3C Consortium — $1,000 WordPress Foundation — $1,000 WikiMedia Foundation — $1,000 Canonical — $1,000 Linux Foundation — $1,000 Internet Archive — $1,000 Creative Commons — $1,000 DotNetOpenAuth — $500 OpenID Foundation — $1,000 OpenSTV — $1,000 Nagios — $1,000 Electronic Frontier Foundation — $1,000 We believe our mission as a company is to make the internet better, and we’re proud to support our fellow internet citizens who walk alongside us toward this goal. Of course, none of our sites could exist without you — the people who contributed to any Stack Exchange network site in the spirit of peers helping each other. We hope you learned something while you were there, or even better, taught us something we didn’t yet know. I have no idea what’s going to happen in 2011, but I look forward to the journey with all of you."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/12/23/no-artificial-intelligence-in-area-51/","date":"2010-12-22T23:00:00.000Z","tags":["Area51"],"title":"No Artificial Intelligence in Area 51","text":"On Monday afternoon, we unceremoniously closed down a Stack Exchange site: Artificial Intelligence. Not that many would have noticed. It had an laggardly 83 questions in its 12 days of existence. It wasn’t so much the lack of questions that was of concern — a site can stay in beta as long as it takes — but the conspicuous lack of _expert-level _questions. This was also the emerging opinion amongst the users: I committed to this proposal some time ago, hoping that this might become a site for researchers or knowledgeable academics asking serious technical questions about artificial intelligence here. It seems I was dearly mistaken … Most of the questions are those asked by the merely curious. 70-80% of the questions didn’t run much deeper than “When will we have intelligent computers?” and “What is your favorite AI blog?” I can understand the curiosity. As a computer enthusiast, I am somewhat intrigued by artificial intelligence. But I couldn’t even begin to ask a question suitable for a knowledgeable researcher. I’d be one of the merely curious… as were most users on the site. AI’s problems began almost immediately when users started asking the first questions: It has long been established that no question is too entry-level nor too basic. Everyone is welcome. But, in these earliest days, we are DESIGNING a site for experts. To attract experts, you need a site where people are asking very interesting and challenging questions, not the basic questions found on every other Q&A site. Remember, the pro sites WILL attract the enthusiasts, but not the other way around! The earliest questions on a site will set the tone and topic of the site for a long time. The AI site conspicuously lacked that “tone and topic” from day one, so it had nowhere to go and was closed down. Lessons for Area 51 The purpose of Area 51 is to prove that a site has critical mass before it launches. That didn’t work here. The followers and committers accumulated very slowly over six months, so there was a low response rate from the committers to join the private beta. We may need to consider something like aging commit votes so older proposals don’t simply accrete votes over a long period of time. We need to establish that a proposal has sufficient momentum (an escape velocity) before it creates a site. It is difficult to say if many experts were part of the AI proposal; I don’t think we ever had them. But Area 51 has no way to measure if the private beta will include a sufficient number of qualified practitioners, so we need to make adjustments. Here are some changes we adopted from this experience: A site can stay in private beta. Typically, a site is ready to launch after their prerequisite seven days in private beta. But if the early site hasn’t worked out the kinks of its definition or audience, we can work with the community before launching a half-cocked site to the public. If the problems are impossible to reconcile, the site can always be closed to try again. As we improve the process of Area 51, this should be exceedingly rare, but AI has become the new baseline for “failed to make it out of private beta.” Establish a site’s expertise early. New users, anxious to jump start their communities, inevitably start asking uninspired questions that have all been asked 100 times before on every phpBB forum. You’ve seen them: “What is your favorite…”, “What is the best…”, “What is the definition of…” Unfortunately, these idle questions can fill the front page in the opening days, and left unchecked will permanently color the tone of the site. Your front page is your billboard, it defines your target audience. Watch for and discourage pedestrian questions early in the beta. Certainly, questions of all levels are welcome… but not in the earliest, most formative days of the site. These questions may someday become wildly popular, so politely — very politely — invite those users to ask their questions again after the expertise of the site has been established. Top blogs, best books, buying recommendations: those are not the hallmarks of expertise. They’re the seeds of the merely curious. A site filled with these sorts of idle, pedestrian questions will never attract the core of experts it needs to survive."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/12/21/stack-overflow-annual-survey/","date":"2010-12-20T23:00:00.000Z","tags":["Company"],"title":"Stack Overflow Annual Survey","text":"As you’ve seen from the site analytics, Stack Overflow grew significantly in 2010. We noticed some major technical shifts – more global visitors and an increase in use of Chrome as a web browser. But, our visitors are more than just their web browser, operating system and screen resolutions, they are real people with real careers – valuable knowledge which isn’t measured by Google. Some people may ask why we need to do a survey at all – so, taking poetic license on the 5 Whys, here’s how we got to the root answer: We need a Stack Overflow Annual User Survey. Why? – To measure our user’s demographics Why? – Potential advertisers judge our site by demographics to see if we fit in with their goals Why? – You’ll see more relevant ads increasing the value of our advertising Why? – With more valued advertisers, we can spend more time developing awesome new features Why? – New features create a better user experience, supporting Stack Overflow’s mission to make the internet a better place than we found it. The results of the survey will be released in a blog post at a future date. You can also receive the final results sooner– simply provide your email at the end of the survey. Your responses are kept completely anonymous and tabulated by SurveyMonkey. Take the survey today!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/12/20/subscribe-to-tags-via-emai/","date":"2010-12-19T23:00:00.000Z","tags":["Community"],"title":"Subscribe to Tags via Email","text":"You can now subscribe to a tag (or set of tags) and get an email when new questions arrive. To begin, visit the Tag Sets page on stackexchange.com [ed note: You can no longer select tags across sites], and either create a new tag set, or find a cool tag set someone else already put together. Click on a tag set to browse the questions, then look on the sidebar for the email option: Once you click subscribe, you can indicate which email address you want to use, and how often you want questions to be emailed to you — every 15 minutes, every 3 hours, or every day. Once you click subscribe, you’ll automatically get emailed when new questions with those tags appear on any of our sites. We already supported emailing new answers to questions you own, but we’ve intentionally avoided a lot of email notifications because, well, I hate email. That said, I do think interacting with our sites through email can make sense in some circumstances: When you’re active in tags that are not getting a lot of regular activity, so there is never a steady stream of questions. Even if you visited the site all the time, you never know when the occasional new question will appear. When you’re following one tag across multiple Stack Exchange sites, it can be simpler to have all the questions rolled up in an email summary rather than visiting many sites individually. When you are an expert in a niche topic, but you don’t want to spend a lot of time browsing around related disciplines. You want to be notified when anything is going on in your specific area of interest, only. Fundamentally it’s the classic divide between push (we notify you when there are new questions, at the risk of bugging you) and pull (you visit the site whenever you like and see for yourself if there are new questions, at the risk of missing some things). Of course, we still support RSS everywhere, as we always have. We’re thinking of adding a simple one click “subscribe” option on the websites proper to make it easier to subscribe to a tag or set of tags. But until then, we’d like to gather data on what types of tag sets are getting actively used. So, as ever, visit the Tag Sets page, try it out, and let us know what you think!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/12/17/introducing-programmers-stackexchange-com/","date":"2010-12-16T23:00:00.000Z","tags":["Community"],"title":"Introducing programmers.stackexchange.com","text":"One of the more popular Stack Exchange beta sites just came out of beta with a final public design: programmers.stackexchange.com Now watch closely as I read your mind. I don’t get it! What’s the difference between Programmers and Stack Overflow? I’m so glad you asked! In a nutshell, Stack Overflow is for when you’re front of your compiler or editor working through code issues. Programmers is for when you’re in front of a whiteboard working through higher level conceptual programming issues. Hence the (awesome) whiteboard inspired design! Stated another way, Stack Overflow questions almost all have actual source code in the questions or answers. It’s much rarer (though certainly OK) for a Programmers question to contain source code. Remember, these are just guidelines, not hard and fast arbitrary rules; refer to the first few paragraphs of the FAQ if you want specifics about what Programmers is for: Programmers – Stack Exchange is for expert programmers who are interested in subjective discussions on software development. This can include topics such as: Software engineering Developer testing Algorithm and data structure concepts Design patterns Architecture Development methodologies Quality assurance Software law Freelancing and business concerns Editorial note: the FAQ guidance has changed significantly over the years to better reflect the sorts of conceptual questions that actually work – please refer to the latest version in the help center before asking. Although I fully supported this site when it was just a baby Area 51 site proposal, we’ve endured a lot of angst over it — mainly because it veered so heavily into the realm of the subjective. It forced us to think deeply about what makes a useful subjective question, which we formalized into a set of 6 guidelines in Good Subjective, Bad Subjective. Constructive subjective questions … inspire answers that explain “why” and “how”. tend to have long, not short, answers. have a constructive, fair, and impartial tone. invite sharing experiences over opinions. insist that opinion be backed up with facts and references. are more than just mindless social fun. Ultimately, with a little extra discipline and moderation, I think the site turned out great. So, go forth and ask your high level, conceptual, software development questions on programmers.stackexchange.com! Just make sure they’re professional and constructive, please – refer to help center for more guidance there. Looking to take your whiteboard work to the next step? Check out the new job listings as lead developer, QA tester and more on Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/12/15/stack-overflow-2010-analytics/","date":"2010-12-14T23:00:00.000Z","tags":["Background"],"title":"Stack Overflow 2010 Analytics","text":"As we approach the end of the year, I thought I’d roll up some statistics that people occasionally ask about. As a baseline — per Quantcast, the Stack Exchange Network is ranked #364 in overall USA network traffic, and Stack Overflow itself is ranked #598. These numbers are from Google Analytics for the period of January 1, 2010 to December 14, 2010. Where in the world do Stack Overflow users come from? United States 30.5% India 8.6% United Kingdom 7.2% Germany 4.7% Canada 4.1% France 2.7% Australia 2.7% Netherlands 2.0% Italy 1.9% Brazil 1.7% Compared to last year’s numbers, the trend here is basic globalization 101 — more and more traffic from outside the USA over time, where the US dropped from 36% to just 30% of the total in a single year. The top 10 countries only account for 66% of traffic overall, down from 71% last year. How do Stack Overflow users find the site? Google (organic) 87% Direct 6.0% Bing 0.9% Google (referral) 0.9% Reddit 0.6% No, Google isn’t a monopoly, they just play one on the internet. Just kidding! please don’t hurt me mister googles What web browsers do Stack Overflow users use? Firefox 44.1% Internet Explorer 22.7% Chrome 22.6% Safari 7.4% Opera 2.4% Mozilla 0.5% Note that within Internet Explorer, the breakdown is 60% IE8, 26% IE7, and 13.5% IE6. The Firefox breakdown is primarily 3.5 and 3.6, with a smattering of older versions. Chrome is … all over the map, probably because by the time you read this, they’ve incremented the version again. The big news here relative to last year is the huge jump for Chrome, mostly coming at the expense of IE and Firefox. What operating systems do Stack Overflow users use? Windows 74.7% Mac 14.7% Linux 9.5% iPhone 0.4% We didn’t report these stats for last year, but I doubt they are terribly surprising to anyone. What screen resolutions do Stack Overflow users have? 1280 x 1024 18.6% 1280 x 800 14.0% 1680 x 1050 13.5% 1440 x 900 11.4% 1024 x 768 8.2% 1920 x 1200 8.1% 1366 x 768 4.3% 1600 x 1200 2.3% 1600 x 900 1.6% 1152 x 864 1.1% This is very good news compared to last year! What I mainly look at here is the horizontal width. We design for a fixed minimum width of 1024 px and that stat declined from 12% to 8% over the last year. So there you have it — a profile of the average 2010 Stack Overflow user, at least for these metrics! I think this covers most of the questions I see asked on meta about our analytics, but if there are any other metrics you think might be useful to share, make a case for them in the comments."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/12/13/re-launching-stack-exchange-data-explorer/","date":"2010-12-12T23:00:00.000Z","tags":["CC Wiki Dump"],"title":"Re-Launching Stack Exchange Data Explorer","text":"Since we launched the Stack Exchange Data Explorer in June, we’ve been actively maintaining it and making small improvements to it. But there is one big change — as of today, the site has permanently moved from odata.stackexchange.com to data.stackexchange.com If you’re wondering what the heck this thing is, do read the introductory blog post, but in summary: Stack Exchange Data Explorer is a web tool for sharing, querying, and analyzing the Creative Commons data from every website in the Stack Exchange network. It’s also useful as for learning SQL and sharing SQL queries as a ‘reference database’. We are redirecting all old links to the new path, so everything should work as before. Why did we make this change? Mostly because we decided to move off the Windows Azure platform. While Microsoft generously offered us free Azure hosting in exchange for odata support and a small “runs on Azure” logo in the footer, it ultimately did not offer the level of control that we needed. I’ll let Sam Saffron, the principal developer of SEDE, explain: Teething issues When we first started working with Azure, tooling was very rough. Tooling for Visual Studio and .NET 4.0 support only appeared a month after we started development. Remote access to Azure instances was only granted a few weeks ago together with the ability to run non-user processes. There are still plenty of teething issues left, for example: on the SQL Azure side we can’t run cross database queries, add full-text indexes or backup our dbs using the BACKUP command. I am sure these will eventually be worked out. There’s also the 30 minute deploy cycle. Found a typo on the website? Correcting it is going to take 30 minutes, minimum. Due to many of these teething issues, debugging problems with our Azure instances quickly became a nightmare. I spent days trying to work out why we were having uptime issues, which since have been mostly sorted. It is important to note that these issues are by no means specific to Azure; similar teething issues affect other Platform-As-A-Service providers such as Google App Engine and Heroku. When you are using a PAAS you are giving up a lot of control to the service provider. The service provider chooses which applications you can run and imposes a series of restrictions. The life cycle of a data dump Whenever there is a new data dump, I would log on to my Rackspace instance, download the data dump, decompress it, rename a bunch of folders, run my database importer, and wait an hour for it to load. If there were any new sites, I would open up a SQL window and hack that into the DB. This process was time consuming and fairly tricky to automate. It could be automated, but it would require lots of work from our side. Now that we migrated to servers we control, the process is almost simple — all we do is select a bunch of data from export views (containing public data) and insert them into a fresh DB. We are not stuck coordinating work between 4 machines across 3 different geographical locations. Did I mention we are control freaks? At Stack Overflow we take pride in our servers. We spend weeks tweaking our hardware and software to ensure we get the best performance and in turn you, the end user, get the most awesome experience. It was disorienting moving to a platform where we had no idea what kind of hardware was running our app. Giving up control of basic tools and processes we use to tune our environment was extremely painful. We thank Microsoft for letting us try out Azure; based on our experience, we’ve given them a bunch of hopefully constructive feedback. In the long run, we think a self-hosted solution will be much simpler for us to maintain, tune and automate. There’s also few other bits (nibbles?) of data news: We won’t be producing a data dump for the month of December 2010, but you can definitely expect one just after the new year. We apologize for the delay. SEDE will continue to be updated monthly as a matter of policy to keep it in sync with the monthly data dumps. Remember, SEDE is fully open source, so if you want to help us hack on it, please do! code.google.com/p/stack-exchange-data-explorer And as usual, if you have any bugs or feedback for us, leave it in in the [data-explorer] tag on meta, too. And we have opportunities to share for the big data lovers over on Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/12/09/talkative-and-precognitive-badges/","date":"2010-12-08T23:00:00.000Z","tags":["Area51"],"title":"Talkative and Precognitive Badges","text":"Our core functionality, as always, is Q&A; — asking great questions and providing great answers. You could certainly go months or years without ever needing to visit anything beyond the main site. But that’d be a shame. Chat – Our Third Place Did you know that real time web chat is a standard “out of the box” feature on every Q&A; site we launch? Not just any old generic web chat, either — we built our third place from scratch to be a best-of-breed next generation chat system. We now have what is, in my not so humble opinion, the best web chat software I’ve ever seen or used. Really! You should check it out. To visit chat, simply click on the chat link in the header: Or, on some sites, we have a live preview of two chat rooms in the sidebar; click through to visit and start chatting. But it doesn’t matter what I think. Everyone should check chat out for themselves and decide if it’s worthy or not. That’s why we introduced the Talkative badge. Posted 10 messages, with 1 or more starred, in chat To earn this badge, you’ll need to post 10 chat messages in a room — and one of them must be starred by another fellow chat user user. Go be interesting! Area 51 – Our New Site Creation Zone Did you know that the reputation you earn on a Stack Exchange site is good for more than additional privileges on the site? That’s right. The more reputation you have in our network, the more weight you also carry on Area 51 — our new Q&A; site creation zone. The democratic, open community process defined at Area 51 is the only way to create new sites on our engine — just like it says in the FAQ. The success of this community process depends, as they all do, on participation. We’ve also found that our Q&A; sites work best when they are led by experienced users with reputation in one or more existing Stack Exchange sites. That’s why commitments by experienced users are weighted so heavily on Area 51, and why we introduced the Precognitive badge. Followed the Area 51 proposal for this site before it entered the commitment phase This badge, like Area 51 itself, is all about the future. To achieve this badge, you’ll have to follow an early Area 51 site proposal that eventually succeeds and go to beta — hopefully with your active assistance. In other words, the only way to earn the Precognitive badge on a site is … before the site even exists! Spooky, right? Enjoy these new badges — as always, we welcome feedback on chat and feedback on Area 51, but you’ll need to find them first!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/12/07/stack-overflow-rhok-partners-in-hacker-goodness/","date":"2010-12-06T23:00:00.000Z","tags":["Community"],"title":"Stack Overflow + RHoK = Partners in Hacker Goodness","text":"We were approached by the nice people at Random Hacks of Kindness (RHoK) to help them promote their worldwide event last weekend (December 3-5). Since our audience on Stack Overflow and Server Fault seemed like a good fit with their inspiring mission, we agreed to toss some banner ad impressions their way. If you’re not familiar with RHoK, an RHoK event brings together the best and the brightest hackers from around the world, who volunteer their time to solve real-world problems presented by risk managers. RHoK’s founding partners include Google, Microsoft, Yahoo!, NASA and The World Bank. Prior Hack-a-Thons have developed numerous crisis management and prevention tools like 311-to-911, I am OK, and Carrot, among others. By donating some of our house inventory (retailing at $7,000ish), we were able to promote RHoK’s event for 4 days, resulting in 1,402,258 banner impressions and 4,075 visitors to their website. We’re thrilled with the results of this short campaign and hope to work with RHoK on future events. Did you take part in RHoK #2? If so, what did you think? Would you consider attending a future event? Let us know!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/12/02/stack-exchange-moderator-elections-begin/","date":"2010-12-01T23:00:00.000Z","tags":["Community"],"title":"Stack Exchange Moderator Elections Begin","text":"Back in July, we appointed Moderators Pro Tempore for the nascent Stack Exchange 2.0 communities. Leadership is critical to any community’s success, and the bootstrapping of a community often requires those leaders to be appointed before the community is large enough or organized enough to elect them itself. Our fellow moderators Pro Tempore have been instrumental in keeping their communities tidy and on track through the public beta and beyond. Now that the earliest Stack Exchange 2.0 sites have been fully public for over 60 days, we believe at least some of the communities are ready to take the last important step towards self governance — by electing their own moderators. As we’ve said from the very first days of the Stack Overflow beta: We don’t run Stack Overflow. You do. Every site under our banner has the same philosophy. The community is the source of everything useful that happens to exist on our websites. We gladly reciprocate by trusting you to lead and govern your own community. Democratically elected community moderators are the ultimate goal of, and foundation for, every site in our network. While we’ve had multiple moderator appointments and elections on the trilogy — culminating in our most recent 2010 Stack Overflow moderator election — they have been much more ad-hoc than I would have liked. This time, we’ve put all our prior experience into making moderator elections a first class function built into every site we operate. While it’s still subject to a bit of change, we’ve started our first community moderator election on mathematics. There are three phases in each election, all available from the same page: Nominations — seven days In the nomination phase, any community member in good standing with at least 300 reputation may nominate themselves — and only themselves — as a candidate in the moderator election. Nominations require writing a brief introduction explaining to the greater community why the candidate would make a good community moderator. Comments are encouraged in this phase, along with plenty of editing to make the introduction better, but there is no voting. The top 30 nominees (ordered by reputation) proceed to the primary phase unless they opt to withdraw. Note: If there are 10 or less candidates at the end of this phase, we skip directly to Election. Primary — four days In the primary phase, all community members with at least 150 reputation can cast an up or down vote on each candidate, resulting in a public tally. No comments are allowed in the primary; any opinions on the suitability of each candidate should be expressed as a simple up or down primary vote. The top 10 candidates by score will proceed on to the election phase, unless they opt to withdraw. Election — four days Once the election begins, there will be per-user site notifications to all eligible voters. In the election phase, all community members with at least 150 reputation can cast three votes: 1st choice, 2nd choice, and 3rd choice. All votes are private until the election is complete, at which point the election data file (the vote totals for all the candidates; no identification of who voted for whom) will be freely and permanently downloadable by anyone. We will calculate the winners using OpenSTV and the Meek STV method. In a little over two weeks, the election process should hopefully produce three new democratically elected community moderators! We’re going to run through the full process on math first, as they have an urgent need for community moderators, and also so we can see how this new election format works and refine it before going full steam ahead. Democracy is a highly imperfect process. But it is a participatory imperfect process. Please participate in the math community moderator election — even if only as an observer — and give us feedback on how we can improve the moderator election process to better serve your community."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/11/29/the-pee-wee-herman-rule/","date":"2010-11-28T23:00:00.000Z","tags":["Community"],"title":"The Pee-Wee Herman Rule","text":"I recently had a long discussion on gaming meta regarding “Help me remember this game” questions. I’ll spare you all the gory details; my general conclusion was this: If we get an excellent user who asks a good, thoughtful [game] identification question and sticks around in our community to participate, then it’s worth allowing it in those rare cases as a high quality “getting to know you” fun question. This reminded me of a conversation I once had on Server Fault Chat about mod rewrite questions. This is a true gray area in our network. It’s tricky, because any given URL rewriting question could legitimately be on topic for multiple sites, each with a different core audience: Server Fault (sysadmins) Stack Overflow (programmers) Webmasters I don’t think a black and white “all URL rewriting questions belong on {site}” ruling would be helpful in these gray areas. What matters most is the context of the question. You need to use your judgment to look at the bigger picture around the question: is this person a system administrator? a webmaster? a programmer? Even the ‘same’ URL rewriting question can have different solutions depending on which audience it’s being presented to. That’s why I recommend considering these gray area questions in the context of the user. Does this user belong here on this site with us? Or is it the guy in the nerdy suit who just walked into the biker bar? [Pee-Wee Herman walks into a noisy, rowdy, crowded biker bar. He puts a coin in the pay phone and begins dialing.] Pee-Wee: What? I’m sorry, operator. I can’t hear you. [turns to the bikers, yelling in exaggerated fashion] Shhh! I’m trying to use the phone! [The bikers all grow quiet and circle around Pee-Wee at the pay phone. The lead biker hangs up the phone.] Biker: Did anybody tell you that this is the private club of the Satan’s Helpers? Pee-Wee: Nobody hipped me to that, dude! Biker: It’s off-limits! Pee-Wee: Oh. Well, my mistake. Ha ha! Guess I’ll be on my way, then! Ha ha! [Pee-Wee tries to innocently exit, pushing his way gently outward against the tightly grouped circle of bikers surrounding him.] Pee-Wee: Excuse me! Excuse me. Ha ha! Excuse me! Excuse me. (There’s no way I can do this brilliant scene justice in text, so you should watch the clip on YouTube. This is of course from the timeless movie Pee-Wee’s Big Adventure.) Anyway, my point is this: when you have to make judgment calls about questions in the gray area of mildly off-topic — apply the Pee-Wee Herman Rule! If you have reason to believe, based on the context, quality, and content of the question, that this user could potentially be a positive contributor to your community — I’d be inclined to let their question stay. If you have reason to believe, based on the context, quality, and content of the question, that this user would not be a positive contributor to your community — I’d be inclined to close the question, or migrate it somewhere else where they’d fit in better. This is not meant to be an exclusionary rule. It’s more of a general measurement of how committed new users are to at least trying to fit in to the community they just walked in to. As Pee-Wee proved, being the nerdy guy in the biker bar can work — so long as you’re willing to dance the Tequila song with us."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/11/23/qa-is-hard-lets-go-shopping/","date":"2010-11-22T23:00:00.000Z","tags":["Community"],"title":"Q&A is Hard, Let’s Go Shopping!","text":"Over the last 2.5 years, we’ve identified a few problematic classes of questions that tend to get asked on our sites. Many of these are documented in our standard set of close reasons: exact duplicate, off-topic, subjective and argumentative, not a real question, and too localized. However, as we launched the great Super User experiment, a new, previously unknown class of problematic questions emerged — the shopping recommendation. That is, on Super User we began encountering questions like: Macbook Air vs. Macbook Pro? What’s the best dual-band wireless router? Dell GX280 Processor upgrade? What RAM should I buy? Nvidia or ATI video card? These questions may seem tolerable at first glance. Isn’t it our mandate to help our fellow ewoksusers? But consider the voluminous amount of information you need to even begin properly answering a shopping question: What is your budget? Where do you live? What are your preferences? Which alternatives will you consider? When do you want to buy? Let’s say the question asker provided all that information. Fat chance, I know, but let’s pretend for a moment they did — and we were able to provide the perfect, ideal shopping recommendation to them. Even if that was the case, technology moves so rapidly that the best shopping recommendations will be utterly obsolete within a year! What’s the point of a bunch of labor intensive questions that provide only temporary benefit to a limited (some might say Too Localized) audience? There isn’t any. That’s what we concluded, and we explicitly disallowed shopping questions in the Super User FAQ: Super User is for computer enthusiasts and power users. If you have a question about … computer hardware computer software and it is not about … videogames or consoles websites or web services like Facebook, Twitter, and WordPress electronic devices, media players, cell phones or smart phones, except insofar as they interface with your computer a shopping or buying recommendation … then you’re in the right place to ask your question! However, there is a way to ask these questions that avoids the inherent problems with shopping recommendations. For example, let’s say you wanted — as I did — to buy a point-and-shoot camera that takes good low light photos. So we’re going to ask on photo.stackexchange.com, naturally! Here’s one way to ask: Q: What’s the best low light point-and-shoot camera? A: Canon S90 and Lumix LX3. Here’s another way to ask: Q: How do I tell which point-and-shoot cameras take good low light photos? A: I strongly recommend looking for something with a fast lens (2.0 at least) reasonable ISO handling (at least 400, but preferably 800) the biggest sensor available The sum of these factors are really critical for low light situations. The former question provides the path of least resistance: a laundry list of products I can buy without thinking about it too much. But that answer will only be valid for a year at best. The latter question may take some thinking, but its answer will be valid forever … or at least until camera technology somehow shifts beyond lenses and sensors as we know them today. Thus, when it comes to shopping questions, don’t ask us what you should buy — ask us what you need to learn to tell what you should buy. If I had to summarize our network in a single word, that word is “learning”. People come to our sites to learn about topics they are passionate about. As the old Chinese proverb goes, “Give a man a fish and you feed him for a day. Teach a man to fish and you feed him for a lifetime.” Every question and answer ultimately should be about teaching and learning — yes, even the shopping ones."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/11/16/dr-strangedupe-or-how-i-learned-to-stop-worrying-and-love-duplication/","date":"2010-11-15T23:00:00.000Z","tags":["Community"],"title":"Dr. Strangedupe: Or, How I Learned to Stop Worrying & Love Duplication","text":"As Stack Overflow grows — or any other Q&A; site in the Stack Exchange network, really — there’s a natural pressure to discover and link duplicate questions. The more questions you have, the higher the possibility a given new question isn’t in fact a new question, but a duplicate of an older existing question. Because of this, we’ve continually enhanced the tools for finding, linking, and merging duplicate questions: Handling Duplicate Questions Linking Duplicate Questions Improved Question Merging One thing I want to be clear about, though, is that duplication is not necessarily bad. Quite the contrary — some duplication is desirable. There’s often benefit to having multiple subtle variants of a question around, as people tend to ask and search using completely different words, and the better our coverage, the better odds people can find the answer they’re looking for. And isn’t that, really, the whole point of this exercise? Furthermore, it’s OK for duplicate questions to have duplicate answers. While you could argue that the duplicate questions could all be merged into one question with a “master” set of answers, this is kind of irritating from the perspective of the user looking for an answer. Put yourself in their shoes. Instead of finding … Duplicate Question Duplicate Answer They have to deal with finding: Duplicate Question [closed as duplicate of Question] click here to see answers Now, what other site requires users to do some sort of weird scroll-down, click-here-first to see the answer nonsense on the search results before they will reveal the answer? Oh yes, our old hyphenated pals. Do we really want our site to work like theirs? Furthermore, I’ve found that the perfect duplicate question is a … bit of a mythical beast. There are similar questions, yes, and so-called “exact” duplicates do happen, but they are kind of rare in my experience. It’s far more common to have many subtle variations of a question. I think that’s OK, because that’s how the world works. Trying to shoehorn a bunch of semi-related things into one arbitrary container in service of some Highlander-ish “there can be only one” rule is ultimately harmful. Remember: while there are aspects of wiki to our system, we are not Wikipedia. There is not one canonical question about every possible subject. Rather, there are many. In other words, over time, I have learned to stop worrying and love (some) duplication. And you should too. Here are my official guidelines on question duplication: Having one “perfect” form of a question that contains every possible answer to every slight variation of that question is a myth at best and actively harmful at worst. Having dozens and dozens of variations of the same question is clearly bad. What we want is on the order of 4 or 5 similar-but-not-quite-the-same duplicates to cover all possible search terms and common permutations of the question. It is also OK for these duplicates to have their own answers so people who find them don’t have to click yet again to get to a good answer. Let me be clear — too much question duplication is bad. Absolutely. You’ll get no argument whatsoever from me on that. But not enough question duplication is also bad. I know this does not sit well with programmers who love to think in binary black and white and cannot abide a single atom of duplicated content in the entire omniverse. But the honest, realistic answer to how much question duplication there should be is … “enough”. Question duplicates aren’t necessarily our enemy. They’re more like our, y’know, frenemies. So, as always, use your good judgment and please continue to close and merge duplicates as you see fit. However, bear in mind that cultivating and supporting a moderate amount of natural duplication actively helps the community. I wasn’t kidding when I said learn to stop worrying and love (some) duplication. Use the above guidelines and try to find a happy, reasonable medium somewhere in the middle there."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/11/09/stack-overflow-homepage-changes/","date":"2010-11-08T23:00:00.000Z","tags":["Community"],"title":"Stack Overflow Homepage Changes","text":"As I mentioned in The Horror of No Answer: Revival and Necromancer: It’s fine — expected, even — for there to be a “long tail” of questions that are too obscure, too narrow, or just plain unanswerable for whatever reason. Sometimes you have to be patient; it takes the time it takes. But seeing the number of zero-answer questions grow by 50% over a 3 month period is definitely concerning. Part of this is our fault for not adapting the homepage to the massive amount of question activity that Stack Overflow now enjoys. We’re working on it, but it will take some time to figure out the right approach. The default question ordering on the home page is a simple, flat list of the most recent (n) questions sorted by activity date — where activity is defined as a new answer, an edit, or a new question. Sophisticated, it ain’t, but it has worked well for us up to a certain volume of activity. Stack Overflow is now well beyond that volume. I asked for help redesigning the Stack Overflow homepage on meta, and the consensus was to keep the same design (for now), but try to show more relevant questions to each user. We began playing with experimental question weighting algorithms to decide which questions to show to a particular user. Sam Saffron set up a clever little experimental home page where you can have a play with the algorithm client side and see what weightings produce the best fit for you. As of today, we’ve rolled this change out based on your feedback. On Stack Overflow (and only Stack Overflow) the default home page tab has changed from active to interesting. The goal is no longer to show you a simple flat list of the last (n) active questions — that’s not even possible any more based on sheer question volume — but, instead, to narrow the list to a subset of active questions that we think you will be interested in. Here’s how it works. Starting with a list of the last 3,000 active questions: drop questions containing any of your ignored tags drop closed questions if you lack the reputation required to vote for reopening drop questions scoring -4 or lower Next, apply the following score formula to the remaining questions: your interesting tags +1,500 per interesting tag, up to +2,000 total your top 40 scoring tags maximum of +1,000 per tag (scaled), up to +2,000 total question score +200 × score, up to +1,000 total total answer score -200 × score, up to -1,000 total number of answers -200 × answers, up to -1,000 total number of views -15 × views, up to -1,000 total question last activity date -1 × (seconds / 15) Count it all up and take the top 90 by score. We also mix in a few random questions from the last 3,000 — 10% (9) for logged in users and 20% (18) for anonymous users. We’re like DJs trying to spin a mix of songs — some you might know by heart and love, others you might not have chosen for yourself, but could possibly like if you gave them a fair listen. The resulting change in the homepage is fairly dramatic. Here’s a screenshot of the old Stack Overflow homepage (the active tab) compared to the new Stack Overflow homepage (the interesting tab): Quite the sea of red unanswered questions, which seems to meet our goal of giving questions which haven’t yet gotten a good answer, more time on the homepage to get one. You can compare yourself by viewing the old “active” tab at http://stackoverflow.com/?tab=active and comparing that to what you get shown — both as a logged-in user and as an anonymous user. I’ll be honest with you, this change makes me nervous. It’s like Colonel Sanders mucking around with his magical blend of 11 herbs and spices. But at the same time, the old simple “questions by activity date” homepage default was clearly not working with the 2,000+ questions being asked on Stack Overflow each and every day. Something had to change. Well, this is that change. Let us know what you think, and feel free to experiment with alternative weightings if you have ideas for ways to further improve upon it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/11/09/whats-a-cv-anyway/","date":"2010-11-08T23:00:00.000Z","tags":["Careers"],"title":"What’s a CV Anyway?","text":"When I first started working at Stack Overflow, I wondered why the candidate’s work experience is referred to as a CV on Stack Overflow Careers. I honestly thought Stack Overflow might be a European company or maybe they were just being snobs. A resume is your work experience written up on a piece of paper – job sites, employers, recruiters, and everyone else, it seems, uses “resume”. So, what gives with Stack Overflow Careers? Why CV and not resume? I learned pretty quickly that a CV encompasses your accomplishments in a more detailed format than a traditional resume. In fact, Curriculum Vitae roughly translates as “course of my life”. It’s true that CVs are used widely in academics and medical fields as a way to list accomplishments and credentials that go beyond a specific job role. A CV is updated anytime you have something meaningful to add – maybe it’s the sales from that software you designed or a new qualification or something else awesome that you did. Conversely, a resume is a document that you scrape together when you’re desperately looking for a new job. A CV is more than just about your job experience and chances are most developers don’t just program at work –they likely have a blog, a website, a side project and other professional passions too. Many developers create viable products while in college or high school. This is terrific experience to show on your CV, painting a more accurate picture of your programming expertise. While it would be easier for Stack Overflow Careers to use “resume” like everyone else, we think your programming experience is more valuable than a 1 page list of past jobs. Plus, really, we’re saving bytes by the bucket load. PS – If you are looking for something new for the next course in your life, you might want to explore these listings for junior devs, senior devs and keep in mind Stack Overflow is looking to hire more great developers!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/11/04/tag-sets-on-stack-exchange/","date":"2010-11-03T23:00:00.000Z","tags":["Community"],"title":"Tag Sets on Stack Exchange","text":"Over the last few months, we’ve been continually improving our central network hub at stackexchange.com: Launched with reputation leagues, network-wide hot questions, and a global site directory Added the ability to customize which Stack Exchange sites appear in your hot questions Added the ability to search all Stack Exchange sites After a two week public beta test, we’re adding yet another ability — tag sets. A tag set is exactly what it sounds like: all questions matching a set of tags across one or more sites in the Stack Exchange network. We got a lot of feedback that community members also wanted to view: questions with only the subset of tags they are interested in questions with the same tags across multiple Stack Exchange sites That’s what tag sets are for. You can freely browse tag sets other users have set up — they’re all public — but you’ll need to be logged in to create your own tag sets. This should be more or less automatic through global auth, but if it is not, click the login link at the top of the page. Click on the tagged questions navigation link, then select my tag sets to construct your own. Look in the sidebar on the right for a tag-centric autocomplete area. You can enter any tag (or wildcard tag, yep, it supports wildcards) that exists on any site in our network. And once you do, you can choose which site(s) you want to see it on. You can also create multiple tag sets and toggle between them. Just click name this tag set to give it a name. You can then quickly toggle between your tag sets to keep track of multiple topics. To start a new tag set just click New tag set. If you’ve ever wanted to narrow down your interests on a site to a few specific topics, or follow a topic across multiple Stack Exchange sites — now you can. Just set up your own tag set, or discover a tag set someone else has already set up!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/11/03/stack-exchange-at-ubuntu-developer-summit/","date":"2010-11-02T23:00:00.000Z","tags":["Company"],"title":"Stack Exchange at Ubuntu Developer Summit","text":"Last week, I was graciously invited to spend a few days at the Ubuntu Developer Summit held in Orlando, Florida. Twice a year, Canonical engineers, partners, and community members get together to discuss and plan the next release of their operating system. I was invited to talk about Ask Ubuntu to help in the planning of how the Ubuntu community can better integrate with the Stack Exchange site. We started with a video interview and gave a high-paced “Lightning Talk” about the Ask Ubuntu site. Honestly, I thought I would spend the week “selling” the merits of the Stack Exchange to a wary group of open source advocates. But surprisingly, the Ubuntu community was already well-informed and very enthusiastic about the Ask Ubuntu site. That’s high praise considering that the Canonical site has not officially announced nor linked to the Ubuntu Stack Exchange site. I was hoping to change that. After the information-pack sessions, the interviews, the meetings and lots of hallway discussions, The event organizers generously arranged for us to host our own session – a round table discussion to examine the needs of Ubuntu community with regard to Ask Ubuntu. We met with the key project teams to discuss how to integrate the Ubuntu community workflow with Ask Ubuntu. We started by discussing the increasing need for localization and accessibility compliance. The remainder of the session dealt with ways we could bring the integration of Ask Ubuntu to the next level. We discussed adding Ask Ubuntu to their browsers’ default Ubuntu start page. They were even surprisingly receptive to replacing their own Launchpad Answers solution (Ubuntu’s community support Network) with Ask Ubuntu. The developers are looking for better ways to encourage users to ask questions rather than file bugs, and Ask Ubuntu fits that bill with a 94% answer rate! It was a very productive and fun week. That is one fired up group. All the hallway discussions and brainstorming left me with a bit of information overload. I don’t know how deep the integration and partnerships with Ubuntu will go, but the proposals are documented and work items are assigned. The enthusiasm for our ideas were palpable. All we need is a bit of follow-up. Ubuntu is an amazing organization. Events like this give me a glimpse into what can be accomplished with a group of volunteers. If you’re looking for a way to get started in open source, Ubuntu is a wonderful place to participate. Thanks to the Ubuntu team for their generous invitation and helping this newcomer find a place in their community."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/11/03/the-horror-of-no-answer-revival-and-necromancer/","date":"2010-11-02T23:00:00.000Z","tags":["Community"],"title":"The Horror of No Answer: Revival and Necromancer","text":"On the Stack Exchange network, we define an “unanswered question” as a question with no upvoted answers. This is a very, very strict definition. The way we define it, your question could still technically be unanswered even if it has multiple answers — so long as none of those answers have received their first upvote. Why so strict? We don’t feel that any question can fairly be called “answered” until another human being has looked at those answers and deemed at least one of them worthy of an upvote. However, we have noticed a sizable uptick in the number of questions that have no answers, as in zero answers, on Stack Overflow. Questions asked more than 30 days ago with no answers: 64k / 1m+ Questions asked more than 120 days ago with no answers: 40k / 1m+ It’s fine — expected, even — for there to be a “long tail” of questions that are too obscure, too narrow, or just plain unanswerable for whatever reason. Sometimes you have to be patient; it takes the time it takes. But seeing the number of zero-answer questions grow by 50% over a 3 month period is definitely concerning. Part of this is our fault for not adapting the homepage to the massive amount of question activity that Stack Overflow now enjoys. We’re working on it, but it will take some time to figure out the right approach. In the meantime, we’re introducing two new features to help make zero-answer questions more discoverable. First, and most importantly, there is now a no answers tab on the unanswered page. It was already possible to find zero-answer questions through the advanced search options, but you had to know the syntax. Now you can just click the tab. To get to this no answers view: click the giant unanswered button on the homepage click the no answers tab Note that you can filter to all the unanswered questions in a specific tag by simply clicking on any of the tags in the sidebar — and clicking repeatedly on the sidebar will combine tags. (To “uncombine”, click the tags at the top of the sidebar.) We’ve also introduced a new bronze badge, Revival, to complement the existing silver Necromancer badge. Answered more than 30 days later as first answer scoring 2 or more Answered a question more than 60 days later with score of 5 or more Both badges can be awarded multiple times. The intent here is to reward those intrepid adventurers who journey into the vast uncharted wilderness of the unanswered tab — and are willing to provide great answers to the questions that, for whatever reason, have eluded everyone else."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/11/01/rovio-or-how-to-annoy-your-coworkers-from-200-miles-away/","date":"2010-10-31T23:00:00.000Z","tags":["Background"],"title":"Rovio: Or, How to Annoy Your Coworkers From 2,800 Miles Away","text":"I’m a big fan of annoying my coworkers. Problem is, I don’t have any coworkers because I work remotely from home. An impossible conundrum. Or is it? Enter Rovio, the wi-fi enabled robotic WebCam. Rovio got mixed reviews, but we decided to give it a shot anyway. You control Rovio through a web browser interface, with full (but low-res) video and audio. Here’s a few shots of us driving around the New York World Headquarters. Like explorers from the old world, we created maps of the New York office as we discovered it. Rovio is surprisingly full featured for an inexpensive little ‘bot: It can auto-dock with its base station when you get close enough — so you can drive around for quite a while, so long as you remember to return to the dock before the batteries die. There’s a little LED for night lighting. It’s not very effective, but … it exists. There are three camera positions: low, medium, and high. It can move more or less in a circle from a standing position, so it doesn’t get stuck too much. In fact, you might even say some of us … got a little obsessed with it. Behold the Rovio Maze Of Doomtm created by David Fullerton, George Beech, and Jason Punyon: Is that Zardoz, as featured on the 404 page of Stack Apps we see in the maze? They don’t call it the Maze of Doomtm for nothing, man! Ben Dumke also hooked Rovio up to our internal chat, so you can call out his/her/its name and see what it’s up to. All in all, we’ve really enjoyed Rovio. If you, too, need to annoy your coworkers from 2,800+ miles away — we highly recommend it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/30/database-upgrade/","date":"2010-10-29T22:00:00.000Z","tags":["Company"],"title":"Database Upgrade","text":"As part of our datacenter migration, the database server received a substantial upgrade: Oregon 48 GB 2 Xeon X5470 CPUs 8 total cores @ 3.33 Ghz NYC 64 GB 2 Xeon X5680 CPUs 12 total cores @ 3.33 GHz However, a few things didn’t go quite to plan in the migration. Much to our chagrin, the database server ended up being barely faster — and maybe even a bit slower than our old database! This was deeply troubling. The new Nehalem CPUs (what you may know as Core i7) are sort of meh on the desktop, but they are monsters on the server. It’s not unusual to see 200% performance increases going from Core 2 class server CPUs, like the ones we have in Oregeon, to these newer Core i7 class server CPUs. Just ask AnandTech’s Johan De Gelas: The Nehalem architecture only caused a small ripple in the desktop world, mostly due to high pricing and performance that only shines in high-end applications. However, it has created a giant tsunami in the server world. The Xeon 5570 doubles the performance of its predecessor in applications that matter to more than 80% of the server market. Pulling this off without any process technology or clock speed advantage, without any significant increase in power consumption, is nothing but a historic achievement for the ambitious and talented team of Ronak Singhal. So … yeah. We should be seeing performance improvements, and big ones, not the break-even parity (at best!) we were actually seeing. We began looking into it and troubleshooting. That’s why there was some downtime around 5 pm Pacific the last few days. We were messing around with our primary and backup database servers in NYC. Here’s what we tried: We thought maybe the combination of SQL Server 2008 R2 and Intel’s next-gen HyperThreading were not mixing well. We’re still not sure, but we opted to be on the safe side and disable HyperThreading for now; 12 real, physical cores seems like plenty for our workload without adding fake logical CPUs to the mix. We realized we had mixed up CPUs a bit and we didn’t have the correct CPU in the server. Close, but not quite right. This was easy enough to fix with a CPU swap, but it alone was not enough to explain the performance issues. After trying a few other minor things, and with a nudge from Brent “database ninja” Ozar we narrowed it down to the clock speed of the CPUs themselves. Despite having set high performance mode in Windows Server 2008 R2’s power management control panel, the CPUs weren’t clocking up at all under load — we were seeing about half the clock speed under load we should have. Kyle asked why our CPUs weren’t clocking up on Server Fault. In the process of asking the question and researching it ourselves, we discovered the answer. These Dell servers were inexplicably shipped with BIOS settings that … did not allow the host operating system to control the CPU power settings did not set the machine to high performance mode did not scale CPU speed under load properly … kind of the worst of all worlds. But Kyle quickly flipped a few BIOS settings so that the machine was set to “hyperspeed mode”, and performance suddenly got a lot better. How much better? My benchmarks, let me show you them! This is an average of 10 SQL query runs on a copy of the Stack Overflow database, under no (or very little) real world load. OR DB2 2.5 Ghz OR DB1 3.33 GHz NYC DB2 3.33 Ghz gnarly query for Sportsmanship badge 3177 ms 2919 ms 1285 ms simple full text query 555 ms 423 ms 335 ms Notice that database performance scales nearly linearly with CPU speed. This has always been the case in our benchmarking, but our dataset fits in memory. I don’t think that’s unusual these days. Building a 64 GB server like this one is not terribly expensive any more — and solid state drives are bridging the gap between disk and memory performance at 256 GB and beyond. Anyway, the received wisdom that “database servers need fast disks above all else” is kind of a lie in my experience. Paying extortionate rates for a crazy fast I/O subsystem is a waste; instead, spend that money on really fast CPUs and as much memory as you can afford. Most of all, there’s the crushing 2x Nehalem Xeon performance increase we would expect to see! It’s “only” 25% faster on full text operations, but we’ll take that too! So, our apologies for the downtime. We tried to share everything we learned in the process here and on Server Fault so the community can benefit. We hope this upgrade brings a faster and more responsive set of Stack Exchange sites to you! (and if you’d like oodles more datacenter details, do check out the Server Fault blog. If you’d like network admin opportunities, do check out Stack Overflow Jobs.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/29/stack-overflow-results-featured-in-msdn-search/","date":"2010-10-28T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow results featured in MSDN Search","text":"Did you notice anything different about MSDN search lately? MSDN is Microsoft’s mega huge developer information portal, and we’re happy to announce that starting today, Stack Overflow search results will be incorporated into the results when you search for something on MSDN. That lets you see official Microsoft developer documentation alongside the community conversations that you need to actually make sense of the “official” developer documentation. Let me just say that I have been using Microsoft developer documentation since the Windows 1.0 API. In those days it was a big .HLP file with one entry for every Windows API call, and searching on my Zeos 386SX was instantaneous. In the early 1990s MSDN first appeared (it predated the web by a few years), shipped as a subscription service on monthly CD-ROMs. Now programming has gotten so complicated that the official documentation never tells you everything you need to know. So I think it’s just incredibly awesome that Microsoft has recognized that there has been a developer landslide from the vendor forums onto Stack Overflow. Give it a try!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/27/code-camp-video-interview/","date":"2010-10-26T22:00:00.000Z","tags":["Community"],"title":"Code Camp Video Interview","text":"A few weeks ago, I presented HTML 5 Local Storage — as featured in our global network auto-login — at the 2010 Silicon Valley Code Camp. After the talk, Mehul Harry of DevExpress buttonholed me to talk about HTML 5 local storage … and everything else we’ve been working on over the last 6 months. Part one — 14:21 Part two — 13:28 If you don’t have the time or inclination to watch the entire 27 minute video interview, Mehul kindly wrote up a decent set of notes — and there’s also a much higher resolution version of the talk available there, too. (I only mirrored the interview on YouTube for convenience, as I was having trouble getting the video to play reliably from there.) We don’t have a podcast any more, but occasionally Joel and I will do speaking engagements where we discuss aspects of Stack Exchange and Stack Overflow. Anyway, if you’re wondering why we make the crazy decisions we make sometimes, perhaps this will provide some insight. Or not."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/22/datacenter-migration-oct-23/","date":"2010-10-21T22:00:00.000Z","tags":["Company"],"title":"Datacenter Migration Oct. 23","text":"This Saturday, October 23rd, starting at about 2 PM Pacific, we will be migrating all of our primary sites from the Corvallis, OR datacenter to the New York, NY datacenter. Please be advised that this is a major move, and while we will do everything we can to prevent major service interruptions (largely with a read-only site mode we’re introducing), there may be a few hours of unavoidable downtime. This move is good news, though: NYC is approximately 80 milliseconds closer to Europe, which is where a significant portion of our audience arrives from. And of course dramatically closer to the rest of the east coast of the USA. The Peer 1 internet network infrastructure should be faster. The servers all have twice as much memory (16 GB web tier, 64 GB database tier) and their CPUs are one generation ahead of what we have in Corvallis (Core 2 vs Core i7 class). There’s a lot more of … uh, everything. At worst this NYC configuration will be the same speed overall — but much more robust. At best, you should notice 100 to 150 millisecond improvement in response time on every single page. As always, you can read real time updates and details about the move on blog.serverfault.com. update: this migration is now complete. We have a few very minor things left to clean up, but for the most part everything should be working as before. If you love interesting server challenges, check out the opportunities for sysadmins on Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/21/when-will-my-site-graduate/","date":"2010-10-20T22:00:00.000Z","tags":["Area51"],"title":"When Will My Site Graduate?","text":"At 90 days into beta, we’re supposed to evaluate each Area 51 beta site and either “pass” or “fail” them as full Stack Exchange sites. Some sites feel they’re not going to make it. Please do not close GIS SE The Geographic Information Systems SE site has one more day of beta. We are Excellent in Qs answered and answer ratio, Okay in visits/day and Worrying in number of questions and number of avid users. Are the admins planning to shut us down? Please don’t! We may be small, but we’re good and growing. I’ve been working in the GIS field for almost 15 years and been active on every applicable BBS, mailing list, online forum and wiki for that time. I can honestly state that GIS SE has something that all those others didn’t, and that something is valuable and worth nurturing. Give us some more time, please. Thanks. Users put a lot of effort into their sites and, understandably, they feel a sense of attachment and responsibility for the site’s well being. If you look at the beta evaluation statistics recently added to Area 51, you’ll see ratings — from “Excellent” to “Worrying”. It’s true that GIS shows a “worrying” number of questions and a “worrying” number of avid users. But GIS also rates “excellent” at answering the questions posted to the site. More holistically, if you browse around at gis.stackexchange.com, it’s clear that this community produces high quality questions and answers that make the internet better. That’s our mission. That’s the driving goal behind all our sites. Shutting down a site like GIS would not advance our goal of making the Internet a better place to get expert answers to questions. As long as the questions and answers are of high quality, and people get answers to their questions, you shouldn’t worry about the site actually being closed. However, GIS will probably stay in beta longer than average to make sure it builds up a solid user base. And that’s the good news: by this criteria, almost all of the current sites should be allowed to continue. How long can a site stay in beta? The simple answer is, it takes as long as it takes. We’ll wait. If a site needs more activity, go out and evangelize it. As long as your site shows steady progress and continues to make the Internet a better place to get expert answers to your questions, it will march on. We don’t want to kill a site because it hasn’t reached full status in 90 days. Nor do we want to set a hard 90-day limit and launch a site too soon. There’s more to the health of a Stack Exchange site than having a lot of questions and answers. There’s an economy to the site with reputation as its currency, and voting drives that economy. A site absolutely needs on-going, sustained voting to build a class of leaders that help run and govern the site. Without leadership, there can be no community. So from this point forward, the graduation date of a site will depend heavily on having enough users with sufficient reputation to properly lead and govern the site. It’s much more important to graduate a site when it has become self-sustaining, and has established a healthy community of avid users, closers, and editors — rather than imposing an arbitrary 90-day limit. Thus, the order of launch will favor those beta sites which have achieved the most “excellent” ratings on our Area 51 stats panel. For everyone else — keep going! Why are editors and closers so important? Private and public beta sites operate under reduced reputation requirements. This allows young sites to grow rapidly. However, when the site graduates from beta, the privilege levels return to their normal levels. Private Beta Public Beta Graduated 1 15 15 Vote Up 15 15 15 Flag Offensive 1 50 50 Leave Comments 1 100 100 Edit Wiki Posts 1 125 125 Vote Down 1 150 150 Create New Tags 1 200 200 Retag Questions 500 750 2000 Edit Posts 1 500 3000 Vote to Close 2000 2000 10000 Access Mod Tools This can leave a bit of a leadership vacuum if the site does not have enough 2k and 3k rep users to edit and close posts. Web Applications, for example, can not close questions through the community vote. Neither can Pro Webmasters. Moderators are left single-handedly regulating and policing the site, and that’s not healthy for a community. Why not adjust the reputation levels for new sites? If the site needs interim reputation levels, that is a strong indication that the site isn’t ready to graduate. … it would just be yet another beta stage on top of the private and public betas. We don’t need 4 beta stages. **If the site is going to graduate, it needs to graduate. **Perhaps basing graduation off of number of users at the different rep levels instead of a hard 90 days would be a better indication of a community’s ability to self-police and readiness to be a real site. — rchern (webapps moderator) Every site needs a solid group of experienced users who can assist in moderating the site. Perhaps we’ve all become a bit jaded about the importance of participation through voting. It is imperative that beta users cast as many of their 30 daily votes as they can. We’ve added reputation leagues and more incentives to vote. All we can do now is continue campaigning. In the earliest days of Stack Exchange, we started a lot of beta sites in quick succession. Those sites are now racing past the end of their official 90 day beta periods. And that’s OK. There’s no harm in staying in public beta far beyond the initial 90 days, so long as the quality of the Q&A; is high and it’s not a ghost town. It takes the time it takes. But if you want your site to graduate from beta sooner rather than later, encourage your fellow community members to vote early and often!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/19/vote-early-vote-often/","date":"2010-10-18T22:00:00.000Z","tags":["Community"],"title":"Vote Early, Vote Often","text":"Have you ever wondered why the vote buttons and score are so prominent on every Stack Exchange question? Putting voting front and center is very much intentional; it is how … good content is voted to the top wrong or incorrect content is voted to the bottom users who consistently provide useful content accrue reputation and are granted more privileges on the site It’s only through voting that a class of editors, closers, and moderators can emerge to help run and govern the site. Voting is how site leadership forms. That’s why the reputation leagues show a breakdown of reputation spectrums. Does your site have a healthy middle class of users with vote up and down, and edit tag privileges? Does it have a healthy governing class of users with edit, close, and moderation privileges? All of this requires sufficient reputation, which in turn requires users to exercise their right to vote. In fact, we’ve begun showing beta site health on Area 51 as partially a function of how many “avid” users there are — where “avid” is defined as has at least 200 reputation. (click through to any Area 51 site proposal that is currently in beta to see the evaluation.) Our sites are all intended to be a sort of representative democracy. While yearly moderator elections are an important part of that plan, voting on questions and answers is the primary mechanism through which the community governs the site on a day to day basis. Voting is so important that we belatedly realized we may not be doing enough to encourage new users to vote. But we’re trying to change that. First, the new privilege wikis and notifications now explain the importance of upvoting and downvoting “just in time”, when users receive those privileges. Second, we’re rolling out two new badges to further encourage additional dimensions of voting: **Suffrage** Bronze Cast the maximum number of 30 votes in a single day **Sportsmanship** Silver Cast 100 upvotes on competing answers, that is, answers to questions that you yourself answered with a score of 1 or more These new voting badges will be applied retroactively, and complement the existing Supporter, Civic Duty, and Electorate voting badges. Let each citizen remember at the moment he is offering his vote that he is not making a present or a compliment to please an individual — or at least that he ought not so to do; but that he is executing one of the most solemn trusts in human society. — Samuel Adams Voting is as crucial to our community as it is to any democracy. As a moderator, or merely a citizen of the site — please exercise your right to vote by voting early and voting often!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/15/stack-overflow-chat-now-live/","date":"2010-10-14T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Chat Now Live","text":"It seems like only five short months ago we were discussing the value of having a hypothetical “Third Place” for our network: The third place is a term used in the concept of community building to refer to social surroundings separate from the two usual social environments of home and the workplace. In his influential book The Great Good Place, Ray Oldenburg argues that third places are important for civil society, democracy, civic engagement, and establishing feelings of a sense of place. Most needed are those ‘third places’ which lend a public balance to the increased privatization of home life. Third places are nothing more than informal public gathering places. The phrase ‘third places’ derives from considering our homes to be the ‘first’ places in our lives, and our work places the ‘second.’ Well, after a beta preview, then a public beta, and rolling out chat to Super User and Server Fault — this “third place” concept is a whole lot less hypothetical than it used to be. We’re ready to pronounce chat officially out of beta and give this third place concept a real stress test. Like so: chat.stackoverflow.com I’ve been asked a few times what the heck real time chat is supposed to be for, exactly. In truth, it is a bit of a specialized tool — a real time, interactive collaboration tool unlike anything else we offer. It is used primarily by our most avid community members, and I don’t see a thing wrong with that. Without avid community members, we’d have no real community at all. More selfishly, I can tell you that we use our own chat for the distributed development work of building Stack Overflow and Stack Exchange itself. I have found the stateful, real-time web chat extremely useful — dare I say essential — for a distributed team. And what is stackoverflow.com except the world’s most awesome and most distributed development team of all? So … who’s with me?! Let’s go … read the chat FAQ!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/14/new-question-migration-paths/","date":"2010-10-13T22:00:00.000Z","tags":["Community"],"title":"New Question Migration Paths","text":"Several Area 51 sites have made it from being mere proposals to vibrant, thriving websites. Namely, webapps, gaming, ubuntu, webmasters, and very soon, cooking. And we’re about to have a heck of a lot more sites come out of beta. Thus, we need to handle migration of questions from site to site in a more elegant way than we do now. Why? Well, sometimes questions are asked that just don’t belong. In the spirit of preventing broken windows, we like to vote to close these questions so sites can stay tidy, useful, and on topic. We’ve more or less settled on the following standard close reasons: exact duplicate This question covers exactly the same ground as earlier questions on this topic; its answers may be merged with another identical question. off-topic Questions on Stack Overflow are expected to generally relate to programming or software development in some way, within the scope defined in the faq. not constructive This question is not a good fit to our Q&A; format. We expect answers to generally involve facts, references, or specific expertise; this question will likely solicit opinion, debate, arguments, polling, or extended discussion. not a real question It’s difficult to tell what is being asked here. This question is ambiguous, vague, incomplete, overly broad, or rhetorical and cannot be reasonably answered in its current form. too localized This question would only be relevant to a small geographic area, a specific moment in time, or an extraordinarily narrow situation that is not generally applicable to the worldwide audience of the internet. We realized that off-topic is the launching point for deciding “if this question doesn’t belong here .. where does it belong?” We’ve consolidated and enhanced off-topic to better cover this scenario. Now, when you click off-topic as a close reason, we also present possible migration paths — that is, other sites in our network that might work for these wayward off-topic questions. Now, we are only “unlocking” migration paths that have some history of actually happening on the site. In other words, the odds of a bicycles or cooking question being accidentally asked on Stack Overflow is so vanishingly slim that we don’t need to put it in the dialog or even allow it to happen at all. Whereas I constantly regretted the fact that we had amazingly good webmaster questions asked ALL THE TIME on Stack Overflow that simply had nothing to do with programming, and had to be closed as off-topic. This pained me. No longer. I can now begin migrating questions tagged [seo] on Stack Overflow — many of them closed, and rightly so — to Webmasters, where they are totally on-topic! And of course, once the migration stubs are deleted, the question will properly 301 redirect to the destination site. We’re still working out all the “which sites can migrate questions to where” path definitions, and we are open to suggestions. But before you do, there are a few ground rules: The default is plain, no migration off-topic. That’s by design. If there is ever any doubt in your mind about where a question belongs, the safest option is to vote it off-topic and let it remain on the site. Please don’t vote for a migration unless you feel strongly about it. It takes 5 close votes to close a question and there must be consensus for a migration to occur. If there is no consensus, the question remains on the site and is closed as off-topic. This is new, and should help with some of the inappropriate accidental migrations we’ve seen in the past. Questions can never be migrated out of a meta. Metas are like black holes: questions go in, but they do not come out. This is by design and intentional. We don’t want too many choices in the off-topic dialog. There’s a practical maximum limit of about six target sites — ideally less. Every time we present that off-topic dialog we are asking our community members to think about where this question belongs, and having too many choices leads to analysis paralysis. There should be a few clear migration targets, and beyond that … flag it for moderator attention if it’s so doggone exceptional! If you’d like to make a case that a migration path should be unlocked between two sites — show us examples of those questions being closed as off-topic on the site. And, really, it’s OK that there are sometimes grey areas between websites. I am a programmer, and I am a webmaster, too. The world is a very analog place and there’s room for a lot of variants of questions for particular audiences. Ultimately, it’s our goal to cultivate friendly relationships between compatible sites — migration is a way for communities to support each other by cross-pollinating some questions and users in these related disciplines."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/14/the-best-damn-careers-site/","date":"2010-10-13T22:00:00.000Z","tags":["Careers"],"title":"The Best Damn Careers Site","text":"Last week I was at Business of Software 2010 (which was totally awesome by the way) and ended up talking to a number of people about Careers. One of them said: “This is great, but why don’t we hear more about this?” And he was right… It’s been a while since we blogged anything about Careers – hereby remedied. Let’s go back to our goal for a bit: To make Careers the best damn place on the internets to find an awesome job/employee. There are two main components to that: quantity and quality. The first one is relatively easy: We don’t need to be the biggest technology careers site (although if that were to happen, we wouldn’t mind), but we need a certain number of jobs and CVs to become a truly useful resource for our clients. While we have made headway the past few months, we aren’t quite there yet. This doesn’t mean we suck (I think we’re pretty awesome) – but neither are we the best yet. Then there’s quality, which comes in two flavors: the quality of the app itself and the quality of the information and community it contains. You need both flavors to attract more users, but as you grow, the second one is at risk of going down as it will become harder and harder to keep tabs on everything (more on that later). At the moment we still have two distinct products: Job listings and the CV database (I say at the moment, because ultimately these should be two fully integrated sides of the same glorious coin). When we started working on careers a few months ago we first turned our attention to the candidate UX, improving both looks and functionality. The last several weeks we’ve worked on making it easier for employers to post and manage jobs. Oh, and we had to build a new order management and fulfillment system (both were still running off Fog Creek’s systems). There’s one more thing we’ve been doing, and that is to communicate more. We’ve made the jobs ads on Stack Overflow proper much more visible and have started targeting them to your location. We started tweeting (follow us: @StackCareers). We’re continuously reaching out to companies to generate more listings. Finally, we’re starting to think of additional ways to reach out to employers to generate more listings and to educate the HR people of this world about the finer points of hiring kick-ass programmers (ZOMG! Marketing!). While the Job postings side of things largely depends on the quality and quantity of the job postings, the CV database stands or falls with the quality and quantity of the CVs. While the basic system is working, I see two immediate areas for improvement: 1) Make it easier for candidates to get into the database and 2) Do a better job of explaining why you should bother.* More CVs mean more employers searching them, which is a good thing. Once we have the above in place we’ll work on making both sides better and on integrating them so that as an employer you could for instance (and don’t quote us on this) save CVs against an existing job or, as a candidate, perhaps you could be fed jobs that match your CV. And then we’ll take all of Careers and figure out how we can better integrate it with Stack Overflow proper so that relevant jobs appear when and where you need them, and relevant SO behavior correlates back to your CV. (/images/wordpress/lolcat-job-300×236.jpg) So what about quality? It is perhaps the largest determinant when talking about being the best damn site on the web. Without high quality candidates and employers we’re nowhere. I’m not only talking about high quality CVs and Job postings, but also high quality behavior. We want employers that will carefully select the best few candidates rather than spamming our entire database with “Do you know anyone that might be interested?” emails. Likewise, we want candidates that are responsive when they receive a relevant query rather than ignoring the message because they’re not currently looking.  While we can, and most likely will, try to identify undesirable behavior and put measures in place to prevent it, we like the idea of augmenting that with a more self-governing approach (we can’t possibly identify all the ways in which people might misbehave… But once we know what the community determines to be undesirable we can put further preventative measures in place). We’re currently thinking along two lines: Effort should be rewarded (or: the more you put in the more you should get out of the service) The definition of quality is ultimately determined by our users, so we want to build in some sort of voting / flagging mechanism. The first point primarily speaks to the content you produce: more complete CVs or job postings should perhaps be ranked higher in searches than less complete ones. The key question is how to determine this. Completion is one thing, but that does not necessarily correlate to quality. This is where the second point could help out as it applies to both behavior and content. If you traditionally have a habit of not responding or of spamming people we may reduce your visibility, if on the other hand you routinely excel in your posts and communications maybe we’ll weigh you a little higher and will prioritize your messages. Or maybe we’ll just implement a reputation system on Careers.  The difficulty with voting / flagging is that quality is context specific: As a c# programmer you probably won’t care about a php listing, but that doesn’t necessarily mean it’s not a good posting. If however that same employer hits you up through the CV database, there _is _a quality issue. Similarly, the fact that a resume is not relevant to you doesn’t mean it’s bad. Figuring out how to manage this part of the equation will most likely take some time and trial and error. That’s all I got. Some of the above is more concrete and planned out than other parts, but I wanted to give you a look in the kitchen so you’d know what’s cooking. As always, email us at careers@stackoverflow.com or let loose on meta.stackoverflow.com with any questions, or simply to let us know your thoughts. Awesome employer has an awesome job, looks in CV DB and finds the perfect candidate. Employer offers candidate job, candidate accepts, and they both sail off in the sunshine together (even if candidate is not actively looking at the moment they’ll have an awesome conversation, and will sail of into the sunshine together at some point in the future)."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/13/millionth-stack-overflow-question/","date":"2010-10-12T22:00:00.000Z","tags":["Community"],"title":"Millionth Stack Overflow Question","text":"At about 9:26 PM Pacific time, on October 12th, 2010, the millionth question was asked on Stack Overflow. And then promptly closed. This of course calls for a celebration. There was an informal meta Contest to predict date and time that stackoverflow will eclipse 1,000,000 questions — once the community decides who the winner is, I think they should certainly be the proud recipient of a Stack Overflow t-shirt, stickers, and of course the million unicorn bill. Since our 100,000th question and first birthday, we’ve skipped celebrating these things — but the millionth question is a major milestone. The first Stack Overflow question was asked at 21:42 on July 31st, 2008. This means in the 803 days and 2.2 years since Stack Overflow launched, there have been on average 1,245 questions asked per day. That’s … a lot. The growth has been more or less linear over time, and it has forced us to think deeply in the last year about the intrinsic value of questions versus answers, how to assist new users in asking better questions, and how to foster sub-communities within tags. Most of all, thanks to everyone in the programming community who so generously contributed a few minutes out of their day to help their peers and collectively make our craft a tiny bit better alongside us. When I announced our public launch on September 16th, 2008, I said: The idea that you have all these experts waiting in the wings to do stuff is an illusion in my experience. There’s really just a bunch of amateurs muddling along trying to do things together. The people that are truly experts are too busy to even help, right? And if the experts are too busy to help, what difference does it really make if there are experts at all. The whole point of this endeavor is helping others learn, and whether you’re an expert or not, if you have no time to help, you’re not really contributing to the solution. One million questions later, I still believe in our mission, and I am proud to be a part of this community. I hope you are too."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/13/stack-exchange-naming-for-dummies/","date":"2010-10-12T22:00:00.000Z","tags":["Area51"],"title":"Stack Exchange Naming for Dummies","text":"A while ago, I wrote: “Individually-branded sites felt more authentic and trustworthy. We thought that letting every Stack Exchange site have its own domain name, visual identity, logo, and brand would help the community feel more coherent. After all, nobody wants to say that they live in Housing Block 2938TC.” Well, funny thing… that didn’t quite work out the way I expected… mostly because nobody could think of any good domain names. Believe it or not, “NothingToInstall” was one of the better suggestions. Ack. We realized that we’re trying to build some kind of brand that signifies “Q&A goodness” to as many people as possible, and we couldn’t do that if every site had a completely different name. Think of it this way. I’ve met a lot of programmers who tell me that when they have a problem, after searching on Google, they scan the results for stackoverflow.com and click on those links first. If we launch hundreds of Stack Exchange sites each with their own domain name, there will be no way to distinguish the great Stack Exchange answers from the crappy generic forum answers in search engine results. And since 90% or more of our audience comes to us from search engines, that’s broken. – Joel Spolsky note from Jeff Atwood: I complained to Joel that this felt like half a blog post. We believe the domain name problem is a dead end. So instead of trying to crack the nigh-impossible domain name problem, we’re focusing on the elevator pitch. It’s a much better starting point that results in more useful ideas. So for the second half of this post, I point you to Robert Cartaino’s excellent advice posted on each per-site meta. The Elevator Pitch What is an elevator pitch? I only have a moment, so here’s an “elevator pitch” for the elevator pitch: “Who is the site for? What is it about?” This isn’t as easy as it sounds. Imagine a user who will never read your FAQ and you have fifteen seconds to grab their attention. It should be catchy but descriptive. It should be thoroughly clear but painfully concise. Make every… word… count. Here are some creative examples: Gawker: Daily Manhattan media news and gossip. Reporting live from the center of the universe. Gizmodo: The gadget guide. So much in love with shiny new toys, it’s unnatural. Autoblog: We obsessively cover the auto industry. DumbLittleMan: So what do we do here? Well, it’s simple. 15 to 20 times per week we provide tips that will save you money, increase your productivity, or simply keep you sane. Needcoffee.com: We are the Internet equivalent of a triple espresso with whipped cream. Mmmm…whipped cream. Use it as a Tagline A shorter elevator pitch can be used as a tagline — something you can display in the header at the top of the page. If it doesn’t fit, consider shortening it or creating a separate tagline. Here are some great examples: Slashdot: News for nerds. Stuff that matters. Lifehacker: Don’t live to geek, geek to live! The Simple Dollar: Financial talk for the rest of us. The Motto (don’t forget your logo) A logo begs for it own little, short tagline — like a motto. Maybe the tagline inspires the logo; Maybe it’s the other way around. Mottos make good t-shirt, bumper stickers, and other marketing material. Either way, you’ll recognize a good motto when you see it: Just do it. Think Different. The Uncola. Intel inside. Like a rock. The king of beers. …and perhaps all this leads to a proper name and domain for your site… eventually. So let’s start from the basics. Come up with a killer elevator pitch, tagline, and/or motto! – Robert Cartaino"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/11/ubuntu-stack-exchange-is-askubuntu-com/","date":"2010-10-10T22:00:00.000Z","tags":["Community"],"title":"Ubuntu Stack Exchange is askubuntu.com","text":"We’re pleased to announce that ubuntu.stackexchange.com, in partnership with Canonical, Ltd, has become Ask Ubuntu. We’re excited to see this come to fruition, because: Our mission is “let’s make the internet better”; that’s strikingly similar in scope to Canonical’s mission. It underscores the spirit of both Ubuntu and Stack Overflow in that we can all get along and learn from each other regardless of petty differences like religion technology stack We’re big fans of open source software, as demonstrated in our free vote-based open source house ads and our yearly donations and even directly funding open source projects. All of our data is released to the community in perpetuity under Creative Commons We believe in regular moderator elections and community self-governance I have to admit that I voted strongly against having both Unix/Linux and Ubuntu sites, but I deferred to the overall votes not to merge both inside and outside the company. We collectively said Fork It. It’s clear now that given the strength and self-identification of the Ubuntu community, they are the exception that proves the rule. Honestly, we get approached a lot for partnerships like this, but they don’t usually go anywhere because we require ceding so much control back to the community. It is rare indeed to find such a complimentary relationship — and we hope this one is beneficial to Ubuntu, our network, and the internet community at large. But, as always, you be the judge. Be part of the community that governs the site: askubuntu.com meta.askubuntu.com chat.askubuntu.com"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/09/stack-overflow-outage-2/","date":"2010-10-08T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow Outage","text":"As you may have noticed many of Stack Overflow’s websites suffered some down time today from 6am EDT for about an hour and Stackoverflow.com is still offline for maintenance. Our collocation provider in Oregon experienced an unexpected UPS failure that caused us to lose power. Once they were able to restore power Geoff, who was already on site, brought up our servers. Stack Overflow itself is still offline because the database, was, well “suspect” according to SQL Server. We have recovered the database and are working to bring it live again. We apologize for this outage but we are working hard to make sure you can always get your answers. We will keep everyone updated. Update: We have managed to restore the database and stackoverflow.com is now live again as of 10:45 AM Eastern. Update: We have managed to restore the missing 4 hour window of Stack Overflow data as of 1:30 PM Eastern. Going forward we have set up new servers in a new facility in New York. We have already moved some of our sites; you may have noticed meta.stackoverflow.com was still up during this outage. This new data center includes the following improvements so that our sites will have higher availability so you can always get answers to your questions: Two Power feeds from independent UPSes. Redundant Internet feeds as well as redundant routers and switches. Every site is run from multiple servers. Thank you everyone for your patience and support during this outage."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/08/search-all-stack-exchange-sites/","date":"2010-10-07T22:00:00.000Z","tags":["Community"],"title":"Search All Stack Exchange Sites","text":"For as long as we’ve been working on Stack Overflow, we’ve been telling people that web search is our “homepage”. Just to prove it, I dug up our old Project Ask Elevator Pitch from FogBugz — and it’s right there at the top: The above document was last edited April 15th, 2008. Ah, memories… Don’t try to replace forums. Answer people’s questions! That’s our focus. Get those answers to the top of Google search so people can find the information they’re looking for with a minimum of noise. How will people arrive at the site? 1) Google — ideally directly to the question and answer. We’ve been beating this drum since the day the project began. Our goal is to make the internet better by building an engine that surfaces the best content to search engines. Of course, searching a single site like Stack Overflow with Google (or your favorite web search engine) is plenty easy. We even have helpers on the search page to assist: Doing it manually isn’t hard, either; just enter the site: operator in front to scope your search to just a single site. <font color=\"maroon\">site:stackoverflow.com</font> find these words Which is fine, but what happens when you have an (awesome) trilogy? Or when you suddenly have 24+ (awesome) websites? Then … it’s not so easy to search them all. Until now! We just added a custom Google search for all of our sites at the top of http://stackexchange.com. So you can now express and share network wide searches like so: http://stackexchange.com/search?q=the+center+cannot+hold http://stackexchange.com/search?q=how+do+I+back+up+my+website http://stackexchange.com/search?q=move+the+turtle+in+logo … and so on. We’ll keep this up to date as we launch new sites, so you can use your favorite search engine as the de-facto front end for all of our websites. Exactly the way we always intended."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/07/membership-has-its-privileges/","date":"2010-10-06T22:00:00.000Z","tags":["Community"],"title":"Membership Has Its Privileges","text":"Our very own Benjamin Dumke opened a meta topic about a year ago that was prescient: Right now, crossing one of the magical rep borders happens more or less unnoticed. People just gain the particular powers. Now, of course they have eagerly been awaiting this moment, and want to start using their new powers instantly. However, this leads to people — usually with good intentions — doing stuff that is actually discouraged … I propose a pop-up saying something like “You have earned the power to retag questions. Please read our retagging guidelines [link] for a short introduction”. I deferred on this for a long time because I thought of it primarily as a way of documenting the system. But I recently realized it’s far more than that — it’s also a way of congratulating our community members for being awesome. You know what? It is a big deal when users reach the 500, 1k, 2k, 3k, and 10k reputation thresholds, and users should be acknowledged when they garner enough upvotes from their peers to reach these important milestones. And yes, it is also an opportunity to share some just-in-time protips. Before, it was like you gained superpowers overnight, but nobody bothered explaining how you use them. You could fly, indeed, but you had no idea how to take off, land, or avoid smashing into high rise buildings. We generally relied on the community to teach itself. New users would learn from more experienced users how these things work and what the cultural norms are on the site. As Ben pointed out, that kinda-sorta worked … but it could be better. A lot better! I’m pleased to announce we now offer a full set of wiki pages documenting user privileges — just navigate to /privileges on any site and start browsing. You’ll see a complete list of privileges you can earn through reputation, along with a percentage of how far you’ve gotten toward each privilege level. Click through to see detail about a particular privilege and how it works. We absolutely intend these privilege wiki pages to be permanent, shareable resources about how the site works and its topic-specific cultural norms. But you don’t necessarily need to know or care about these pages. As you earn reputation on the site and gain new privileges, we’ll congratulate you and point you directly to the page describing what that privilege is all about. It is our hope that with wiki privilege guides in place on all network sites, and an automatic “congrats!” notification system linking directly to the relevant guide … new community members can more easily get up to speed on how our Q&A; communities work without making so many new user mistakes or asking so many FAQ type questions existing community members can use them as touchstones to understand what’s supposed to be happening our community moderators can edit the privilege wikis to make them clearer and refine them to the site topic As they say, membership has its privileges. Of course, that’s assuming we understand how this complex system we’ve built works … (NB: This has been rolled out across all network sites, but right now the privilege wiki pages are only editable on meta.stackoverflow. That’s because we’re still nailing down the default content for each privilege, and would like to deploy the privilege wikis globally across the network again over the next week or so.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/05/domain-names-the-wrong-question/","date":"2010-10-04T22:00:00.000Z","tags":["Community"],"title":"Domain Names: The Wrong Question","text":"Friday night we rolled back the domain name of our first out-of-beta website. After less than 24 hours of existing on the internet, nothingtoinstall.com was reverted to its original public beta name — webapps.stackexchange.com. We’re sorry for springing this on you at the last minute but – at least at the time – it felt like circumstances didn’t give us much choice. With deep concerns about domain name choices for the 20+ ongoing public betas and some negative feedback about breaking up the network into smaller domains, we made the snap decision to roll back the name change we had launched barely a day before. We felt that rolling back ASAP was preferable to letting problems grow exponentially through the next week while we discussed and voted and debated. That’s not an excuse; just an explanation. In hindsight, dealing with the community and the repercussions of our decisions should have taken precedence. For the time being, all sites will stick with their topic.stackexchange.com. names. Note that this applies to the site name only. The full launch of every site continues as planned. So we have: Which name do you like better? I like “Nothing to Install” but I’m not exactly unbiased. I work very hard with these communities, and coming up with decent names is difficult work; some say irreconcilably difficult. But when a site does come up with a good domain name, I believe they should get to use it (when the Stack Overflow folks read this, I’ll be in biiiig trouble). On the other hand, most of the domain name ideas are so bad, perhaps every site should not worry about having their own domain name by the end of beta (when the community reads this, I’ll be in biiiig trouble). I won’t argue that the naming decision was right or wrong. Our opinions were scattered and obfuscated among concerns of search engine optimization, marketing, site-vs-network autonomy, and the mind-rending madness of picking 25+ different domain names. As with most religious arguments, the loudest 1% of each side has become thoroughly entrenched in defending their position. That’s not to make light of the arguments, but to step back and look at a bigger picture. We’re attempting to build lasting websites and communities that will live on for decades, hopefully longer. We’re going to try to build it the right way, even if we don’t always know what that is. Sometimes that means trying different things, looking to see how they turn out, and, maybe, adjusting course… multiple times if necessary, until we get it right. Sometimes we change direction very quickly, sometimes we are more deliberate. This time we changed our minds when the facts turned out not to be 100% in alignment with our predictions. We’re strange that way. The community is being heard My job is to represent the community to the company, not vice versa. I’m here to be an advocate for great communities and make sure changes move us in that direction. I don’t have to agree 100% with every decision is made, but I DO have to represent the community members we depend on so much. That was my personal failure. Even adding a one-line system message saying hey we are switching back while we discuss would have done wonders. On the upside, nothing makes me happier than knowing we have a large group of very passionate users who are deeply engaged in even the tiniest decisions we make. That’s a sign that we built something that matters. The alternative to having users who are passionate about what domain names we use is … having users that don’t care. And who in their right mind would want that? So what about the domain names? Through all the confusion and arguments, one user came through with a rational and useful piece of feedback. It is deceptively simple: I have a feeling that the real heart of the issue is that everyone thinks naming is hard. That’s not completely true, the truth is finding a .com domain name for a matching good name is hard… Since finding a .com domain naming for a matching site name is so hard, perhaps the community should come up with a good name and later consider which types of domain names they can get for that name. Two distinct things, not one. Brian R. Bondy It turns out, we, the supposed experts of all things Q&A, had made the most newbie mistake there is — we’ve been asking the wrong damn question all along! When we originally asked the community to … Pick a domain name! We should have asked the community to … Tell us what your community is about in one brief sentence! Instead of stressing out over the vagaries of the brutal, cut-throat .com domain market and debating the “least worst” domain name options ad nauseam, simply focus on telling the world what your community is about. Don’t even think about the domain name! Give us the one sentence “elevator pitch” for your community. How would you explain your site to a stranger you met on an elevator? It’s about … what, exactly? Maybe the one of the 7 Essential Meta Questions should ask instead, WHAT IS THIS SITE ABOUT? And that, once decided, can become: the tagline the motto the blurb under the logo a set of reserved domain names a convenience redirect “nickname” for the site perhaps eventually the domain name in some form “Nothing to Install” might make a good tagline for Web Apps. “Pause for Help” might work for Gaming. “Seasoned Advice” is a tagline for Cooking … a great one! Nothing is cast in stone, as evident by how often we change our minds. There’s no urgent need to solve these issues right this minute. I’m convinced the world will not end if we don’t convince everyone right now that this exact decision is the most perfect decision ever made. Maybe we’ll come up with a better naming schema. Maybe we’ll end up acquiring an awesome top level domain name. Who knows? This naming issues is not as dire as it seems. It really isn’t. There are so many arguments on both sides of the issue. But I can sympathize with the angst. We have an awesome community of highly passionate people who can’t go to sleep when they feel like something is going in the wrong direction. I can totally relate. I don’t like when community members come way feeling discouraged that they are not being heard. I listen and empathize and try and turn feedback into action. Listening to the community may not always mean doing what the loudest members want. It may not even mean doing what the majority of the members want or taking a vote every time. But it does absolutely always mean we are listening. Ultimately, it’s our fault for asking the community the wrong question. And for that, we apologize. For the foreseeable future, don’t even attempt to “Pick a domain name!”. If we have learned anything, it is that asking the wrong question produces endless variations of the wrong answer. The correct question, the one we should have been asking the community all along, is this: Tell us what your community is about in one brief sentence!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/04/asking-better-questions/","date":"2010-10-03T22:00:00.000Z","tags":["Community"],"title":"Asking Better Questions","text":"As Stack Overflow has grown, it has started to have some decidedly big city problems. The one we are most concerned about is an influx of very low quality questions. While we still believe in editing and improving low-quality questions to make them better, there’s a fundamental mismatch in scale and effort here — bad questions, asked in bad faith, have a tendency to overwhelm the good intentions of the average Stack Overflow user. So, we’ve decided to take some steps to block bad questions before they enter our system, and save everyone some effort. Every new Stack Overflow user with <= 10 reputation is now presented with a mandatory “How To Ask” page that they must click through before asking their first question. The text on this page is a heavily edited subset of Google’s excellent Tips for Getting Help. At this point, you’re probably wondering — did Jeff really just tell me that Stack Overflow now requires every new user to agree to a EULA before asking their first question? Why, yes. Yes I did. Do let me explain the apparent madness. Unlike a EULA, our How to Ask page is … short, simple, readable language. designed to help you, not lawyers — by teaching you how to ask a decent question that gets the best possible answers! mercifully brief; it’s 5 simple rules that fit on a single page with no scrolling. Now, whether or not new users will actually read this, I cannot say. From my perspective, if at least one in ten new users read it and think, “hey, I should at least try to form a decent question” — it’s a win. If some very poor questions are discarded based on seeing this page — it’s a win. And honestly, when you have 2k+ new questions per day, you can afford to throw a few away in the name of increased overall quality. Furthermore, this page is designed to be shared and reusable. Free to share the How to Ask link with any question asker in need of advice on how to improve their question. http://stackoverflow.com/questions/how-to-ask Beyond this, we’re also starting to actively block questions from IPs and accounts that have historically produced a lot of low-quality questions. The details of this algorithm have to be kept vague, because we don’t want people to game it or exploit it. Remember all those question votes you thought were so meaningless? You might want to reconsider that stance. The rationales for voting on questions haven’t changed, though: if you see a great, thoughtfully asked, well researched question, vote it up — please! Great questions are an art! if you see an egregiously sloppy, no-effort-expended question that you feel was asked in bad faith … vote it down. anything in between that’s salvageable, edit it — or suggest an edit if you lack the 2,000 reputation to edit outright. We believe asking questions on our site is a privilege, not a right. If, after a few fair attempts, you haven’t been able to prove that your contributions to Stack Overflow make it at least … not-worse … then we reserve the right to refuse your questions. If we don’t do our part to cull the bad questions, then we risk alienating the true experts who provide what really matters: the answers! For now, these measures are (mostly) only enabled on Stack Overflow, as it’s the only site large enough to have these big city problems at the moment. But we certainly hope all of our Stack Exchange network sites get large enough to run into this .. what’s the cliche, again? “nice problem to have?”"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/01/an-area-51-apology-and-clarification/","date":"2010-09-30T22:00:00.000Z","tags":["Area51"],"title":"An Area 51 Apology — and Clarification","text":"We’d like to apologize to the Area 51 community. Allow me to explain with a diagram: In this diagram: Charlie Brown is the Area 51 community. Lucy Van Pelt is Stack Overflow Internet Services Inc. The football is the following proposals: Developer Testing, Compiler Design, and Vim. As Joel explained in Merging Season, if … Almost all X questions are on-topic for site Y Y already exists, it already has a tag for X, and nobody is complaining There’s a high probability that users of site Y would enjoy seeing the occasional question about X … then your proposal should be closed as a duplicate on Area 51, which has a close reason precisely for this purpose! Area 51 was always envisioned as a tool for broadening our scope — for creating new sites serving new topics and answering questions that were previously considered off-topic on our existing sites. Area 51 was never intended as a tool for creating overlapping sub-sites that would cannibalize users from our existing sites! We thought we made this clear in the Area 51 FAQ, but apparently we didn’t. That said, it is completely and utterly our fault that we didn’t stay on top of these overlapping proposals and close them as duplicates in a more timely fashion. It was unfair of us to let these proposals advance so far, when it is clear that they — however well intentioned — did not meet the spirit or letter of what Area 51 is for. That is, as the kids say, “not cool.” And I would like to apologize on behalf of Stack Overflow Internet Services for failing the community in this way. Yes, this does mean that these proposals — and, for that matter, any other proposals that would tend to drain audience away from existing Stack Exchange 2.0 sites — will be closed as duplicates. In the future, so we don’t make these mistakes again, we plan to institute the following changes: be much more diligent about scrutinizing proposals as they move to commitment phase, not months later when they’re at 80% commitment. try to build better vote-based tools that can assist proposals in merging together under broader topics so they have a stronger chance of surviving and defining their own unique topic space. strengthen the tag page support in our engine so sub-communities can prosper in a set of tags without feeling that they absolutely must “break out” into their own site. We’re sorry. But we’re only human, and we make mistakes too. Area 51 is something we love and are very excited about, but it’s also new to us — and we’re learning about the process as we go along. We hope you’ll stick with it (and us) to see where it goes."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/10/01/our-first-area-51-site-goes-public/","date":"2010-09-30T22:00:00.000Z","tags":["Company"],"title":"Our First Area 51 Site Goes Public","text":"Our very first Area 51 site proposal to make it all the way through … Initial Proposal (May 25th) Definition phase (May 25th) Commitment phase (June 14th) Private beta phase (June 30th) Public beta phase (July 7th) … has just arrived — as a real live non-beta public site! webapps.stackexchange.com — Q&A; for power users of web applications (briefly known as nothingtoinstall.com) Thanks to our pro-tem moderators who helped expertly guide the site through the full public beta period: This is our first site to make it all the way through the Area 51 process that makes up Stack Exchange 2.0 from beginning to end, so we’re still working out some of the small details. We’re incredibly proud of what the community has accomplished in the quality of the web applications Q&A; on http://webapps.stackexchange.com! We encourage you to check it out, participate, share great questions with others — and generally let us know what you think!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/29/good-subjective-bad-subjective/","date":"2010-09-28T22:00:00.000Z","tags":["Community"],"title":"Good Subjective, Bad Subjective","text":"Stack Exchange is about questions with objective, factual answers. We’ve been crystal clear about this for as long as I can remember, even back to the earliest, pre-beta days of Stack Overflow. It’s right there in the standard Stack Exchange FAQ: What kind of questions should I not ask here? Avoid asking questions that are subjective, argumentative, or require extended discussion. This is not a discussion board, this is a place for questions that can be answered! Thus, questions that are not answerable — discussions, debates, opinions — should be closed as subjective. It seems simple enough: Fact good; opinion and discussion bad. But why? Most forums and chat rooms have a scale problem. As in, they don’t. The more people that join the discussion, the more noise each of those connections bring. So the forums get progressively noisier and noisier, and suddenly one day … you stop learning. … eventually the experts (i.e. people who are teaching you stuff) get drowned out and you are left with an experience that looks more like the magazine rack at a grocery store than a book shelf at Harvard. — Robert Scoble Because we believe so deeply in learning, we are willing to go to great lengths to suppress the discussion, debate, and opinions that — while plenty entertaining — cause most forums to inevitably break down. Insisting on objectivity is fine for computing and mathematics. But once you get past the hard(ish) sciences, you veer towards the much softer social sciences. There are experts in these fields, but they are by definition, not exact. In fact, most academic fields don’t have objective answers. Topics like economics, engineering, the arts, literature, and social sciences don’t exactly have correct and incorrect answers. There is a growing list of proposals about increasingly subjective topics, and we believe many of them are going to make great Stack Exchange sites! That’s where the problem starts. We never claimed that subjective questions were horrible abominations that should never be asked. We simply choose to forego those subjective discussions, as there were dozens upon dozens of forums which already catered to them. But software and programming isn’t always a hard science, either. Once you get past the does this code compile or not questions, you’re dealing with issues of best practices, experiences, and behaviors. Perhaps because our communities have become so accustomed to getting quick, accurate, and timely answers, they feel that even a subjective Stack Overflow is better than the alternatives. So much so, that our fellow programmers created a sister site specifically for their pent up subjective questions. Take one heaping pile of subjective questions, bottle it up for over two years and… kablooey! The programmers.stackexchange.com site exploded overnight, hosting some of the best (and worst) questions on the Stack Exchange network. Now turn the page. Moms4mom was an early Stack Exchange 1.0 case study in subjectivity. The owners knew from the outset that the topic of parenting was inherently and deeply subjective, a fundamentally bad fit to our engine. Parenting is one of the most subjective subjects I can imagine; every child is different, every parent is different, and whole cultures are wildly different in how they approach child rearing. After all, who can say for certain what order one should watch the Star Wars (saga) with your children for the first time? The folks at Moms4mom owned up to the subjective issue and came up with a set of principles to create useful subjective discussions on parenting: the Back It Up! Principle. Back It Up! means that your answers must be based on either: Something that happened to you personally Something you can back up with a reference They talk about how “opinion, by itself, is noise.” They’re not saying that subjective opinions are to be avoided; they’re attempting to mold and shape their inherently subjective Q&A; into something constructive, informative and helpful. As it turns out, there is an entire field of subjective “expertise” that has the hallmarks of making great Q&A sites: If we can avoid conversations that are — and this is the really tricky part — too subjective, we can maintain the ideals of great Q&A in the face of completely subjective topics. We can avoid falling into the predictable destructive patterns of random discussion, debate, and opinion that turn a site from a learning experience into a glorified cheap-thrills gossip rag. I can generally tell when a question is unreasonably subjective. I can’t always describe it, but I know it when I see it. Unfortunately, that’s not good enough to base a policy on. I shall not today attempt further to define [hard-core pornography]; and perhaps I could never succeed in intelligibly doing so. But I know it when I see it… — Potter Stewart of the Supreme Court of the United States Even the definition of what is too subjective on Stack Exchange is somewhat … subjective. But we can provide a set of guidelines that help you determine what a good subjective question is. It’s akin to determining what is fair use, and what is not — a multi-factor test where you attempt to fit a few guidelines to the specifics of your situation. Guidelines for Great Subjective Questions Great subjective questions inspire answers that explain “why” and “how”. The best subjective questions invite explanation. If you’re asking for a product recommendation of some kind, you want answers to contain detailed information about the features and how they can be used, and why you might want to choose one over the other. “How?” and “Why?” has more lasting value than a bunch of product-feature bullet points or a giant enumerated list, no matter how extensive. In contrast, the bad subjective questions let answerers get away with hit-and-run answers that maybe provide a name and a link — but fail to provide any sort of adequate explanation, context, or background. Great subjective questions tend to have long, not short, answers. The best subjective questions inspire your peers to share their actual experiences, not just post a mindless one-liner or cartoon in hopes of being rewarded with upvotes for being merely “first.” Sharing an experience takes at least one paragraph; ideally several paragraphs. If I’m asking about how to bake cookies, don’t give me a list of grocery items: milk. butter. vanilla. eggs. There is virtually nothing I can learn from a short, static list of grocery items that make up a recipe. Instead, tell me what happened the last time you made cookies from that recipe! Share your detailed experiences, so that we all might learn from them. Great subjective questions have a constructive, fair, and impartial tone. The best subjective questions avoid the all too seductive route of ranting and flamebait. They set the right tone of constructive learning and collaboration from the very outset, by emphasizing that we’re all here to learn from each other, even if we have different viewpoints or beliefs about the right way to handle what are inherently subjective decisions. We’re not here to fight each other; that’s an enormous waste of everyone’s time. There is always more than one right way. Great subjective questions invite sharing experiences over opinions. Certainly experiences inform opinions, but the best subjective questions unabashedly and unashamedly prioritize sharing actual experiences over random opinions. It’s more useful to share with us what you’ve done than what you think. Everyone has an opinion. It takes zero effort or imagination to have an opinion about anything and everything. But people who have done things, real things in the world, and have the scars and arrows in their back to show for it — now that’s worth sharing. You should be uniquely qualified to have your opinion based on the specific experiences you had. And you should share those experiences, and more specifically what you learned from your experiences, with us! Great subjective questions insist that opinion be backed up with facts and references. Opinion isn’t all bad, so long as it’s backed up with something other than “because I’m an expert”, or “because I said so”, or “just because”. Use your specific experiences to back up your opinions, as above, or point to some research you’ve done on the web or elsewhere that provides evidence to support your claims. We like you. We want to believe you. But like Wikipedia itself, [citation needed]. And good subjective questions make this clear from the outset: back it up! Great subjective questions are more than just mindless social fun. The best subjective questions avoid the social pitfalls of “Getting To Know You” (GTKY) and mindless entertainment. Sometimes people just want to poll a community for ideas that might help solve a problem (best book, best approach). These can be okay when there is actual knowledge in the collection of answers. What isn’t okay are the social bonding questions which are designed just to impress others, such as “What is the coolest/stupidest/weirdest/funniest thing you saw/did/tasted today?”, or questions where the site’s actual topic is tacked on as a token afterthought, such as “Favorite food for programmers.” If you removed the “for programmers” part of this question, is it really unique to our profession? Could an average member of our community reasonably be expected to learn something that makes them better at their job from this question? If not, then it’s a bad subjective question. So, there you have it: the difference between a good subjective question and a bad subjective question — expressed as six simple guidelines. If you’re wondering if a particular subjective question is worthy, wonder no longer. Apply the six subjective question guidelines and see how it scores. If the score is low, close it. If the score is high, vote it up. You can expect to see these guidelines enforced on programmers.stackexchange.com over the next week or so, and made policy network-wide, wherever subjectivity is part of the site topic itself. If you think this is all too complicated, well, I guess that’s subjective. But, as Robert Scoble correctly pointed out, this is the price of allowing some subjectivity without letting it undermine and destroy the very learning aspect of our communities that we believe makes them worthwhile in the first place. As for me, I say subjective questions are dead. Long live subjective questions!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/28/server-fault-hiring-from-the-community-agai/","date":"2010-09-27T22:00:00.000Z","tags":["Company"],"title":"Server Fault: Hiring From The Community Again","text":"In yet another blatant and egregious example of hiring from the community, we’ve just added a Server Fault user to our team — George Beech aka Zypher. Welcome to our two-man sysadmin team of ninjas, George! George will be working out of our NYC world headquarters. Read more about his and Kyle’s continuing plans for world server domination on the Server Fault Blog!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/28/factionalism-site-or-tag/","date":"2010-09-27T22:00:00.000Z","tags":["Community"],"title":"Factionalism: Site or Tag?","text":"Let’s say I told you we were going to create a programming website that merged all the C#, Java, Ruby, Python, and PHP programmers, so they could all ask their questions together — and simply tag those questions with the appropriate language. You’d probably get a response like this one: I disagree with merging. I think [Java] should be a niche site that will attract the relatively expert crowd that doesn’t usually care (or not as much) about other types of developer language questions. Yes, I’m talking specifically about myself, but also know about several others I know in the community who can speak for themselves if they wish. By not merging it, we are giving a good one place to find answers only about [Java], with the ability to have a very engaged and focused expert crowd ready to answer, and benefiting from specialized “rank” in this specific field. It might sound superficial, but I think we’re more likely to see the likes of [Java Expert #1] and [Java Expert #2] in a separate, unmerged [Java] site than in a broader developer site. By this logic, Stack Overflow itself should not exist! We should have created a separate site just for the Java faction, and yet another for the PHP faction, and yet another for the C# faction … Just replace the word Java, above, with Developer Testing, and this is exactly the situation we’re facing right now. Joel and I are deeply opposed to letting the community split itself into factions in this way. We would rather have a few large sites on reasonably broad topics that use tags to differentiate subtopics, instead of two dozen tiny ultra-niche subsites that only a fraction of people interested in that broader topic will ever see. While the Stack Overflow community has historically come down quite hard — honestly a lot harder than either Joel or I originally intended — on the side of the non-subjective question, we believe that programmers.stackexchange.com site is the place where the more subjective “there’s no right answer, but let me share my professional experiences with you” questions can live and prosper. Let’s consider the sample questions from the Developer Testing site proposal, and where those questions might live. How do I unit test threaded code? Non-subjective; already exists and has 70 upvotes under the [multithreading] and [unit-testing] tags How do I mock a database? Non-subjective; already exists and has 7 upvotes under the [unit-testing] and [mocking] tags How do I test private methods? Non-subjective; already exists and has 60 upvotes under the [unit-testing] tag. is it OK to have multiple asserts in a single unit test? Subjective; fits on programmers.stackexchange.com under the [unit-testing] tag How to start unit testing for a large scale application with no unit testing support at all? Subjective; fits on programmers.stackexchange.com under the [unit-testing] tag Immediately we have a huge problem: every question in this proposal is a good fit on an existing site! Now compare that with, say, questions about gmail on Super User, or questions about search engine optimization on Stack Overflow — neither of which had a good home until webapps and webmasters were launched. In other words, the whole point of launching new sites is to give interesting questions that currently have no place to go a decent home. I’m sensitive to the subjective versus non-subjective divide. There are entire classes of questions that are totally valid concerns for professional programmers which can no longer survive on Stack Overflow in practice. That’s why I supported the programmers.stackexchange.com proposal in the first place; good-but-subjective questions were being closed because they had no home. They needed a home. Now that programmers.stackexchange.com has been created … they have a home. None of the example questions in the Developer Testing proposal lacks a home. Therefore, acquiescing to the factionalism demanded by some elements of the community and creating this site would by definition create a “duplicate” as defined by Area 51: duplicate This proposal would tend to drain audience from another Stack Exchange site. If you asked the Java factions and the C# factions if they needed separate sites, of course they would tell you that they absolutely must have their own sites. But the proof is in the pudding: the Java factions and the C# factions live side-by-side, right now, today, in Stack Overflow tags and learn a ton from each other. And so can the Developer Testing folks. So my advice to you is this: join or die."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/28/new-global-inbox/","date":"2010-09-27T22:00:00.000Z","tags":["Company"],"title":"New Global Inbox","text":"One unwanted side effect of launching so many awesome new Stack Exchange network sites is that the more you participated in, the harder it became to keep track of all your questions, answers, and comments across every site you participated on. That’s kind of a bummer. Well, I’m pleased to announce we’ve added a new global inbox to every site in our network. On the genuinetm Stack Exchange logo in the upper left hand corner, the one you already know and love — you may see a new, small red numeric indicator light up: That small red number tells you how many new replies you have across the entire Stack Exchange network of websites. And by replies, I mean: New answers to your questions New comments on your posts @replies to you in comments Click the number to go directly to the global inbox. At any given time, the inbox will contain a list of the last 30 global messages for your account, along with: The site icon, so you know which site the message is from The title of the question the message is associated with A preview excerpt of the first few characters of the message The relative age of the message (in a tooltip, so hover your mouse to see it) Clicking through on any global inbox item will of course take you directly to the specific question on the target site. Hopefully the new global inbox will make it easier to keep track of your questions, answers, and comments across the entire network! (and yes, we’re looking at ways for chat to discreetly insert @reply mentions in the global inbox as well.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/23/flair-now-even-flairier/","date":"2010-09-22T22:00:00.000Z","tags":["Community"],"title":"Flair: Now Even Flairier","text":"When we introduced user flair back in May 2009, we provided two ways to embed flair, either with an iframe, or JavaScript. That may have been fine for a programming website like Stack Overflow, but it wasn’t so hot for … normal people. That is, people who do not live and breathe markup like us programmers. Embedding an <iframe> tag or <script> tag is complicated. It implies you run your own website, or otherwise have extremely low-level access to (and understanding of) the markup. So, we’ve bitten the bullet and rebuilt flair as simple, works every-darn-where images! To produce this new, simpler image flair, modify your user page URL from http://superuser.com/users/2054/joey to http://superuser.com/users/flair/2054.png You don’t need to remember that, either — just visit /users/flair on any site in our network for copy n’ pasteable code, or click on the Got Flair? link on your user page. And, yes, flair works the same on every Stack Exchange network site: And if you’re an avid user, active on multiple sites, we have an extra-special surprise for you — combined Stack Exchange flair! Just copy and paste the convenient (and simple!) HTML markup provided via the flair tab on your user page. This has been a long time coming. In the meantime, the community has built some pretty cool flair image alternatives that are worth checking out, too: StackFlair StackImage ImageFlair Image based flair And remember … Now, it’s up to you whether or not you want to just do the bare minimum. Brian, for example, has 37 pieces of flair. And a terrific smile. … so go forth and share your flair!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/17/merging-season/","date":"2010-09-16T22:00:00.000Z","tags":["Area51"],"title":"Merging Season","text":"Area 51 is filling up with thousands of ideas for new Stack Exchange sites, and a pretty clear pattern has started to worry us: too many ridiculously niche proposals, overlapping proposals, and proposals that are already covered by an existing site. Do we really need a site for each individual content management system? The Stack Overflow experience taught us one thing pretty unequivocally: bigger is better. We didn’t make Java Overflow and .NET Overflow and Ruby Overflow, we made one big site for all programmers and told them to use tags and, lo and behold, it worked. Why? Critical Mass. A wider site is more likely to attract enough people that questions actually stand a decent chance of getting answered. Rich, interesting information. A broad site is more likely to attract people who want to learn something a little bit outside of the problem that they’re having right this minute. Easier to remember and share. Stack Overflow grew to be successful because programmers told each other, “try asking on Stack Overflow.” If we had made 2500 different sites for every possible niche programming technology, nobody could have known about all of them. So. We should just make one or two gigantic sites, right? OK, done. Well, not quite. There were a few counter-examples which worried us. Yahoo! Answers. Monumentally popular, enormous traffic, and containing absolutely no useful information, Yahoo! Answers is actually more of a teenage chat room than a place to get real answers. Our own, failed Gadgets site. Covered a huge number of topics, but nobody cared enough about any of them. Only 80% of questions got answered because the few hundred regular visitors just didn’t know the answers to questions about every obscure universal remote. Our own, failed attempt to bring the Unix and Ubuntu sites together. We were essentially faced with a community with very strong emotional reasons they wanted to keep their site separate, and we caved and let them split. So, what’s the right size domain for a Stack Exchange site? Imagine that one day, due to a monumental lapse in judgement, you find yourself thrown into a Turkish prison. You’re an American, you don’t speak a word of Turkish, nothing makes any sense to you, but there’s this Swedish guy there in the prison, so the two of you become instant friends because you’re the only non-Turks in the place, he speaks pretty good English, and you really feel like you have something significant in common. When you get home, though, you marry your high-school sweetheart, and settle down in the suburbs, and you can barely stand those icky people who send their brats to the filthy Newton South High School instead of Newton North. Hooligans! (Jeff wants me to put pictures in my blog posts. This is my dog Taco. Taco has a bucket!) Communities consist of concentric circles. You share more with people in the inner circle than you do with people in the outer circles, but if you were in a strange place, you’d seek out people even from the larger circles. If you’re building a community (or a Stack Exchange site), it’s not immediately obvious which level is going to work: Outdoors enthusiasts (most broad) Snowboarders, Skiers, and Mountain Bikers Snowboarders Snowboarders in Wanaka, New Zealand Snowboarders at the Treble Cone resort in Wanaka, New Zealand The SUMMIT NZ Freeheel Challenge, Treble Cone, Wanaka, New Zealand, on September 25th, 2010 (most specific) We originally thought that this problem would magically sort itself out through the Area 51 process, but lo and behold, we often have several proposals at all levels of the scale: Music – 6 followers Musical Practice and Performance – 88 followers Guitars – 99 followers Classical Guitar – 3 followers Andrés Segovia’s Private, One-Person Stack Exchange – not created because he is deceased The democratic process seems to be teetering between wanting to create a site for every instrument vs. bunching all the practicing musicians together. The stakes are high–we don’t want another Unix/Ubuntu incident. So we have to figure out some rules that will help us create sites that are the right size. One of Clay Shirky’s laws is that people working on social software have a tendency to ignore everything that’s come before and reinvent the wheel, badly, again and again: Now, when I say these are three things you have to accept, I mean you have to accept them. Because if you don’t accept them upfront, they’ll happen to you anyway. And then you’ll end up writing one of those documents that says “Oh, we launched this and we tried it, and then the users came along and did all these weird things. And now we’re documenting it so future ages won’t make this mistake.” Even though you didn’t read the thing that was written in 1978. Surely someone has had this problem before, right? The best example I could think of was academic departments. For some reason, the major world universities seem to have a general idea of what the right scope is for an academic department. There’s almost always just one anthropology department, even though physical anthropology and cultural anthropology are so completely disjoint that “the two fields are largely autonomous, having their own relations with disciplines outside anthropology; and it is unlikely that any researchers today work simultaneously in the fields of physical and cultural anthropology” [Encyclopædia Britannica]. We have our own academic examples of that: Math Overflow has been hugely successful despite the fact that research mathematicians working in one corner of the field may have absolutely nothing to talk about with people in other corners of the field. So: the right size might be somewhere around the size of a university department. Somehow, the cultural anthropologists don’t mind sharing a building with the physical anthropologists, and when they both find themselves at the Yale-Harvard football game, you can bet that they’ll sit together and find something anthropological to talk about. Similarly, at Stack Overflow, the Java Entity Bean programmers at insurance companies don’t mind all the iPhone developers asking Objective C questions about the horrible, horrible game they’re working on. Heck, they might become iPhone developers one day. And they both share the humiliation of not being able to fix their uncle’s virus-infested Windows XP machine when they’re home for Thanksgiving. In other words, you can be surprisingly inclusive and broad and still have a successful site, and people will be perfectly happy: Stack Overflow proves that. You do have to be careful not to try to create a site that’s so broad that you don’t have anyone around who can answer all the questions (the “Gadgets problem”), but as long as you have coverage and questions get answered well, the broader, the better. We need some rules! Here’s the best we could come up with for deciding whether site X should be subsumed by site Y: Almost all X questions are on-topic for site Y If Y already exists, it already has a tag for X, and nobody is complaining You’re not creating such a big group that you don’t have enough experts to answer all possible questions There’s a high probability that users of site Y would enjoy seeing the occasional question about X So. Should Guitars just be a part of Musical Practice and Performance? Yes… I think all four conditions are met. Should everything be rolled up into a mega Music site? In principle, we could, but I think that you would end up with people asking questions about obscure Grateful Dead bootleg tapes that we just don’t have a large enough community to answer, so condition 3 does not apply. How about a big generic “Entertainment” site? Here condition 3 and 4 definitely are not met. Next steps Right now, there are a ton of active proposals on Site 51 which are, in our opinion, too small to justify their own Stack Exchange sites. Ignoring proposals with 30 or fewer followers, there’s still a long list of proposals that could reasonably be included on Stack Overflow, possibly including: Compiler Design Artificial Intelligence Machine Learning Android Developers Databases Webservice APIs iPhone Development Operating Systems Development Regex Genexus JetBrains ReSharper Natural Language Processing and Computational Linguistics There’s an even longer list of things that really belong on the new Programmers Stack Exchange, which appears to be degrading into fairly stupid water-cooler nonsense, and could benefit from an infusion of more meaty subjects, like these proposals: Software Engineering Developer Testing Scrum Selenium Visual Studio ALM Healthcare IT Practical Algorithms and Data Structures Software Law Software QA Vi, Vim, Vixens Code Golf & Programming Puzzles Software Design Patterns Software Architecture Numerical Modeling and Simulation Cognitive Science Emacs Freelance Developers That said, we’re firmly committed to the ideal that the community itself has to make the ultimate decisions, so in the coming weeks, we’ll be building mechanisms that make it possible to discuss and hash out possible proposal mergers. In any case, there’s a huge amount of value to getting these small factions together so they can join forces in setting up large, robust sites that genuinely make the Internet a better place."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/16/super-user-chat-now-available/","date":"2010-09-15T22:00:00.000Z","tags":["Community"],"title":"Super User Chat Now Available","text":"As promised, we are slowly rolling out the third place across our network… even for ewoks! In addition to chat.meta.stackoverflow and chat.serverfault we just brought up chat.superuser.com: It’s only appropriate that, after adding per-site metas, we would also add chat to complete three out of four sites in the original “trilogy”. superuser.com Q&A; for computer enthusiasts and power users meta.superuser.com community organization and discussion about the site itself chat.superuser.com real time chat “third place” for regulars Although chat.superuser.com is technically another public beta, we’re still on track for releasing chat network-wide in a few weeks. However, stackoverflow.com will be the last site to get chat because its immense volume presents the hardest challenge. We’re hoping to get good feedback from chat.superuser and chat.serverfault before proceeding onward, so please — jump in and tell us what you think!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/14/pruning-season/","date":"2010-09-13T22:00:00.000Z","tags":["Area51"],"title":"Pruning season","text":"Soon, we’re going to close down one of the 24 Stack Exchange sites that were created over the last two months. Sadly, the Gadgets Stack Exchange will go dark soon. A lot of the questions on that site were about Apple gear and Android gear; those questions can be migrated to the (beta) Apple site, or the (private beta) Android site, as appropriate. Gadgets will be closed and will no longer be accessible, except for our usual creative commons data dumps where an archive will be made available. This isn’t an arbitrary decision; we did a ton of thinking and questioning before we decided that the gadget site just didn’t have enough momentum to get out of beta. Q: Why do sites even need to get shut down? Are we running out of bits on the Internet? First of all, because it’s what we said we would do in the original Stack Exchange 2.0 announcement: Why is the plan to close down sites that don’t get enough traffic? This harks back to our corporate goal to “make the Internet a better place to get expert answers to your questions.” A ghost town, without traffic, does not get people answers, but it does draw a few people away from other sites that might do so. We do not believe that the Internet benefits from putting up placeholder sites with negligible traffic that do not attract high quality communities. And we want the Stack Exchange brand to be synonymous with great community Q&A; sites, even if we don’t necessarily cover every topic under the sun. A site that’s not really functioning is a trap for the unwary. The few users who do, accidentally, land there are lured into asking questions which will not be answered or will not be answered well. Even if are a few people around, if they don’t have enough collective expertise to give good answers, the site is a net negative for human knowledge. Eventually, a site that doesn’t have critical mass becomes a spam attractor and a public nuisance, and we don’t want to be behind that. We’d rather close the site and channel users to other sites which are working. Q: What criteria are used to decide if a Stack Exchange has “critical mass”? We’re looking at lots and lots of metrics, but the most important ones are people and questions. People: Do we have a lot of people visiting the site? Are a lot of people signing up? How many people are answering questions? How many page views does the site generate? Questions: Are questions getting answered? Are they answered well? Are they answered quickly? Are a lot of answers accepted, indicating that the person who asked them was satisfied? Are a lot of answers upvoted, indicating that some third party thought they were quality answers? Our philosophy is that if a site is getting a lot of traffic, that’s all we need to know… it must be doing something right. If it’s not getting a lot of traffic, it may still be valuable, as long as the few people who go there are getting great answers to their questions (which, thanks to our architecture, is really easy to measure). So, essentially, a site needs either traffic or good answers, but if it has neither, we don’t think it will work. Q: Is there any editorial judgment involved? Before we pulled the trigger, we thought about why the gadgets site wasn’t working nearly as well as its 23 siblings. Looking at the questions on the site, it’s clear that there are too many kinds of gadgets, and our audience is too small to be able to answer detailed questions about all of them. Think of it this way. There are probably tens of thousands of different kinds of cell phones, but only about 50 people who answer questions on the Gadgets site. What are the chances that one of those 50 actually knows how to automatically record voice calls on the Nokia Series 40? What are the chances that one of the 50 even has a Nokia Series 40? A site needs to have a wide enough swath of active experts to cover the entire domain it purports to cover. Stack Overflow itself has a huge domain, but a huge number of highly active experts, so questions get pounced on, no matter how esoteric. Many of the smaller Stack Exchanges only have a few experts but the domain is narrow enough that they can really answer just about anything. But having a wide domain and a shallow pool of experts results in not enough peanut butter on the sandwich. That’s what we think happened to Gadgets, and thats why we think that narrower sites like Apple and Android are likely to do better, even if it means that we don’t have a place to discuss garage door openers. To answer the question: in principle, the only thing we’re looking at in deciding whether to close a site is metrics, but we’re also using our brains to see if there’s something behind those metrics before we pull the trigger. Q: What about the other 23 sites? Are they likely to get out of beta? The other sites are all currently producing very high quality answers very reliably. As of now (and of course this might change), there are no other sites that are even close to getting cut."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/11/global-network-auto-login/","date":"2010-09-10T22:00:00.000Z","tags":["Community"],"title":"Global Network Auto-Login","text":"We now support automatically logging in to any site in the Stack Exchange network. By that I mean, as long as … You have recently logged in to any Stack Exchange network site You hold an existing account on the target site you’re navigating to You are using the same OpenID credentials … the site you’re navigating to will automagically log you in! You’ll see a notification bar at the top to let you know when you’ve automatically logged into a site. (We just forced every registered account in the entire network to log off and log back in to ensure that everyone has logged in under this new regime — so everyone should meet criteria #1 by definition.) Global logins are tricky for us because we need cross-domain identity. That is, each of the following sites should, somehow, just magically know who you are: stackoverflow.com serverfault.com superuser.com stackexchange.com (not to mention that all current Stack Exchange 2.0 sites will eventually have custom domain names of their own choosing.) While subdomains such as chat.serverfault and meta.serverfault are easy if you store your cookies the right way, getting access to cookies at different domains is, to put it charitably, a friggin’ nightmare. The whole third party cookie story — that is, reading or writing cookies stored at a domain other than the one you’re currently on — is irreversibly screwed up, and getting worse with every new browser release, thanks mostly to unscrupulous ad networks. So, we gave up on using third-party cookies. Instead, we use HTML 5 Local Storage for global authentication, at our centralized domain stackauth.com. Now, this does require a modern browser, though not unreasonably so: IE8+, Chrome, Safari, FireFox 3.6+, and Opera 10.61+ are all supported. Kevin has labored mightily to get all this working, and we’ve been silently running beta revisions of global auth across the network for the last two or three weeks as we work out the kinks and test. We now think it’s (mostly) ready for prime time. As with all things technically complex, there are some caveats. Global auth should work fine in the typical case — and even if global auth is completely down, it can never prevent you from logging into a site the traditional way. But please be advised that we may not be able to automatically log in you in, if … You’ve been to the target site recently without a global auth session (click the “login” link at the top of every page to force it) You’re using some sort of anonymizer that interferes with HTTP Referrer You aren’t using the same OpenId across all sites You’re visiting a per-site meta without first logging into the parent (child metas don’t use global auth; they rely on identity coming from the parent site.) (And if you’re looking for excruciating technical detail on how this all works, Kevin has documented that here on meta.) If you have issues with global auth and need to troubleshoot, I suggest starting by forcing a global logout — you can do this by clicking “log out”, then clicking the big “log out everywhere” button. Bear in mind that you must hold accounts on the sites — global authentication will not automatically create accounts for you (with the lone exception of http://stackexchange.com itself). That said, as long as you’re logged into one account in our network, you should now be automatically logged into all your accounts. Do you love network security? If so, there is plenty of work to be found. Check out the latest opportunities in our network security job listings."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/10/server-fault-chat-now-available/","date":"2010-09-09T22:00:00.000Z","tags":["Company"],"title":"Server Fault Chat Now Available","text":"As promised, we are slowly rolling out the third place across our network. We started with chat.meta.stackoverflow, and as previously announced on the Server Fault blog, we now have chat.serverfault.com. You may remember we rolled out per-site metas across the entire Stack Exchange network, as well as for Server Fault and Super User, back in July. So from our perspective, we’re completing the experience: serverfault.com Q&A; for professional system administrators meta.serverfault.com community organization and discussion about the site itself chat.serverfault.com real time chat “third place” for regulars chat.serverfault.com is still a public beta, but we’re rapidly closing in on release status. I expect we’ll begin a fairly aggressive rollout of chat across all sites within 4 weeks or so — though do be advised that stackoverflow.com will be the last site to get it because of its immense volume."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/09/announcer-booster-and-publicist-badges/","date":"2010-09-08T22:00:00.000Z","tags":["Community"],"title":"Announcer, Booster, and Publicist Badges","text":"We just rolled out three new badges to encourage sharing worthy questions: Shared a link to a question that was visited by 25 unique IP addresses in 3 days Shared a link to a question that was visited by 300 unique IP addresses in 4 days Shared a link to a question that was visited by 1,000 unique IP addresses in 5 days Each badge can be earned only once, and each must be earned on a different question. Also, the tracked IPs must originate from outside our existing network. So how do you share questions? I mentioned in an earlier post that we support a shorter URL form specifically for sharing: http://diy.stackexchange.com/q/970/123 You can access the shorter URL form using the twitter and facebook sharing icons on public beta sites, or by right-clicking and copying the link conveniently provided under each question, on any site: To encourage this sort of sharing, there’s a certain tiny percent chance a little reminder will appear on recent hot questions, or when upvoting questions that have reached a certain vote threshold: Don’t worry — these reminders are very infrequent by design, and limited to public betas only. They also go away forever if you hold one of the badges. The goal here is to give everyone convenient and fun tools to share the awesomeness. As we said in A Recipe to Promote your Site: The absolute best and easiest way to promote your site is to simply share links to great questions or answers. The hallmark, the cornerstone, the fundamental bedrock of Stack Exchange is producing Q&A; that we’re proud of, Q&A; that’s worthy of sharing with others. I’m incredibly proud of the quality of Q&A; being generated on Stack Exchange sites — it’s a testament to the skill of our community, which IMNSHO is second to none on the intarwebs. I love building Q&A; that makes the internet better alongside you guys. So when you see a particularly brilliant question or answer — why not share it and let everyone else know just how great our communities are? And remember, that first upvote is always free …"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/04/customizing-stackexchange-com/","date":"2010-09-03T22:00:00.000Z","tags":["Community"],"title":"Customizing stackexchange.com","text":"Remember our shiny new stackexchange.com network hub? Sure you do, it’s right there in the upper left hand corner of every page. Indeed, that’s how you know you’re on a gen-u-winetm Stack Exchange network website. This hub exists for a few reasons: To aggregate the most interesting questions right now across the entire network As a network directory, with statistics and rankings It offers per-site user reputation leagues And, in a very broad sense, it’s there to promote camaraderie and cross-pollination of the many disparate Q&A; communities across the network — sites created through the open, democratic community process at Area 51. (How many do we have now? 24? 26? I’ve actually lost count!) We now support a form of global authentication across the entire network, so when you visit stackexchange.com, as long as you’ve recently logged in to any site in our network, you should get automatically logged in, like so: Automatic logins are necessary to support our most requested stackexchange.com feature: customization! Largely through Tag Filters. Also, we now directly link to the reputation leagues from the /users page on each individual site, so it’s a bit more discoverable. And we finally provide type-to-search so you can actually find yourself (or your friends) in any given site reputation league: You can also permalink directly to any user in any league. Simply mouse over the user and the link will appear, like so: http://stackexchange.com/leagues/11/year/cooking/2010-01-01/1259#1259 If you want to share how well you’re doing (or another user is doing), this link will always direct people to the correct page and location in the league for that specific user. Also, we’ve added a few more stats to the reputation league sidebar. First, we highlight the best performing new users in the specified league interval. Site moderators, take note: new users who find your community and generate significant reputation from their peers are the lifeblood of any fledgling Q&A; community, and should be treated as such. And if you don’t have any new users entering your community and producing a modicum of reputation… well, that’s something to be worried about. We also show reputation spectrums for the specified league interval. This is an indication of how well the site’s overall reputation economy is doing, and indirectly, how much voting and activity is going on. It’s instructive to compare the numbers generated from stackoverflow.com here to the other sites, just so you can see the big city / small city / new town economy dynamics at work. In particular, one of the key numbers here is how many editors (2k rep) and closers (3k rep) you have. We have a few more things planned for stackexchange.com, but these new features — plus the much needed customization support — are much closer to the vision we had for a network hub that’s a useful destination. Check it out, enjoy, and as always — we welcome your feedback!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/02/fork-it/","date":"2010-09-01T22:00:00.000Z","tags":["Company"],"title":"Fork it!","text":"First, some background. I grew up in Albuquerque, New Mexico… OK, wait a minute, you don’t need that much background. In the beginning there was Stack Overflow. When we set up Stack Overflow, we knew people would use it to ask questions about lots and lots of different programming topics. Instead of the traditional approach, where you have a thousand different groups and sub-groups on every topic imaginable (like Usenet (comp.lang.vb.syntax.parens.unmatched, anyone?), the Stack Overflow approach was to use more free-form tags. Theoretically, tags would let you ask a question that happened to be about, say, Windows and C# without having to decide which group to put it in. And my hope was that tags would eliminate the endless meta-discussions by dewey-decimal-mavens about whether your question was more appropriate here or there. To be honest my hope was that the tags would keep meta-conversation to a minimum. Instead of arguing about whether Bourne Shell programming is really programming, the Obsessive Taxonimists (alt.taxonomy.obsessive.judean.people’s-front.popular) could just tag the question “bourne-shell” and leave the rest of us to ask and answer questions happily. It worked, kinda. Stack Overflow is a big ol’ heaping mess of beautiful programming questions that are simultaneously organized and unorganized, and we’re happy about the way that the site brings together programmers into one big happy community. That is, as long as they stay STRICTLY ON TOPIC. So. Where do Linux questions go? If it’s a Linux programming question, Stack Overflow is fine. If it’s not, we made Server Fault. But Server Fault was supposed to be for system administrators. So if you were a home user with a non-programming Linux question, you were supposed to ask on Super User. We now have Linux questions all over the place: 10,000 on Stack Overflow, 5800 on Server Fault, and 4800 on Super User. When we opened up the process to allow the community to design their own sites, we got a whole heap of proposals. The Ubuntu proposal had a lot of support. So did a more universalist Unix/Linux proposal. Both got created. On August 20th Jeff proposed merging the two sites, and put that up to a vote. The official results: MERGE? (Unix users) 89 Yes / 34 No (Ubuntu users) 72 Yes / 114 No Conclusion? There isn’t a majority on both sides to merge. The Unix world loves to take sides. I don’t have to blog about this; Freud already did, in 1930. He called it “the narcissism of minor differences”: It is clearly not easy for man to give up the satisfaction of this inclination to aggression. They do not feel comfortable without it. The advantage which a comparatively small cultural group offers of allowing this instinct an outlet in the form of hostility against intruders is not to be despised. It is always possible to bind together a considerable number of people in love, so long as there are other people left over to receive the manifestations of their aggressiveness. I once discussed the phenomenon that is precisely communities with adjoining territories, and related to each other in other ways as well, who are engaged in constant feuds and in ridiculing each other — like the Spaniards and Portuguese, for instance, the North Germans and South Germans, the English and Scotch, and so on. I gave this phenomenon the name of “the narcissism of minor differences”, a name which does not do much to explain it. We can now see that it is a convenient and relatively harmless satisfaction of the inclination to aggression, by means of which cohesion between the members of the community is made easier. —Civilization and its Discontents Monty Python might have put it better in this scene (YouTube) from The Life of Brian: BRIAN Are you the Judean People’s Front? REG F*** off. BRIAN What? REG Judean People’s Front. We’re the People’s Front of Judea. Judean People’s front, caw. FRANCIS Wankers. BRIAN Can I join your group? REG No. Piss off. BRIAN I didn’t want to sell this stuff. It’s only a job. I hate the Romans as much as anybody. PEOPLE’S FRONT OF JUDEA Sssh. Ssssh, sssh, sssh, ssssh JUDITH Are you sure? BRIAN Oh. Dead sure… I hate the Romans already. REG Listen. If you really wanted to join the PFJ, you’d have to really hate the Romans. BRIAN I do. REG Oh yeah? How much? BRIAN A lot! REG Right. You’re in. Listen. The only people we hate more than the Romans are the f***ing Judean People’s Front. PEOPLE’S FRONT OF JUDEA Yeah! JUDITH Splitters. FRANCIS And the Judean Popular People’s Front. PEOPLE’S FRONT OF JUDEA Oh yeah. Splitters. LORETTA And the People’s Front of Judea. PEOPLE’S FRONT OF JUDEA Splitters. LORETTA The People’s Front of Judea. Splitters. REG We’re the People’s Front of Judea. LORETTA Oh. I thought we were the Popular Front. REG People’s Front. FRANCIS Whatever happened to the Popular Front, Reg? REG He’s over there. So, Ubuntu, Linux, I get it, it’s clearly not the same thing. If you love Ubuntu, we have a site for you. If you love Linux and Unix, we have a site for you. (If you’re looking for work in Linux, we have a Linux Jobs site for you, too). A Stack Exchange can’t work without a community that loves a subject, and love is very… specific. Fighting human nature is hard: the factionalism and fork-happiness of the Unix world has been a hallmark of that community ever since BSD vs. System V, and Stack Exchange can no more bridge that gap than we can unite the Judean resistance."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/09/01/what-happens-when-you-reach-200k-reputation/","date":"2010-08-31T22:00:00.000Z","tags":["Background"],"title":"What Happens When You Reach 200k Reputation?","text":"Have you ever wondered what happens when you reach 200,000 reputation? Just ask Jon Skeet. Apparently, what happens is … you get a painting of unicorns, signed by us, dedicated to you. Estimated value? Priceless! Joel and I actually sat down with Mr. Skeet himself to record Stack Overflow podcast #72 during the London leg of DevDays — in the very Google offices pictured here. Although we sometimes joke that Stack Overflow was accidentally constructed as the ultimate Jon Skeet honeypot, I’d be remiss if I didn’t mention that Jon has a long history of answering people’s questions not just on Stack Overflow, but all over the internet and usenet. Apparently he enjoys learning alongside his peers and teaching others. Which, at least in my mind, is the whole point of Stack Overflow and the rest of the Stack Exchange network. So if we have somehow managed to build the sort of site that attracts people of Mr. Skeet’s caliber, then we have succeeded far beyond my wildest dreams. As you might have noticed, he’s become rather expert at it; Jon’s magnum opus on Writing the Perfect Question is well worth your time, and should be shared liberally with anyone seeking advice on how to ask better questions and get better answers, at the following tiny URL: http://tinyurl.com/stack-hints Now, lest you think Mr. Skeet’s enormous reputation score is unassailable, you might want to check out the Stack Overflow reputation leagues, where something very interesting is happening … As far as I’m concerned, when we’re learning from each other, everyone wins. So, our kudos to Mr. Skeet — and everyone else who so generously slices off bits of time in their day to ask and answer questions amongst their peers."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/29/stack-overflow-sponsors-haproxy/","date":"2010-08-28T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow Sponsors HAProxy","text":"As you can see from our network configuration, HAProxy is a much beloved part of our infrastructure. Willy Tarreau, the author, has been extremely responsive and helpful to us in the past. So when we reached a surprising dead-end in our quest to find a reverse proxy that could block HTTP clients using too much bandwidth, or too many connections, we were happy to approach Willy with the idea of sponsoring this feature in HAProxy. I’m pleased to announce that this new HAProxy feature we sponsored is now available to everyone as of August 26th! Geoff Dalgas and Jeff Atwood described to me in great details what they needed to do : perform request throttling per IP address, possibly based on various criteria, in order to limit risks of service abuse. That was very interesting, because that feature was being thought about for about 4 years without enough time to completely develop it … … The last words naturally go to the really cool guys at Stack Overflow. It’s very nice to see some sites and companies involve time and money and take risks to make Open Source products better. Of course they benefit from this work, but at no point during the whole development did they try to reduce the focus to their specific needs, quite the opposite. From the very first exchanges, their goal clearly was to make the product better, and that must be outlined. That’s now achieved and I really appreciate their involvement. Thank you guys! If you’d like more details, Kyle Brandt, our sysadmin extraordinaire, documented the details of how this new HTTP connection and bandwidth limiting feature works over at the Server Fault Blog. Kyle also worked extensively with Willy to make sure everything went smoothly, and it’s a credit to both of them, because it absolutely did. This big new feature worked more or less as advertised right out of the gate. We hope to be able to sponsor more open source projects in this manner. Our specific goal is to “make the internet a better place to get expert answers to your questions”, but I believe this is still secondary to our primary goal: make the internet better. And having a freely available open source reverse proxy that lets you run a site of our size (top 500 on the internet by some accounts) without being accidentally undermined by abusive or poorly written HTTP clients, is a win for not just us — but everyone!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/27/new-tag-info-pages/","date":"2010-08-26T22:00:00.000Z","tags":["Community"],"title":"New Tag Info Pages","text":"When we rolled out our tag synonym and tag wiki support, I belatedly realized that tags were, completely by accident, third-class citizens in our ecosystem. By that, I mean tags had no real page to themselves. Think about it — if someone asked you about the [java] tag on Stack Overflow, where would you send them? You can certainly link to all questions tagged Java, but there was no destination for the tag itself. Well, no longer. We’ve just rolled out much more comprehensive support for tag pages across the entire network. Clicking on a given tag … … will always take you to a list of questions with that tag, as it always has, but you’ll notice a new banner at the top of the page. This banner shows an excerpt of the tag wiki, as well as directly linking to.. the full wiki for this tag the list of faq questions for this tag statistics for this tag hot answers in this tag new answers in this tag synonyms for this tag The wiki, statistics, and synonyms aren’t new, but we are continuing to progressively enhance them. FAQ questions The more highly linked a question is — that is, it contains simple hyperlinks to or from another question on the site — the more strongly it is considered a “frequently asked question” for its tag. Bottom line, if you want questions to appear on the FAQ for that tag, link to them from other questions! Hot answers Answers are considered hot for a tag when they are top-voted, not community wiki, and of sufficient length. Note that you can specify a time period of a day, week, month, year, or all time; what was hot today may not be hot for this week or month. New answers It’s exactly what you might think — a simple chronological list of new answers provided within the tag, right now. (You’ll note that we have a newly found focus on answers. We’ve realized that we spent so much time surfacing great questions in our engine that we really weren’t giving great answers the publicity they often deserve. So we set out to fix that here!) If you’re up to a bit of gardening in the tag of your choice, now you have a great destination hub to do exactly that — in the tag pages. Getting to the tag pages is a bit more fiddly than I might like at the moment. We’re still honing the navigation, but you can always form the URL manually … http://stackoverflow.com/tags/xml http://stackoverflow.com/tags/xml/info http://stackoverflow.com/tags/xml/faq http://stackoverflow.com/tags/xml/stats http://stackoverflow.com/tags/xml/hot http://stackoverflow.com/tags/xml/new … or, just remember to click the links at the top of the page when browsing tagged questions."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/23/a-recipe-to-promote-your-site/","date":"2010-08-22T22:00:00.000Z","tags":["Community"],"title":"A Recipe to Promote your Site","text":"In The 7 Essential Meta Questions of Every Beta we covered what we believe to be the crucial steps in forming a viable Stack Exchange Q&A community. Today we’re going to offer some aggregated advice, both from us and our existing meta communities, on step 7 — How do we promote our site? Share Great Questions and Answers The absolute best and easiest way to promote your site is to simply share links to great questions or answers. The hallmark, the cornerstone, the fundamental bedrock of Stack Exchange is producing Q&A that we’re proud of, Q&A that’s worthy of sharing with others. At the risk of explaining the obvious, here’s how to obtain a link to a question: copy the URL in your browser’s address bar right click the question title itself, which is a link to the question, and select Copy. right click the “share” text just under the question, and select Copy. If you need a short URL, remember that we don’t require anything beyond the number ID of the question. So if you have: http://diy.stackexchange.com/questions/970/solar-panels-worth-it This can be shortened to: http://diy.stackexchange.com/questions/970 http://diy.stackexchange.com/q/970 A shortened URL can be copied from the “share” link underneath each question: As you can see, clicking “share” also gives you the option to share on Google+, Facebook, or Twitter. Think Small, Get Specific But, how do you go above and beyond simply sharing links to great questions? Get specific! Rather than asking giant, hard to answer big picture questions like “How do we promote our site?”, start by asking bite-size, specific questions that are easier to answer — more along the lines of: “What are the three biggest webmaster conferences we can sponsor?” “Can the GIS community support a ‘Dev Days’ like Stack Overflow?” “What are the top 10 photography podcasts that might pick up on our site?” And don’t stop there. When you get your first round of answers, use those answers to get even more specific. “Does anybody know photographer Scott Bourne (http://photofocus.com/) to ask about talking to us on his podcast or to his Twitter followers?” This takes a bit more coordination and discipline than asking a one-shot question and expecting a final solution to simply emerge. It takes individual members to rise up and ask methodical, step-wise questions with an end-goal in mind — and follow through. We Will Match Effort With Funds Any community that shows sufficient effort and innovative ideas to promote their site will be offered a budget and resources to make those ideas happen. Think of it as matching funds — except we’re matching effort, innovation, resources, and ideas from the community. And it has to come from within your community. You’re the experts, not us! Matching effort with funds assure that: Recipients have a stake in helping the site work, and Communities know that their efforts come back to help themselves make their site great. Here are some example ideas we have been throwing around for sites to consider: Sponsor the right kind of conferences. For many sites, we should be able to identify the top 2-3 conferences. Reach the right kind of publications and bloggers. Make sure that the key experts in every field know about the site; not just the “Martha Stewart” big names; we want to talk to the people who go to these conferences. Sponsor fun things for each community… especially the kinds of things that are likely to get talked about. This may mean photo contests for the photography site, cooking classes for the food and cooking site, etc. Make sure evangelists from each community have the opportunity to speak before groups of experts in their fields. We may want to organize a speaker’s bureau that arranges to get our top users bookings at conferences, user groups, etc., to talk about each site. Encourage and participate in grassroots conversations in existing discussion groups, where appropriate. We can provide access to professional designers and design give-aways like t-shirts or bumper stickers for interesting contests and events. I mention these examples to get you thinking in terms of “what is it really going to take to make this a world-class site?” But don’t wait on us. You have to get the ball rolling. Being a voice in a crowd works for certain types of collaboration and brainstorming, but sometimes you have to take on the role of the organizational czar. There’s a lot of advice here, but only two key points to remember: Encourage your community to share links to outstanding questions and answers. And if you feel you’re not producing outstanding questions and answers worthy of sharing with the world, endeavor to fix that first. When it comes to promotion, don’t try to take on the world. If the promotional ideas are giant, they’re wrong. Break them into smaller, more specific bite-size ideas that each member of the community can pitch in and help with. When you ask a large group of friends “What are we doing for dinner?”, you’ll get indecisiveness and inaction. But when you ask a more specific question like “Where’s a good place to order pizza?”, you’ll be eating in 30 minutes or less — or it’s free."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/20/should-unix-linux-and-ubuntu-be-merged-vote/","date":"2010-08-19T22:00:00.000Z","tags":["Company"],"title":"Should Unix/Linux and Ubuntu Be Merged — Vote!","text":"Remember last week when we asked: Unix and Ubuntu: Why Both? You may have noticed that two similar Area 51 site proposals have reached commitment and launched betas: ubuntu.stackexchange.com unix.stackexchange.com You might well ask: aren’t these the very same thing? Why have two communities on the same topic? What, then, is the difference between unix and ubuntu? The answer to this question cuts to the very heart of what community is. Well, we discussed this internally, and we were torn. We felt both sides made valid and defensible arguments, both in the comments to that blog post (which were excellent, I strongly encourage you to read them before proceeding further), and elsewhere. We were considering putting it to an internal vote to decide what to do, when we suddenly realized what we probably should have done all along — have each community vote on the merge! So, that’s what we’re doing. Members of each community will vote yea or nea: unix.stackexchange.com — Should Unix/Linux and Ubuntu Merge? ubuntu.stackexchange.com — Should Unix/Linux and Ubuntu Merge? (Note that we’re defining “member of the community” for now as “you must have at least 3 upvotes on the site” — we only want legitimate participants in each community to have a stake in this voting process.) If more than 50% of the voters on both sites agree, we will perform the merge. If not, we won’t. I still have some lingering concerns that communities are internally biased in matters like this, and unable to see themselves in an unbiased, editorial way from the outside, in the context of the larger world. But, given the lack of consensus on all sides, we figured that we might as well try to use democracy — the worst form of government, except for all those other forms that have been tried from time to time."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/19/super-user-1-year-anniversary-super-contest/","date":"2010-08-18T22:00:00.000Z","tags":["Community"],"title":"Super User 1 Year Anniversary Super Contest","text":"It’s been exactly one year since we launched Super User. Super User is, of course, our site for power users of traditional computer hardware and software. The types of users who have OSX, Linux, and Windows installed in triple-boot fashion — and have built their own computers to run it all on. Super User has had its share of ewokschallenges to contend with, as it is the most broad site in the trilogy, by far. Depending on your interpretation of the topic, anything about computers could be allowed there! Fortunately, that’s not the case now, as we have a satellite of new Stack Exchange sites to support Super User, that we hope will foster and engender communities of their own: webapps.stackexchange gaming.stackexchange wordpress.stackexchange webmasters.stackexchange ubuntu.stackexchange.com gadgets.stackexchange (probably will be reformed as apple.se / android.se) It’s our hope that those who love these specific topics will be able to find other like-minded users, so the Super Users themselves can be free to carry on with their indecent love of traditional computing in all its keyboard and mouse-y glory. And despite being the wild west of topic areas, requiring a nearly superhuman moderation staff … … Super User has done amazingly well, growing by leaps and bounds while maintaining (at least in my humble opinion) the typically excellent level of quality you’ll find on any Stack Exchange 2.0 network website. So it’s time to celebrate. For the next month, we’ll be conducting a Super User Super Contesttm. Four weeks, four winners each week, and the fabulous prizes are appropriately super-user-y. The best rookie performance of a new user in that week, as measured by the Super User leagues, will receive a 32 GB USB key. The highest reputation produced in that week, as measured by the Super User leagues, will receive a 22″ LCD monitor. The “most awesome” new Super User question or answer that week, that most embodies the type of Q&A; that make the site great — as judged by the Super User community moderators — will receive a two bay NAS device. The most useful Meta Super User question or answer of the week — as judged by the Super User community moderators — gets a Super User t-shirt and stickers. Update 8/25/10: friend of Super User, Jon Tackabury of Binary Fortress Software, generously offered to contribute a free license to DisplayFusion Pro for every winner as well! Thanks Jon for your support of the SU community! The contest starts right now, as of the publish date on this blog post, but the four weekly awards will be announced on Meta Super User on these dates: Monday, August 30th — winners announced Monday, September 6th — winners announced Monday, September 13th — winners announced Monday, September 20th — winners announced (edit: moved dates from Saturday to Monday so the full week is counted.) Now get over to Super User and ask great questions and provide killer answers, same as every other day! A few rules, then: You must have a registered Super User account in good standing, with a valid email address, to be eligible. Contest open to every man, woman, and child on planet Earth, except those men, women, or children living in places where contests like this are somehow illegal — or the relevant contest laws in your jurisdiction are so obnoxious that awarding the prize becomes impractical. Moderators of any kind are not eligible to win, because they will be judging parts of the contest. But they won’t be left out in the cold, either: we’ll be sending our community mods a little thank you prize as well, for everything they’ve done. You guys rock! You cannot win the same category twice during the duration of the contest. So if you’re the top reputation user for weeks #2 and #3, for week #3 we will award that prize to the next user in the weekly reputation league. You cannot win two prizes in the same week. If you live in an area of the world where it is logistically impossible for us to get your prize to you — like, say, because your nearest computer hardware store is 3000 nautical miles away — we’ll do our best to work with you and make it happen. We will try to be as fair as possible, but all of our judgments are final and binding. Happy first birthday, Super User, hopefully first of many more to come. And most of all, thanks to everyone who has participated on Super User. It’s because of you that the site works at all! So let us celebrate, fellow ewoks, our glorious ongoing battle against the Death Star of terrible phpBB computer forums, by singing that stupid Ewok Celebration song together!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/18/new-image-upload-support/","date":"2010-08-17T22:00:00.000Z","tags":["Community"],"title":"New Image Upload Support","text":"Thanks to our good friends at imgur.com, we now support native image uploads on all Stack Exchange network websites. Yes, that means adding a picture to a question or answer is now as easy as … clicking the Insert Image toolbar button selecting an image from your computer, or the web clicking Upload … there is no step 4, you’re done! These images are kindly hosted by imgur.com. Alan Schaaf, the man behind Imgur, generously provided us a network-wide “pro” account that keeps any images hosted through our websites around indefinitely. We’re also using Imgur’s brand spanking new API to implement this feature. I’ve been using Imgur on and off for a while, as it was arguably already the best free image hosting service on the internet — and with the new API, it just got even better! Ever since Imgur accounts were released, people have been asking non-stop about the ability to upload into their accounts by using the tools. Your request did not go unheard. Today, I’m pleased to announce the new Imgur API, which not only includes support for uploading into accounts, but also includes support for managing every aspect of your account. Here are just a few of the things you can do: Upload images anonymously Upload images into accounts Create and manage photo albums Delete images List all images in your account Don’t worry if you’re a not a technical person and you don’t care about what an API is. What it means is that, very soon, you will have access to many more tools that enable you to upload into your account from your desktop, mobile phone, iPad, etc. We think native image hosting is pretty crucial to some upcoming Stack Exchange sites like photo.stackexchange.com and ui.stackexchange.com. Thanks to Alan and Imgur for helping us make it happen for everyone!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/15/stack-exchange-api-contest-winners/","date":"2010-08-14T22:00:00.000Z","tags":["API"],"title":"Stack Exchange API Contest Winners","text":"After nearly two and a half months, our Stack Exchange API contest is officially over. In that time, our community created 85 applications and 24 libraries. It was tough judging winners between so many fantastic entries. I encourage you to browse the complete list of apps and libraries to see for yourself how much cool stuff the community created. Whatever your platform of choice, there’s something here for you to work with, learn from, and perhaps even contribute back to. Most Entries We’re awarding Lilliput USB Monitors to two members of the community who single-handedly contributed a huge number of apps and libraries to the contest. 12 applications — SOAPI-Watch, SOAPI-Explore … 2 libraries — Soapi.CS and Soapi.JS 9 applications — StackMobile.com, StackApplet, … 5 libraries — so++, stack.PHP … Kudos to George Edison and code poet for being such integral parts of the StackApps community. Library Stacky – a .NET Client Library Stacky is a .Net client library for the Stack Apps API. It’s a simple library supporting a variety of platforms such as Silverlight and Windows Phone 7, .NET 4 and .NET 3.5. adjustable height GeekDesk winner Third Place Six to Eight : an iOS client Six to Eight is a free, pocket sized iOS client, for you to track your activity and get answers to those niggly, “need an answer right now” problems. Full browsing, searching, statistics and user tracking. App Store link (free) CULV netbook winner Second Place StackPrinter: the Stack Exchange Printer Suite StackPrinter is a website that pulls the main details of a given question, all its answers, comments and votes formatting them in a simple essential printable view. I’ve created this micro web application basically to add a “Printer-Friendly” feature to the Stack Exchange Network sites, trying to remove some @Media Print CSS limitations like hidden comments, pagination and empty spaces. Herman Miller Mirra chair winner First Place StackTack, a Javascript widget you can stick anywhere StackTack is a widget for bloggers and writers to easily tack questions and answers from the Stack Exchange sites such as Stack Overflow, Server Fault and Super User, into their articles. The widget remains up to date as answers get added, modified, voted on and accepted. 30″ Dell or Apple LCD winner We’ve contacted all the winners via email and we’ll be arranging shipment of your prizes ASAP. Additionally, anyone with an entry in the contest that had 3 or more score at the time of judging was sent a Stack Overflow, Server Fault, or Super User t-shirt of their choice — and naturally a bunch of stickers. Congratulations to everyone who entered the contest. Your feedback helped us drive the API forward and make it better for everyone — but most importantly, you built amazing apps and libraries! You guys rock. And, yes, keep your eyes peeled for Stack Exchange API 2.0 sometime next year."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/14/unix-and-ubuntu-why-both/","date":"2010-08-13T22:00:00.000Z","tags":["Area51"],"title":"Unix and Ubuntu: Why Both?","text":"Update: we ultimately put this to a vote on each community. You may have noticed that two similar Area 51 site proposals have reached commitment and launched betas: ubuntu.stackexchange.com unix.stackexchange.com You might well ask: aren’t these the very same thing? Why have two communities on the same topic? What, then, is the difference between unix and ubuntu? The answer to this question cuts to the very heart of what community is. I sometimes wonder what Stack Exchange would look like in an alternate universe; one where we, as Evil Stack Overflow Inc., bypassed the community-process of Area 51 and came up with our own site ideas; a series of logical subjects, neatly organized into their own Q&A sites. As Evil Stack Overflow, Inc, would the process be faster and more efficient? Would the network be better organized with less overlap? That’s how I originally envisioned Stack Exchange; we would come up with ideas for sites, find the top experts in the field, and publicize them with our networking savvy and irresistible charm. Ubuntu: One for the Community My evil counterpart (the one in that alternate universe) would have never have even considered creating a site for Ubuntu, separate from the larger scope of a Unix & Linux site. They are essentially the same technology. Surely it is better — or so my evil counterpart would have thought — to combine the resources of Ubuntu and Linux users into a larger site, organized with tags, and everybody would win. And that would have been disastrous. The speed of Ubuntu’s progress should have been my first clue. Despite being proposed nearly two weeks after the Linux site, Ubuntu raced past Linux, reaching full commitment in a nearly-record-breaking 38 days. Web Applications 36 days Gaming 36 days Ubuntu 38 days Food and Cooking 41 days Game Development 41 days Pro Webmasters 44 days Photography 47 days Mathematics 48 days Electronic Gadgets 51 days GIS 54 days TeX 55 days User Interface 55 days Statistical Analysis 55 days Home Improvement 63 days Personal Finance and Money 65 days English Language & Usage 67 days WordPress Answers 71 days I thought, “Surely there is something going horribly wrong with the process.” Perhaps the Ubuntu users simply did not see the Linux proposal. Or maybe they didn’t understand how well the larger community would scale or how well tagging worked. I had written the blog post “Trust the Community” barely a month before, but still I had my doubts that Area 51 was working in this case. The proposal process is still lacking somewhat in meta communications, especially between proposals. Maybe that was it. Does Area 51 Still Work? When it was clear that both the Unix and Ubuntu proposals were both moving forward, we decided to step outside the typical Area 51 process and email (at random) a few dozen Ubuntu supporters asking why they committed to the Ubuntu proposal and not the Linux proposal: Dear Ubuntu Supporter, We are about to launch the Area 51 proposal for “Ubuntu”: area51.stackexchange.com/proposals/7716/ubuntu. But before we launch it, there has been a bit of discussion about whether members would be interested in merging it into a more generic Unix/Linux site. We are looking at whether more needs to be done to make sure the community is getting what they want or is the Ubuntu proposal ready to go as-is. Stack Exchange Team I had my doubts. I was expecting a response demonstrating a widespread lack of awareness that a combined Ubuntu-Linux site would result in a larger, more successful community working together. Either that or an apathetic “I don’t care, merge them” response. I got neither. What I got was a persuasive and weighty series of arguments describing why the Ubuntu community had to be separate from the Linux site. The respondents were not worried about the technical topics they had in common. They were more concerned that the audiences would use the site differently. The Ubuntu users stated unequivocally that a Linux site held no value for them and they would not use it. Not all of them, but a significant portion responded with this assessment: I’m paraphrasing… Dear Stack Exchange Team, Ubuntu is an end-user operating system used by everyday people who are not typically interested in hacking around a kernel, nor configuring a large collection of tools, projects and packages, nor citing documentation references and command line arguments. The Linux proposal, in comparison, explicitly targets “advanced users,” in which I have no interest. In short, we need our own space. Thank you. Ubuntu Supporter Where The Ubuntu-Linux Difference Matters Agree or not with the technical assessment, we faced one incontrovertible fact: A site is not much good to a group of users if they will not show up. We could argue semantics and technology all day – Ubuntu is still Linux; a Harley is still a motorcycle; vegetarians cook the same way as everyone else; graduate-level mathematicians use the same numbers as the rest of us. It was inescapably clear that a site about “Linux” simply held no interest to a very large group of users who identify themselves as “Ubuntu users.” So we now have an Ubuntu site and a Unix & Linux site, both doing well. I don’t know if there is a general rule to be derived from this case study. I’m still a big fan of the larger sites. I’m wary of encouraging smaller, focused sites when a larger group stands to benefit from their combined resources. Stackoverflow.com is a testament to how well diverse communities can pool their resources when they have a common goal; in this case, writing better code. Maybe that’s a criteria which binds a community together: do they have common goals? Stack Overflow didn’t split off into a .NET site, a PHP site, a C# site, a Java site, etc… and we’re better off for the experience. When defining the boundaries of your favorite Q&A; proposal, consider these two watershed examples: Unix and Ubuntu. Maybe there’s a quality that you see in one of those systems that will help you decide what type of community you want to emulate. But don’t ask my evil counterpart; he’s too busy writing a blog post called “Ubuntu Users are Stupid for Not Liking my Mega Unix Site.”"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/13/network-central-stackexchange-com/","date":"2010-08-12T22:00:00.000Z","tags":["Company"],"title":"Network Central: stackexchange.com","text":"I’m proud to announce that stackexchange.com is now the official network hub for the entire Stack Exchange 2.0 network! Thanks to the herculean contributions of team members David Fullerton and Emmett Nicholas, our shiny new network hub contains: A list of the most interesting questions right now, across the entire Stack Exchange network A directory, with statistics and rankings, of all public sites in the Stack Exchange network A per-site user reputation league for all Stack Exchange websites But how do you know you’re on a Stack Exchange 2.0 network website? Why, I’m glad you asked! Just check for the genuinetm Stack Exchange logo in the upper left hand corner. If you see that, you can be sure it’s the real deal, and not some brand-x knockoff site. Better yet … click it! That’s right, stackexchange.com is now so awesome that every one of our sites carries a wee mini pocket version of it along with them, like a kangaroo with a joey in its pouch. And that’s not all. We’ve also rolled out something that’s been requested for a very long time: Reputation Leagues. For any Stack Exchange website, you can see monthly, weekly, and quarterly reputation league user rankings, along with velocity (change per time interval). This strictly a for fun feature — it’s meant as a friendly, informal way of tracking your reputation on a particular Stack Exchange site. (Not that these reputation leagues won’t inevitably become a bloodthirsty fight to the death, but hey — I tried. It really is just for fun and stats junkies!) I’m proud to finally have a network anchor site worthy of the name. We’re still in the process of adding many more features, performance tweaks, and bugfixes to stackexchange.com, but it’s a promising start, and a major milestone toward our overall Stack Exchange 2.0 network vision. Enjoy!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/11/defending-attribution-required/","date":"2010-08-10T22:00:00.000Z","tags":["CC Wiki Dump"],"title":"Defending Attribution Required","text":"All content contributed to the Stack Exchange network is licensed under cc-wiki (aka cc-by-sa). What does this mean? In short, it’s a way of guaranteeing that we can’t ever do anything nefarious with the questions and answers the community have so generously shared with us. It’s not unheard of for some companies to arbitrarily decide that giving content back to the community is, er … well, let’s just say … not in their best commercial interests. Then they suddenly pull the rug out from under the very people that contributed the content that made them viable in the first place. We wouldn’t want that done to us. And there’s no way we’re doing it to our community. To prove it, we adopted a licensing scheme that makes it impossible for us to do anything even partially-quasi-evil with our community’s content. Namely, cc-by-sa (aka cc-wiki), which gives everyone the following rights to all Stack Exchange data: You are free: to Share— to copy, distribute and transmit the work to Remix — to adapt the work Under the following conditions: Attribution — You must attribute the work in the manner specified by the author or licensor(but not in any way that suggests that they endorse you or your use of the work). Share Alike — If you alter, transform, or build upon this work, you may distribute the resulting work only under the same or similar license to this one. This isn’t news, of course; it’s explained on the footer of every web page we serve. And note that we explicitly allow commercial usage — after all, we’re a commercial entity, so it felt only sporting to allow others the same rights we enjoyed. What is news, is this: lately we’re getting a lot of reports of sites reposting our content (which is totally cool, and explicitly allowed), but not attributing it correctly … which is most decidedly not cool. What are our attribution requirements? Let me clarify what we mean by attribution. If you republish this content, we require that you: Visually indicate that the content is from Stack Overflow, Meta Stack Overflow, Server Fault, or Super Userin some way. It doesn’t have to be obnoxious; a discreet text blurb is fine. Hyperlink directly to the original questionon the source site (e.g., http://stackoverflow.com/questions/12345) Show the author namesfor every question and answer Hyperlink each author name directly back to their user profile page on the source site (e.g., http://stackoverflow.com/users/12345/username) By “directly”, I mean each hyperlink must point directly to our domain in standard HTML visible even with JavaScript disabled, and not use a tinyurl or any other form of obfuscation or redirection. Furthermore, the links must not be nofollowed. They’re not complicated, nor are these attribution requirements particularly hard to find: they’re linked from the footer of every web page we serve, and included as a plaintext file in every public data dump we share. We’ve been collecting a list of sites that are reposting our data without attributing it correctly — but it’s becoming something of an epidemic lately. Every other day now I get an email or meta report about a real live web search where someone found content that is clearly ripped off, has zero useful attribution, and a bucket of greasy, slimy ads slathered all over it to boot. I’m starting to get fed up with these sites. Not because they’re abusing our website, but because they’re abusing you guys, our community — by reposting your questions and your answers with no attribution! The whole point of Stack Overflow, Server Fault, Super User, and every other Stack Exchange site is to give credit directly to the talented people providing all these fantastic answers. When a scraper site rips a great answer, removes all attribution and context, plasters it with cheap ads — and it shows up in a public web search result, as they increasingly do — everyone loses. I’m not going to stand for this, at least not without a fight. We’re starting to email these sites and ask them very politely to please follow our simple attribution guidelines. And if they don’t follow our simple attribution requirements when we’ve asked them nicely, well — we’re going to start asking them not so nicely. Namely, we will hit them where it hurts, in the pocketbook. Our pal How-to-Geek explains: For the quickest results, you can send the DMCA to their web host, which you can generally figure out with whoishostingthis.com. Every single legit hosting center will have a “legal” or “copyright” page, and they will have a specific way to send in DMCA requests. Some of them require fax, though many are starting to accept email instead… and they will often have the content removed almost instantly. WordPress.com will instantly cancel their entire account, and other hosts tend to take very swift action, often disabling their whole site until they comply. If you really want to cause them some pain, however, you can send the DMCA to their advertisers. Adsense is usually the first target for this, since so many of the jerks are using it. The only problem with Adsense is they [require a DMCA fax](http://www.google.com/adsense_dmca.html ). There’s been once or twice where I’ve found a site that was hosted somewhere that doesn’t care about copyright… but every single ad network of any value is based in the US, and the jerk website owner isn’t going to mess around with their income stream. Please help us defend your right to have your name and source attached to the content you’ve so generously contributed to our sites. We will absolutely do our part, but many hands make light work: Whenever you find a new site that is using our data without proper attribution, check this meta question and make sure it’s listed. If you have contact information for the site that is inappropriately using our content, forward it to us at team@stackoverflow.com for action. If you’re feeling a bit miffed about the whole situation, don’t hesitate to forward a link to our attribution guidelines to the site operators, or their ISP, and briefly indicate specifically where they are not following them. Squeaky wheel gets the grease, and all that. If the site is wrapping the content in invasive ads that attempt to redirect the user or compromise their web experience in some way, I encourage you to report it at http://www.google.com/safebrowsing/report_badware/ ; I’m only adding this because it happened recently (!). I’m always happy for our content to get remixed and reused, but at some point we have to start defending our attribution guidelines, or we are failing the community who trusted us with their content in the first place. After all, if we don’t stick up for what’s right, and what’s fair — who will?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/07/the-death-of-meta-tags/","date":"2010-08-06T22:00:00.000Z","tags":["Community"],"title":"The Death of Meta Tags","text":"There are a few tags on Stack Overflow that have bugged me for a long time. Namely: subjective best-practices beginner But I could never quite articulate what, exactly, was wrong with these tags. It’s been bothering me more and more as time goes on. So much so, that about two months ago, I was compelled to ask on meta: Should we permanently remove the [subjective] tag? There are some weak arguments in favor of keeping [subjective], but that’s about the best its proponents can muster. The arguments against it are much stronger. I felt Shog9 made the best case: I think the [subjective] tag is useless at best and actively harmful at worst. Useless, because for all the talk about filtering by or filtering out subjective questions using that tag, it’s a poor tool for the job simply because the criteria for its use are, well, subjective. I can tell you what a poll is, or a FAQ, or a list, or a getting-to-know-you (GTKY) question… But where the border lies for subjective I cannot say. And harmful, because there are some users who actually believe that, like community wiki, it’s some sort of magic that allows you to ignore the normal posting standards. It’s been used pejoratively and defensively, without any real consistency, for a long long time now. Time to go. However, it wasn’t until I saw this absolutely brilliant post by Aaronut on meta.cooking that the problem — and its solution — was finally clear to me: There’s been a major uptick recently in tags that are not useful and just add noise. I want to stress that these are usually added in good faith, and I am not questioning anybody’s motivation – I know that they all mean well. But this particular category of tags is one that has been historically referred to as meta-tags on MSO, and these tags cause a lot of problems. The reason meta-tags are a problem is that they do not describe the content of the question. They describe some other aspect of the question, like the author’s skill level, or the author’s motivation for asking it, or generally what “kind” of question it is (poll, how-to, etc.). Meta-tags are actually a subset of a larger problem that I usually call dependent tags. These are tags that don’t say anything by themselves – you can’t tell what the question is about unless they’re paired with some other tag (or several of them). These tags are a problem because people don’t realize this and will often use that as the question’s only tag. This is the insight that had eluded me for two full years. Seems obvious in retrospect, doesn’t it? From this point on, meta-tagging is explicitly discouraged. How can you tell you’re using a meta-tag? It’s easier than you might think. If the tag can’t work as the only tag on a question, it’s probably a meta-tag. Every tag you use should be able to work, more or less, as the only tag on a question. Meta-tags, like [beginner], [subjective], and [best-practices], are useless by themselves — they tell you nothing at all about the content of the question. If the tag commonly means different things to different people, it’s probably a meta-tag. In a cruel, ironic twist, the meaning of the tag [subjective] itself … is actually subjective. Ditto for [best-practices] and [beginner]. Best practices to whom? Beginner by what criteria? These tags are impossible to define by anything remotely resembling an objective metric. In comparison, the the meaning of tags like [java], [c#], and [javascript] are crystal clear to all but the nuttiest of nutbags. I’m pleased to announce that, as of tonight, we have stormed the castle gates and systematically eradicated the most common meta-tags — [beginner], [subjective], and [best-practices] — from Stack Overflow, Server Fault, and Super User. And you know what? It felt good. It felt right. I blame us, for letting these tags take root early in the history of Stack Overflow. We should have eradicated them early on to set the proper precedent. It’s particularly encouraging that we can learn from experiments on the nascent Stack Exchange 2.0 sites. There’s no reason these sites need to repeat all the mistakes we made with tagging two years ago — we can do it better each time for each new community, and feed those improvements back into the entire network. So long, meta-tags. (special thanks to Aarobot and Shog9 for their feedback over the last year or so on this topic, and on meta in general.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/05/chat-now-in-public-beta/","date":"2010-08-04T22:00:00.000Z","tags":["Beta"],"title":"Chat Now In Public Beta","text":"Our “third place”, after a successful three day beta preview, is now on the final path to launch. What is this mythical third place I speak of? Chat. money.stackexchange.com meta.money.stackexchange.com <font color=\"maroon\">chat.money.stackexchange.com</font> Because you not only need a place to have intelligent Q&A; about managing your finances, you need a place to talk about the place, and a less formal “third place” to collaborate in real time with the fellow members of your community. This is a permanent public beta, meaning chat is now live on one site in our network … forever. We plan to roll out out chat on more sites in about 4 weeks, assuming the public beta goes reasonably well. Before visiting this public chat beta, please bear in mind: You must have a parent site account (in this case, Meta Stack Overflow) in good standing with at least 20 reputation to talk in the chat. Before visiting chat, be sure you’re logged in at the parent site, because we use that parent cookie to know who you are. Please read the chat faq. And if you’ve already read it, humor me and read it again … it has changed, and we will continue to improve it during the public beta. Hop on over to chat.meta.stackoverflow.com and get to know the fellow members of your community! Have fun — and be sure to leave your feedback for us either on meta in a question tagged [chat], or in the chat itself in the appropriately named “Chat Feedback” room."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/03/a-surprisingly-accurate-depiction-of-a-typical-work-day/","date":"2010-08-02T22:00:00.000Z","tags":["Background"],"title":"A Surprisingly Accurate Depiction of a Typical Work Day","text":"… at least where I work, anyway. And if you’re wondering what our software engineering process looks like from here on the inside, this video reveals all. (previously)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/08/01/tag-folksonomy-and-tag-synonyms/","date":"2010-07-31T22:00:00.000Z","tags":["Community"],"title":"Tag Folksonomy and Tag Synonyms","text":"Every question on Stack Overflow, or any other Stack Exchange site, must be tagged with at least one tag. Tags are simple keywords or labels that help categorize your question with other, similar questions. It’s important that questions get tagged correctly, because that makes it easier for everyone to find the questions they’re interested in — and potentially answer them. These tags are built by the community, in what is commonly known as a folksonomy. While we do a bit of pre-seeding when sites launch with a few dozen really obvious tags, most tags you see were created by another fellow user. Like any other collaborative process involving the community, not everyone agrees, and it takes some time to reach a consensus. One person’s to-mah-to is another person’s to-may-to, and pretty soon everyone is calling the whole thing off. As Stack Overflow has grown, so has the need for discipline around tagging. We added tag merging about a year ago, but it was purely a moderator function. We’ve also slowly but surely been increasing the reputation required to create a new tag from 250 reputation, to 500 reputation, all the way to the current setting of 1500 reputation. We’ve also started automatically culling single-use tags that are more than 6 months old. But that’s just a band-aid on the underlying problem. It’s been clear for a very long time now that we needed some kind of tag synonym system, one that the community itself could maintain and control without having to bend the ear of a moderator. Sam’s been working hard on this for the last two weeks, and we now have a fairly reasonable approximation of a community driven tag synonym system in place. Just check the info tab on any tag — like, say, the JavaScript tag. On the info tab, you’ll find two sections of information about the javascript tag: an editable user-contributed wiki at the top, and a list of tag synonyms at the bottom. As you can see, our fellow users have already contributed a nice little wiki for the [javascript] tag already. Be advised that the Tag Wiki is a somewhat experimental feature at the moment. The intention is explained in the default help text on any blank tag wiki: Tag wikis help introduce newcomers to the tag. They contain frequently asked questions about the tag and guidelines on its usage. Tag wikis can be edited by users with more than 2000 reputation, provided: They are in the top 20 answerers for this tag or They have more than 100 answer upvotes in this tag As for synonyms, the javascript tag has two so far. This means that any question tagged [js] or [java-script] will be automatically and silently remapped to [javascript] behind the scenes. This is the key quality of life improvement, because it means that new users can no longer accidentally pollute the tag pool by adding or contributing to yet another oddball variant of an existing tag. Again. And Again. And Again… With the help of Stack Overflow moderator Bill the Lizard, we’ve imported most of the common community generated synonyms into the Stack Overflow synonym list already. For new synonyms, we will require that any proposed tag synonym must already exist as a tag on at least one question in the system, otherwise we’ll go crazy trying to predict every possible synonym of every possible tag. Instead, observe what real live users actually create, then base your synonyms on that. If you click the see all tag synonyms » link from any specific tag page, you can browse all current and suggested tag synonyms, across all tags. If you’re a moderator, you should have this page bookmarked. It is our hope that these tag synonym pages are fairly self-explanatory, at least to the higher reputation users that they are designed for. And if not, we’d like to make it so. If you’d like to help tame the tag folksonomy with us: browse the info tab for tags you actively participate in edit the tag wikis to make them better vote for the tag synonyms you think should (and shouldn’t exist) suggest new tag synonyms we might need monitor the master tag synonym page and see which ones are working, and which ones aren’t. Good luck, and happy tagging!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/27/moderator-pro-tempore/","date":"2010-07-26T22:00:00.000Z","tags":["Community"],"title":"Moderator Pro Tempore","text":"There’s a bit of a leadership vacuum inside the new Stack Exchange communities in public beta. We’ve put a lot of responsibility on each group to take ownership of their own site. The Stack Exchange team can act as guide, but we don’t always have the domain knowledge to understand the needs of each group. As the Network expands, this stretches our ability to assure that each community’s issues are properly addressed. That’s why I am in the process of identifying and organizing a team of provisional Moderators from within each community (about three per site, starting about seven days into the public Beta). This is a temporary, short-term appointment. Moderators Pro Tem focus and expedite the essential needs of each new site. By the end of Beta, the community will be better suited to hold their own elections. Moderators in Stack Exchange have an interesting challenge. Beside the normal activities of a Moderator, part of their function is to act as liaison — a role which links the Stack Exchange team with the individual communities. A Moderator is the site’s representative to the Network. On a local level, they make sure their members have the means to work through local issues where they can. They elicit help from us, and their moderator peers on the same site and within the network, as necessary. If there’s a feature request for a specific site, it’s up to that community to vet the idea in their own meta. If the idea has merit, the Moderator would bring it to the Stack Exchange team. We need leadership from within the community to help each site succeed, and Moderators assure that that their site is well represented. Of course, if the idea involves the core engine or applies to a broader range of sites, the idea should be raised in meta.stackexchange.com: the “capital city” of Stack Exchange. How Moderators are Appointed Pro Tem About a week into the public beta, we will seek out members who are deeply engaged in the community’s development; members who: Have a reasonably high reputation score to indicate active, consistent participation. Show an interest in their meta’s community-building activities. Lead by example, showing patience and respect for their fellow community members in everything they write. Exhibit those intangible traits discussed in A Theory of Moderation. Bonus points for: Members with participation in both meta and the parent site (i.e. interest in both community building and expertise in the field). Area 51 participation, social network referrals, or blogging about the site. Members who have already shown an interest or ability to promote their community. Candidates will be contacted and three of them will be selected to act as provisional Moderators until the community holds formal elections after the Beta period. Besides the normal abilities of a Moderator, they will: Have access to a special chat room where we will collectively work through the challenges of moderation and community self-policing. Organize the process of selecting the site’s attributes (domain names, design issues, the FAQ, etc.). Rally community support and drive the mission of getting publicity for the site. Essentially, they will have the ear of the Stack Exchange team for anything we can do to help their sites succeed! Make Sure Your Community is Well Represented If your meta site does not have a post to nominate Moderators, start one now! Pro Tem appointments will begin about two weeks after the site is created. The more guidance we receive, the more informed our choice. This is the basic structure of a Moderator nomination thread: Create a meta post with a call to nominate moderator candidates. Enumerate the qualities of a moderator (from above), and link back to this blog post. Specify that self nominations are okay, and even encouraged. Most sites have not had sufficient time for many users to stand out. Self nomination is simply a way to say, “I’m interested. Let my record speak for itself.” Flag the post for moderator attention (the Stack Exchange staff will monitor these) so the post can be tagged [featured] to raise awareness on the main Q&A site. Each nomination should be posted as a separate answer. Link the name to the user’s profile (parent and meta) so we can see their activity. Links to other activities may be helpful: Area 51 participation, participation in other sites, blog posts reviewing or announcing the site, etc. If the nomination was posted by a 3rd-party, the nominee should indicate their acceptance by editing the answer, adding that they accept the nomination. Optionally they can write something about themselves. Most of all, be respectful and understanding of the Moderators Pro Tem. Members of your community are volunteering their time and learning on the job. It’s a learning experience for everyone."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/22/new-per-site-metas/","date":"2010-07-21T22:00:00.000Z","tags":["Community"],"title":"New Per-Site Metas","text":"If you’ve been following our new Stack Exchange 2.0 private and public betas, you may have noticed that every new website launches with its own dedicated meta site. If we’ve learned anything (and I personally had to learn this lesson by having it beaten into me), it is that meta-discussion is an absolutely integral part of any healthy community. So much so, that I question whether any community without a meta site can actually survive in the wild. It’s certainly not a mistake we’re ever going to repeat again. We tried to make these new per-site metas fairly discoverable with both a site wide notification banner of the form … got a question about the site itself? meta.topic is the place to talk about things like what questions are appropriate, what tags we should use, etc. … and a prominently featured link to switch between the site and the meta site at the top left of both. (update: we’ve changed the layout a bit. The links to meta and parent are still at the top, but shifted over to the right as plain text links — the stackexchange navigation takes its place on the left. And the link to meta is now in the sidebar like so, with the top weekly meta questions — or meta questions with the special moderator-only “featured” tag.) Click that “meta” link at the top left to go to meta (shocking, I know), and click “parent” in the same location to get back to the parent site. However, you should know that these per-site (or “child”) metas behave significantly differently than what you might be used to on meta.stackoverflow.com, if you participated there. Based on our existing experience with Meta Stack Overflow, we tried to improve and simplify in a few ways: You never have to log in to the per-site meta. It grabs the cookie from the parent site and already “knows” who you are when you visit. Identity is always inherited from the parent site. If you have an account on the parent site, you automatically have an account on the per-site meta. Your profile can only be edited on the parent site. And of course, moderators on the parent are moderators on the per-site meta. Reputation is always inherited from the parent site. You cannot gain or lose reputation* on the per-site meta. This also means that some reputation related functions like the rep graph and bounties are not enabled on the per-site meta. You must have a minimum of 5 rep on the parent site to participate on the per-site meta. In general, the more reputation you have on the parent site, the more stake you should have in its governance. And the converse is also true: if you have no reputation on the parent site (as in 1 rep, the minimum), you haven’t even come of age to “vote” in governance issues, so to speak. We also expect that most established users will have the +100 network account association bonus, so they won’t be affected. Voting up or down does not affect reputation. You are now free to vote purely based on post content, without worrying about how your vote might positively or negatively affect someone’s reputation score. however, there is one exception: extreme misbehavior on the meta site will affect your parent site reputation. And not in, shall we say, the “good” way. In fact, we’re so happy with the way these per-site metas are working on the Stack Exchange 2.0 sites, we’re extending the per-site metas to Super User and Server Fault as of right now! [ meta.superuser.com ](http://meta.superuser.com) [ meta.serverfault.com ](http://meta.serverfault.com) For now we are leaving meta.stackoverflow.com grandfathered in, as-is, with no changes; it’s still a standalone community with a standalone reputation system. We think Stack Overflow is large enough to justify this, and it just so happens that Stack Overflow is also the name of the company, too. Meta Stack Overflow will serve as the “National Capital” where we process feedback not just for Stack Overflow but for the core engine itself — while the smaller meta sites are akin to regional or state capitals. So, in a nutshell: meta.stackoverflow.com is Washington, DC meta.serverfault.com is Columbus, OH meta.superuser.com is Sacramento, CA meta.cooking.stackexchange.com is Atlanta, GA meta.gadgets.stackexchange.com is Denver, CO meta.webmasters.stackexchange.com is Boston, MA … and so forth. But it is the exception. The per-site meta is a standard fixture of our network now, because it’s how you, as a community, will own the design and governance of your site."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/19/jin-on-hanselminutes/","date":"2010-07-18T22:00:00.000Z","tags":["Company"],"title":"Jin on Hanselminutes","text":"Our designer in residence, Jin Yang, was on episode #222 of Hanselminutes. This is now the fifth time someone from Stack Overflow has been on Hanselminutes: Show #152 with Jeff, Jarrod and Geoff on Stack Overflow Show #175 with Jeff Atwood on optimizing your website Show #211 with Jeff Atwood on Stack Exchange Show #212 with Joel Spolsky on podcasting Show #222 with Jin Yang on bridging design and developers If you’re interested in Jin’s take on … the fundamental differences between developers and designers. Are we a totally different breed? How should designers and developers work together? Should designers code their own sites? … click through to hear more!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/14/third-place-chat-beta-preview/","date":"2010-07-13T22:00:00.000Z","tags":["Beta"],"title":"Third Place Chat Beta Preview","text":"Remember that third place concept I brought up a few months ago? We’re ready to give community insiders a chance to check out what Stack Overflow Valued Associates #00006 and #00007 have been working so hard on. For the next 3 days, we’ll be running a public beta sneak preview of our proposed “third place” for all new (and existing) Stack Exchange network sites. Let’s take the Food and Cooking site proposal — which is currently in private beta — as an example. On the very first day of the private and public betas, we’d have: cooking.stackexchange.com <font color=\"maroon\">meta</font>.cooking.stackexchange.com <font color=\"maroon\">chat</font>.cooking.stackexchange.com Because you not only need a place to have intelligent Q&A; about bacon, you need a place to talk about the place, and a less formal “third place” to collaborate in real time with the fellow members of your community. We already have the per-site metas, which work great, but we don’t quite have that third place ready yet. But we’d like to … soon. That’s where you come in. You must have a Meta Stack Overflow account with at least 20 reputation. Make sure you’re first logged in to meta, because we use a shared cookie for authentication. Hop on over to chat.meta.stackoverflow.com and enter the password “gossipville”. Have fun — and be sure to leave your feedback for us either on meta in a question tagged [chat], or in the chat itself in the appropriately named “Chat Feedback” room. Update: beta preview complete! thanks for all your feedback."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/13/domain-names/","date":"2010-07-12T22:00:00.000Z","tags":["Background"],"title":"Domain Names","text":"Let’s say, just hypothetically, that you wanted to learn how to bake a cake. So you go to the bookstore and you have a choice of two books. There’s a generic yellow book that is part of a series: And there’s another book that stands by itself… it doesn’t look like a part of a series. If you had no other information, which would you buy? American audiences, generally, don’t trust series. They tend to believe that they want the best baking book, period, not whatever baking book comes in yellow. When they see a shelf full of yellow dummy books, they mostly say, “yeah, a bunch of second-best books.” This is not, by any means, universal… those books sell like hotcakes, even if they are kind of insulting. (I noticed that Personal Finance for Seniors for Dummies is not, in fact, entitled _Personal Finance for Dumb Seniors. _I think that the publisher was a little bit gutless on that one.) Still, all else being equal, many people’s intuition is that series are not best of breed. In trying to decide how to brand the new Stack Exchange sites that are getting created at Area 51, we had to decide between the “series” model and the “best of breed” model. Should we have dogs.stackexchange.com and cats.stackexchange.com? Or PoochQAndA.com and KittyQueries.com? If everything lives at stackexchange.com, the brand carries across all the sites. So if you had a great experience with motorcycles.stackexchange.com, you might believe that chess.stackexchange.com a good chess site. Influenced by Ries and Trout, we decided that individually-branded sites felt more authentic and trustworthy. We thought that letting every Stack Exchange site have its own domain name, visual identity, logo, and brand would help the community feel more coherent. After all, nobody wants to say that they live in Housing Block 2938TC. They want to live in Colonial Manor. Never mind the connotation of, well, colonies. But I digress. We’re building best of breed Q&A sites for the new Stack Exchange Network 2.0, and we would rather have a team of individual sites rather than a bunch of subdomains that remind you of nothing more than the chart you saw when you went to the library that one time in college, with the Dewey Decimal system explained. 100 Philosophy. 200 Religion. 300 Social Sciences. 400 Language and pornographic magazines. BORING. Thus: each Stack Exchange site is going to have its own top-level domain name, chosen by its community. Good names are hard, but nothing works better than brainstorming with the community to find a good domain name. This is one of the first things that will happen during the three month public beta of each site. Here’s some of my advice on domain names. Please don’t think that it’s necessary to use a domain name that reflects something going wrong. We picked the name “Stack Overflow” because it has some meaning for real programmers, not because it reflected a bug or problem. “Super User” is just as good a name. I get depressed by all these suggestions of “BurntChicken.com”, “LostYarmulke.com”, and “FallenArches.com” (for former owners of McDonald’s franchises, of course). Look for jargon that has meaning to the group of people you want to attract. Insider jargon is the duck call of insiders. Look at me! If I can say “contributory negligence,” I must be a real lawyer! .coms are a million times better than other TLDs. A domain name should be readable over the phone. Even on AT&T Wireless. Tricky spellings are always a bad idea. Similarly, dashes reek of desperation. Long names are not the end of the world. Using two or three words (or a couple of digits) is a good way to find available domains. If you have an idea for a domain that’s not yet registered, contact Robert, our community coordinator… if he deems the name to be non-awful, he’ll register it before someone snaps it up. If the name is registered but is being “squatted,” i.e., there’s something there, it’s just not anything worthwhile, ask the owner if they would sell. If it’s available for a reasonable amount of money, and it’s a great name, and the community loves it, we may even be able to buy it. In any case, the best way to get a good name is to brainstorm. That means that you want to throw out as many ideas as you possibly can… don’t hold anything back, no matter how stupid, because your stupid idea may trigger a great idea in someone else’s head."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/12/improvements-to-badge-system/","date":"2010-07-11T22:00:00.000Z","tags":["Community"],"title":"Improvements to Badge System","text":"Remember our old pal Sam Saffron? He’s been toiling away on a feature that has been heavily requested for over a year now — associating badges with the posts they were earned on. As of now, every new badge award — and most historically awarded badges — will tell you exactly why you got that badge. The next time you’re scratching your head wondering what that old Necromancer badge was for, just click through and find out: While the exploration and discovery of “why did I earn this badge?” was always intended to be part of the fun, as your list of badges and posts grew ever larger it felt more like looking for a needle in a haystack. As part of this major overhaul, we also added some bronze badges for our improved bounty system: First bounty you offered on your own question First bounty you manually awarded on your own question First bounty you offered on another person’s question First bounty accepted on another person’s question (not by the system) (badge names helpfully suggested by gnovice) As with all bronze badges, the intent here is to encourage people to explore the features and see how they work. And more bounties means better answers, and better opportunities to answer, for everyone! We’ve also added a gold badge to reward the master editors, in tandem with the existing Editor (first edit) and Strunk & White (100 edits) badges. Edited 600 entries Finally, we introduced another set of badges based on accepted answers to specifically acknowledge those users who participate in less popular topics: Zero score accepted answers: more than 5 and 20% of total Zero score accepted answers: more than 10 and 25% of total (update: Tireless was renamed to Tenacious) Remember, all the badges exist as a form of positive reinforcement, to identify and encourage behaviors we hope benefit the overall community."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/11/summer-2010-moderator-appointments/","date":"2010-07-10T22:00:00.000Z","tags":["Community"],"title":"Summer 2010 Moderator Appointments","text":"Due to a continual and ever-growing stream of moderator flags on the classic trilogy — and a desire to be respectful of the time our existing community moderators are so generously contributing to our community — I recently proposed on meta that we add moderators to each classic trilogy site: Stack Overflow (came in 3rd and 4th in our 2010 election) Super User Server Fault Please welcome our newest community moderators to the family! As always, I recommend reading through our theory of moderation which is best summarized by moderate as little as possible. Our community moderators are human exception handlers, but as the sites continue to grow (Stack Overflow’s growth is particularly extreme) those unusual exception conditions happen more often. Will there continue to be future moderator elections? Absolutely. My experience so far has taught me that — all other things being equal — it’s better to have more moderation than less. I agree that appointments aren’t ideal, I would prefer to run elections, but we have urgent needs on the trilogy. I believe that every moderator we’ve appointed today lives up to our moderator selection ideals: Must be a currently registered user in good standing. Must have a reasonably high reputation score to indicate active, consistent participation. Should exhibit patience and fairness at all times in their questions, answers, and comments. Should lead by example, showing respect for their fellow community members in everything they write. They should want the responsibility. Being a community moderator isn’t an obligation, it is completely voluntary. As Robert alluded to in his excellent Stack Exchange 2.0 beta primer, The 7 Essential Meta Questions of Every Beta, we will be building out community moderator election support as a standard feature of all Stack Exchange 2.0 sites in the near future. We’re not there yet, but soon!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/10/the-7-essential-meta-questions-of-every-beta/","date":"2010-07-09T22:00:00.000Z","tags":["Community"],"title":"The 7 Essential Meta Questions of Every Beta","text":"Groups have an amazing ability to self organize — not by following rules or hierarchies of authority, but through basic human nature. Have you ever found yourself in the middle of a spontaneous brainstorming session with a group of colleagues? Sometimes you just know that you’re at the start of something big — something important — when everyone is abuzz with ideas, collaborating wildly with enthusiasm and energy. That’s how it feels each time a new Stack Exchange site is launched. Not only in the questions and answers that are posted, but in the back room collaborations where the self-governance is starting to take shape — in meta. Every new Stack Exchange site — not some of them, but all of them — gets their own dedicated meta site. This is a “child site” set aside for discussing issues concerning all the behind-the-scenes intricacies of running the main site. But we provide very little guidance about how each new Stack Exchange community will make their site work for them. Each community starts with a blank slate: a meta site with no content and little guidance about what to do with it. Yet, with every new site to date, members didn’t wait on us. Those who were interested in community building, pitched in to set up the governance for their sites: getting to work on a site name and design, deciding issues of moderation and site policy, and discussing how the community will police themselves. I applaud their initiative. Take Ownership of Your Community Each community has to own the design and governance of their site. They can’t always expect us to show up and say, “Hey guys, which logo do you like?” Each community should work out how they’re going to come up with a logo on their own. But self governance is more about figuring out organically how all the tasks of defining and maintaining a community are going to get accomplished. Meta is your opportunity to take control; to take ownership of your site; to become self governing. It is your Constitutional Convention. Having said that, one of the benefits of being part of a larger network is eliciting cooperation and learning from other communities. Rather than letting future sites stumble their way through the same issues over and over again, I have compiled a list of the questions you should consider fundamental to a successful beta. The 7 Essential Questions of Every Beta Your meta site should be buzzing with activity. There are a lot of issues to be worked out. Take it upon yourself to ask these questions early in the beta period. The answers will have a lasting effect on how your site operates for a very long time. 1. Are questions about [subject] on or off topic? The single most important design element of a new Q&A site is the questions on the front page. They become the de facto definition of the site, trumping anything defined in Area 51 or the Help Center. You should actively watch the earliest questions with an eye for quality and purpose. Ask yourself: “Is this the type of question we want on this site? Is it pushing the boundaries of on- and off-topic questions? Are we opening a can of worms?” Talk about these issues in meta, early and often. They are the key to establishing the boundaries around your site. 2. What should our documentation contain? Much of the site’s documentation will be the same as on every other Stack Exchange site: “be nice,” “how to create an account,” “how to ask questions” — it’s all pretty static. Even the sections about “what kind of questions should I (not) ask here?” comes primarily from the Definition phase of Area 51. But the questions you want to discuss in meta are those issues specific to your site that need to be mentioned in the Help Center. Take Super User’s “About” page as an example: Super User is for computer enthusiasts and power users. … Ask about… Specific issues with computer software, hardware or networking Real problems or questions that you’ve encountered Don’t ask about… Anything not directly related to computer software or computer hardware Questions that are primarily opinion-based Questions with too many possible answers or require an extremely long answer Videogames, consoles, or other electronic devices, unless they connect to your computer Websites or web services like Google, Facebook, Twitter, and WordPress Shopping, buying or product recommendations Issues specific to corporate IT support and networks These are then elaborated on in SU’s What topics can I ask about here? page. It took us almost a year to figure out the list of “we want these sort of questions” and “we don’t want these sort of questions” on Super User. Area 51 gave you a head start but you should also be working out other scope- and documentation-related issues specific to your topic and your community. 3. How should we tag questions about {subject}? Tagging questions is an ad hoc way of organizing content. It is mostly improvised by users asking the questions… but only to a point. Tag auto-completion and community editing will influence the proper use of tags for a very long time. The type of things you should look out for: how to handle acronyms common to your subject, brand versus product-specific tags, common terminology, and the use of semantic tags to categorize specific types of questions unique to your community. Every site will have their own unique set of tag-related issues. The best way to identify tagging problems is to watch new posts closely, and try to build tag wiki excerpts that explain what the tags are for. When tags become ambiguous, too specific (or not specific enough), or just somehow off, raise those issues in meta, and quickly. Proper tagging is very much a lead-by-example activity. The sooner you get the “community standards” for tagging ironed out, the less chance you’ll have to face the drudgery of cleaning them up later. 4. Who should the moderators be? The issue of holding fair elections is largely technical. The long-term solution will likely come from us. Still, bring up these issues in meta. There is a lot of room for innovation. Discussing the criteria of a great moderator is important and picking out potential candidates is a great way to introduce outstanding contributors to your community. And we are completely open to appointing temporary Moderators when someone’s contribution makes them a standout choice for your community’s human exception handler. For more detail see: Moderator Pro Tempore and Stack Exchange Moderator Elections Begin 5. What’s the “elevator pitch” for our site? Imagine you’ve just gotten on an elevator with a friendly stranger. You have precisely one floor to describe your community to them. What would you say? The elevator pitch is a brief sentence that describes what your site is about. Every word counts! Once decided, it can be sliced and diced to form: the tagline the motto the blurb under the logo a convenience redirect “nickname” for the site perhaps eventually the domain name in some form (Due to a variety of practical difficulties with domain names, we prefer to de-emphasize domain name selection. Most sites will retain their topic.stackexchange.com names indefinitely.) Naming is hard — really hard. But if you can come up with a sensible elevator pitch for your community, it’s a great starting point. For more detail see: Stack Exchange Naming for Dummies 6. What should our logo and site design look like? This one is pretty straightforward. Solicit contributions, throw out ideas, post preliminary (or finished) designs, and be supportive and respectful of other people’s ideas and creativity. We have designers on staff who will actively help come up with site designs but, if an idea stemming from the community stands out as exceptional, we are happy to use it. 7. How do we promote our site? This is rapidly becoming a hot issue across the entire network: how to promote your site and how to reach out to the experts and peers in your industry. We can come up with budgets and promotions but the means and ideas about how to reach your target audience HAS TO come from you and your community. Has to. Has to, has to, has to! We simply are not experts in your field. We don’t have the the connections nor the experience you bring to the table. You are both our evangelist and our ambassador — and sharing links to great questions and answers is the best way to start. Stack Overflow has been a huge, red-hot success story in the programming arena. But that early success came in large part to the participation of Jeff Atwood and Joel Spolsky, both cult-classic bloggers and celebrities in their field. We want that same success for you and your community. That’s why we need to identify the Jeffs and the Joels of your industry. We need bloggers, pundits, podcasters, publishers, celebrities… anyone who can rally the troops, so to speak. Meta is the perfect venue reach out and ask around about who knows whom. Ask your friends to ask their friends. The people needed to make your site a huge success are already within your reach. For more detail see: A Recipe to Promote Your Site"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/09/stack-exchange-on-herding-code/","date":"2010-07-08T22:00:00.000Z","tags":["Company"],"title":"Stack Exchange on Herding Code","text":"I was invited to participate again on the latest Herding Code podcast. This is my second appearance on Herding Code — you may recall I was originally on the show way, way back in August 2008! Where the original podcast was about Stack Overflow, the site, this one is generally about Stack Exchange, the network. The four hosts of the program — Jon Galloway, Kevin Dente, K. Scott Allen, and Scott Koon are old pals, though I think I had so much pent-up podcast monologue inside me that they didn’t have much of a chance to get a word in edgeways. Sorry guys. As usual, I blame Joel. Topics covered in the 84 minute podcast include the new sites we’re launching through Area 51, the Stack Exchange API, and many of the key social and technical issues we face in growing the network. Thanks for having me on, and I hope the conversation is useful! Listen to Herding Code Podcast #87"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/08/stack-exchange-api-1-0-imminent/","date":"2010-07-07T22:00:00.000Z","tags":["API"],"title":"Stack Exchange API 1.0 Imminent","text":"Remember that totally awesome Stack Exchange API contest we announced on May 23rd? Specifically, one of the rules of the contest? Your app must work against the final, 1.0 released version of the API. We’ll give you at least a week’s notice here on the blog when that’s closer to happening. Well, if you’re planning to enter this contest, you might want to get a move on — the 1.0 release of the Stack Exchange API is imminent! We plan to bless 1.0 of the API this Friday, July 9th. Due to the many Area 51 sites we’re launching, things are a bit busy. That’s good news, though, for my fellow procrastinators — it means we’re extending the deadline for the API contest slightly. We now plan to pick the contest winners in the first week of August. So, if you’re thinking of entering the contest, you still have a few weeks to build something prize-worthy. visit stackapps.com and start building awesome stuff with our API!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/07/area-51-asking-the-first-questions/","date":"2010-07-06T22:00:00.000Z","tags":["Area51"],"title":"Your New Site: Asking the First Questions","text":"What is the single most important design element of a new Q&A site? The name? The logo? The colors? The FAQ? Think about that for a moment — see if you know the answer — and we’ll get back to the question later. If you’ve spent any time on our back-channel at meta.stackoverflow.com, the most recent pastime has been proposing ways to redo Area 51. Most of the ideas suggest a need for more up-front discussion: discussion about the questions, discussion about tagging, discussion about the FAQ, etc. But in Area 51, most of that detailed discussion takes place in the last phase — in Beta. Last week, Area 51 launched Web Apps, the first site to reach private beta. As with each new Stack Exchange site, Web Apps received its own meta discussion forum to discuss issues such as the site’s design, what types of questions to ask, proper tagging, and picking a domain name. And among those earliest discussions, members were asking about the best way to seed the private beta site with questions. Seeding the Site I was a bit put off by the context implied by “seeding the site.” The word seeding suggests to me that we’re coming up with questions just for the sake of asking questions. My concern is, if people feel that the author doesn’t really care about the answer, the whole exercise would likely be perceived as a waste of time. But it’s a popular way to avoid the classic “empty restaurant syndrome.” Back when Stack Exchange 1.0 sites were struggling, administrators had the problem of jump-starting their communities. The best way to overcome this classic chicken-or-the-egg problem was for the administrators to proactively seed the site with content. The downside is that those hypothetical questions tend to be somewhat pedestrian for an expert Q&A site. When put on the spot to post content, we’re likely come up with uninspired questions that anyone would ask. And they’ve all been asked 100 times before on every other site on that subject. But Stack Exchange doesn’t have the empty restaurant problem. Case in point: One week prior to the full launch of Web Apps, we opened the site to a limited number of members for a short, closed beta test. Even with only a few hundred users, Web Apps quickly lit up with activity. 48 Hours of Web Apps: How did Web Apps overcome the empty restaurant problem? Area 51 is designed to build up momentum for a site prior to launch. On opening day, hundreds (soon to be thousands) of people pile in to ask and answer questions when the site first opens. So when someone asks a question, it gets answered… quickly. So when the meta discussion turned towards the seeding of questions, I suggested that we shouldn’t be asking seed or sample questions on Web Apps. Users should be asking real questions about problems they actually have. That set off a bit of a panic. There was concern that a few hundred expert users will not likely have many real problems they need solving and, without that activity, the site would never get out of beta. Well, to be fair, there’s seeding and then there’s “seeding.” It has long been established that no question is too entry-level nor too basic. Everyone is welcome. But, in these earliest days, we are DESIGNING a site for experts. To attract experts, you need a site where people are asking very interesting and challenging questions, not the basic questions found on every other Q&A site. Remember, the pro sites WILL attract the enthusiasts, but not the other way around! The earliest questions on a site will set the tone and topic of the site for a long time. And that’s when it occurred to me: The earliest questions you ask on a Q&A site aren’t about Q&A at all. It’s All About Design Design doesn’t just mean the obvious issues like designing the logo, or picking colors, or coming up with a name, or writing the FAQ. The very act of asking questions, answering questions, tagging, voting… everything. It’s all about design. That’s why early participation is really, really important. Those earliest questions on your site say a lot about the community. So, if you want to ask question just for the sake of asking questions, at least make them really good ones. Ask real, expert questions. In short, you are going to get the site you build. Ask your first questions with an eye on the site’s design. Those first questions will likely end up on the front page when potential experts see your site for the first time. Make those first questions exemplary questions that are worthy of imitation. So, back to our quiz: “What is the single most important design element of a new Q&A site?” The answer is obviously, “The questions on the front page.” Any other design issues after that are a distant second."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/07/area-51-first-public-beta/","date":"2010-07-06T22:00:00.000Z","tags":["Area51"],"title":"Area 51: First Public Beta","text":"We just released our first Stack Exchange 2.0 site into public beta: Web Applications Q&A site for experts and advanced users of web applications.Web Apps was one of the hottest proposals from the earliest days of Area 51 so there’s little doubt that this site will be huge. After a one-week private beta, the site was release to the public earlier today. We’ve already received coverage on LifeHacker — Web Apps is a Q&A Forum for Web Application Enthusiasts. I don’t think I can sum up our enthusiasm any better than they did: “Web Apps runs on the same engine and is developed by the same folks who unleashed the incredible Stack Overflow on the world, and if Web Apps is as helpful for advanced web users as Stack Overflow is for programmers, it’s definitely a site worth bookmarking.” Lifehacker, July, 2010 Come check it out while low user numbers are still available!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/07/02/our-designer-in-residence-jin-yang/","date":"2010-07-01T22:00:00.000Z","tags":["Company"],"title":"Our Designer in Residence: Jin Yang","text":"I’m pleased to announce we now have a full-time, bona fide designer on our team: Jin Yang. I worked with Jin a bit in constructing the Super User design last year, but he was absolutely instrumental in putting together our amazing Area 51 design and the equally impressive ‘sketchy’ design for the current Web Applications site proposal private beta. (click through for fuller sized screenshots) update: now in public beta, visit webapps.stackexchange.com to see the design live! If you committed to Web Apps, you should be on the private beta whitelist to visit the site and see the design for yourself. Otherwise, Web Apps will move into public beta on the 7th, and you can check it out then. More private betas of Area 51 sites which have reached the private beta threshold are forthcoming. If there’s a site proposal you’d like to see exist, be sure you commit to it on Area 51 — and share the proposal link with anyone else who might be interested! I think the excellence of Jin’s design work speaks for itself. He also has a strong background as a web developer (yes, he can code — I can testify to that, as I met him in a previous job 7 years ago) and he’s one of the most pragmatic designers I’ve ever had the pleasure of working with. You can check out more of his work, and his outstanding blog, at 8164.org. Keep an eye open for new blog entries covering the specifics of the work he did on Area 51!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/29/server-fault-hiring-from-the-community/","date":"2010-06-28T22:00:00.000Z","tags":["Community"],"title":"Server Fault: Hiring From the Community","text":"Remember when I talked about Eating Our Own Careers Dogfood? Well, that applies to all of our sites, not just Stack Overflow. Including Server Fault. I’m pleased to announce we’re expanding our team on the System Administrator side with Server Fault user Kyle Brandt. (yes, technically this means Kyle is Stack Overflow Valued Associate #00009, since the actual name of the company is Stack Overflow Internet Services, Incorporated. But I personally prefer to think of him as Server Fault Valued Associate #00001.) In addition to helping us build out the bigger, badder New York datacenter and assisting us in keeping our servers and network running smoothly, Kyle will be driving the Server Fault Blog. We believe in being as transparent as possible about what we’re doing, and how we’re doing it — both by actively participating in Server Fault every day and by contributing information and support to the greater sysadmin community. To that end, Kyle has already published a great new post about fault tree analysis on his very first day. You can expect more of this in the future. Will we be doing more hiring from Server Fault? You bet your sweet RAID arrays we will! Stay tuned."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/27/area-51-trusting-the-community/","date":"2010-06-26T22:00:00.000Z","tags":["Area51"],"title":"Area 51: Trusting the Community","text":"The team and I have been busy cranking out Stack Exchange proposals like crazy. And by “the team and I,” I mean “the team.” They write tons of software while I chime in with encouraging remarks like “good job” and “move this thing over there.” The tools our developers create provide an unprecedented opportunity for communities to create world-class Q&A sites. So, by “the team,” what I really mean is “you, the users.” Creating an environment where people want to create great Q&A sites is much harder than just throwing together a bunch of sites on your own. But no one person has a complete grasp, nor even a very good one, about what the next great site will be. So we direct our efforts, not to creating great sites, but to create an environment where people will create great sites together. In short, you learn to trust the community. The detractors of our community-driven process said we were doomed to create little more than a bunch of technical sites for programmers. They go on about how the Stack Exchange software appeals only to somewhat-geeky tech heads. Or that our audience isn’t diverse enough to create sites for a mainstream audience. Ha! In our first weeks of operation, Area 51 has already shown great diversity. Our top 20 proposals include sites about food & cooking, home improvement, the English language, photography, personal finance, bicycles, and home brewing. Indeed, of the top 20 proposals nearing creation, one third of them are NOT about technical subjects at all! People are absolutely lousy at predicting what others will do with new technologies before they try them. That’s why we maintain an open dialog with our community. Great ideas come, not by planning behind closed doors, but through an open process of collaboration, trial, and feedback. We encourage that same philosophy for the creation of sites. Users collaborate through a series of trial-and-error experiments. Some of them work out, some of them don’t. But people quickly learn the difference and the best ideas move forward. Users learn to trust the community. My job as Community Coordinator is to engage with the users. By helping individuals use the tools we provide, both technically and socially, communities learn to encourage productive activities that lead to great sites. Still, I have to remind myself every day that I am not there to pick which ideas will work and which ones will fail. People are often looking to me for a rigid, explicit statement of what is acceptable and not acceptable in Area 51. Is it better to have sites with specific topics or more general topics? How much should sites overlap? Should we allow sites that are a subset of another? Should we merge near-duplicate proposals? Thankfully, we never had to answer those questions by formal policy. The wisdom of the crowds is working almost magically, in this regard. I feel an odd sense of pride every time I see a good proposal — at least as far as I can judge these things — and that proposal also receives approval and enthusiastic support by the community. It is a validation that the system is working. That validation comes also when I develop a concern over a proposal somewhat lacking. My trust in the community is validated when misguided proposals never advance much beyond the initial definition. Stack Exchange sites aren’t created from the hard work of one individual. Great Q&A sites take the collective effort of much larger community working together. And that community, working in aggregate, seems to make some pretty solid choices in choosing what works and what doesn’t. So, the next time you find yourself agonizing over the best on-topic question, or whether to close that proposal gone awry, learn to trust that others are all working collectively together to get the most out of the process. Learn to trust the community."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/25/stack-exchange-data-explorer-open-sourced/","date":"2010-06-24T22:00:00.000Z","tags":["CC Wiki Dump"],"title":"Stack Exchange Data Explorer Open Sourced","text":"As promised, the Stack Exchange Data Explorer — a web-based tool for querying our creative commons data — is now open source! This is, of course, the project that our newest Valued Associate, Sam Saffron, has been working so hard on over the last 6-8 weeks. The project is hosted at Google Code in a Mercurial repository: http://code.google.com/p/stack-exchange-data-explorer/ The SEDE is built using the very same software stack we use on Stack Overflow: jQuery .NET 4.0 C# Visual Studio 2010 SQL Server IIS7 You can get started using the completely free Visual Studio 2010 Express Edition. Check out the readme.txt for additional details, or browse the source through Google Code’s web UI. It was always our hope that the SEDE could be used as a freely embeddable web tool to teach SQL with a sample dataset — and now, the code itself is available to modify, improve, and learn from as well."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/25/welcome-stack-overflow-valued-associate-00008/","date":"2010-06-24T22:00:00.000Z","tags":["Background"],"title":"Welcome Stack Overflow Valued Associate #00008","text":"I’d like to introduce Stack Overflow Valued Associate #00008 — Sam Saffron. Sam is from Australia, yes, that Australia, but I’ve forgiven the continent. Well, mostly. Sam, in addition to being an avid participant on Stack Overflow and Meta Stack Overflow, has been busy building stuff. His Media Browser is an open source plugin for Windows Media Center, written in C#, that lets you browse your ripped media with a slick 10 foot interface. In supporting the community around Media Browser, Sam created a web-based customer support tool, Community Tracker (written in Ruby on Rails), with many features inspired by Stack Overflow. In addition to another international viewpoint for the team, it’s his extensive experience in our community and in creating his own communities that Sam brings to help us build Stack Overflow and Stack Exchange. Welcome to the team, Sam!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/24/devdays/","date":"2010-06-23T22:00:00.000Z","tags":["Company"],"title":"DevDays will return, but not until 2011","text":"Remember the awesomeness that was Stack Overflow DevDays? If you’re coming in late… last fall, we took Stack Overflow on the road to ten (10!) cities with awesome one-day conferences. Over 4000 people attended to hear tutorials on jQuery, ASP.NET MVC, Python, iPhone development, and some other topics which varied from city to city. It was tiring, but a lot of fun. Well, people keep asking Jeff what’s up with DevDays 2010, and Jeff keeps pestering me to write a blog post so that he can just reply with a URL instead of needing to explain the whole story. Here is that URL. DevDays was awesome, a lot of fun, a ton of work, and something we just don’t have the time (or energy) to do again in the same format. $100 was way too cheap. We had to cut so many corners the to get the cost down that low that the logistics were a dog’s breakfast. My original thought of a touring troop of five or six speakers going to ten cities proved to be impossible… it was hard enough getting speakers to do one or two cities each, so I had to line up about 60 speakers when I was really just hoping to need 5. Essentially, DevDays took three months of my full time attention, and we’ve got too many other things to do this year to do that again. So here’s the plan. From now on, instead of 10 little cities, we’ll try to get it down to four much bigger ones. I’m thinking East Coast, West Coast, Australia, and the UK. Instead of a cheapo one day conference, we’ll do something a little bit more substantial (maybe 2 days) and at a much more sustainable price. Instead of me doing everything, we’ll find some way for the community to help plan the agenda, especially when it comes to choosing speakers. And, ultimately, that probably means that we’re looking at Spring 2011. (By the way, if you know of someone who you think would be an AWESOME tech conference organizer, please bring them to my attention!)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/23/careers-now-more-awesomer/","date":"2010-06-22T22:00:00.000Z","tags":["Careers"],"title":"Careers: Now More Awesome(r)","text":"Careers has always been close to our heart, but we haven’t always been able to give it the attention we wanted to give it. No longer! We now have a dedicated development team and a dedicated sales team working tirelessly to make Careers the best place on the internet for programmers to find great jobs and for employers to find great programmers. The sales team has been busy. As of this writing we have 351 jobs listed: Earlier today it was 347 and by the time you read this it may well be more. Contrast that with only 74 jobs back in January! The dev team has been busy too. We rolled out some changes yesterday: We consolidated jobs.stackoverflow.com and careers.stackoverflow.com under one domain — http://careers.stackoverflow.com/ — gave Careers a brand new look, and added search controls to the home page so you can quickly find the jobs you’re looking for. We added keyword search, improved location based searching and integrated the search controls into the page so you can search and scan in the same place. We also added a preview line to the listings so it’s easier to decide what jobs you’d want to look at. And finally, we added some controls to the job detail page to make it easier to navigate between jobs. The next step is to make it easier for employers to post and manage jobs. After that is done we’ll turn our attention over to the CV filing and searching. And after that is done we’ll think of some other great things to do, no doubt with your help — keep the feedback coming in the [careers] tag on meta.stackoverflow.com! For careers, success equals something like [number of candidates] x [number of employers] x [number of jobs]. We’ll keep investing in Careers, by building more and better functionality for you and by selling more services to more employers, until we are synonymous with the best way to find an awesome job or a world class programmer — or sysadmin, or QA tester, or UX designer, or … The Careers Team careers@stackoverflow.com Amanda, Attila, David, Korneel, Matt, Nick and Jin"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/23/workin-on-ur-problemz/","date":"2010-06-22T22:00:00.000Z","tags":["Background"],"title":"Workin On Ur Problemz","text":"If you’ve ever been unfortunate enough to see our “workin on ur problemz” Stack Overflow error page … … let me apologize on behalf of our team. I originally found this image in some random image search and added the lolcat caption myself. I’ve often wondered where this image came from, and what sort of computer the cat in it is “using”, but I thought sourcing the image would be impossible. But nothing is impossible for our talented community of users — they totally nailed this one! Let’s start with Andrew Grimm who was curious enough to finally ask on meta: What kind of computer is being used in “Workin on ur problemz”? Gnoupi identified the computer as a “V-Tech Talking Whiz Kid Mouse PRO Deluxe”. It’s a now-obsolete toy computer for children; even the newer models of this series from VTech are no longer sold. The only pictures available are from eBay auctions. Kyle Cronin sourced the photo and the cat, Zoe, from a Reuters Oddly Enough blog entry: Zoe, a domestic shorthair cat, touches the mouse of a computer during a media preview for The Cat Fanciers’ Association’s championship in New York October 10, 2007. I found that eBay auction I mentioned above too tempting to resist … so now my son Henry (aka Rock Hard Awesome) can be WORKIN ON UR PROBLEMZ, too! (A special thanks to Gnoupi, Kyle Cronin, and Andrew Grimm. You guys are awesome. Also, who knows where this laptop might end up next? The possibilities are truly endless!)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/19/improvements-to-bounty-system/","date":"2010-06-18T22:00:00.000Z","tags":["Community"],"title":"Improvements to Bounty System","text":"We originally rolled out the question bounty system in January 2009. It has worked fairly well, in terms of motivating answerers and increasing the connection between askers and answerers. But I think we made some mistakes in being overly strict in our design of the bounty system. Just take a look at some of these highly voted meta requests in the [bounty] tag: How about making it possible to set up bounty on someone else’s question? Why an answer can’t be accepted after an unresolved bounty? Please do not auto select answers on bounty questions Why do I always have to accept an answer at the end of the bounty period? Should SO introduce a Re-Bounty feature The feedback on the bounty system is quite extensive; this is an indication that there are what I’ll euphemistically call er … “issues” … with the current system. Well, I’m happy to announce that we’re improving the bounty system to address (almost) all of these issues. As of now: Any user with sufficient reputation can start a bounty on any question A question may have multiple bounties, though only one active bounty is allowed at any given time. Bounty awards are no longer tied to accepted answer in any way. Most of this is adapted from a great idea from our Community Coordinator, Robert Cartaino. Assuming you have the minimum reputation required to award a bounty (currently 100), every question of 2 days of age or older will now show the “start a bounty” link at the bottom of the question. Here, you can slice off a (non-refundable) piece of your own reputation — from 50 to 500 — to grant to one of the question answers of your choice. Once started, the bounty amount and name of the bounty owner is listed at the bottom of the question: (Of course the bountied question will appear on the homepage featured tab and in all question lists with the bounty indicator, as before. Part of what you’re “paying for” with the bounty is to get additional attention for your question, over and beyond what a normal question gets.) If you’re the bounty owner, you can award the bounty to a particular answer by simply clicking the bounty amount icon that appears next to each answer, as pictured below: There are still some rules, of course: All bounties are paid for up front and non-refundable under any circumstances. Users may only have one active question bounty at any given time. Questions may only have one active question bounty at any given time. The bounty owner must wait 24 hours between the time starting the bounty, and the time the bounty can be manually accepted. If the bounty owner does not award the bounty within the 7 day bounty period, the same auto-award rules apply, as before: any answers to the question posted after the bounty started, with at least 2 upvotes, are eligible for auto-accept and earn half the bounty amount. If there aren’t any answers meeting that criteria, no bounty is awarded. The system no longer tosses in +50 bonus reputation to a bounty. We feel this newer, much more open bounty system no longer needs that incentive. Once awarded, you’ll see the bounty amount icon permanently affixed to the answer it was awarded to — and, again, all bounties are completely independent of and unrelated to accepting an answer. Before, bounty was strictly limited as a one-shot (tied to accepted answer) for question owners only. It’s now a much more flexible system: Feel like a particular answerer on a question did a fantastic job and deserves some kind of bonus, beyond a simple upvote? Award them a bounty! See a question that you’d really like answered, too? Help out the question owner by placing a bounty on it! Want to provide a boost to a particularly well asked question (or answer) by a new user? Start a bounty on it! I’m excited about these changes, because they open up bounties to a much larger audience — and make it easier for us to help contribute our own reputation toward others getting great answers to their questions!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/16/area-51-we-come-in-peace/","date":"2010-06-15T22:00:00.000Z","tags":["Area51"],"title":"Area 51: We Come in Peace","text":"You guys remember when the Interweb was full of information you couldn’t vote on? And blog posts you couldn’t fix when they were wrong? Early humans used message forums that were sinister, scary places just teeming with “threads” and “conversations” that intermingled willy-nilly and — I swear on my children I am not making this up — the best information WASN’T automatically sorted to the top. Ha!, imagine. The very thought that we once tolerated an Internet where anyone couldn’t just start a world-class Q&A site on virtually any subject sends shivers down my spine. I mean, really, that’s so 2009. The modern Internet isn’t the closed, read-only place it was back in April. We have Area 51. Area 51 is the new staging area for the Stack Exchange Network where users can create Stack Overflow-like sites on every imaginable topic. It’s the answer to everyone who has come to us and asked “can we use your engine to build a Q&A site about {topic}?” After a short-lived, paid hosting model, Stack Exchange sites are now created for free through a democratic, community-driven process. If you want to create a Q&A community, propose it! If your idea gets sufficient support from a group of dedicated users, then it gets created. It’s that simple. The early results are inspiring. Thousands of people are already giving voice to hundreds of proposals, even before Area 51 was widely announced. Who knew that programmers liked to talk about something besides programming and unicorns? If you’ve got a great idea for a site, visit Area 51. We’ve got 7.5 million people visiting us each month, so we’ve got the audience. We’ve raised enough money to make Stack Exchange absolutely free, so all we need is ideas. Or better yet, browse through our proposals to help get the site ideas you love off to a strong start. Area 51 is still in beta testing so please read the FAQ and post any problems or suggestions to meta.stackoverflow.com. Z@rpqf says, “Build awesome sites!” Z@rpqf Head Alien in Charge Area 51 <a href=\"http://area51.stackexchange.com\">http://area51.stackexchange.com</a> If you’ve got a great idea for a site, visit Area 51. We’ve got 6.7 million people visiting us each month, so we’ve got the audience. We’ve raised enough money to make Stack Exchange absolutely free, so all we need is ideas. Browse through our proposals to help get the site ideas you love off to a strong start."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/14/new-hires-in-new-york/","date":"2010-06-13T22:00:00.000Z","tags":["Background"],"title":"New Hires in New York","text":"The New York team has been growing, too! New York, in addition to being the official corporate headquarters and the location of our sales team, has a development team working on two important projects. I’d like to introduce you to those members of the team. Working on Stack Exchange 2.0, we’ve got David Fullerton: and Emmett Nicholas: Both David and Emmett are veterans of Stack Exchange 1.0. Working on Stack Overflow Careers, we’d like to welcome new associates Matt Sherman: Jason Punyon: and product manager Korneel Bouman: You’ll probably see David, Emmett, Matt, Jason, and Korneel hanging out on meta and, more importantly, you’ll see the great software they ship. Welcome aboard!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/13/introducing-stack-exchange-data-explorer/","date":"2010-06-12T22:00:00.000Z","tags":["CC Wiki Dump"],"title":"Introducing Stack Exchange Data Explorer","text":"Everything contributed to the Stack Exchange network of websites is licensed under Creative Commons Attribution – Share Alike. This means it belongs to everyone, and can be freely reused (even commercially!), so long as it is follows our simple rules of attribution. That’s our contract with the community — it’s your generously contributed content that makes these websites worth visiting in the first place! Thus, we provide dumps of all the public data in the current Stack Exchange network (Stack Overflow, Server Fault, Super User, and Meta) every month, like clockwork. But if you just want to play with the data, it’s kind of tedious: you have to download the entire 700 plus megabyte archive, import it into some kind of database system — and only then can you even begin thinking about how to query out the results you’re looking for. Well, I’m pleased to announce that we now officially support a web tool for sharing, querying, and analyzing the Creative Commons data from every website in the Stack Exchange network — the Stack Exchange Data Explorer. The Stack Exchange Data Explorer, or SEDE: provides easy web-based access to the latest and greatest monthly Stack Exchange website data dumps* gives us an Open Data Protocol (odata) endpoint allows testing, running, editing and permalinking to public queries against our corpus of data with a simple, syntax-highlighted web UI can be used as a permanently linkable tool for teaching general SQL and relational database concepts — we can be our own Northwind or Pubs database, when answering questions tagged [sql]! hosted on Windows Azure so it’s speedy, scalable, and always available (and did I mention, generously sponsored by Microsoft?) built from the same ASP.NET MVC software stack as our own engine, and will be open-sourced so others can learn from the code We’ve been working with Sam Saffron to build this out, and even though this is only a public beta, it’s already amazing! But don’t take my word for it — check out the Stack Exchange Data Explorer yourself at … http://odata.stackexchange.com … and leave any beta feedback in the [data-explorer] tag on meta. The ultimate goal of all of our sites is learning, and making the Internet a slightly better place. I believe the SEDE achieves both of these goals in a rather serendipitous way — it helps us teach SQL and relational databases by querying the very posts we’re creating as we teach! Yes, maybe it’s a little geeky, but it is magical to me. we are looking at eventually making special weekly or biweekly dumps for SEDE If you love this data exploration or making data exploration easier for others, you may be interested in a career in this field. Check out the data science job openings on Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/11/free-vote-based-advertising-launches-second-round/","date":"2010-06-10T22:00:00.000Z","tags":["Community"],"title":"Free Vote-Based Advertising Launches Second Round","text":"It’s time once again to support your favorite open source project through our Free Vote-Based Advertising for Open Source Projects. We are clearing the leader boards to start the second half of 2010 anew. For the past six months, Stack Overflow has been providing free advertising for open source projects. For those of you who missed it the last time around, this is a true, grass roots movement for programmers to publicize their favorite open source projects. Users create the ads, users vote for their favorites, and Stack Overflow features them in a sidebar ad slot. Congratulations to the top-voted projects from the first half of 2010: In the last round, the top-voted ads received over a 1/4-million impressions each. Not a bad deal for a grass roots, community-created advertising give-away. Now it’s time for round 2. Round 2 Each advertising period runs for about six months. To start off the second half of 2010, we have reset the voting and cleared the ads board. Now you have another chance to create a Free Vote-Based Advertisement for an Open Source Project. Here’s how it works: Visit the special meta.stackoverflow.com question thread for this advertising period. It will always be tagged [open-source-advertising]. Construct a 220×220 image advertisement for the open source project that you would like to publicize to your fellow programmers. Your ad should be an original creation which has not previously appeared on Stack Overflow. Post an answer containing your image to the question. It must be in exactly the right format, as documented in the question itself. Get at least six up-votes for your answer. Your advertisement will now be featured in Stack Overflow’s remnant ad inventory, in the sidebar ad slot on most pages. Then, visit the ad summary page, and mouse-over the ‘view stats’ link to see how each ad is doing. So, let’s flex those Photoshop GIMP muscles and create an ad for your favorite, open source project to bring them some much-needed publicity! Submit your ad here And don’t forget to come back often and vote for the newest entries."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/10/improved-question-merging/","date":"2010-06-09T22:00:00.000Z","tags":["Community"],"title":"Improved Question Merging","text":"The ability to cast a question deletion vote against a closed question is earned at 10,000 reputation. It was always intended as a tool for getting rid of useless, bottom-of-the barrel type closed question content. But lately we’ve had to deal with a rash of question deletions, some of which I felt destroyed useful answers. To address this issue, we instituted scaled deletion votes. Question deletion still requires at minimum 3 votes from 10k rep users to achieve a delete (or undelete) — but the more votes a question and its answer have, the more delete votes required to delete it. This is really more of a safety measure than a complete solution, though. As usual, I blame myself*, but my original advice stands: if there’s anything of worth in the answers, the question should be merged with another question rather than being deleted! (and if there’s nothing of worth in the question or answers, pull the deletion trigger with my blessing. Heck, while you’re at it, give it a double-tap to make sure it stays down.) But our old merge process was kind of, er, broken. Our old merge … destroyed one of the questions left no trace of the old question, leaving users scratching their heads and wondering “what happened to my/this question?” left almost no visible trace of the merge in the revision history of the surviving question I guess I picked the wrong day to stop sniffing glue when I came up with that merge implementation. But no more! Our kinder, gentler question merge has none of these problems! It behaves much more like a typical duplicate close, with the exception that the answers are migrated to the target question. Let’s try an example. These two questions are fairly similar, so I’ll merge them on our development tier: Regular expression to find URLs not inside a hyperlink How to wrap text in a hyperlink ONLY if it isn’t already wrapped in a hyperlink disclaimer: I am not actually proposing these two particular questions get merged, I just needed a plausible looking example to illustrate this blog post! If you believe these should be merged, flag them for moderator attention and indicate what you believe the merge target should be. (Yes, merging is still a moderator only function at the moment.) If the moderator agrees, the merge will happen. In this case, I felt #1 had the stronger title, so I did the merge in that direction. The source merge question isn’t deleted, yet; once its answers have been merged into the target, it’s left around as a stub for people to find — with a little signpost directing them to the merge target: merged by Jeff Atwood ♦ 8 secs ago this question was merged with Regular expression to find URLs not inside a hyperlink because it is an exact duplicate of that question. We also record detailed migration records in the revision history of both questions and the migrated answers, so you can always get an audit trail of what happened, and the process is theoretically reversible. (Except for comments on the source question, which are unavoidably de-parented as they are migrated to the target question.) Now, if the merge source question is eventually deleted, we can handle that, too — we do an automatic 301 redirect to the merge target. I’m not necessarily advocating deletion, either; we want some of these merge stub questions hanging around so people can find two “identical” questions that were asked in two totally different ways. The exact, perfect duplicate question, in my experience, is much more rare than people think. Anyway, now that we finally have a much saner question merge process, I urge you 10k users to take your collective itchy fingers off those deletion triggers and consider — should this question be merged, instead? * somehow we forgot to limit the # of delete votes 10k users could cast every day, which was a disaster waiting to happen. Almost every other vote type is rate limited, and for good reason."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/09/welcome-stack-overflow-valued-associates-00006-and-00007/","date":"2010-06-08T22:00:00.000Z","tags":["Background"],"title":"Welcome Stack Overflow Valued Associates #00006 and #00007","text":"I’m pleased to announce that Stack Overflow Inc has added two more valued associates to our team: 00006 Marc Gravell, United Kingdom Marc is a long time elected community moderator, C# MVP, and the #2 user on Stack Overflow, as sorted by reputation. Just under some guy I’ve never heard of. 00007 Ben Dumke, Germany Ben is the perpetrator of the gloriously wonderful Unicornify (see April 1 2010), HREF overflow, the not a real question game — as well as dozens of prescient meta suggestions and bugfixes. You’ve probably noticed by now that neither Ben nor Marc live in the United States. The last time I checked, only 36% of Stack Overflow’s traffic was from the USA. Where exactly do you think that other 64% of our traffic comes from? As I alluded to in a recent blog post, the way we build the Stack Exchange network should be genuinely reflective of what it already is — websites with avid international users all over the globe. That’s why I’m so proud to have a truly international development team at last, built by dogfooding from the amazing worldwide community that has grown up around our websites. Welcome Marc and Ben. It’s an honor to serve with you in this vast and endless sea. (Oh, and keep your eyes open, because we aren’t quite done adding team members yet.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/08/guidelines-for-use-of-our-logo-and-name/","date":"2010-06-07T22:00:00.000Z","tags":["Community"],"title":"Guidelines for Use of our Logo and Name","text":"Since the Stack Exchange API went into public beta, and we started our totally awesome API contest, we’ve run into a bit of self-inflicted confusion: How can I use the Stack Overflow | Server Fault | Super User name and logo in my application? While we had a general “we know proper usage when we see it” idea about this, we didn’t have a document describing the specific do’s and don’ts. But now we do! Guidelines for the Use of the Stack Exchange Trademarks (also available by clicking the legal link in the footer of any network site page) While this is the most urgently needed info we didn’t have, we also took the opportunity to improve a few other legal documents for the brave new world of Stack Exchange 2.0: Terms of Service Privacy Policy Content Policy We tried our best to avoid legalese in these documents: Legalese is an English term first used in 1914 for legal writing that is designed to be difficult for laymen to read and understand, the implication being that this abstruseness is deliberate for excluding the legally untrained and to justify high fees. Legalese, as a term, has been adopted in other languages. Legalese is characterized by long sentences, many modifying clauses, complex vocabulary, high abstraction, and insensitivity to the layman’s need to understand the document’s gist. Legalese arises most commonly in legal drafting, yet appears in both types of legal analysis. Today, the Plain Language Movement in legal writing is progressing and experts are busy trying to demystify legalese. If you’re unfamiliar, the legalese hall of shame is a great reminder of what we’re striving to avoid here. Please review these documents and let us know if they are reasonably clear, and answer your main questions, particularly concerning usage of our logos, domains, and names in your own applications. While you can always comment here on the blog as usual, I opened a meta topic if you have any specific, actionable feedback you’d like us to follow up on."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/07/new-protected-question-status/","date":"2010-06-06T22:00:00.000Z","tags":["Community"],"title":"New Protected Question Status","text":"At the behest of the Super User moderators, we’ve instituted a new question status of protected. A protected question is like a protected Wikipedia article — it no longer allows additions by anonymous users. Protected questions are indicated in the standard question footer like so: protected by {moderator name} 3 days ago This question is protected to prevent “thanks”, “me too!”, and spam posts from new users. To answer it, you must have more than 10 reputation. We needed this because some of the more popular Super User questions attracted a lot of noise from random drive-by users who didn’t understand how our system works — users who helpfully provided so-called answers like “thanks, this worked for me!” or “I have this problem too, can anyone help?” And lots of them. Just check out one example of many: Just be thankful that these deletions you’re seeing here are only visible if you have 10k rep on superuser.com. (I should also mention that I captured this full-page browser screenshot using a plug-in recommendation I found on Super User itself.) While we used to lock these kinds of questions, that’s not really what a lock was intended for. Locking a question is a bit of a nuclear option in this scenario, as locking prevents the question from getting votes, comments, or edits when the question itself wasn’t even the problem. So, in the future, if you see a question that is attracting a lot of drive-by noise answers, please flag it for moderator attention. We’ll turn on protection. The protection bar is extraordinarily low right now — you only need >= 10 reputation to post an answer to a protected question — but we think this is enough to cut down dramatically on answer noise for certain unlucky, but obviously popular, questions. (and, as always, thanks to our hard working Super User moderators for coming up with this excellent idea)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/06/01/migration-of-se-1-0-sites/","date":"2010-05-31T22:00:00.000Z","tags":["Community"],"title":"Migration of SE 1.0 Sites","text":"In a few months, we will start evaluating the first community-created sites to see if they have enough traffic to leave beta and become a full site. It’s too early to apply actual numbers to that decision but it will almost certainly be some combination traffic and how fast questions are answered. We use the term “question liquidity” and it is the key to measuring the success or failure of a Stack Exchange site. We decided early in this process that we did not want to disrupt any communities that were already working. So we decided that we would evaluate SE 1.0 sites using the same criteria as SE 2.0 sites leaving beta. Issues of defining the actual minimal traffic requirements aside, there will be a single, generic set of criteria for continuing a site. And those criteria are going to apply to SE 1.0 and SE 2.0 sites equally. What does that mean for SE 1.0 Sites? That means any site that maintains enough traffic will be allowed to continue. SE 1.0 sites owners meeting the minimum criteria will have a choice: Continue for free under the same terms as SE 1.0 for as long as they maintain the traffic levels. Migrate directly into SE 2.0 as a fully-fledged SE 2.0 site. Continuing as an SE 1.0 Site Owners who chose to remain an SE 1.0 site will operate under the same basic terms of SE 1.0, namely: The site owner owns everything. They are free to accept advertisements or modify their site as they see fit under the current terms of service. The site remains on the SE 1.0 software. No further enhancements are planned for that platform, except for urgent bug fixes. There are a few issues that differ from the previous system: The site will remain free for as long as it maintains the minimum traffic criteria. Sites that don’t maintain enough traffic will get put on notice and eventually shut down. Sites will not be part of the new Stack Exchange Network. They will be independently owned and operated as a 3rd-party service. How much traffic will an SE 1.0 site need? It is simply too early to apply numbers to the process. The SE 2.0 sites haven’t even launched, yet, but I felt it was important to present these options to site owners as soon as possible. There will be a lot of traffic on the new Stack Exchange Network so expect the minimum traffic bar to be set pretty high. But we don’t want to overestimate traffic levels either, and shut down many good sites in the process. That puts us in the difficult position of not being able to provide a lot of the specifics this early on. But decision to migrate or not is many months away. That gives everyone plenty of time to either build up their traffic or consider the alternatives. When will sites be able to migrate? Once the community-created sites start leaving beta, SE 1.0 sites will be asked to decide if they wish to consider migration. Migration of sites will occur all at once. This is a one-time event, not an on-going process. The schedule and procedure will go something like this: First SE 2.0 sites go to beta. (one month later…) SE 1.0 sites wishing to be considered for SE 2.0 will sign up on a list. This does not obligate them to become SE 2.0 sites but sites not applying for SE 2.0 will not be considered. (one month later…) We gather traffic data for all sites on that list and notify SE 1.0 sites meeting minimum traffic criteria. (one month later…) Deadline for them to accept or decline. (2-4 weeks later…) Closing (we move all the sites) Becoming an SE 2.0 Site Sites opting to migrate directly to SE 2.0 do so under the same terms as any community-created site, namely: Sites are owned by Stack Overflow Inc. There is no co-ownership of sites, commercial relationships, or revenue sharing. SE 2.0 sites are run by the community. We will make every effort to accommodate former site owners’ wishes to moderate the early site but no special relationships, like appointing someone Administrator of the site for life, will be considered. Sites will be installed and run on the Stack Exchange Network using the SE 2.0 software. We will make every effort to maintain much of the original site name/design but we may need to make changes in the design to accommodate the SE 2.0 branding and functionality. SE 2.0 sites will be expected to maintain the minimum traffic criteria or be shut down. These issues will all be discussed with site owners and the specifics spelled out on a case-by-case basis. We don’t want to simply migrate SE 1.0 sites that are struggling or are just getting started. The Stack Exchange Network is for sites that already have a significant commitment of traffic. The entire proposal and commitment process is designed to build up that momentum for a successful first day’s launch. That’s why I believe the vast, vast majority of legacy sites would be better off going through the proposal and commitment process. It builds up a renewed interest in the site. For site owners interested in submitting a proposal to the community, we will keep their previous site open throughout the process so the data is not lost. Users will love the reputation boost they get from asking their favorite question on the new, larger system. But we will not be able to migrate users or questions piecemeal. The code and databases are different and there’s no association between users on the old system and the new network. In short, we don’t want to start your shiny, new site off with initial problems and bad data."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/31/academic-papers-using-stack-overflow-data/","date":"2010-05-30T22:00:00.000Z","tags":["CC Wiki Dump"],"title":"Academic Papers Using Stack Overflow Data","text":"One unanticipated benefit of releasing our data as creative commons is that the Stack Overflow dataset has been the subject of several academic papers already: Evolution of Two Sided Markets Ravi Kumar, Yury Lifshits (Yahoo! Research), and Andrew Tomkins (Google) Presented at WSDM 2010, Session 7: Temporal Interaction View Slides Download paper (pdf) Causal Discovery in Social Media Using Quasi-Experimental Designs Hüseyin Oktay, Brian J. Taylor, David D. Jensen (Knowledge Discovery Laboratory, Department of Computer Science, University of Massachusetts Amherst) To be presented at the 2010 ACM/SIGKDD conference Download paper (pdf) There’s also a third study starting up with Lena Mamykina, a researcher in Human-Centered Computing at Columbia University, who is working in conjunction with Björn Hartmann, a professor from UC Berkeley: The success of stackoverflow.com is making all my research community wonder what is it that makes it work so well for the users. Would you be interested in participating in a research study to answer some of these questions? The study would probably involve things like interviews (phone) with your development team, moderators and selected users. The results will be submitted for publication at one of the ACM (Association of Computing and Machinery) conferences (for example a conference on human factors in computing systems, CHI or a conference on computer-supported cooperative work, CSCW). Of course you will have a chance to review and provide your feedback on all the materials before they are published. We’ll of course be contributing to the interviews, as well as introducing Lena to selected community members who indicate that they are willing to be interviewed for … science! It’s exciting to be a part of this research, which lets everyone benefit from the slices of time that we’ve all collectively contributed to not just Stack Overflow, but every site in our network. If there’s anything else we can do to help assist any research using the public creative commons data we expose, just contact us."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/26/one-year-of-server-fault/","date":"2010-05-25T22:00:00.000Z","tags":["Company"],"title":"One Year of Server Fault","text":"One year ago today, we launched Server Fault — our Q&A; site for professional sysadmins and IT folks. To commemorate the occasion, we’ve launched a new Server Fault specific blog at blog.serverfault.com You can expect to find blog posts there related to us documenting our own efforts of running and scaling our network of websites — the same sort of stuff you’ve come to expect from the server category on this blog. We want to actively give back to the community by documenting everything we’re doing on the sysadmin front — both by discussing it on the blog, and asking (and answering!) relevant questions about it on Server Fault whenever possible. In fact, we believe in dogfooding so completely that I’m thrilled to announce we will have not one, but two full-time sysadmins — both hired from the existing Server Fault community of users. The first is Michael Gorsuch. (the second sysadmin is still being determined, but a little birdie told me might end up being somebody on the first page of the Server Fault user list) I’d like to also thank our hard working community moderators — Stefan Plattner, Kara Marfia, and Denny Cherry — who so generously contribute their time to keep Server Fault on topic and free of noise. Moderation is the job of the whole community, in part, but having excellent moderators makes things that much easier. Server Fault was our first foray into expanding the network, so it was involved in a lot of related “firsts” that we do every time we launch a new site now: Coming in March: IT Stack Overflow (Jan 2009) IT Stack Overflow Update: Naming Is Hard (March 2009) Logo Design Contest for serverfault.com (March 2009) Logo Design Contest Winner for serverfault.com (April 2009) Server Fault Private Beta Begins (April 2009) Server Fault Public Beta Begins (May 2009) We also did two Server Fault themed podcasts: Stack Overflow Podcast #75 with Tom Limoncelli of Everything Sysadmin The PowerScripting Podcast In the next year, we’ll be pursuing a bunch of other ideas to keep Server Fault in tune with the greater sysadmin and IT pro community in as many ways as we can — for example, we promoted this year’s LOPSA conference as a house ad. If you can think of anything else that we should be doing that benefits the greater sysadmin community, please let usk now. I know Server Fault has saved my bacon with expert answers to questions I’ve asked more than a few times. That’s a testament to everyone who participated over the last year — it’s because of you guys and gals that this thing even works at all. Here’s to many more years of collectively becoming better sysadmins!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/24/interview-with-lead-developer-david-fullerton/","date":"2010-05-23T22:00:00.000Z","tags":["Company"],"title":"Interview with Lead Developer David Fullerton","text":"The last few weeks have felt strangely quiet on Internet landscape of Stack Exchange. There was the big announcement and then all went quiet—little news on the web sites, few blog posts to mention, and the podcasts have been on hiatus. But behind scenes, everything is buzzing. Our internal chat room is stuffed with weeks of screen shots, UI discussions, new software releases and dog-rearing advice. Without the perpetual chat transcripts, you couldn’t go to lunch without missing a major design change and two release pushes. Now the Stack Exchange staging area is nearly ready. And it’s slick. The design is done and we’re soliciting users to sign up for an early beta test launching in the next week or so. So why has it been so quiet? The official line is that you’re not supposed to interrupt programmers working on Important Stuff™ to do blog posts. So I decided that, in lieu of making a bunch of stuff up, I would grab my super-secret spy microphone and chat with one the developers. I sat down with Stack Exchange 2.0 Lead Developer David Fullerton to catch up on what’s coming up… Robert: So what have you guys been working on since the SE 2.0 announcement? David: After the announcement, we knew the end result we wanted to accomplish so then we needed to come up with a process that would allow these sites to be created. The New York team has been working on the new site proposal system area almost exclusively. The Stack Overflow distributed team has been working on the Stack Exchange API which was crucial in tying the whole thing together. Robert: What is the new site proposal tool? David: The site proposal tool is a staging area for new sites. It is a dedicated system to help people propose and define sites. Typically, you go there because you heard about a site being created and you want to play a role in the creation of that site. But, if you have an idea for a site which has not been proposed, you can add it. The staging area lets people define these sites and lets people track the progress of any site as it goes through this process. Robert: When is the new Stack Exchange going to be ready? David: We’re ready to start early beta testing for the new proposal site. We have a small group of beta testers and a first batch of proposals derived from some of the most popular proposals from meta.stackexchange.com. After a week of initial testing, we’ll open it to a bit larger audience. Based on their feedback, we hope to quickly open the system to the public to start submitting their site proposals. Meta Proposals vs. the SE 2.0 Staging Area Robert: There are already over one hundred sites proposed on meta.stackexchange.com. Why not just use those proposals to create new sites? Why a whole new system? David: We learned a lot watching the meta proposals. The big problem we saw was that, the better the original proposal, the less feedback they got from the community. Users felt that there was no need to add more information. Typically, one person comes up with a site idea. They come up with sample good and bad questions. That’s about it. Other people, maybe they offer some feedback but it’s usually the one person. We’re trying not to put the burden of fleshing out the proposal on the person who creates the proposal. We really want the initial idea to start a steady, on-going democratic process. We want you to submit an incomplete proposal as part of getting other people involved in the process. The role of the staging area is to keep people engaged in the site’s development. This is all part of building up momentum for the site’s launch. Defining a Site Robert: How does a site actually get defined using this tool? David: If you have an idea for a site that has not been proposed, you just click the “propose a new site” button. All we want you to do is enter a simple title and description for the site. Nothing too elaborate. Keep it as simple as possible at this point. A site for dog enthusiasts would get a title like “dogs.” It’s the description of the site that defines who the experts are in your community. This is important. A description like “a site for anybody interested in dogs” isn’t going to work too well. A good expert community about dogs would better be described as a site “For dog trainers, dog breeders, and professional dog walkers.” People interested in the site can “follow” it. Followers define the site by submitting sample questions. These questions are discussed and voted on as either on- or off-topic. We use that collaboration to start building a consensus as to what the site is about. The main page shows the list of proposed sites. The listing shows the title and description as well as how many people are involved in defining the site. People follow the proposal, they submit questions, and vote on its content. An indicator on the main pages shows how far the site has progressed towards launch. Robert: How many followers and questions will it take to launch a site? David: It’s too early to apply actual numbers to the process. That’s why it’s so important to get this out: to see how the process evolves. We’ll look at how many questions have been asked. We’ll see how many people are following the site. We’ll track what level of interest there is in a site. See if they’re coming to a consensus about what’s on- and off-topic. We’re going to watch the proposals closely and refine the criteria to assure that a strong proposals continue to make progress while letting smaller sites develop at their own pace. There’s no rush to judge a site proposal. We want to make sure that sites have all the time they need to develop properly. That can happen very quickly for a mainstream site. It might take longer for smaller sites. Smaller sites need time to reach out to experts and develop a following. The whole point of this process is to determine if there is enough consensus and support to create a full site. Migration of SE 1.0 Sites Robert: For users who already have a Stack Exchange site, are they going to be able to move their sites over to the new system? David: It depends on the site. Many Stack Exchange sites are really struggling. If we just move them over the new system, they’ll be no better off than before and that’s what we’re trying to avoid. The staging area is designed to benefit a site’s development, not to hold them back. There are very few sites that wouldn’t benefit from this process. The staging area will renew interest in the site and maybe they’ll pick up a few new ideas along the way. Robert: How will the transition of sites to the new system work? David: We’ll have more information about this shortly. We’re still working on some issues. The problem we are up again is that moving a site over isn’t as simple as copying the data. The code bases are different and the databases are different. You also have to worry about whether the Q&A matches any democratic changes made to the site’s definition. Some sites will want to broaden or narrow their scope. And the users, there’s issues of automatic association of accounts with the larger Stack Exchange network. We don’t want to cause more initial problems that we’re solving by forcing a direct migration. These sites are going to be around a long time. We don’t want to start out with bad data. We’ll be talking to the individual sites and working out how that could work. It’s a matter of what’s best for the site. Merging Stack Overflow Sites Robert: You mentioned the different code bases. You’re talking about when Stack Exchange branched off of the Stack Overflow code. Stack Overflow has continued their development separately from Stack Exchange, adding features like improved searching, interface improvements, better notifications and collaboration, and now they’re even talking about a new chat application. Will Stack Exchange get all this new stuff? David: Yes! We decided that, for SE 2.0, it would actually be easier to start from the Stack Overflow code base and selectively pull over the best of the Stack Exchange changes we made over the months. Stack Overflow, Server Fault, Super User: they are essentially, at their core, Stack Exchange sites—the first of the Stack Exchange sites. Anything that’s added to Stack Overflow at this point is essentially added to the network. Account association between sites is much smoother. The API they’ve been developing is a great way to get new features added to the system. People can write software to add new features to these sites, including the Stack Exchange sites. Robert: For someone who already has a site on SE 1.0, what should they be doing now to prepare their proposals. David: The most important thing to do now is focus on your site and your community. Don’t worry about the proposal process right now. You’re building support for your site and that’s the most important thing. The biggest role you can play in the new system is to shore up your site and your current user base. Whether it comes down to migrating your site or creating a new site, you’re establishing what works and does not work in your community. Robert: Is there anything else you would like to add? David: We’ve been quiet for the last few weeks. It was not our intention to be secretive. It is difficult to discuss a system when there’s nothing to see, especially early on when we hadn’t even nailed down how it was going to work. Now that the system is going online, we want to get back to having these discussions with the community. They’re long overdue. The site proposal tool gives us that foundation to start that process again. We want to get it out there as quickly as possible so we can start getting that feedback. We know the end results we want but how to get there is a bit of an experimental process and we want to get feedback from community for what is the best way to do this."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/24/stack-exchange-api-contest/","date":"2010-05-23T22:00:00.000Z","tags":["API"],"title":"Stack Exchange API Contest","text":"Update: the contest is officially over, and the results are in! Congratulations to all. Browse the Apps and Libraries Late last week we announced the public beta of the Stack Exchange API — a way to write apps that work with Stack Overflow, Server Fault, Super User, Meta Stack Overflow — and any future Stack Exchange 2.0 sites we launch together as a community. To ensure that we get lots of feedback on our public API beta, and produce some quality apps that fully exercise the API, we’ve decided to have a little contest. With some totally awesome prizes! First Prize top of the line 30″ LCD monitor (either Dell 3008WFP or Apple Cinema HD — whichever we can get to you easiest) Second Prize Herman Miller Mirra chair Third Prize Intel CULV Netbook, similar to Acer Aspire 1410. Special Prize (for best library / wrapper) Adjustable height, motorized GeekDesk The contest will run for the duration of the public API beta, which we expect to be about 8 weeks, roughly. The winners will be announced when version 1.0 of the API is formally released. If that sounds appealing to you … visit stackapps.com and start building awesome stuff with our API! To make sure we’re all roughly on the same page for this contest, let’s set some ground rules: Contest open to every man, woman, and child on planet Earth, except those men, women, or children living in places where contests like this are somehow illegal. Only applications and libraries/wrappers listed on the apps tab of stackapps.com are eligible for consideration. The application or library/wrapper must be written using our API, and work universally against all of our sites — at least those sites we have made public and have an active API at the time the contest ends. While we do have a special prize to recognize the best library/wrapper, to be eligible for the first 3 prizes you must build an application. If you live in an area of the world where it is logistically impossible for us to get your prize to you — like, say, because your nearest Herman Miller dealer is 3000 nautical miles away — email us when you win and we’ll make something work. Your app must work against the final, 1.0 released version of the API. We’ll give you at least week’s notice here on the blog when that’s closer to happening. A few notes on how we’ll be judging this contest: The entire Stack Overflow, Inc team will ultimately decide the winners based on order of awesomeness. And lest you think we don’t know awesome when we see it, we built Stack Overflow. I’m just sayin’. (But seriously, please understand that our decisions will be based on a variety of factors, some of which may be entirely subjective.) We will look at the number of votes your app or library/wrapper gets on the apps tab of stackapps.com. Doesn’t have to be a zillion votes, but we’d definitely like to see you convince your peers that your app deserves to be in the top (n) of stackapps by popular vote. We will look at the number of requests for your API key. Was your application used by a lot of people? Or at least a reasonable amount? We will look at your application itself. Does it look cool? Does it work? Is it reasonably documented and understandable? Can other people find it? We will look at your application’s code. Is this app a reasonable example of how to write clean code against our API? Is it open source so other programmers can learn from it? Does it accept outside contributions? Being open source isn’t required, but it does get you some extra brownie points. If you’ve read this far, clearly you’re invested, and you deserve one of those totally awesome prizes. Now go build yourself some apps! Update: the contest is officially over, and the results are in! Congratulations to all."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/23/generalist-badge-implemented/","date":"2010-05-22T22:00:00.000Z","tags":["Community"],"title":"Generalist Badge Implemented","text":"After a whopping 18 month gestation, we’ve finally implemented the Generalist badge. The Generalist badge works as follows: Provided non-wiki answers of 15 total score in 20 of the top 40 tags. The top 40 tag list is surprisingly diverse across the entire Trilogy. Just check out the top 40 tags (as of this writing) on Stack Overflow: c# java .net php asp.net javascript c++ jquery iphone python sql mysql html sql-server ruby-on-rails c asp.net-mvc css wpf objective-c windows xml ruby database best-practices vb.net android visual-studio ajax regex linux winforms django iphone-sdk visual-studio-2008 beginner web-development flex subjective flash One thing the badge doesn’t say, is that there must be at least 200 questions in all 40 of the top tags before this badge is awarded to anyone. That’s why you won’t see it on meta for a bit longer, or any new sites for about a year. I don’t feel you can accurately measure a generalist until the top tag list settles down. The intent of this badge is to reward those folks who are answering a variety of questions across multiple skill sets, not spending all their time in the same set of tags. Now, it is true that the top 40 tags shift over time; for example Android went from #36 to #27 just in the last month. Rest assured, if you earn the Generalist badge, like any other badge in our system — barring exceptional circumstances — it won’t be revoked. (thanks to balpha and chaos for their assistance in determining how this badge should work.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/20/stack-exchange-api-public-beta-starts/","date":"2010-05-19T22:00:00.000Z","tags":["API"],"title":"Stack Exchange API Public Beta Starts","text":"Our API private beta is coming to an end, which means it’s time for the API public beta to start. We’ve set up a dedicated site to support the public beta at … stackapps.com It’s called Stack Apps because, well, that’s what it is — a place for applications that run on our “Stack”. You can either find existing apps that are already out there, or learn how to write your own apps. We’re calling it the Stack Exchange API because our API isn’t tied to Stack Overflow — it’s designed to work on all current Trilogy sites as well as all future Stack Exchange websites we launch, too. What can you do on Stack Apps? Find applications, wrappers, and libraries that use our API — or list your own Browse the FAQs to learn how the API works Provide feedback on and vote for the applications listed here Get an API key Ask questions about how the API works Tell us about bugs or problems with the API Suggest improvements to the API Fair warning, though, this is still a beta, albeit a public and more stable beta. Version 1 is read only. Coming up with a solid API is hard enough without adding writing and authentication to the mix. For the initial release, it’s a read-only API. We’ll take on the much more challenging problem of writing (and authentication) in v2. The API may change during the public beta. While we expect far, far less breakage than we had during the private beta, the intent of this public beta is to keep improving the API, so there may be changes. We want the API polished up for a formal “locked in” V1.0 release about 2 months from now. If you build to our API, we will support you. We’ll be on Stack Apps daily helping out in any way we can, and listening to all your feedback. If you’re contributing your valuable time building an app on our API, the least we can do is provide a stable platform for you to build on. We plan to have a solid 1.0 API that is reliable and supported for a very long time. That’s a promise. If you’re interested in applications that run on all current and future Stack-engined based sites, please participate in the public Stack Exchange API beta. Visit Stack Apps, see what you think, and give us your feedback. Help us create an API that doesn’t suck!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/19/new-automatic-account-association/","date":"2010-05-18T22:00:00.000Z","tags":["Community"],"title":"New Automatic Account Association","text":"We’re bringing back a feature we had to put on ice way back when we launched Server Fault*: automatic account association. Due largely to the vagaries of how Google implemented OpenID, we reluctantly made account association a manual process. But not any more. As OpenID has matured, we’ve figured out a way to make it happen. So as of today, whenever you log in to any site in our network, which is currently… Stack Overflow Server Fault Super User Meta Stack Overflow … we will automatically find any related accounts you have on any site in our network, and associate them with your account. The only thing you need to do for this to work, is log in using the same OpenID on each site. But wait! There’s more! At new user login time, in addition to association, we also: Grant you a +100 reputation bonus on the current site, as long as you have at least +200 reputation on any site in our network. So you’re not treated like a newbie on every new site we launch. Copies your profile from the network site where you have the highest reputation, to the current site. Locate any of your questions that were migrated to this site and make you own them again. It was impossible for you to own them prior to this point, because you didn’t even have an account on the current site! None of the above is truly new, but it is now fully automatic at login time. And we’re not taking away manual control, either — you can still associate and de-associate manually via the accounts tab on your user page, as before. As you might imagine, this sort of “identity that follows me from website to website” becomes more and more important as we launch more sites in our network — as planned with Stack Exchange 2.0. * no, I haven’t forgotten it’s almost the one year anniversary of Server Fault going public. We have something very special planned, so stay tuned…"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/14/new-top-bugs-and-top-requests-on-meta/","date":"2010-05-13T22:00:00.000Z","tags":["Community"],"title":"New Top Bugs and Top Requests on Meta","text":"Before we switched to meta.stackoverflow.com, we used UserVoice to track our bugs and requested features. It had a nice leaderboard of the highest voted items which we treated as a sort of de-facto “to-do” list. We did our best to satisfy the top-rated UserVoice requests and work our way down the list. While it is possible to manually replicate the UserVoice feature/bug leaderboard on meta by … querying for questions with specific tags, by adding multiple tags using the server-side tag wildcard (~) operator excluding some tags using the not (-) operator sorting by votes … I thought we should make that easier. A lot easier. So we added dedicated ‘bugs’ and ‘reqs’ tabs. Now it’s a one-click operation to see the highest voted outstanding bugs and incomplete feature requests. While we are currently all hands on deck for an imminent public API beta, I still believe strongly in following up on what the community believes to be the most important bugs and the most popular feature requests and making them a priority. Bottom line: if you see anything in the top bugs or top features lists you’d really like us to work on, vote for it! And if your favorite isn’t there, search for it and vote it up to get it on that meta leaderboard, and on our radar."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/13/our-brick-in-the-computer-history-museum-wall/","date":"2010-05-12T22:00:00.000Z","tags":["Background"],"title":"Our Brick in the Computer History Museum Wall","text":"About a month ago I mentioned we were sponsoring the Computer History Museum by buying a ‘terabyte’ brick. The sponsors wall is part of the museum renovation, scheduled to be complete in October. The more professional approach to showing some of the museum’s 100,000 artifacts and hundreds of hours of video footage — most of which are currently socked away in storage — is a preview of techniques Hollar and his curatorial staff will use in an overhaul of the entire museum scheduled to open in October 2010. The renovation will double the museum’s exhibit space to 25,000 square feet and aim to help visitors construct a story line around the collection, says Hollar. I assume the sponsors wall will go up around the same time, and if you can make it to the museum (and by God, you should eventually, because it’s amazing), the sponsors wall is located here, near the entrance: We weren’t sure what we wanted the brick to say, so in true Stack Overflow spirit, we put the question to the community. We set up a meta question to gather the best ideas of what text to put on our brick. Well 107 answers (!) later, Joel and I finally reached a consensus on the one we thought best represented Stack Overflow. (this is just a quick visual mockup provided by our amazingly talented designer, Jin Yang; the real brick may look somewhat different. I’ll be sure to update this post with a picture of the real thing later this year.) There were many great suggestions. Thanks to everyone who contributed. Joel and I felt this particular one* captured the tone perfectly — that Stack Overflow is what it is (or isn’t) because of the tiny bits of time contributed by hundreds of thousands of expert programmers from all over the world. Programmers just like you. So when we say “who made this brick possible”, we mean that the history of computers is very much the history of programmers, too. It’s an honor to be a part of it with you all. it just so happens this one was drafted by our very own community coordinator, Robert Cartaino. Now there’s a man who groks what our community is about!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/11/a-little-steam-giveaway/","date":"2010-05-10T22:00:00.000Z","tags":["Community"],"title":"A Little Steam Giveaway","text":"I occasionally like to give away codes for Steam games via my twitter account, to Trilogy users with 1k+ reputation. It’s my little ad-hoc way of giving directly back to the community, just for fun. Let’s switch it up a bit and see who’s paying attention. Let’s give something away on the blog this time! Up for grabs is three six nine Steam codes for the game Serious Sam HD: Second Encounter. so, if you … have a Steam account have a Trilogy account with 1k+ reputation use Windows (Steam is now cross-platform, but this game isn’t) like to blow stuff up real good Provide a link to your account page in the comments. (I’ll assume the email in the account is the email to send the Steam activation code to.) I want to pick a nice cross-section of users from Server Fault, Super User, and Stack Overflow. Also, please note that priority will be given to users with multiple accounts — if you have 1k+ reputation on more than one Trilogy site, your odds go way up! Winners picked! Congratulations to, in order of multi-site-awesomeness: Dennis Williamson Nik Alnitak Chris Jester-Young Jim McKeeth Mictech Raven Josip Medved Chris Thompson You should get emails in the next 24 hours. Please remember to blow something up real good in our honor!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/09/joel-on-this-week-in-startups/","date":"2010-05-08T22:00:00.000Z","tags":["Background"],"title":"Joel on This Week in Startups","text":"Joel Spolsky recently appeared on Episode 51 of This Week in Startups (aka TWiST) with Jason Calacanis. Joel’s segment starts at about 23 minutes in. (This is a followup to the Ask Jason segment of This Week in Startups back in February where Joel originally asked about how to approach VC funding in general.) You may remember Jason from Stack Overflow Podcast 56. Although we don’t always agree with Jason, he’s a smart guy whose opinion we respect. Watch the Joel segment of TWiST episode 51"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/06/stack-overflow-funding-chat-qa-transcript/","date":"2010-05-05T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Funding: Chat Q&A Transcript","text":"In case you missed all the excitement yesterday, Joel Spolsky sent out a tweet inviting his followers to join in what turned out to be Stack Overflow’s first-ever chat Q&A. The Stack Overflow teams have been experimenting with chat to help coordinate their development efforts in real time. After a flurry of publicity from the NY Times, San Francisco Chronicle, Business Insider, and ReadWriteWeb, this seemed like the perfect opportunity to see how a chat room would work for Q&A. We needed a fast, informal public gathering to answer questions about the financing deal just announced. Joel opened a chat room to the public and tweeted an open invitation to his followers. Within moments, the chat room filled to capacity. We upgraded the room to hold 100 users and waited for the joining messages to clear. The chat room was busy and, at times, chaotic. But after filtering out all the noise, what remains is a lot of valuable information generated in a short period of time. May 4, 2010 Stack Overflow Funding Q&A Joel I can take rapid-fire questions for about 20 minutes, then I have to go. Joel thanks to 37signals for the awesome chat software, campfire. Adoniran B. Joel, Why did you get funding? Joel Adoniran: this will give us enough buffer to hire people, build servers, buy neat stuff rapidly instead of growing slowly and cautiously Joel the sooner we can displace phpbb/vbulletin, the better Jonathan S. From the latest blog post, it would seem that nearly all of the VCs contacted were excited about getting onboard with StackExchange – is this the case, or did some of them expect nothing more than another Yahoo Answers-ish product from you? Joel jonathan – everyone who invested really understands why we’re not yahoo answers. Brendan M. thats probably because you actually have solutions Richard L. What’s the topic of focus? Jonathan S. Richard L. Burton III: The recent news regarding successful VC support. ~$6,000,000 raised. Joel experts-exchange appears to be privately owned by some rug merchants or something. it is mostly a sales organization now that knows how to get corporate renewals. @johnsheehan Joel, when are you going to play your next WwF move?? Or is your Assistant CEO going to take over that responsibility Joel john, my wwf account broke, but i fixed it. start a new game with me. AND DON’T PLAY ZA Richard L. How do you envision making a profit/ Joel richard – the whole point of VC is to defer thinking about profit until a large number of people are getting value out of the site, after which it should be easy to find ways to monetize that benefit both sides… things like careers.stackoverflow.com Brent O. I didn’t read too deeply, but I didn’t catch a valuation – did you make that public? Just curious. Joel Brent nobody announces valuations Joel we’re not announcing a valuation, but we were Very Pleased (TM) Ryan R. Joel, I take it from your recent tweet that the position here (http://stackoverflow.com/about/hiring) is “telecommute” only in the sense of “live near NYC but work from home some/most days” ? Joel Ryan – the jobs for which we are accepting applications are in New York, not telecommute… Joel We have telecommuters on Jeff’s team, but those are hand-picked, “don’t call us we’ll call you” kind of situations Jax Joel, so what is the very next step with StackOverflow? Joel we have been profitable until now and have plenty of money in the bank, but VC gives us the opportunity to really stop even looking in the bank to make sure there’s still money there Joel johnsheehan, the SO team in NYC is still in Fog Creek’ Joel offices Joel but moving soon Damien @Joel. Sorry if you have answered this but when are these other sites going to open the approval process. Joel damien current EBS best guess is 2 weeks Richard L. Joel how’s the infrastructure for the website look? How many servers and databases are powering this puppy onw? Joel richard, half a dozen servers IIRC @johnsheehan What’s the size/makeup of the SO team going to be in the near future? Joel John, about 6 distributed, 6 in New York Richard L. For the web tier or does that include the database as well? Joel richard I think it’s about 2 web, 2 db, 2 assorted, but I’m not up to date, they might have snuck more servers in while I wasn’t looking Jonathan S. Joel, perhaps you should have been recording a podcast during this chat – certainly there’s sufficient material to keep you speaking, and Jeff laughing at your joke for an hour Damien @Joel. Cheers also, Sorry to beat a dead horse, is the Podcast done? Was one of my favorite Podcasts. Not overproduced, just simple but interesting. Joel still working on plans for revitalizing the podcast… Richard L. Joel, do you llow visitors at Frog? Joel we have open houses fairly often, but in general, not really, no Andrew S. Joel, are the Stack Overflow non-dev positions going to be NYC only? Joel andrew correct Ben D. Any plans to open an Austin,TX office? Joel ben nope sorry Jonathan S. Joel, how’s the puppy? Joel Taco is fine… picture on my homepage jonsmock What’s the biggest win you’ve seen so far (besides maybe money) from bringing on the VCs? Any advice you couldn’t have lived without? Joel jonsmock: it was really Brad of Union Square who pushed us to give up on stackexchange revenue in exchange for getting really big @darkhelmetlive Joel: What does this mean for private use sites? If company X wants a private, internal only QA site, is that possible? Joel darkhelmetlive for private, internal sites (not on the public internet) you can license the stackoverflow code from stackoverflow and purchase a support contract from fog creek software. It’s expensive, and appropriate only for large enterprise/corporate installs jonsmock Was the nomination system for new sites your and Jeff’s brainchild or did that also come out of the VC meetings? Joel jonsmock the process for new stackexchange sites was inspired by the way Usenet newsgroups were opened in the 1980s @johnsheehan darkhelmetlive: http://blog.stackexchange.com/post/5184749… Edosoft @Joel, any plans for translated/localized SE sites? Joel edosoft yes Tom Going back to your (old) Ben & Jerrys vs Amazon comparison – you seem to melding them, being liberal with cash but conservative with what sites to open. Agree? Disagree? Hate the comparison you made so long ago? Joel tom, i think that Fog Creek is a Ben & Jerry’s company… StackOverflow is an Amazon company. jonsmock Edosoft: check out one of the early podcasts for a humorous exchange between Joel and Jeff, because they had different opinions on localized Stackoverflow (not sure if it’s still the same way for SE now) Tomalak I volunteer for translating Joel thanks! Joel one of the first programmers we hire is going to be in charge of a system for localization like facebook’s Joel so that the community can localize to whatever languages they want Damien @Joel. Isn’t there a worry that a lot of communities won’t want to move to your platform if they lack ownership of it? Also have you considered the risk that for the more casual communities the lack of a true ability to chat in random, pointless, topics w Joel damien, I don’t really expect communities to move. We’re making new sites. Andrew S. Thanks Joel for the info and keeping in touch w/ the community, the openness is very cool richardjfoster Joel, you mention on the StackExchange blog post dated 13 April that you “hope to start the new process of proposing sites within four weeks”. Are any specific subject areas bubbling up as frequently requested? Robert C. richardjfoster: Top proposed sites: http://meta.stackexchange.com/questions/tagged/site-proposal richardjfoster @Robert C. Thanks @NoobTech -. Has anyone thought about some sort of stack exchange forest? A set of stack exchange sites that can talk to each other? Robert C. @NoobTech: We’ve been calling it the Stack Exchange Network and, yes @NoobTech, there will be some level of communication between all sites in the network. richardjfoster Hmmm… interesting, and somewhat as I suspected. The SE “top proposed sites” all seem (at least to me) to target the existing, and occasionally somewhat geeky, trilogy users. Is that a good thing, or bad, I wonder. Robert C. richardjfoster: Sure, those first proposed sites ARE from the existing audience. But as new sites are created, the core audience will expand outwards very quickly… away from the programmer-centric beginnings. joelmartinez Joel, you’ve mentioned that the team is expanding … what is the new push for? ie. what will the new team be developing? Joel joelmartinez – (1) building the new StackExchange 2.0 service (2) improving career services (3) ODATA (4) chat/IRC Richard L. Joel plan on exposing an API? Jonathan S. @Richard L. There is an API in the works already. gdalgas @Richard L – we are working on an API right now joelmartinez @Richard L. presumably, that’s what ODATA is for Ryan R. Joel, I’m interested in giving the SE 2.0 model a go, but I’m a little concerned about the restrictions during the “open beta” phase (intentionally ugly, no custom domain) isn’t that counterproductive? Robert C. @Ryan: That is done intentionally to stay focused on the design of the CONTENT, not the minutiae of selecting colors and such. People get caught up in those “bikeshed examples” really easy (before the important work is done). Ryan R. @Robert: Interesting. I’m still worried about the first impression effect (“man, this is ugly”), but I get the rationale of content focus. Robert C. @Ryan That’s why the site is in beta… let people know it’s not finished. jonsmock @Joel and team – how do you think Fogcreek’s company culture and SE/SO’s culture will differ? Be the same? gdalgas We have a new and improved Joel 2.0 – VC edition, I expect it to be awesome jonsmock None of the Fogcreek developers are distributed, are they? gdalgas no, but interfacing with them has been very painless – we share the same mission goals David Joel is not here right now, but we have two developers and I think Robert (Community manager) if anyone has questions for us Joel (I’m on the phone with an accountant now) Joel the series A funding is complete; there are a few more pieces of paper to be signed and a few more dollars coming in tomorrow from smaller investors in the first round Richard L. Joel are you going to write up your experience about how you obtained VC and share with those who never did it before? Joel Richard L: There are much better people writing about how to get VC than me. Venture Hacks is a great resource deadprogrammer @joel : did the VCs appreciate your and Jeff’s twitter humor? Joel deadprogrammer: they own twitter, you know JasonPunyon @Joel: How much of the process is VCs choosing SO vs. SO choosing VCs? Joel jasonPunyon: in this case it was almost entirely SO choosing VCs. Except for a few VCs that were wildly appropriate who turned us down because we didn’t match their investment profile, we probably could have gotten money from at least 6 or 12 different firms joepy Joel, question about funding, what are you going to do with $6million, your plan for SE2.0 don’t sound like a $6million project, so do you have anything else planed? Joel joepy: we expect that’s enough money to operate the company for 2 years no matter how much the traffic grows. jonsmock I still don’t fully understand why Fogcreek didn’t take on the funding. Was it a risk thing or an addition of experience thing? jonsmock By “addition of experience” I mean adding the VC collective knowledge and experience Joel jonsmock: fog creek sells developer tools, which is not a high growth market, so it’s not attractive to VCs and not really appropriate jonsmock Sorry, Joel, I meant why didn’t Fogcreek fund Stackoverflow jonsmock 6 million seems like a very feasible number for a company like Fogcreek to invest in something like SO Joel jonsmock, because now we have outside investors helping us. Rich powerful people with an interest in seeing us succeed. That’s worth a sliver of the company. deadprogrammer @Joel what was professor pilot Greenspun’s reaction? Joel deadprogrammer, i didn’t ask him. We did speak to Greylock. The new guard at Greylock is very good. Richard L. Joel keep up the good work. I know it must be a good feeling to be successful in doing two different things. Joel thanks JasonPunyon @Joel: What makes up the investment profile of a company like SO? Joel JasonPunyon: for example, True Ventures turned us down because they usually only fund seed-stage, deadprogrammer @joel what is going to be the name of the company fishing boat? Joel deadprogrammer it’s a 200′ yacht Edosoft @Joel, how is the funding and SE2.0 plans influencing SO careers? Joel edosoft: it will give us money to hire people to make it even better mick @joel, I’m coming in a little late…are you revealing what the VCs got for their 6MM? Percentage wise? Joel mick, that info is not public. “We’re Very Pleased With The Valuation” (TM) Guest @Joel – Do you feel this is a reversal of your position on VCs? I know you wrote an article about it, but taking a bunch of money now with hopes that in the 2 year window you’ll figure out how to monetize seems contrary to what you’ve written in the past Joel Guest: absolutely. An earlier article I wrote (Amazon vs. Ben and Jerry’s) is more appropriate — Stack Overflow is a classic “Amazon” get big fast company. It’s rare but this is one of them. Ivo @Joel do you think the VC money will let you add radically different features that you couldn’t before, other than making SE 2.0 for free Joel ivo: it’s (already) letting us do things faster. We have several projects already underway that we wouldn’t have done if we didn’t have extra money mick Richard L / Joel…if the other properties get big like Stack Overflow, you have to scale out at some point rather than scaling up with SQL Server. I assume sharding is a possibility, I just didn’t know which would end up costing more from a productivity stand point. Joel mick, it’s hard to imagine any single site getting BIGGER than Stack Overflow with 7.1 million uniques, and that one is on a server with PLENTY of headroom. Matt R. Joel: Any mobile plans? SO on iPhone is miserable Joel matt R: we have a public API in progress, we expect developers to come up with good iphone tools faster than we can @oscarryz Joel are you open to hire international candidates for Telecommute? Or only US residents? Joel oscarryz: the telecommuting thing is on a “don’t call us, we’ll call you” basis. (In other words, if someone from the Stack Overflow community comes to our attention as doing great work for Stack Overflow, we may contact them to look at making it a more formal relationship) Joel Other than that all jobs are in New York josh @Joel have you thought about delivering SE (or a minimized version) source code so we can use it in our own environments? Joel josh, there is an expensive “enterprise” version for large enterprises. Other than that, we are not planning to sell software any more. mick @Joel, One other VC question that you may have already answered, how long from when you first met the people that funded you to the actual funding (today or whenever)? Joel mick, we’ve known the people at Union Square for years, but the overall process was under 3 months Joel most of that was spent waiting for lawyers to do paperwork, mostly unwinding the complicated Fog Creek / Stack Overflow relationship Alex T. Joel: Any idea what the first new stack site might be, based on opinions of your current group or your investors? Joel alex i’m betting on statistics/data analysis. See meta.stackexchange.com, search for topic proposals and sort by votes. mick giving up control (or some control) would be hard though…did you have a problem with that? Joel mick, we didn’t have to give up control. The founders have 2 board seats and the VC has one. Joel Thanks, everyone, for participating in today’s chat! This was fun! I hope we can do more like this in the future. gdalgas time to get back to work – thanks for the chat guys mick Thanks! @anon thanks Joel turned off guest access"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/05/04/announcing-our-series-a/","date":"2010-05-03T22:00:00.000Z","tags":["Community"],"title":"Announcing the Stack Overflow Series A Financing","text":"We’ve been growing quite a bit lately: We’re now #709 on Quantcast. In less than two years, we’ve grown from zero to 7.1 million unique people visiting our network of sites every month. This growth makes us happy, because it means millions of people are getting quality answers to their questions. As Jack Marchetti describes it, “It’s a Q&A site where the right answer isn’t buried on page fifty, it’s almost always at the top.” Here’s what a few random people on Twitter said recently: The problem is that, golly gee, why just programmers? Surely there are people out there in different professions — you know, candlestick makers, robotics engineers, and designers of favicons — who could use a site much like Stack Overflow to get answers to their hard questions. And some of these people must have questions, themselves, about candlesticks, positronic brains, and teeny tiny pixels, and they must be frustrated when they go to a bulletin-board site and the right answer is buried on page 50. So we created Stack Exchange to bring the technology behind Stack Overflow to a much wider variety of sites. We tried charging for Stack Exchange, and that didn’t work so well. So we asked ourselves, “How would the people of 1999 solve this problem?” And the best answer we could come up with was, let’s make the damn thing free, and get some VC somewhere to pay for it. The first VC we asked thought this was a pretty good idea. So did the second, and the third, and in fact I spent two weeks driving around Sand Hill Road and pretty much all of them thought that this was just a BOFFO idea. One of them, Brad Burnham, suggested that we don’t hard code our revenue model too early. If the platform creates value for a lot of people, he told us, we’ll have plenty of opportunities to make money that actually make the site better. That reminded us of Stack Overflow Careers, where great programmers can leverage all the good work they do on Stack Overflow to get great jobs. It gives us an opportunity to make money and it actually makes the site better. Hey Presto! THUS: I’m excited to announce that Stack Overflow has raised $6MM from a group of investors lead by Union Square Ventures and including Ron Conway, Chris Dixon, Caterina Fake, Naval Ravikant, Nirav Tolia, Joshua Schachter, Micah Siegel, and Bob Pasker. Brad Burnham from Union Square Ventures will join the board of directors. That’s an amazing list of investors. Bernard Lunn described Union Square Ventures as “The Best of the Valley in New York” — right now you’d be hard pressed to find anyone who didn’t think they’re the best VC in the city if not the best VC period. In addition, we have #1, #2, #20, and #22 on Business Week’s list of the top 25 angels in tech. All-in-all, I’m in awe of this group of people we’ve brought together. We’re also announcing the formation of a board of advisors for Stack Overflow, including some of my favorite thinkers, who have already helped us immeasurably as we built the company: Clay Shirky, Anil Dash, Marco Arment, Miguel De Icaza, Rich Skrenta, and Micah Siegel. The money we’ve raised means that, for the next ($6m / monthly burn rate) months, we can take on new projects, hire new people, and build new expert Q&A sites on a wide variety of new topics. Instead of opening sites in exchange for money, we’re about to launch a new, democratic system where anyone can propose a Q&A site, and, if it gets a critical mass of interested people, we’ll create it. We do need to hire a few people right away. We need top notch programmers (mostly in the office in New York). We need a world class VP of Sales and more salespeople. I need a sidekick, someone to help me with, you know, CEO stuff. The only way to apply for these jobs, of course, is to make a CV on Stack Overflow Careers and email the URL of that CV to jobs@stackoverflow.com. Please join us!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/04/29/do-trilogy-sites-need-a-third-place/","date":"2010-04-28T22:00:00.000Z","tags":["Background"],"title":"Do Trilogy Sites Need a “Third Place”?","text":"When people ask me what mistakes we made in building Stack Overflow, near the top of the list is not acknowledging the need for a meta-discussion site earlier. That is, a place for people to discuss Stack Overflow itself. I resisted this for the longest time, relegating meta topics to UserVoice, because I didn’t see much value in meta-discussion. But then I finally bowed to community pressure and created meta.stackoverflow.com a little less than a year ago. Owning our own meta, rather than outsourcing it, has been hugely productive in evolving the engine and the trilogy sites forward. The community was right, and I was so very, very wrong. So it’s clear with Stack Exchange 2.0 that every new site will have a child meta — on day one of the private beta. If we were to launch, say, unicornoverflow.com, it’d have these two top level domains immediately: unicornoverflow.com meta.unicornoverflow.com These sites will have a shared reputation system, so you “inherit” your reputation entirely from the parent site — while you can vote as expected on meta, no reputation accrues from there. And of course there will be shared, automatic login; this is easy when you have a login cookie at the parent domain. It’s clear that having two sites is a proven, workable, and necessary arrangement. You have the site where you talk about unicorns, and the site where you talk about the site where you talk about unicorns. After discussing this with quite a few folks, I am wondering if we might need another site. The proverbial third place: The third place is a term used in the concept of community building to refer to social surroundings separate from the two usual social environments of home and the workplace. In his influential book The Great Good Place, Ray Oldenburg argues that third places are important for civil society, democracy, civic engagement, and establishing feelings of a sense of place. I tend to think that meta is the work part, while Stack Overflow, Super User, and Server Fault are the home. But where is the other place, the third place that isn’t work or home? We noticed early on that some Stack Overflow users were using IRC to socialize and coordinate their efforts on the site in real time. Per their request, we even set up a special RSS feed just for these folks, so that new questions would be visible there as they were asked. Similarly, we’re using the 37signals Campfire app to coordinate our own work in real time between the NYC team and the distributed core team. I’ve been rather impressed with it; Campfire is an awful lot like a web 2.0 version of IRC. Try it yourself and see. It’s great! Which makes me wonder — should we add a Campfire-like “third place” for real time socialization and coordination of work? unicornoverflow.com meta.unicornoverflow.com chat.unicornoverflow.com I’m not sure “chat” is the right word here, necessarily, but it’s all I have at the moment. Why might we need this? Most needed are those ‘third places’ which lend a public balance to the increased privatization of home life. Third places are nothing more than informal public gathering places. The phrase ‘third places’ derives from considering our homes to be the ‘first’ places in our lives, and our work places the ‘second.’ Like meta, you can ignore this aspect of the site entirely. It’s a separate area, so there’s no noise, and you never have to see it unless you want to. But I think a web-based real time chat system like Campfire could offer that informal public gathering third place — a space for people who love the topic to meet, discuss, and collaborate in a different way. It would foster community, and be complementary to both strict Q&A;, and meta-discussion."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/04/26/new-linked-posts/","date":"2010-04-25T22:00:00.000Z","tags":["Community"],"title":"New Linked Posts","text":"We just added a Linked sidebar to the question page. Here’s an example from the current Super User question Now that MS Money is going away, what are the best competitive options? The Linked sidebar is very straightforward: it gathers up any links to this question provided by the community via comments, answers, or questions, and presents them in simple list format on the right-hand side of the question. It’s important to note that these links are bi-directional — that is, if another question links to this one, the link will be listed on both questions. This simple mechanic addresses a slew of meta requests, including: Link previous questions to newer duplicates Automatically track referenced questions Please Provide a “Table of Duplicates” Is there a way to search for posts linked to other posts? With Stack Exchange 2.0 in mind, I want to extend this to cross-network links as well (in addition to question migrations, account association, and closing as “belongs on…”, etc), but it’s more important to kick the tires and get feedback on this simple V1 implementation for now. I think this highly manual, human-being-entered form of linking questions is complementary to the existing Related panel. How is the Related panel generated? I’m glad you asked! Related is a completely machine generated list, using the following criteria: full-text match to tags (+10 weight) full-text match to title (+5 weight) full-text match to body (+1 weight) I’m open to hearing any ways we can improve this algorithm, but honestly a lot of the “problems” with it are of the garbage in, garbage out variety — poor tags, poor titles, or poor body text. Anyway, if you think the Related list on a question sucks, you can do something about it! Retag the post so it has more tags in common with questions it should naturally “group” with. This is the most important criteria, by far, and we provide some very nice inline retagging tools for experienced users who should (we hope) know best when it comes to the taxonomy of tags. Retitle the post so it shares more words in common with the titles of other questions that it is similar to. As I’ve mentioned probably ad nauseam at this point, people have the uncanniest knack of asking multiple, nearly identical questions with almost zero words in common. But there’s a bright side to this dark cloud: a small tweak to the words used in the titles can help “nudge” questions into more natural groupings. I don’t think there’s much value in rewriting a question body, since the Related panel is weighted so heavily towards title and tags. But if the body is extremely short or poorly constructed, that can do serious damage to the related matching algorithm as well — particularly if the title and tags are too common/popular to narrow the field much. Anyway, if all else fails, now we have another option — just add link(s) in answers, comments, or edits to the question that point out other questions that should be in the Related sidebar and they’ll automatically show up in the Linked sidebar. No matter how much we tweak it, our fancy-shmancy related algorithm is no match for an army of obsessiveknowledgable community members."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/04/26/podcast-87/","date":"2010-04-25T22:00:00.000Z","tags":["Company"],"title":"Podcast #87","text":"Joel and Jeff sit down with our new community coordinator, Robert Cartaino, to record a “bonus” podcast discussing the future of Stack Overflow and Stack Exchange 2.0. We hired Robert Cartaino as a full time community coordinator to act as both city planner, sociologist, and programmer with deep technical background. He will be pivotal in helping us move toward the brave new world of Stack Exchange 2.0. Rather than the old model of “pay us to use our software”, Stack Exchange is now free. We’re setting up a democratic process where the community itself will determine how and when create new communities. We liken it to Usenet 2.0. The tension for us is that we want to offer a public service — a community commons that is owned, governed, and mostly operated by the community in a very transparent way — but like Craigslist, we are walking the line between behaving like a non-profit company while remaining a for-profit company. As a thought experiment, we’d love it if that three years from now a new community is created in a language we don’t even understand which meets the same criteria we originally created Stack Overflow, Server Fault, and Super User under. That is, it’s a community you’d be proud to be associated with, and it fills the internet with useful, practical information. Our goal is to leave the internet better than we originally found it. The new site creation tool is currently under development and should appear in about a month for public participation. Right now there are 74 (!) site proposals on meta.stackexchange.com for initial discussion. We believe that removing money as a motivator actually frees people to participate simply because they love the topic, without being encumbered by the “don’t make me think” factor of “is it worth my time to even do this at all?” We want to bring together the intersection of those people who love a topic, and want to make the internet a tiny bit better, one post at a time. As for ownership, there is a concept of site founders for those who commit to a site and follow through on that commitment, and interim moderators during the private and public beta will be chosen from the most motivated users. And of course all content generated will continue to be Creative Commons licensed and freely available to anyone who wants it. You are by no means alone — we found that “build it and they will come” didn’t work well for Stack Exchange. Under the new system, the community itself, us, will seed and support your site, and we will actively promote it as neighbor in our existing site network. We want to centralize and group community rather than fragment it, which is what the old SE model tended to do. One of our Big Hairy Audacious Goals is to achieve some form of mainstream awareness. This is something that Facebook and Twitter have achieved, but we don’t feel that Digg and Reddit have. It’s our hope that if we keep taking baby steps outside our core engineering / programmer safety zone that we’ll eventually get there. There is a surprising amount of friction when trying to “move” an existing community to a new format. It’s almost more practical to set up another community that runs in parallel and those who are attracted to the new format can move, while the old guard can stay with the comfort of what they know. We hope you enjoyed this “bonus” podcast. We’re still not sure when or if the next podcast will occur; keep an eye on blog.stackoverflow.com for the latest news. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/04/24/hanselminutes-the-future-of-stack-overflow/","date":"2010-04-23T22:00:00.000Z","tags":["Background"],"title":"Hanselminutes: The Future of Stack Overflow","text":"The future of Stack Overflow is highly intertwingled with Stack Exchange 2.0. We want to transfer some of the “smart users who will answer anything!” community around Stack Overflow, Server Fault, and Super User to Stack Exchange 2.0. Let’s figure out what sites we as a community want to exist, and make them happen — together. I recorded a podcast with Scott Hanselman where I elaborate at some length on the mission of Stack Exchange 2.0. If you had misgivings or concerns about the plan as previously described, I encourage you to give this podcast a listen and see if it helps clarify what it is we’re trying to do together. If nothing else, listen to this podcast to hear this sentence spoken aloud by Scott: Let’s say you had another Jon Skeet. A bow and arrow using, moustached Jon Skeet. Indeed. We should all be so lucky. Hanselminutes #211: Jeff Atwood on the Future of Stack Overflow"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/04/23/stack-overflow-and-dvcs/","date":"2010-04-22T22:00:00.000Z","tags":["Background"],"title":"Stack Overflow and DVCS","text":"As of today, Stack Overflow is now officially using a distributed version control system. Specifically, Mercurial, as hosted through Fog Creek’s Kiln service. While we weren’t unhappy with Subversion, we weren’t married to it, and we needed to switch anyway so we can easily share code with the team in NYC. There’s nothing quite as corrosive to worldwide programming collaboration as being on different source control systems. If you’re new to distributed version control, first you should check out Joel’s excellent Mercurial tutorial at Hg Init. At this point, you may be wondering: should you switch to a distributed version control system, too? I think you should dabble in it, absolutely, as there’s no question that it represents the future of all source control. But let’s not kid ourselves: the tools are still a bit .. raw. Particularly if you’re a GUI-loving wussy girly man like myself. We had gotten a bit spoiled by the excellence and maturity of TortoiseSVN and VisualSVN on Windows. There are Mercurial equivalents, of course: TortoiseHg Windows Explorer shell extension VisualHg Visual Studio plugin But, as I said… raw. Raw is definitely the operative word here. DVCS hasn’t crossed the chasm yet, so if you buy in now, you’re still on the visionary edge of software development. This can be a fun place to be, as it’s where all the innovation is typically happening, but there are … tradeoffs. Painting in very, very broad strokes — warning: massive oversimplifications ahead! — I’d say that: If you are still using SourceSafe, get the hell off my lawn. If you are unhappy with your current source control system, definitely begin researching your DVCS upgrade options. No time to get started like the present! If you are happy with your current source control system, read Why Git is Better than X, substituting “my source control system” with X. (While there are differences between Mercurial and Git, the differences are not hugely significant any more; they are basically the Pepsi and Coke of DVCS.) Do you see anything on this list that you feel strongly about? Does anything in this comparison directly address any daily pain points for you and your team? If so, then you should look deeper into DVCS. There is one thing you do want to watch out for — eventually, teams adapt their behavior to the software they’re using. Without even realizing that they’re doing so. If I had to pick one word to summarize the benefits of DVCS, I’d say that word is flexibility. DVCS is way more flexible than centralized source control. So if you learn some DVCS, you might just find that it unlocks a new, more productive way for your team to “get things done”, as they say."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/04/19/welcome-stack-overflow-valued-associate-00005/","date":"2010-04-18T22:00:00.000Z","tags":["Background"],"title":"Welcome Stack Overflow Valued Associate #00005","text":"As we embark upon the next phase of the Stack Overflow adventure — much of which is documented in Stack Exchange 2.0 — we realized that we desperately, desperately needed someone whose full time job is to engage with the community. Both on a technical level and on a human level. I’m pleased to announce that we’ve hired our first full time community coordinator — Robert C. Cartaino. I can’t imagine anyone better suited for this role than Robert. He’s a programmer with a deep background in online community going all the way back to the modem and BBS era. He’s been actively involved in practically every stage of Stack Overflow and Stack Exchange, both as participant and observer. Robert, in other words, is one of us. Part city planner, part sociologist, part programmer — focused on collectively building thriving communities on the currency of information, freely shared not just between ourselves, but with the entire world of the internet. We want to build our team by hiring from the community, and Robert is a great example of exactly the kind of community we’re trying to build — a tribe of smart, rational, knowledgeable people who all love this stuff as much as we do."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/04/16/just-another-brick-in-the-computer-history-wall/","date":"2010-04-15T22:00:00.000Z","tags":["Community"],"title":"Just Another Brick in the (Computer History) Wall","text":"Stack Overflow is planning to buy a brick in the Computer History Museum wall. It’s for a good cause — the Computer History Museum is one of my favorite places on Earth, and it should be on the bucket list of any self respecting computer geek. But more importantly .. what should our 6 line, 18 characters per line brick say? Vote up the best entry in this meta thread, or contribute your own!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/04/13/changes-to-stack-exchange/","date":"2010-04-12T22:00:00.000Z","tags":["Company"],"title":"Changes to Stack Exchange","text":"Like the small-town mayor who suddenly finds herself running an entire state, our ambitions for Stack Overflow keep growing. Our original idea of making the Internet a better place to get expert answers to your programming questions suddenly seemed too small. Programming questions? We asked. Why just programming questions? Why not every question under the sun? And who says we can’t run for Vice President of the United States of America? We tried making our software available as a hosted white label product called Stack Exchange. We thought that other people would create awesome sites on every imaginable topic. Some people did (yay!), but it wasn’t the flood of high quality sites we were hoping for. So we’re making a few changes. Briefly: Stack Exchange will now be free. We’re changing the way that new Stack Exchange sites are created to move to a more democratic, community process. The content of these new, community-created Stack Exchange sites will be publicly owned under a Creative Commons license, instead of being owned by individuals or businesses. If you’ve already created a Stack Exchange site, be sure to read the announcement in more detail to hear about our transition plan. Don’t be alarmed; we’d never do anything to mess with Stack Exchange sites that are already working. Getting better answers As programmers, we’ve gotten used to the clean, fast, reliable answers that you get from Stack Overflow, so whenever we try to get an answer to a tax question, or a Siberian Husky question, or an iPhone question, it’s incredibly frustrating to find old conversations, trapped in forum and discussion software, instead of answers. Forums are optimized for conversation and shooting the breeze, not for getting answers, so they suck when you actually need some information. During the last week of meetings, we’ve been talking about our company ideals, our core values, and our core goal. We came up with a new, very ambitious company goal: Make the Internet a better place to get expert answers to your questions. That’s a pretty big task, but we know that the great software we created is up to it. Charging for Stack Exchange hasn’t exactly worked Our first idea was Stack Exchange… call it Stack Exchange 1.0. We thought we’d make our software available on a SaaS basis, a.k.a. “white label Stack Overflow,” so that anyone could start a site on a new topic in exchange for money. When we launched Stack Exchange, we imagined thousands of sites would start to sprout up on every possible topic. Harley Davidson belt buckles, mathematics, unicorns, you name it. However, by setting a price ($129-$5000/month, depending on traffic) to cover the cost of servers and bandwidth, we discouraged a lot of people from making sites that might have been great. And by allowing anyone with a credit card to make a site, we got a lot of ghost-town sites that nobody visited. We also got a lot of duplication: multiple sites on the same topic, competing for the same people and preventing one other from hitting critical mass. Bottom line, it just wasn’t working. We’ve been in beta for half a year now, and we only have a handful of sites that get enough traffic to provide quality, timely answers to difficult questions. Reboot Jeff and I got the teams together in New York to figure out a better way to do it. We had been getting great ideas from smart people all over the world, and we sought advice from some of the people we admired the most. We spent several long days hashing out the issues, figuring out what our real goals were, and trying to find a better way to spread the Stack Overflow way of doing things to the world. Essentially, we decided that Stack Exchange was failing because: Only people with money to burn or a business plan could create sites. Those people didn’t necessarily have the ability to bring an audience. In other words, it was simultaneously too easy and too hard to create a new, working Stack Exchange site. Instead of trying to build hundreds of communities from scratch, we decided just to ask our existing audience, “What else do you want to talk about?” We’ve got 6.7 million people visiting every month; they must have something else they want to talk about besides programming and unicorns. Fortunately, a recent road trip uncovered a long list of investors who believed in our mission, so we were able to raise enough money to make Stack Exchange absolutely free. (The details of that investment are not quite ready to be announced, but we’ll let you know as soon as they are). So now we’ve got the audience, and we don’t need the money, so all we need is ideas. Want to create a Stack Exchange community? Propose it! If your idea gets sufficient support from a community of dedicated users, then it gets created. It’s that simple. The New Stack Exchange Site Creation Process I’m just a bill. Yes, I’m only a bill. And I’m sitting here on Capitol Hill. Well, it’s a long, long journey To the capital city. It’s a long, long wait While I’m sitting in committee, But I know I’ll be a law someday At least I hope and pray that I will, But today I am still just a bill. —I’m Just a Bill (from Schoolhouse Rock) Dave Frishberg A Stack Exchange Q&A site only works when it has critical mass: enough people have to go there every hour so that questions get answered. A big part of our new process is to make sure that a site doesn’t get created until we have some reason to believe that it’s going to get that critical number of people showing up to make it work. Our new system was inspired by the way that new Usenet newsgroups were set up in the 1980s. Unlike the free-for-all in alt., where you had binaries, unicorns, and alt.swedish.chef.bork.bork.bork, the mainstream newsgroups (comp., rec., talk., etc.) mostly consisted of serious, qualified, relevant sites on every topic imaginable. That system worked pretty well. Usenet rapidly expanded from two nodes to thousands. And it serves as the inspiration for our new, modernized process. Like our friend the bill on Capitol Hill, every new site has to survive a rigorous vetting process before it gets created: Discussion Proposal Commitment Closed Beta Open Beta Full Citizenship 1) The Discussion Phase On a new meta site, people will gather to discuss potential ideas for new Stack Exchange sites. The goal of the conversation is to beat around some ideas for what kinds of sites might work, and ultimately, to collaboratively create a detailed proposal. 2) The Proposal Phase A proposal consists of these four things: The topic—what’s the site about? The target audience—who do we expect will visit? A list of five exemplary on-topic questions A list of five exemplary off-topic questions The Discuss links lead to pages where anyone can propose, discuss, and vote on the parts of the proposal itself. Over time, a collaborative proposal emerges. Anybody can vote on proposals. If a proposal gets enough votes, the site moves to the commitment phase. 3) The Commitment Phase During this phase, people who are interested in a potential site are asked to electronically “sign” a commitment to help make the site a success. They are committing publicly to participate actively in the site, by asking questions, answering questions, developing a system of tags, and generally helping the site get off the ground. Each individual person can only commit to one site per month. As people commit, signing the e-petition, a thermometer will go up showing the level of commitment. When the thermometer gets to 100%, the site moves into beta. How does this thermometer work? Intuitively, if Jon Skeet says that he’ll participate in the Sock Puppet Stack Exchange, that commitment is a better sign that the site will succeed than if we get a commitment from a random Internet user who has never participated in Stack Overflow. Sure, they’re both wonderful people, I’m sure, but Jon Skeet has proven that he likes to participate in Stack Overflow so it’s a good bet that he’ll participate in SockExchange, too. Furthermore, we want to make sure that each new site has enough users who already grok our system of badges, answers, questions, tags, voting, community wiki, reputation, etc., so that the site gets off to a good start. That’s why the commitment thermometer will not be precisely a one-person, one-vote petition. Instead, we’re going to require a selection of _existing _users with certain badges and reputation that proves that they’ll participate. For instance (and I’m making these numbers up), we might require that a site get at least 100 commitments from people with the Teacher badge, at least 20 from people with the Enthusiast badge, and at least 50 from people with a reputation of 1000 or more on some of our sites. Over time, we’ll adjust the thresholds upwards or downwards as we discover what it really takes to get a site off the ground. For example, if we discover that new sites are getting created but they’re not using tagging correctly, we could raise the requirement for the number of Organizer or Taxonomist badges. 4) The closed beta If a site gets to 100% commitment, we’ll email everyone who committed and notify them when the closed beta will begin. During this closed beta, they’ll be expected to seed the site with enough interesting questions, answers, tags, and a site-specific FAQ. They’ll appoint temporary moderators and publicize the site. 5) The open beta During the open beta, the site will be open to the public at a temporary domain name (topic.StackExchange.com). The site will be all black and white, and include an animated-GIF “under construction” triangle showing men at work, from 1996. This phase will last between 60 and 90 days. At the end of that period, the site will need to reach a minimum critical mass to continue and move on to full citizenship. 6) Full citizenship We’ll set strict criteria (number of new questions per day, number of registered users, percentage of answered questions, number of people who vote, etc.) to define a site that we consider to be successful. If a site meets those criteria for 90 days, it graduates to full citizenship. A citizen site gets its own top-level domain, chosen by its community. There are elections for moderators, we’ll have a graphic designer make the site look great, and let the community pick a logo. If a site does not have enough activity at the end of 90 days, it will be closed down. Any existing Q&A will be archived and made available for download, but the site itself will not remain live. Small, unhealthy sites do nothing but draw traffic away from other sites, splitting audiences, so we don’t want to keep them around. Update: In June of 2015, the Stack Exchange Community Team introduced clear parameters for when a site gets graduated or shut down. Today, it’s possible for a small, consistently high quality site to remain in our network indefinitely. The path to “full citizenship” has changed. Read more here. More details We don’t have any yet! Although we’ve figured out the basic skeleton of the new site creation process, we’re depending on you, the public, to refine these ideas and make them great. We’ll be talking to you at meta.stackexchange.com about this new site creation process and looking for your feedback, ideas, and suggestions for how to make Stack Exchange even better. FAQ Q: Who owns the content on the new sites? You do! Unlike previous Stack Exchange sites, the content (questions and answers) of the new sites will be owned by the community and licensed under Creative Commons. We will provide regular data dumps containing all non-private data from each site, like we do with Stack Overflow. The sites themselves will be owned and operated by Stack Overflow. Q: Who pays for the new sites? We will. Q: What is the plan to make money from this all? We believe that we can have a bigger positive impact on the world if we are self sustaining and not dependent on the kindness of strangers. We do not want to hard-code our revenue model too early. We believe that if our platform creates value for a large number of users, we will have opportunities to make money. Ideally those opportunities will not just make us self supporting, they will also make the site better. We are thrilled that we have patient investors who will support us and are prepared to allow a “native” revenue model to emerge organically as the site grows. Q: What happens with existing Stack Exchange sites? We don’t want to harm any communities that have already successfully gotten off the ground. This harks back to our corporate goal: Make the Internet a better place to get expert answers to your questions. Community is hard to build, and we want to work with you to preserve it if you’ve already done that with Stack Exchange. If we closed down or competed with the existing, successful Stack Exchange sites, that would conflict with our goals. Existing Stack Exchange sites will be kept open, under existing rules, for at least three months, and at least one year if you have an active site (defined as ten or more active users per day). You will not have to pay for these sites, ever. We’ll give you at least 3 months notice before shutting down any site. We’ll always make your data available for download. If your site remains very active, we’d love to work with you to migrate it to the new, community-owned Stack Exchange platform. That would be the best thing that could happen to a Stack Exchange 1.0 site, in our opinion: that way your site can take advantage of our existing resources and expansive community. Q: How do I know how long my Stack Exchange site will remain open? Log on to your site as an administrator, click admin, and go to the account tab. Q: What if a new, community-created site competes with my existing, old-rules Stack Exchange? If your existing Stack Exchange site already has developed a substantial community, we’ll encourage people to go there, rather than creating yet another Stack Exchange on the same topic. Once again, our goal is to make the Internet a better place to get expert answers to your questions. Competing with existing sites that do a great job of that is not in our mission. However, if your Stack Exchange site does not have substantial traffic, we reserve the right to create a new site on the same topic. Q: How do I contact you? Just email our community coordinator, Robert Cartaino (rcartaino@stackoverflow.com). Q: I was thinking of making a Stack Exchange site, but haven’t yet done so. You will have to use the new process to propose and create the site. Q: I am interested in licensing the Stack Overflow source code. As a part of our new focus on serving large, internet-sized communities, we are no longer offering the Stack Overflow software. Q: I am interested in creating a private, internal Stack Exchange inside my organization. We no longer offer such a product. Q: I want to create a Stack Exchange to make a support site for my product. You will have to use the new process to propose and create the site. Q: I want to make a new Stack Exchange site that fits in with the look of my main website. Although the existing Stack Exchange framework allows this, the new community process is for making public, community sites, not private sections of existing websites. Q: Is there a difference between the Stack Exchange code base and the Stack Overflow code base? The Stack Exchange and Stack Overflow sites run on separate, but very similar, versions of the original software. When Stack Exchange started, they forked a copy of Stack Overflow, then each team continued to develop and improve their respective platforms in separate development efforts. Currently, the combined Stack Exchange and Stack Overflow teams are in the process of merging the two code bases to take advantage of the best features of the two systems. Sites created under the Stack Exchange 2.0 model will take advantage of the new code base, as will Stack Overflow, Server Fault, and Super User. Legacy Stack Exchange sites will remain on the Stack Exchange 1.0 platform. No further enhancements are planned for that platform, except for urgent bug fixes. Q: Why is the plan to close down sites that don’t get enough traffic? This harks back to our corporate goal to “make the Internet a better place to get expert answers to your questions.” A ghost town, without traffic, does not get people answers, but it does draw a few people away from other sites that might do so. We do not believe that the Internet benefits from putting up placeholder sites with negligible traffic that do not attract high quality communities. And we want the Stack Exchange brand to be synonymous with great community Q&A sites, even if we don’t necessarily cover every topic under the sun. Q: When is all this coming? We’re working as fast as we can! We hope to start the new process of proposing sites within four weeks. Q: I have more questions! Go to http://meta.stackexchange.com/."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/04/13/openid-one-year-later/","date":"2010-04-12T22:00:00.000Z","tags":["Background"],"title":"OpenID, One Year Later","text":"We made a few key technology bets when we created Stack Overflow: OpenID Markdown ASP.NET MVC I covered Markdown, One Year Later in an earlier post, and now I’d like to turn my attention to the first item in the list: OpenID. After spending nearly two years with OpenID as our decentralized, open login mechanism, I have some thoughts based on my experience I’d like to share. First, to understand our position on OpenID, please read Does The World Really Need Yet Another Username and Password. If you don’t have time, I’ll quote the most relevant paragraph: I realize that OpenID is far from an ideal solution. But right now, the one-login-per-website problem is so bad that I am willing to accept these tradeoffs for a partial worse is better solution. There’s absolutely no way I’d put my banking credentials behind an OpenID. But there are also dozens of sites that I don’t need anything remotely approaching banking-grade security for, and I use these sites far more often than my bank. The collective pain of remembering all these logins — and the way my email inbox becomes a de-facto collecting point and security gateway for all of them — is substantial. So if we are evangelizing OpenID to some degree, it is because I would rather be part of the solution than yet another brick in the wall of the problem. Even if it involves a tiny bit of short-term friction. Be the change you want to see, right? In the almost two years since we began using OpenID, that tiny bit of friction has gotten progressively smaller: Google began fully supporting OpenID. This was (and is) huge. As you can see from these meta stats, Google is by far our largest OpenID provider at 61% of all registered accounts. Microsoft announced OpenID support. Although there was a beta, and beta live.com OpenIDs were used on our website — the current state of their OpenID support is in limbo. Still, being Microsoft, their official (though technically nonexistent, and I’m sure trapped in strategy tax hell) support legitimizes OpenID as a standard. Most client implementations of OpenID have switched from “enter your OpenID URL” to “click the logo of the company that provides your identity”. OpenID was frequently criticized for being too URL-centric when the user identity world is email-centric, so this is a significant usability improvement. We implemented support for up to two OpenID providers per user. This flexibility turns out to be important, so you can switch out or change the OpenID identities in your virtual wallet as you see fit. It’s handy to have a backup form of identity “on you”, just like in real life. The trend is certainly encouraging. However, there have also been a few things that happened which illustrate the risks of OpenID, too: Several lesser providers (Technorati, Vidoop, Mozilla Weave) went belly-up, leaving their users stranded with no way to authenticate. Occasionally OpenID providers will have bugs or service outages — even big ones like Yahoo. Fortunately this is quite rare, but it does happen, and troubleshooting it can be a pain precisely because it’s open and decentralized, and there are three parties involved — the website, the user, and the OpenID provider. The OpenID protocol itself can be implemented in unusual or incomplete ways by different providers. This leads to challenges for us, but fortunately we have an excellent dialog with Andrew Arnott, the primary author of the open source DotNetOpenAuth library we use. We support the project financially and also try to contribute as many bugfixes as possible, so OpenID can get better for everyone. There are certainly challenges, and although I am open to alternative login mechanisms, particularly for Stack Exchange, I’m still bullish on OpenID. We have to keep move forward on fixing the login explosion problem, because the status quo sucks. To that end, we’re continuing to refine our implementation. Although I listed Google supporting OpenID as my #1 improvement since we began using OpenID, their support also contains a bit of a poison pill — Google GMail OpenIDs are specific to the domain you create them on. In other words, the same GMail OpenID used on stackoverflow.com, serverfault.com, and superuser.com results in three different OpenID URLs being created. This is completely by design, but I should note that no other OpenID provider to date has done this except Google. To their credit, they do offer proper named OpenIDs now in the form of Google Profile OpenIDs, but this does nothing to fix the status quo for GMail OpenIDs. That’s a major bummer for site networks like us with multiple domains. We use the OpenID string as your user “fingerprint”, so if your “fingerprint” changes, we can’t tell who you are any more. It’s a frustrating problem, but we think we’ve finally come up with a fix: we demand email from Google GMail OpenIDs! If we have an email address from a verified OpenID email provider (that is, an OpenID from a large email service we trust, like Google or Yahoo), then it’s guaranteed to be a globally unique string. We treat this as part of the identifying user token, attached only at login time, that is not editable by the user. So our cross-site user account matching now works this way: Match by GUID. This is something we generate and assign during account association, so it’s a perfect fingerprint. match by OpenID URL. This works for the vast majority of OpenID providers. match by OpenID provided email address … if you are on our trust whitelist. This works for those rare OpenID providers (currently, only Google GMail) who generate domain-specific identifiers. This satisfies all known OpenID providers, so we can now potentially associate your accounts, across all of our websites, automatically. You’ll still have to log in, of course, but the login itself could trigger account association for every site in the network. There is one, and only one downside: we must demand email from Google OpenIDs. Email is not usually required to use our sites, but you can’t log in via Google if you refuse to provide email to us. You can always switch OpenID providers, of course, but we regretfully must make the email demand mandatory in the case of Google. Still, given the overwhelming dominance of Google OpenIDs, we think that’s a major improvement, and only a minor tradeoff."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/04/06/new-10k-feature-inline-tagging/","date":"2010-04-05T22:00:00.000Z","tags":["Community"],"title":"New 10k Feature: Inline Tagging","text":"We’ve had inline tagging as a moderator-only feature for quite a while, and it’s been fairly stable, so we decided to roll it out to all users with 10,000 reputation or more. If you have the requisite 10k reputation, just mouse over the tags on any question page, and an “edit tags” menu item will appear. Click it, and just the tags will become editable. This is the standard tagging UI, except loaded inline rather than on a separate editing page. Enjoy!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/31/party/","date":"2010-03-30T22:00:00.000Z","tags":["Community"],"title":"Get ready for the Stack Overflow party","text":"The entire extended Stack Overflow team (including the Stack Exchange team) is meeting in New York in April to do some strategic planning. For example, we need to plan our Rock Band song lists, decide who gets to be on the drums and who is stuck with the USB cowbell, etc. If you’re going to be in the city on Tuesday, April 6th, we’d like to invite you to join us for a party and a chance to meet the team. If you want to come to the party, you must register. Please do not register if you’re not sure that you’re coming, as space is limited. Only people who are on the list will be admitted. Update: Pictures from the Open House are now available! Thanks to everyone who attended!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/31/reminder-its-april-1st/","date":"2010-03-30T22:00:00.000Z","tags":["Community"],"title":"Reminder: It”s April 1st","text":"Depending on what time zone you live in, it may be April 1st, aka April Fools’ Day! April Fools’ Day or All Fools’ Day is a holiday celebrated in various countries on April 1. The day is marked by the commission of hoaxes and other practical jokes of varying sophistication on friends, family members, enemies, and neighbors, or sending them on a fool’s errand, the aim of which is to embarrass the gullible. Update: Do you remember last year’s April Fools’ joke? That one added a cornify button to every post. This year’s April Fools’ comes to us courtesy of Stack Overflow user Benjamin Dumke aka balpha, who created the Unicornify! service in late January — an act he kindly documented for us in My God, It’s Full of Unicorns! on meta. I’m sure we weren’t the first to think this would make an excellent April Fools’ joke, but it was so perfect we had to run with it. We contacted Benjamin, who worked with us to make the one-day transition from Gravatar to Unicornify smooth — primarily by pre-rendering avatars for all the MD5 hashes for users in the data dump. Unicornify is hosted on Google App Engine, so we took over billing duties for the period of the switch. Beyond Unicornify, Benjamin has created a bunch of really cool Stack Overflow related stuff: HREF Overflow: A tool to find cross-references between questions on the sites of the Stack Overflow family Not a real question: A little game created from the Stack Overflow data He’s created so much cool stuff, in fact, the meta community took it upon themselves to remove him from the LEAGUE OF AWESOME because he had become … too awesome: It has come to the attention of the AWESOME committee that you have recently exceeded your awesome quotient. Normally this letter would simply serve as a warning and reminder as to your obligations in the LEAGUE OF AWESOME with regards to your display of AWESOME, however your recent display(s) of AWESOME have exceeded the limit beyond all normal care and due reason. It is with heavy hearts that we are forced to take the following, regrettable, drastic action: Mr. Balpha, on this day, March 31st, 2010, and henceforth, your membership in THE LEAGUE OF AWESOME is terminated, including all benefits, responsibilities, and services as described in your recently violated contract. You are hereby stricken from all records and are required to turn in your membership license or proof of its destruction. Also any and all other artifacts, including the LOA belt buckle, is to be returned immediately. What, you never heard of the LEAGUE OF AWESOME? Well, maybe you’re just not AWESOME enough. How does one go about gaining membership in this exclusive club? per founding member Adam Davis: I’m afraid applications for THE LEAGUE OF AWESOME are only accepted from current members of THE LEAGUE OF PRETTY COOL and, on rare occasion, members of THE LEAGUE OF I GUESS YOU’RE ALRIGHT. So here’s to Benjamin, for not just coming up with an amazing April Fools’ joke for us, but in real “duct tape programmer” style, writing the code and practically handing it to us as a fait accompli. Who knows what wonders April 1, 2011 will bring?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/31/stack-overflow-api-private-beta-starts/","date":"2010-03-30T22:00:00.000Z","tags":["API"],"title":"Stack Overflow API Private Beta Starts","text":"If there’s some kind of award for longest running user request, it has to be this one: When will you guys have an API? One of our new year goals for 2010 is to build and release a great API — for all the trilogy sites. Over the last month, API work has been our highest priority. Now we’re finally ready for private beta. We realize that getting an API right is challenging, and we would like “friends of the Trilogy” to begin giving us input on how our API should look and function. If you’d like to participate in this private beta, email us at team@stackoverflow.com. The private API beta should last 6 to 8 weeks. We absolutely do not want to rush our API because once we release it, we will have to live with the consequences of those decisions for years. Perfection is obviously impossible, but I’ll settle for “avoided too many harebrained screwups … this time”. As John Resig said in his MIX 10 talk, Be deliberate about the quality of your API design or you will regret it later. That’s the goal here. To be deliberate. And we can’t do it alone — our API exists to serve you, so we need your help to make it … not suck. But fair warning — this is a private beta for a reason: Version 1 is read only. Coming up with a solid API is hard enough without adding writing and authentication to the mix. So for the initial release, it’s a read-only API. We’ll take on the much more difficult problem of writing (and authentication) in v2. We reserve the right to break the API every day. The private beta is our one shining moment to construct our API “the right way” with your feedback. So expect lots and lots of breakage. But it’s breakage to make it better. If you build to our API, we will support you. We will be ultra responsive to your feedback during this private beta. And once the API is released, we vow to support version 1.0 of the API for a long time — and if there is a version 2.0, it will be supported in parallel with 1.0 for as long as we can. We’re honored you would write code against our API and we plan to return the favor by not breaking your code a year down the line. If you have any interest at all in our API — you’re welcome to join the private beta! Just email us at team@stackoverflow.com and request access."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/26/moderator-changes-on-super-user/","date":"2010-03-25T23:00:00.000Z","tags":["Community"],"title":"Moderator Changes on Super User","text":"I’d like to announce a changing of the guard for Super User moderation. First, let’s extend a hearty welcome to our two new Super User moderators: Welcome random and quack quixote (nee ~quack) as our newest Super User community moderators! They both come highly recommended, not just by me, but by their peers in this meta nomination thread. In related news, Diago has indicated he’d like to step down as a moderator. Thanks, Diago, for everything you’ve done so far — you had arguably the most difficult moderator position with the least support from us (which was totally our fault; a mistake I hope not to repeat) and you did an excellent job regardless. I completely understand and support the decision to take a break from moderating. You are welcome back as a moderator any time on my watch. As always, I recommend that new moderators (or anyone interested in the topic) read through A Theory of Moderation — also, keep an eye on the following meta tags for discussion about what moderators should (or shouldn’t) be doing on the Trilogy: moderation, moderators, moderator-abilities While some moderation topics are inherently a private matter between users, we try to discuss as much of it in public as possible. We have a reasonable set of moderation guidelines, but how we moderate continues to evolve — and will hopefully improve as we bring in new community moderators with new perspectives and new ideas."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/24/podcast-86/","date":"2010-03-23T23:00:00.000Z","tags":["Company"],"title":"Podcast #86","text":"Joel and Jeff sit down with Anton Geraschenko to discuss the unique qualities of a community of expert mathematicians, how to capture a sphere in a knot, and the importance of off-site backups. The Stack Overflow team will be in NYC from April 2nd to the 9th for a planning session. Expect exciting announcements at the end of that period, including some that will affect the podcast. Maybe there will be a Stack Overflow morning zoo crew! There will also be a Stack Overflow open house in NYC sometime that week, so if you’re in the area, please keep an eye on the blog! Anton founded Math Overflow, which runs on the Stack Overflow engine via Stack Exchange. Math Overflow might be the largest community of Math PhDs (and PhD candidates) on the internet. Anton, interestingly, is not a programmer so he was outside our initial audience. Anton attributes much of the initial success of Math Overflow to math bloggers, and most notably Secret Blogging Seminar. He also solicited emails from influential members of the math community and invited them to all participate at launch. Interestingly, Anton also cites the importance of a meta-discussion site to the overall success of a community. This is a conclusion we (well, I) had to be dragged to, kicking and screaming, before we finally created meta.stackoverflow.com. I suppose it is analogous to having a government of some kind before you can have a country. The meaning of Joel’s oft-repeated phrase “no question is too easy” — which I would rephrase as “no question should be uninteresting” — has a whole different dimension on a site like Math Overflow which is intended for graduate level mathematics questions. Per Anton, you should probably ask “Does my community care about that?” We wondered if any Math Overflow question, given the highly specialized audience, could be popular in the broader internet sense. Anton cites Is it possible to capture a sphere in a knot? as a possible example. Math Overflow did some community specific customization by incorporating jsMath markup in their posts. This has always been the vision, to provide tools that tailor the ‘wiki’ aspect of the Stack Overflow to the needs of particular expert communities. They plan to switch to the newer MathJax soon. And LaTeX is of course a long term standard in this area. I now appreciate the importance of off-site backups. It’s unlikely your datacenter will be hit by a meteor, but the odds of something going wrong with the air conditioning is much more likely. How likely? It happened to us! Remember kids, eat your Wheaties, and do your off-site backups! We’re also entertaining the idea of a read-only mode for the website for these rare conditions so we don’t have to tackle the very difficult problem of synchronizing data when you are running on a live backup. Since we haven’t launched the Stack Exchange site on Siberian husky puppies (yet), Joel asks for some listener input on what type of treats his new dog Taco would like. Remember, podcast will be on hiatus for a bit while we retool it — your suggestions are welcome in the interim, see you in about a month! The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/21/the-great-reputation-recalc-begins/","date":"2010-03-20T23:00:00.000Z","tags":["Background"],"title":"The Great Reputation Recalc Begins","text":"As previously discussed in Important Reputation Rule Changes, we are now beginning site-wide reputation recalculations on Stack Overflow, Server Fault, and Super User. You may see some changes in your own reputation, along with changes in other users’ reputation. In addition to rebalancing question upvotes as +5 instead of their old value of +10, we also fixed the following minor bugs in the reputation system: accepted answers and bounties were only partially immune to the rep cap before depending on the time of day you earned them, but they are fully immune now. upvotes can now “replace” missing rep lost to downvotes, up to the +200 daily reputation cap. If you have questions about your rep you can run a report detailing exactly how it is calculated; see How do I audit my reputation? Do bear in mind that the reputation score is denormalized, meaning there are external events that happen on the trilogy sites which can affect your reputation, but some of them can’t take effect (due to effects of chronology) until your reputation is recalculated from scratch: Questions and answers sometimes get deleted; votes on deleted posts do not count toward your reputation. Users sometimes get deleted. When a user is deleted, all their votes are deleted, too. Some of those votes may have been on your posts. Questions get migrated from one site to another, which means any votes on that question and all of its answers are effectively deleted from the source site (but will now count toward your rep on the destination site, assuming you have associated accounts between sites). Posts can automatically change to community wiki mode, which means any new votes added after the community wiki date no longer count towards your reputation score. This doesn’t actually cause a problem with chronology of votes, but I am mentioning it here for completeness and to emphasize that votes on community wiki posts don’t generate reputation for anyone. While reputation is an important concept on our sites, as documented in the /faq, it isn’t meant to be an extremely scientific and to-the-second accurate number. You should always expect a small amount of normal flux and variation around your reputation score, which will be reconciled through periodic recalculations like this one. That said, we believe the rebalancing and bugfixes are necessary changes and will ultimately result in rep being a stronger, more reliable, more practically useful number than it was before."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/19/important-reputation-rule-changes/","date":"2010-03-18T23:00:00.000Z","tags":["Background"],"title":"Important Reputation Rule Changes","text":"In the next few days, we will be rolling out two important changes to the way reputation works on Stack Overflow, Server Fault, Super User, and Meta. We’re letting you know now so you can be prepared. Item the first: question upvotes will now grant only +5 rep instead of +10.* There is no change to answer upvotes. This will apply retroactively to all users. Why? While we value good questions (and asking a great question is absolutely an art), we want to explicitly encourage people to provide the best possible answers. Without people interested in providing good answers, the questions are moot. We know that answers have more intrinsic value than questions, and the reputation balance should reflect that. The question asker already enjoys a substantial benefit beyond reputation gain from upvotes on their question — namely, they get great answers to their question! Thus, the asker shouldn’t need as much reputation gain. There are a few users who ask hundreds, sometimes even thousands of questions. Over time, these users generate a fairly sizable reputation entirely through the tiny trickle of upvotes gained by these questions. In a sense, we want to discourage question asking a little bit, and make sure that people who ask questions are doing it for the right reasons and not to generate reputation. In other words, we’re rebalancing a bit to favor answers. Based on the existing data in the trilogy, I believe this will be a positive change for everyone. For more discussion see the meta topic. Item the second: after casting 300 votes, you cannot downvote non community wiki posts at more than a 2:1 ratio. Now, before you get up in arms, realize that this will affect very, very few users — on the order of about 6 users out of 100,000+ on Stack Overflow. Why? We already discourage downvoting by making downvotes cost -1 rep to the casting voter. But there’s nothing else in our policy about downvoting. Well, we are now going on record with a public policy — it is not community friendly behavior to cast an extreme number of downvotes. The ill will generated by long term, mass downvoting has a disproportionately large effect — to the point that it starts driving out friendliness and replacing it with bitterness, discontent, and ultimately vindictiveness. We still want people to cast downvotes, of course, but in reasonable moderation, and typically only in cases where they feel strongly that the content needs a downmod — for example, if the post is actively harmful or needs extensive improvement. If, after casting 300 votes, you can’t find one single thing worth upvoting for every 2 things you’ve downvoted, I humbly submit that you’re not trying hard enough. Voting was already asymmetric — you gain the ability to cast upvotes at 15 reputation, but do not gain the ability to cast downvotes until you earn 100 reputation. Upvotes are +10 (and now, +5 on questions) while downvotes are -2 to the poster and -1 to you. And bear in mind that this new 2:1 ratio only applies after you’ve cast 300 votes and gotten the Civic Duty badge, and community wiki votes are completely immune to this ratio. These coming changes also mean that every user will (eventually) get a full reputation recalc, so if you’re wondering why your reputation changed over the next week — here it is. on Meta, the value of a question upvote will still be +10"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/16/more-trilogy-sites/","date":"2010-03-15T23:00:00.000Z","tags":["Background"],"title":"More Trilogy Sites?","text":"One thing we’ve been pitching a lot to VCs is our love for internet communities that are obsessive about something, where that something could be … well, anything, really. I feel that the kind of expert communities that arise around a shared passion for something are not only fascinating but help the world at large, in that these experts produce a lot of highly relevant content that any average person can dip their toes in when they need advice about that particular topic. Our goal with the Stack Overflow engine, then, is to unlock this content and release expert communities from the Soviet-era phpBB and vBulletin software they’ve been trapped in for so many years. In other words, better living through software! I was amused to discover this hilarious Onion article which exposes a hidden downside of these expert communities that Joel and I didn’t discuss with VCs. “I don’t know how I wound up at that point, but thank God I escaped when I did,” Gibson, 41, said Friday. “There I was, a grown man, planning a trip to the Mustard Museum in Wisconsin, when suddenly I heard a voice deep within me say, ‘This is not what you want your life to be about.'” “It was like waking up from a bad dream,” Gibson added. “A bad yellow and brown dream.” Gibson’s descent into the depths of mustard obsession started innocently enough, when he got involved in an Internet exchange about the best kind of mustard to use on a grilled bratwurst. When someone posted a link encouraging him to “click on this if you really want to spice things up,” he took the stranger’s advice and suddenly found himself on MustardMonster.com, a discussion group devoted to the cultivation, preparation, and enjoyment of the table-side condiment. Speaking of mustardmonster.com, I wanted to gather people’s opinions about what sites are currently missing from the Trilogy: We’re trying to identify some gaps we have and possibly fill them, based on existing data. If you had to identify a theme of questions that tend to frequently get asked and closed as off-topic in the Trilogy (whether Stack Overflow, Server Fault, or Super User), repeatedly, what would that theme be? You are welcome to comment here, but if you have a strong opinion on this topic, the best way to express it is by creating, following, or commiting to an Area 51 proposal. While we love expert communities — they are quite literally the fabric of Stack Overflow, Server Fault, and Super User — we don’t want our shared mustard obsession to come between us."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/14/podcast-future/","date":"2010-03-13T23:00:00.000Z","tags":["Background"],"title":"Podcast Future","text":"Hey presto! Jeff gave me permission to publish here, so from now on, you’ll be seeing posts from both of us. The first thing I want to talk about is plans for the podcast. I feel like the current podcast format needs to be freshened up a little bit. I think we’ve started repeating ourselves quite a bit. As a part of my retirement from blogging, I’m trying to stop personal public pontification, podcast or otherwise. Add your ideas in the comments for what you’d like the new podcast to be like. Here are some of my thoughts to start you off: Less about programming and programmers, and more about the broader world of Stack Overflow, Server Fault, Super User, and Stack Exchange. Either Jeff starts laughing at my jokes, or else we get one of those radio morning zoo people like Robin Quivers who laughs at everything. More interesting guests and people from the community; less monologues by me about why the earth is banana-shaped. After this week’s episode we’ll officially kill the current podcast and go quiet for a couple of weeks. We’ll launch the new format in early April when the StackOverflow team visits New York."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/13/podcast-85/","date":"2010-03-12T23:00:00.000Z","tags":["Company"],"title":"Podcast #85","text":"In this episode of the Stack Overflow podcast, Joel and Jeff discuss the pursuit of venture capital, why Joel is ending his blog, and the hidden power of Google’s web spider. We were surprised that so many people who read Joel’s article about our venture capital experiment were unable to imagine any way we could put millions of dollars to use. If you consider that our core mission is to kill software like vBulletin and phpBB, and you had millions of dollars, what would you do and how would you do it? We were also a little disappointed that some people thought we would be willing to damage the community in some kind of quest to create a business. Hopefully we can be given a bit more credit than that — Joel and I may be dumb, but we’re not dumb enough to destroy the very thing we’re trying to create! Choosing a VC partner is like a marriage, and our philosophy is to only marry someone who has compatible views to our own. Even if we didn’t take VC, the process of talking to all these smart people who have accomplished so much in the industry was illuminating, and helped us synthesize and crystallize our own strategy for what we want to do with Stack Overflow — we’re excited about it, and we think you will be too once we can talk about it in more detail! I was away for a two week trip with my family to beautiful New Zealand, where I gave a talk at Webstock 2010 titled Stack Overflow: Building Social Software for the Anti-Social. I’m buying a new laptop from Dell, and giving away my old Dell laptop to a deserving meta.stackoverflow.com community member. Joel is a hard-core ThinkPad fan, but I believe what the world needs is more of an Ikea PC hardware experience. Dell’s design isn’t quite there yet but it has gotten better. Joel elaborates a bit on why he’s planning to quit blogging. There’s plenty of precedent for leaving while you’re still ahead, like Bill Watterson (of the comic strip “Calvin and Hobbes”) did. After 10 years of doing the same thing, you might want to evolve and do something different, too — but hopefully not vanish without a trace. I’m still trying to convince him not to quit podcasting. It’s well known that 90% of our traffic comes from Google. But did you know that Google is about the only company with a competent spider, based on our logs? There are so many terrible spiders, even from large companies that really should know better. It’s a chicken and egg problem; Google’s spidering is so far ahead of every other search engine that I’m unclear how anyone could switch — the result pages simply wouldn’t be there! I have found the Howard Aiken quote “Don’t worry about people stealing an idea. If it’s original, you will have to ram it down their throats.” to be very true with regards to Q&A and Stack Overflow. The corollary to this is that if you don’t have to fight people to convince them your idea is good, your idea might not be so hot. Even very smart people have to be in the right place at the right time to be successful. The best success strategy is probably dogged, bullheaded persistence, because there are so many variables you can’t control or even predict. We answered the following listener question: Michael from Cambridge: “What if Google, or another large company, decided to clone your product and give it away for free? What should a hypothetical startup do if this happens to them?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/11/welcome-stack-overflow-valued-associate-000004/","date":"2010-03-10T23:00:00.000Z","tags":["Background"],"title":"Welcome Stack Overflow Valued Associate #00004","text":"I am pleased to announce that Stack Overflow just added another team member in an officially paid capacity: Kevin Montrose. You may remember Kevin as the author of the unofficial Stack Exchange API. I didn’t realize at the time that Kevin was graduating from Rice University in Houston, TX and actively looking for employment. But when I finally noticed Kevin had his Stack Overflow Careers CV linked in his profile, even someone as dense as myself was able to put 2 and 2 together — working on an API is our highest priority, and we’re looking to hire exactly the kind of programmers who roll up their sleeves and say “no Stack Overflow API after almost two years? To heck with you guys, I’ll just write my own!“ (I’m paraphrasing a little — I’m sure Kevin didn’t actually say that. Or, maybe he did. I don’t know.) Kevin is still a student at Rice until May, so our desire for someone to start part time meshed nearly perfectly with his schedule. Kevin cut his teeth developing a few pending features for careers.stackoverflow.com and we’ve been quite pleased with the results. He’s now actively working with Stack Overflow Associates #00001, #00002, and #00003 to make sure version 1.0 of the Stack Overflow API can be as solid and complete as possible. As a student, Kevin is working with whatever equipment he has at hand. I made sure that he got upgraded to a nice 30″ monitor and a brand new, fully decked out 8 GB, Core i5 laptop. Every team I am on will religiously enforce the Programmer’s Bill of Rights. Congratulations, Kevin. Welcome to the Stack Overflow core team. We’re certainly hoping you will want to continue this part-time gig as a full-time gig later this year! I should also note that big things are happening with Stack Overflow right now, some of which Joel has written about. It’s very exciting and I think you’ll really like what we reveal, but we can’t talk about the details of that yet, unfortunately. I can, however, assure you that we’re very likely to expand the core team by several more members in the near future. And yes, we will be eating more of our own careers dogfood — that is, hiring from the Stack Overflow (and Server Fault) community. Remember: we’re all here to build something we love together!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/03/01/our-sidekick-ifixit-com/","date":"2010-02-28T23:00:00.000Z","tags":["Background"],"title":"Our Sidekick, iFixit.com","text":"Late last year, I had the pleasure of meeting Kyle Wiens, who recently launched iFixit.com. It’s a community driven site providing step-by-step self repair guides for predominantly Apple hardware: Repair is recycling! The best way to keep electronics out of landfills is to keep them working longer. Toxic electronic waste is a global problem that we are working to solve. Self repair saves you money and helps the environment! Kyle let me know that, as programmers themselves, many features of the site were “inspired by” Stack Overflow. Which we’re totally cool with, since the iFixit mission of DIY self-repair guides is geek to the bone. To the bone! When I asked Kyle on Twitter if he was looking for iFixit to be inducted into our League of Web Justice, he replied: Naw, we’re not superheroes. Maybe just a sidekick. Like Robin, or … Aqualad? Aqualad it is, then. Congratulations Kyle and team for launching iFixit. We’re honored to have you as our sidekick!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/02/20/podcast-84/","date":"2010-02-19T23:00:00.000Z","tags":["Company"],"title":"Podcast #84","text":"Joel sits down with the Stack Exchange team, who are working on the hosted version of Stack Overflow at the Fog Creek offices in New York City. Meet the Stack Exchange team — David Fullerton, Aaron Maenpaa, and Emmett Nicholas. For Stack Exchange sites that have a smaller community, Stack Exchanges may email users more aggressively, to invite users to answer less trafficked SE questions. Joel proposes that weekly roll-up emails might work well on smaller Stack Exchange sites. Stack Exchange is a hosted service; it’s currently running on 2.5 servers and soon a third. Stack Exchange has an export feature, so all the data in your site can be dumped out to a file, similar to the way the monthly Stack Overflow cc-wiki data dumps work. Joel blogged about Stack Overflow looking for venture capital — that should not affect Stack Exchange. In any case, even if it did, you can use your own domain name which you take with you, and as mentioned above, you can export all your data. There should be competition, and smart competitors will support the Stack Overflow and Stack Exchange export formats. Stack Exchange pricing is already at maximum, primarily to reduce demand to a level that the current SE team can support. It can only go down over time! It is definitely our goal to make it easier over time for everyone who wants a Stack Exchange site to have one. We’re exploring a lot of possibilities including ad subsidized; it’s also possible that larger corporate adoption of Stack Exchange may subsidize the smaller community sites as well. Right now every Stack Exchange site has its own IIS website (even though they all share the same app pool), but that turns out to be not a great performance model for lots of small sites. One of the Catch-22s of a Stack Exchange site is that fundamental actions like voting up and creating tags require reputation, but nobody has any reputation on a new site. The Stack Exchange team added a “bootstrap mode” which relaxes a lot of these requirements so you can get your site up and running. David notes that a smooth admin / owner setup process is essential to the Stack Exchange service model. You also can’t have a ghost town — you need some questions bootstrapped into the system before you even show it to the broader public. This is analogous to the private invitation-only betas we did for Stack Overflow, Super User, and Server Fault. If you’d like to provide additional feedback to the Stack Exchange team, we encourage you to visit Meta Stack Exchange and help us dogfood our own system. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/02/11/podcast-83/","date":"2010-02-10T23:00:00.000Z","tags":["Company"],"title":"Podcast #83","text":"In this episode of the Stack Overflow podcast, Joel and Jeff discuss the promise and peril of Email (both social and technical), Google Buzz, and the value of training material. I will be at Webstock 2010 and in New Zealand for the next two weeks. I was excited to learn that the singer Wing is from New Zealand. Hear Wing in action. Don’t say I didn’t warn you. OK, maybe I didn’t warn you. I encouraged Joel to have the Stack Exchange team on for a podcast while I am gone for two weeks. There’s a lot of interesting re-engineering of the Stack Overflow engine necessary to support lots of small and medium sites on our engine. If you have questions from the Stack Exchange team, please contribute them to this Meta Stack Exchange thread. I am not a fan of email, to put it mildly, as I wrote in Is Email = Efail and Email: The Variable Reinforcement Machine. Given my discomfort with email, I struggle with the role of email on Stack Overflow — mostly trying to keep it at arms’ length while using it appropriately. I agree with Joel’s position here, which is that aggressive email notifications are toxic to the growth of a community. That’s why our email notifications are somewhat.. slow. It’s intentional. Joel describes Jason Calacanis’ cessation of blogging in favor of a private invitation only email list. He claims that it’s a way of reaching people outside the normal domain of blogging. There are certain folks who just don’t read blogs. Joel feels he has totally and utterly saturated the narrow world of programmers who read blogs, so it’s worth experimenting with different distribution mechanisms and perhaps reach different audiences. The root of the email problem is that it’s the kitchen sink one-size-fits-all communication medium, when in reality, there should be communication escalation (or de-escalation) to fit what you’re trying to communicate. Tailor your choice of communication medium to the particular message you are delivering! Is email for old people? I do think younger people are correctly intuiting that there are more efficient mechanisms for online communication. As Joel notes, email is really the only canonical form of online communication that everyone is guaranteed to have. You may not have a Twitter or Facebook or Friendster account, but surely you have an email address. Everyone does! I am highly skeptical of the new Google Buzz because it is built on email. You just can’t build a stable structure on top of a broken system, in my humble opinion of course. The act of sending mail is also incredibly complicated because spammers have abused the infrastructure for a decade. There are a few immune responses that are still effective, such as DKIM and Reverse PTR records. SenderID is another method, also based on DNS records, but it’s less well regarded. If you’re going to send email and you want it to arrive, you need to implement all this stuff! Joel has documented a lot of the process at Fog Creek in a series of training videos and a book, titled Make Better Software. Compared to most companies, Fog Creek is quite transparent in this regard, and I might even say they evangelize for better programmer working conditions. Our featured questions this week are: Server Fault: What’s your recommended server room kit? A nice description of the key items any well provisioned server room ought to have. We answered the following listener question on this podcast: Pierre “Good programming training material is expensive. How can students obtain good training materials?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing. update: my 2010 webstock talk is now online."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/02/10/whatever-were-doing-together-apparently-its-working/","date":"2010-02-09T23:00:00.000Z","tags":["Community"],"title":"Whatever We’re Doing Together, Apparently It’s Working","text":"We are in the enviable position of getting some very nice emails, as I might have mentioned before. But sometimes we get emails so positive that I feel compelled to share them with the community. Just wanted to commend you on the fantastic site. I have heard a little of the behind-the-scenes so I know a lot of thought has gone into it, and I really like the result– the community feels both professional and neighborly, with folks just helping out folks. And the really nice bit is that it’s a one-stop-shop for many platforms/environments, completely obsoleting my need to be on random closed mailing lists and plunge through badly threaded forum archive viewers for the stuff I care about. You’ve really moved the vanguard forward for tech resources. Keep up the great work. And also: Just wanted to drop a note to the team and say thanks for building this site! It’s very nearly free from a lot of things that forum/community solutions are plagued with, namely: Folks who take “religious” positions on particular aspects of coding design, style, etc. Folks who open pointless topics such as “Is [language A] better than [language B]?” Community politics don’t seem to exist You can ask a question as a n00b and people don’t feel the need to call you a dolt! I’ve only been using it for a few weeks, but it feels like pure, unfiltered coding question satisfaction without the baggage. I’ve been coding for over a decade, decided I was going to learn Ruby on Rails last month, and when I get stuck on those little questions that make me want to pull my hair out, because I know the only thing I’m missing is understanding on one or two facets of some concept, I come to the site, write a question in 5 minutes, take the dog for a walk, and by the time I come back I’ve either got the right answer, or something that is damn close. It’s a breath of fresh air that encourages this really positive feeling in me – which makes me stop and take the time to answer others’ questions, just because I find the site so damn helpful. I for one am proud to be associated with the Stack Overflow, Server Fault, and Super User communities. You guys rock. And not just because I said so, but because every week we get emails like these in our inbox! As I’ve said before on the podcast, my favorite thing to do on any Trilogy site — my absolute favorite thing to do — is to upvote a great post by a brand new user. The “pay it forward” model of peers helping peers get better at what they do is exactly what we were shooting for. Whatever this thing is we’re doing together, apparently it’s working."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/02/09/stack-overflow-2010-moderator-election-results/","date":"2010-02-08T23:00:00.000Z","tags":["Community"],"title":"Stack Overflow 2010 Moderator Election Results","text":"The Stack Overflow 2010 Moderator Election results are in! We decided to choose two moderators this time, just like last time. The winners are … drumroll please … Congratulations to our newest community elected moderators, Gumbo and Jonathan Sampson (update: Jason Cohen was originally the #2 winner, but withdrew from the race after some post-election reflection) We used the OpenSTV software to calculate the results. Per the OpenSTV FAQ, we used the most accurate form of STV to calculate these results: If you are electing one person and simplicity is not important, then we recommend Condorcet voting. Most people agree that Condorcet is the best method for electing one person, but it is more difficult to explain. If you are electing multiple people and simplicity is not important, then we recommend Meek STV. Most people agree that Meek STV is the best variant of STV, but it can only be implemented with a computer program. You can download the Stack Overflow 2010 Moderator Election ballot file and our output result and run the election yourself, if you like. (Of course the individual votes are anonymous in the file.) I went ahead and donated $25 to OpenSTV as a thank you for making this software available and saving me the effort of writing my own code to calculate the Single Transferrable Vote election results, which was … uh, more complex than I realized. Thank you to everyone who voted, and in particular thanks to all the candidates! It’s because of you, and your willingness to contribute, that we can have this great, vibrant community to participate in together."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/02/07/thermal-event-at-datacenter/","date":"2010-02-06T23:00:00.000Z","tags":["Company"],"title":"Thermal Event at Datacenter","text":"Our hosting provider, PEAK, let us know that they had a cooling compressor fail in the facility. The primary database server was apparently taken offline at 2:53 AM Pacific Time by this thermal event. The backup database server is still online and has the most recent (12 AM) backups restored to it; we’re currently just waiting to hear if db1 is rebootable/alive before bringing db2 online. db1 came back OK, and we’re resuming site service now at 3:57 AM. Checking the logs, db1 apparently shut down from heat at 2:44 AM: The previous system shutdown at 2:44:21 AM on 2/7/2010 was unexpected. I suspect db1 shut down because it’s on top of the rack (highest = more heat) and it is the only server using the High Performance power plan — which operates all CPUs at 100% speed all the time — instead of the default Balanced power plan which allows the CPUs to reduce speed and consume less power when they are lightly loaded. We’ll be following up with PEAK to figure out why this wasn’t handled before temperatures became dangerously high. Obligatory video link. Geoff went down to the datacenter, and he confirmed it really was quite hot down there — doors were open, fans were placed blowing air in, etc. Update: PEAK official statement The PEAK HVAC system consist of two cooling systems which both operate to provide cooling to the pressurized floor of data center. One system is a 5-ton and the second is a 10-ton unit. At around 2:30am on Sunday morning (2/7) the PEAK Data Center experienced a failure of one of our air conditioning units on the roof. Our monitoring systems notified the PEAK support center when the AIR temperature exceeded 80 degrees F. At some point we measured temps of 83+ degrees F in the Data Center. Engineers arrived on-site around 3:00am and deployed portable fans to exhaust warm air. This brought down the air temperature in the Data Center to under 80 degrees. Our HVAC vendor was dispatched and arrived on-site by 4:00am. The vendor located a failed heat exchanger fan motor in their in-stock inventory and performed an emergency replacement. By 7:00am the HVAC system was operating with the repaired equipment. At 7:30 4lbs of coolant was added to the system. By 9:00am, the temperature in the Data Center returned to normal levels. PEAK Engineers are looking into why this failure caused a significant rise in the Data Center temperature. Based on our findings, PEAK will take the necessary actions to ensure a failure of one systems does not cause a significant change in the Data Center temperature. We will provide this information once it becomes available. Scary how fast temperatures rose!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/02/05/podcast-82/","date":"2010-02-04T23:00:00.000Z","tags":["Company"],"title":"Podcast #82","text":"In this episode of the Stack Overflow podcast, Joel and Jeff sit down with Mac developer Daniel Jalkut of Red Sweater Software to discuss his experience as a longtime Mac developer and small Mac software business owner, and the possible impact of the iPad. Daniel launched Red Sweater software way back in 1999 (and has been an active Mac developer since 1995), but it didn’t become his primary business until 2005-ish. The big apps in his stable are MarsEdit, blog composing software, and Black Ink, a crossword app. There has been no iPhone version of these OSX apps to date because it wasn’t a good fit, but the iPad is going to be a nearly perfect fit. In Daniel’s experience, the primary change in Apple’s software developer support story over the last 15 years is that Apple has become much more pragmatic in adopting developer tools from the UNIX and open source world. Remember when Apple had its own Unix, a/ux? Apple has a whole new alternative to gcc, the clang compiler. The Macmillan-Amazon Kindle incident highlighted how Apple entering the eBook market with the iPad and iBooks is actually disruptive in a good way, that benefits both readers and writers. Joel agrees that the iPad will probably kill the Kindle hardware. We think e ink is kind of overrated. It’s not clear how much this matters to Amazon. It is bizarre that the Kindle app will be allowed to run on the iPad as a competing “app store” next to iBooks. I’m a little perplexed about the existence of iWork for the iPad, since it highlights the main weakness of the iPad — while touch is great, the inclusion of keyboard support is odd, and I’m not sure how well it’s going to scale to large screens and I think it’s a weak replacement for the mouse paradigm. Joel and I think Steve Jobs never really believed that computers made sense as general purpose devices. Computers should always have been appliances, and the iPhone and iPad are manifestations of that. Steven Frank likens the iPad to the new world of computing, a bespoke from the ground up reconception of how computers should work, compared to the classic OSX, Linux, Windows desktop old world. Is lack of support for Adobe’s Flash on the iPad the equivalent of dropping the floppy drive from early iMac models? I’d say the floppy drive was already pretty useless by the time Apple dropped it, whereas Flash is still kind of useful in a lot of circumstances, as John Nack notes. Particularly on a large screen device billed as delivering a no-compromises web experience. If Apple choosing to make a political statement about dropping Flash (on the iPhone and now iPad) results in websites built with better Flash fallbacks than an empty box on a web page, that is a good thing. It’s just hard for me, personally, to accept that Apple is doing this out of the goodness of their own heart, rather than as a nakedly capitalistic way to protect the income stream from the App Store. It has been pointed out to me that Stack Overflow is powered by bored programmers, so it is in our best interest for programmers to be bored at work. Joel says that being bored says a lot more about a person’s state of mind rather than whether the environment is actually boring. If you’re bored while programming, “you are doing it wrong.” There are several dimensions to improving questions on any site on the trilogy; primary among those is editing (at 2k rep), and there always is voting to close (at 3k rep), flagging for moderator attention (at 15 rep). And meta-discussion about questions is always welcome on meta.stackoverflow.com. Community moderation is an important part of our sites, and we’re currently conducting an election to determine the next Stack Overflow moderator. You do need 200 reputation to have the right to vote, though. For more great Mac dev discussion, check out Daniel’s podcast with Manton Reece, Core Intuition. We answered the following listener question on this podcast: Jeffrey “How do you deal with programmers who are intellectually bored at work?” Phil “I spend a fair amount of time on Server Fault, but I’ve seen a lot of new users not providing enough information for us to help them. As a result the signal to noise ratio has dropped. What can be done to improve this?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/02/04/stack-exchange-gets-a-blog/","date":"2010-02-03T23:00:00.000Z","tags":["Community"],"title":"Stack Exchange Gets a Blog","text":"A little birdie told me that the formal launch of Stack Exchange, the hosted version of the Stack Overflow platform, is imminent. I noticed the Stack Exchange homepage has been totally redesigned with a snazzy new logo, as well. Looking good! There’s also a brand new Stack Exchange blog, which I am sure will be updated the very second that the service exits beta and goes live — so it’s probably worth subscribing to. Short of open sourcing our software, which isn’t in the cards right now, Stack Exchange is the best way to get your hands on the Q&A; engine technology powering Stack Overflow, Server Fault, and Super User. Although the Stack Overflow engine was always designed with a technical audience in mind, I’m intrigued to see how far we can push the boundaries of that audience. We’ve pushed a little bit when going from programmers, to sysadmins, to power computer users — and we may try pushing a tad further this year with yet another site. Stack Exchange pushes far beyond that into totally unexplored territory. I’m eager to learn what tweaks to the core engine will be necessary to support these newer, less technical audiences. And presumably the Stack Exchange team at Fog Creek is eager to implement these tweaks. Anyway, whether it’s a hosted Stack Exchange site, or a clone, the sooner we can get people off the archaic, busted phpBB style of discussion on the internet, the better off we’ll all be. If we have a corporate mission, it is that: to raise the level of discourse on the internet, and to collaboratively put faster, more relevant search results in front of our fellow internet travellers. All through better software!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/02/01/podcast-81/","date":"2010-01-31T23:00:00.000Z","tags":["Company"],"title":"Podcast #81","text":"In this episode of the Stack Overflow podcast, Joel and Jeff discuss the value of Deep Blue, the Five Whys process, and whether programmers should blog. If you work at a fancy company like Fog Creek, you’ll have access to a Latte machine, and you too can create Latte art! Checkers is now a solved problem. Chess is almost solved, in that no human player can beat the best software chess engines. In other news, Joel solved tic-tac-toe. Deep Blue was amazing technology for its time, but what was the value in IBM doing this, and pitching it as the epic man vs. computer chess battle? What other companies could pursue cool, useful computer science spectacles like this? a followup to our GitHub conversation last week, clarifying some things we didn’t quite get right in our previous conversation. Joel notes that a random programmer at JFK approached him and told him how much Stack Overflow Careers helped him. We have a number of success stories that have arrived via email, twitter, and in person. Incidentally both Stack Overflow and Fog Creek are hiring, and guess where we look first for candidates? As we partially covered in Podcast #64, it’s difficult to find good testers, because it’s a related yet different skill from programming. A discussion of Joel’s article Five Whys — we seemed to have the same problem of failed network autonegotiation, but we discovered at least one more Why. Per our Server Fault question on ethernet autonegotiation sysadmins seem to agree that “problems” with gigabit ethernet autonegotiate, at least, are almost always symptomatic of deeper root problems. When setting up a portfolio of your programming work, what you want to do is stand out among the crowd. What are the shiny beacons you can put in that would get employers excited? Don’t get too detailed too fast, so feel free to use pictures and diagrams — there’s always room for details later. We don’t like take home programming tests, but is it useful to document the process of how you research and solve a problem? Joel maintains the real win is to over-solve the problem to show what a hard worker you are. Some tips from Joel and Jeff about why and how (or if) programmers should blog. Set a schedule and stick to it. And don’t be a commodity blogger! It helps to focus on the storytelling aspect of the writing, per Ira Glass. And remember, writing a better article on any topic is usually pretty easy, because so much of the content on the internet is so darn bad. Please submit your audio questions to the podcast — we have brand new Stack Overflow t-shirts and the best question next week will get one! We answered the following listener questions on this podcast: Alison: “I work closely with hardware and firmware, and I have trouble figuring out how to show off my work to my prospective employers. How do I build a portfolio?” John: “I recently started a programming blog at simpleprogrammer.com. How important is it for a programmer to have a blog, and why?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/02/01/stack-overflow-2010-moderator-election-begins/","date":"2010-01-31T23:00:00.000Z","tags":["Community"],"title":"Stack Overflow 2010 Moderator Election Begins","text":"After a week long nomination period, we now have our Stack Overflow 2010 Moderator candidates. (To be eligible as a candidate, you had to have at least 10 total upvotes in the meta nomination thread. Downvotes were not counted in any way.) There were some suggestions that the Single Transferable Vote system would work better than the simple “one user, one vote” system we used last time. So, this time around, we’re conducting the election a bit differently — you can cast three votes instead of a single vote. Some ground rules: To be eligible to vote, you must be a Stack Overflow user with at least 200 reputation. The list of candidates is shown in random order every time it is presented. Only three votes can be cast per user. No, they can’t be undone. Cast votes in the order of most desirable candidates first. Your first vote has the most weight. After a week, the candidate with most weighted votes will be elected the new Stack Overflow moderator. For those users who don’t follow the blog, we are planning to send out a user alert (similar to the badge award alerts) tomorrow to let them know the voting page is available. Remember, we’re looking for a good moderator; someone who is above all: patient and fair leads by example shows respect for their fellow programmers in their actions and words I suggest examining the candidates’ user pages to get a sense of what kind of moderator they might make. I cast my vote; have you cast yours?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/29/open-source-ad-stats/","date":"2010-01-28T23:00:00.000Z","tags":["Community"],"title":"Open Source Ad Stats","text":"Just a quick note to let everyone know that the free Vote-Based Open Source Ads on Stack Overflow now feature some basic statistics. Visit the ad summary page, and mouseover the stats link to see a breakdown of how each ad is performing. As always this feature comes courtesy of our most excellent pal, and long time Stack Overflow user, Portman Wills. (if you haven’t already, do check out his clever Shuffletime service.) Remember, all it takes is a valid ad image and link posted to current meta ads thread, and five upvotes, to have worthy open source software featured on the homepage of Stack Overflow. How do we define worthy? It must be an advertisement soliciting the participation and contribution of programmers writing actual source code. This is not intended as a general purpose ad for consumer products which just happen to be open source. It’s for finding programmers who will help contribute code or other programmery things (documentation, code review, bugfixes, etc). So you know of an open source project that’s actively looking for developer publicity and code contributions — please submit it!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/25/six-whys-or-never-trust-your-network-switch/","date":"2010-01-24T23:00:00.000Z","tags":["Background"],"title":"Six Whys – Or, Never Trust Your Network Switch","text":"Remember Joel Spolsky’s fine article “Five Whys”? Sure you do! It contained this paragraph: Michael spent some time doing a post-mortem, and discovered that the problem was a simple configuration problem on the switch. There are several possible speeds that a switch can use to communicate (10, 100, or 1000 megabits/second). You can either set the speed manually, or you can let the switch automatically negotiate the highest speed that both sides can work with. The switch that failed had been set to autonegotiate. This usually works, but not always, and on the morning of January 10th, it didn’t. Guess what we woke up this morning (well, you don’t really “wake up” at 3 AM, unless you’re a vampire, but you know what I mean) to find? My, that looks familiar. Where have I read about this before? Oh yes, the article I just quoted twenty seconds ago! To be fair to NetGear, we never had any port speed negotiation problems with our old 8-port GS108T switches, but we recently upgraded to the 24-port GS724T. I guess this model is more sensitive and brooding, or something. Geoff “the Malice from Corvallis” Dalgas was all over this one and got all the web tier servers in our network set to a fixed, non-negotiable ethernet speed of 1 Gigabit. And I ask myself … why? why? why? why? why? It’s because I can’t read, apparently, and that’s why. Do you love solving network problems before they arise? Check out the job postings for network administrators on Stack Overflow Jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/22/careers-success-stories/","date":"2010-01-21T23:00:00.000Z","tags":["Careers"],"title":"Careers Success Stories","text":"Now that Stack Overflow Careers is formally out of beta and fully operational, we’re getting a lot of traction with employers and making some excellent connections between companies who love great programmers, and programmers who love to code. Here are a few recent success stories people have shared with us: I was part of a mass layoff around Thanksgiving. That means another job search. So, I published my CV on SO Careers. In just one week, I received a message from an employer saying that they would like to interview me. So, I scheduled an interview. Later that week, one of my recruiters called me about the same position. Can it really take that long to get a recruiter on board? I think that this really exemplifies one of the huge benefits of SO Careers: the power is given back to the primary parties involved! Individuals have a space where they can show themselves in a much more interesting and useful way. Employers are given the power to find these people directly and on their own schedule. There is no middle-man to clog up the works. This same employer made me an offer 30 minutes after I left the interview. I am employed again! Thanks for making this wonderful site. — Sean Massa And another: I wanted to take a couple minutes to thank you all for your work on Stackoverflow careers. I filed my CV last year and got my first hit last week. The employer called me and brought me in for an interview. Now I’m facing a job offer providing a 30% raise … what sucks is I like my current job! I just wanted you all to know your hard work and innovative ideas have impacted both my career and my bank account. The employer told me that my Stackoverflow account directly influenced their hiring decision because they could verify skills through the site. Keep up the good work! — a programmer in Georgia And another: I was currently employed but was in that 25% at DevDays that “hated their job and couldn’t wait to find something better.” It wasn’t the people I worked with or the work that I did necessarily; it was the culture and the nature of being in a “corporate” job; it was so political and difficult to get the tools I needed to do my job in the best way that I could (I ended up buying my own tools such as R# and even my own keyboard and mouse). I knew I wanted a new job, but I didn’t want to just move to another job that put me in the same situation as I was currently in. I have been searching for companies to work for in the area through all of the normal avenues (plain networking, monster, indeed, craigslist even) and it was so polluted with jobs that made it difficult to filter down. This is where StackOverflow careers has succeeded for me; a smaller company who had great working conditions was able to find me and provide me all of the opportunities that I was looking for. I never thought that I would be able to be employed by a company that shared some mindset similarities with FogCreek (such as providing great compensation, private offices, top of the line dev machines, Aeron chairs, passed the Joel test, etc!). When I interviewed, my future employer already had a sense of who I was based upon the questions and answers on my StackOverflow profile, and those gave us things to discuss during the interview (in a sense it “broke the ice”, which was awesome for me and I’m sure for my future employer as well). Thanks to all of you for building this community that has provided me and other developers the opportunity to share our knowledge and continuously learn. And thanks to StackOverflow Careers for giving me a platform to market myself to the employers that don’t necessarily have big, recognizable names but can provide developers with what they are looking for. — Jon Erickson And another: Stack Overflow Careers was directly responsible for me landing the perfect job at a local company here in Washington, DC. I am finally escaping the pain and suffering of being a government programmer. The timing of Careers could not have been better. I published my CV the day the public beta became available and linked it with my StackOverflow account. Two days after you moved the hiring side of careers out of beta, [my new employer] contacted me. I never would have found them on my own. After lots of talking and getting to know each other,I formally accepted the job with them today and begin my new job March first. Your product has been instrumental in my job search. From your product I received five solid leads with top tier technology companies in a three month period (including the employer beta). The other job board products I tried got me nothing – not even when I reached out to employers directly. I will absolutely recommend your product to all of my co-workers at my old office and to anyone I know who is looking to land a top tier job in the software field. — Ryan Michela If you have a success story from careers, feel free to mail us at careers@stackoverflow.com, or post it in the meta thread. But that doesn’t mean we’ve been slacking off.* We’ve been busy at work improving Stack Overflow Careers over the last few weeks, too. One of the most common requests we got was to provide more details on who exactly the employers are, and what they’re looking for. So we’ve added the ability for any CV owner to view detailed employer search statistics. The cold, hard search data speaks for itself: These statistics are live and updated every hour. Create your own CV and you, too, can browse the employer search stats at will. We haven’t forgotten employers, either. Employers who subscribe to careers for longer than a week have one-click access to their entire saved search history. It appears right there on the search form, under the search button. Give your searches names, click to repeat them — and if you subscribe for 6 months or a year, we’ll even email you new CV matches to your favorite searches as they come in. While the number of results may seem smallish, we believe that these are all extremely high quality candidates. Yes, we’re biased, but consider typical job board results. Sure, you may get 100 responses from that job board ad, but how many of those candidates are qualified? How many of them are competent? How many of them love to program like we do? In other words, as an employer, how much is your time worth? Sean Massa, who just got a job through careers, sent in this followup note: My new company loves SO Careers. They refer to it as the Gold Mine. We realize that this is a smaller, more selective audience — but that’s the goal. We want to build a concentrated, specialized group of companies and programmers who get it. A tribe of people who love this stuff as much as we do. Anyway, if you were holding off on careers because you weren’t sure if it would work, I don’t blame you. What we’re doing is a little unorthodox, as we explain on the about page. With the caveat that we’re never going to be the next enormo-megacorp Dice or Monster (and thank goodness), all current signs point to it working! Remember: Public CVs are always free, forever. There is a nominal fee to file your CV and make it visible to our private employer search engine. It’s completely free to test our private search engine as an employer. There is zero risk. If you subscribe and you’re not satisfied for any reason, within 90 days you get a full refund, period, no questions asked. We don’t want your money if you’re not amazingly happy. If any of that sounds useful, I encourage you to check out Stack Overflow Careers. You can search for jobs by location (e.g. developer jobs in San Fransisco) or by language (e.g. jobs using WordPress) and more. No more than usual, anyway"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/21/podcast-80/","date":"2010-01-20T23:00:00.000Z","tags":["Company"],"title":"Podcast #80","text":"In this episode of the Stack Overflow podcast, Joel and Jeff discuss GitHub, the value of formal code documentation, and how to decide what features belong in the next version of your software. We’ve had some difficulty adapting to GitHub, where the reverse engineering of the Javascript Markdown (WMD) editor was performed. It regularly confuses everyone that encounters it, and that’s frustrating from a support perspective. For example, why does the MangOS project on GitHub have 854 branches? How is that useful to anyone? The project network is so complex it can’t even be rendered! What I specifically object to is that all pulls show up in the timeline as forks; I’d like to see an ability to nominate your pull timeline as either private or “not intended for merging” so it won’t show up in the main network. Joel is writing a series of articles about distributed version control in Mercurial — I’m hoping they will clear up some of my confusion about GitHub. I personally find Google Code much easier to work with. As part of MarkdownSharp, our open source C# Markdown implementation, I’ve experimented a bit with turning a regex into a state machine — and I was a bit shocked how many lines of code it takes to “unroll” a regex. Is it really easier to troubleshoot 25 individual lines of state machine code (all with potential bugs) or 3 single line regular expressions? Stack Overflow user William Shields has taken up Joel’s challenge to write a Markdown parser the right way — and produced an excellent series of articles about what he’s learned in the process: one, two, three, four. It’s a perfect example of the type of learning that Stack Overflow itself is all about; kudos to William for sharing it! Joel and I have mixed feelings about documenting a large code base. Rather than wasting time generating reams of documentation that may never be read, and will rapidly get out of date — we offer some alternatives. Come up with a unit test suite that lives symbiotically with the code, or spend time documenting the key, central data structures instead of the code. Also, have the new hire guys and gals who encounter the code be in charge of keeping the “how do I get started with this stuff?” bootstrapping information up to date. Joel says the least amount of work you need to do to capture how many hours are spent on programming tasks, is to make each source code checkin assume that all time since the previous checkin was spent on whatever the current task is. This is “good enough” in his experience and produces solid, useful future estimates. At Fog Creek, to determine what features make the cut for the next version of the software they get developers, customer representatives, and the sales team together and do T-Shirt size estimation (S through XXL) of development time for the desired features. Then everyone in the meeting has a dollar to spend on their favorite features. Then, just fit the winners into the allotted schedule. Stack Overflow is a community driven site, so many (but not all) of the new features come from top voted Meta Stack Overflow requests. We try to avoid devolving into design by committee by heavily weighting feature requests that match our vision for the site. Most feedback is not terribly useful — but if you’re willing to spend the time it takes to filter out the bottom 90% of feedback, you may be pleasantly surprised by the cool ideas the community can come up with. We answered the following listener questions on this podcast: Dave: “I work at a large company with an enormous code base in many different languages. As a new guy trying to find my way around, I get frustrated by the lack of documentation. How much documentation is appropriate?” “We had a new year’s resolution to capture an accurate work log of hours worked, but we’ve already relapsed. How do the Fog Creek developers manage to do this?” Chap: “How do you prioritize features and functionality for your products, and how do you decide what to spend time on and what’s worth doing?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/19/welcome-new-super-user-moderators/","date":"2010-01-18T23:00:00.000Z","tags":["Community"],"title":"Welcome New Super User Moderators","text":"We’ve appointed two new Super User moderators from the meta voting thread. Welcome Ivo and Troggy as our newest Super User community moderators! This also means that two existing Super User moderators, originally appointed in August 2009, will be retiring. TheTXI indicated to us via email that he no longer will be able to return to the Trilogy in any useful capacity. Serving as community moderator is completely voluntary; we understand that sometime life gets in the way of such things. Doug, we’ll still be here if you ever come up for air, and you’re always welcome back with pony-loving arms. Splattne was unusual in that he was a moderator across two sites — Server Fault and Super User. I was always a little uncomfortable asking Stefan to pull double duty. Because he’s a mensch, of course he agreed, but I’m glad we can refocus so he doesn’t have as much on his plate. He will of course continue to be a moderator on Server Fault, and Server Fault will hopefully benefit from the increased attention. As always, I recommend that new moderators (or anyone interested in the topic) read through A Theory of Moderation. And don’t forget we’re still accepting nominations for a new Stack Overflow moderator as well."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/16/new-improved-comments-with-reply/","date":"2010-01-15T23:00:00.000Z","tags":["Community"],"title":"New, Improved Comments with @reply","text":"Stack Overflow didn’t always have post comments. The first comment ever was on this post by Michael Stum, and it was posted on September 6th, 2008. There have been continuous improvements to comments since they were originally rolled out: Comments: Flags and votes Comments: Top n shown Comments: question owner is highlighted On top of that, the limitation on comment length was relaxed from the original 300 characters to 600 characters. There have been three additional improvements to comments recently, all by popular demand. Comment Formatting Hopefully you’re familiar with Markdown by now; it’s the formatting language we use for posts on Stack Overflow. Well, all that learnination has paid off: now you can use a subset of Markdown in your comments for bold, italic, and code. *italic* _italic_ **bold** __bold__ `code` *not italic* [link text](http://example.com \"link title\") Like so: The support of a minimal subset of Markdown in comments isn’t new, it’s been in for several months — but I wanted to make sure everyone was aware of it. Comment Editing As frequently requested, we now allow editing of your comments for a 5 minute grace period after they are posted. Just mouse over your comment and look for the “edit” link. A comment that has been edited will have a small pencil icon indicator; the tooltip explains what it means, and also tells you how many times the comment was edited. Once that 5 minute editing grace period is over, the comment is “locked in” and cannot be edited. If you want to change it after that, it must be deleted and resubmitted as a new comment. Comment @username Notifications Normally, you only get notified of comments when you own the post that is being commented on. But now you will also get notified of any comments that refer to you by @username, even if you don’t own the underlying post. This implementation is inspired by the way Twitter handles @username mentions — although we have the additional rather severe restriction that in our system, user names are not guaranteed to be unique. In the above example, Anthony Jones will get notified that Bruno Conde has replied to his comment. (writing out the entire username wasn’t entirely required, as will be explained shortly) There are some rules, of course: This only works when referring to other people who have already commented (or have edited the post). Your comment must include @username that you are referring to, where “username” is a reasonable match to the user’s current display name (as seen in the comments above yours). There must be a starts-with, case insensitive match of at least THREE characters to the displayname. So @a and @ab will never match anyone or anything. Spaces are ignored in the match, so if the person’s display name is “Peter Smith” then just use @peter to match, or @petersmith. Matching is performed in reverse chronological order, so if there are five people named “John” in the comments, writing “hey @john, have you considered apples?” will match the most recent John to comment. Only one person can be replied to at a time in a comment. The first one in the string wins. Users who have no display name set, whose faux-displayname is derived from their OpenID URL, cannot be matched. Question and answer owners were always notified when there were new comments on their posts, so there’s no need to address the post owner by @name when commenting. Remember, the intent of this feature is to let other users participating in the comments know that you’ve replied to them. Now, we don’t want Stack Overflow to turn into a social networking site for chatty cathys, so there’s only so far we will go in supporting pure conversation. We may be tweaking the behavior a bit over the next day or two, but but this seems like a reasonable compromise."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/15/what-would-a-stack-overflow-api-look-like/","date":"2010-01-14T23:00:00.000Z","tags":["API"],"title":"What Would a Stack Overflow API Look Like?","text":"We are now gearing up to build the first official Stack Overflow API. Please bear in mind that the first version of the API will be read-only by design. We’d rather attack the much harder problem of writing (that is, submitting questions, answers, and comments) in V2 with improvements rolled in from our experience having the read-only V1 API out there first. To get an idea of what working with this imaginary Stack Overflow API could look like, browse the project Stack Overflow user Kevin Montrose set up: Stack Exchange API on Google Code Project homepage Documentation Documentation for the current Stack Overflow “API” it uses (warning: bad, incomplete, broken, unsupported) To be 100% clear, we are NOT blessing this as an official API, but we’d like to take advantage of the hard work Kevin has rolled into his code to help produce a proper Stack Overflow API that doesn’t suck. Because what currently passes for an API on Stack Overflow was never truly intended as such, it’s important to regard what’s in place now as a preliminary sketch, a temporary crutch, a placeholder for something better. To produce a decent read-only V1 API for Stack Overflow, we need your input: Read through the highest voted questions tagged [api] on meta. Browse Kevin’s document Desired Stack Overflow API which is based on his experience writing SXAPI. Done? Good. Now, what do you want to build that uses the API? The perfect API for this task, called from your preferred programming language, would do … what, exactly? What’s clean? What’s simple? What’s supportable and scalable? If WordPress comments are too limiting, and you’d like to post some code samples or use Markdown formatting, feel free to use the SXAPI Meta question to do so — or any place on Meta, really, as long as it’s properly tagged with [api]."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/14/stack-overflow-2010-moderator-nominations/","date":"2010-01-13T23:00:00.000Z","tags":["Community"],"title":"Stack Overflow 2010 Moderator Nominations","text":"Remember the Stack Overflow moderator elections we held last year? Sure you do! Nominate a New Stack Overflow Moderator — March 20, 2009 Stack Overflow Moderator Voting Now Open — May 5, 2009 Welcome New Community Moderators — May 19th, 2009 This whole “democracy” thing really must work, because the community truly picked winners, in my opinion — Marc and Bill have been amazing to work with and top notch moderators in every regard. Based on the explosive growth of Stack Overflow, it’s clear we need a third community moderator. Head on over to the Meta topic Nominations: New Stack Overflow Moderator and let’s get those nominations started! (while comments are always welcome, please do not nominate anyone in the comments here; keep it on meta so we can stay organized.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/14/stack-overflow-network-configuration/","date":"2010-01-13T23:00:00.000Z","tags":["Background"],"title":"Stack Overflow Network Configuration","text":"I think we’ve finally arrived at a semi-stable network layout for running Stack Overflow and the rest of the trilogy. Here’s a diagram of our current network layout: The most recent changes were all in the name of redundancy: move to dual HAProxy routing instances add a third Stack Overflow server to the HAProxy rotation to handle steadily growing site traffic push our static content (sstatic.net), which is shared amongst all Trilogy sites, to five different servers take advantage of our datacenter’s ability to deliver dual switched connections to the internet The last part is in reference to an unfortunate recent switch outage at PEAK, our datacenter provider. It was handled swiftly, but now there is no longer a single point of failure upstream of us at PEAK — we’re being served by two different switches on two different internet connections. Kudos to PEAK for not only handling this rapidly at the time, but also more permanently fixing it in a way that makes it less likely to happen next time. What motivated a lot of this was a little scare we had about a week ago. The single server that hosted our single HAProxy instance and the sstatic.net content experienced some kind of bizarre, one-time, and still-unexplainable (edit: now explained) networking issue. This sounds minor, and it should have been, but it was a major bummer in actuality because having that one server become unavailable on the network effectively took out every single site we run with the exception of Careers. We sure lost the server lottery on that one. Not good, obviously. We redoubled our efforts to become more redundant. We recently added a sixth 1U web tier machine so our server rack is now completely full. We have way, way more server power than we need. That’s 6 very capable web tier boxes and 2 beefy database tier boxes all told. Each ready and willing to dynamically share whatever load we want them to. We just had to figure out how to do it. We’re big fans of HAProxy, which the guys at Reddit turned us on to. It has been working flawlessly for us in load balancing Stack Overflow between two — and now three — servers. We currently use IP-hash based routing to determine which server visitors to stackoverflow.com end up on. This helps improve local server cache hit ratios, as users “stick” to the same server for as long as they hold the same IP address. (No, we don’t use a shared server farm memory cache like Memcached or Velocity quite yet.) While this works, it does lead to some slightly imbalanced loads, particularly when single-IP whales like Google thunder through your neighborhood. We found that going from two to three servers produced a surprisingly large improvement in server load balance, even with our less-than-optimal IP hash routing choice. HAProxy is a proven solution for us. But we needed some way of using two HAProxies — on two different servers. Geoff did some research and came up with Heartbeat, which is a part of Linux-HA. This works by “sharing” one IP between two machines (in this case, two Linux virtual machines). It dynamically switches the IP from one server to the other when the heartbeat times out. We now have this set up and it works brilliantly; shut down one of the two VMs and within two ping -t cycles, that IP address is automagically and seamlessly switched to the other VM. There is a very brief interruption of service during this switchover, but it’s no more than a few seconds. We also moved our sstatic.net shared content from living on a single webserver, to living on five different webservers. Our dual HAProxy instance is also responsible for routing sstatic.net traffic — as visitors request sstatic.net files, those requests are served in perfect round-robin fashion by whichever of the 5 webservers HAProxy sees as alive at the moment. Given that these HAProxy instances are super-critical not only to Stack Overflow but every site in the trilogy (because they serve shared static content), we need constant reassurance that they’re healthy. We already use Pingdom as an external monitor and alert service for our existing websites, so we added our HAProxy instances to the mix with an aggressive ping schedule. If something bad happens to either HAProxy instance, we should know about it within a few minutes. There might have been some momentary interruptions in service while we set this all up, so our apologies for that. But the net result is a more resilient, more reliable Stack Overflow and friends for you! We know the importance of building a secure, reliable network. Companies are continuously searching for the network experts to manage this crucial task. Check out our listings for the latest network engineer jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/13/coming-soon-stack-overflow-t-shirts/","date":"2010-01-12T23:00:00.000Z","tags":["Background"],"title":"Coming Soon: Stack Overflow T-Shirts","text":"I am beginning the process of placing a Stack Overflow T-Shirt order. Please refer to the two meta t-shirt questions to see proposed designs (or post your own), but I think we’re going to have to go with something simple and basic to please everyone. At the moment, I am thinking a large-ish copy of the logo on the front of a plain white (but quality!) T. Sort of like the above, minus Konrad’s amusing recursion joke. Yes, there will be Super User and Server Fault t-shirts as well — and probably black versions of all the above. If you have experience getting T-shirts printed, please share any tips or recommendations on the process. I do expect our order to be a fairly large one…"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/10/podcast-79/","date":"2010-01-09T23:00:00.000Z","tags":["Company"],"title":"Podcast #79","text":"In this episode of the podcast, Joel and Jeff discuss open sourcing Markdown, the necessity of barriers on the open internet, and the importance of design in the software process. We highlight three interesting Stack Exchange sites: Climate Deal (environmental climate change issues), ASCOM Answers (astronomy tech), and Math Overflow (professional mathematicians). Thanks to Anton Geraschenko (the operator of Math Overflow, who I erroneously, embarrassingly, and repeatedly refer to as “Jacob” in this podcast — my apologies) for his help with improving our client side Markdown implementation. We also have a server side implementation of Markdown, which is now open sourced at Google Code. The original Markdown implementation was in Perl. As a result, there is an unfortunate tradition in the community of writing Markdown parsers using a slew of regular expressions. This leads to some rather dense and complicated code with a lot of hairy edge conditions. Like most Perl, it worked well for the 95% case but that last 5% is extraordinarily difficult to achieve. Joel argues that if the community had started out writing a proper Markdown parser using standard tools like Yacc, Bison, Lex would have produced much simpler, easier to maintain code. I tend to agree that this is kind of a textbook example of where “the right way” would have perhaps been easier in the long run than the quick and dirty hack. Take a look at the core HTML block parser in the much better maintained PHP implementation. It is three full screens .. of a single regular expression. This is the most complex regular expression I’ve ever seen that was not a joke of some kind, and it’s the core of the PHP Markdown implementation. Compiling this enormous regex in .NET causes my super-fast machine to freeze for several seconds. Running an open source project has reminded me of Derek Sivers classic article — Nobody’s going to help you. Does that encourage you or discourage you? You have to be more dedicated to your open source project than anyone else in the world. Your dedication will inspire others to follow. Unfortunately, blessing something as open source does not magically synthesize leadership. This is why I was a bit critical of John Gruber’s handling of Markdown, as I felt the lack of action was starting to harm Markdown. Regardless, we donated to Markdown along with all the other parts of our development stack that we rely on. We hope to make these donations a yearly tradition. The idea that you should have no barrier to participation on the open internet isn’t just a myth, it’s a dangerous and destructive myth. We believe you need a barrier to keep those people who aren’t serious out. For example, Wikipedia intentionally does this. We aren’t talking about a concrete wall lined with razor wire, but a toddler sized barrier to keep the most bored and uninteresting users (or, if you prefer, “the majority of the internet”) away. Joel explains why he no longer believes in outsourcing design; they are hiring a designer to work at Fog Creek full time. We compare the differences in the hiring process for designers versus programmers. Our philosophy of design on Stack Overflow is to try to do as little as possible, but make those few things polished as we can. While there’s always room for improvement, and we love whitespace and minimalism, there is an issue of information density that is totally intentional — particularly on the homepage. Item number 11 of the Joel Test ensures that you work for a company where they ask candidates to write code during the interview. The essential part here is not the production of the code, per se, but observation of the work actually happening. You need to know how the sausage is produced. There is a website that conducts programming tests on the internet for you at Codility, but we’re skeptical this can actually work without the one-on-one human element of observation. We answered two listener questions: Evan: “why do you feel it is necessary to charge programmers to list CVs? Won’t this prevent the service from reaching critical mass?” “Part of the Joel Test is writing code during the interview. How do you feel about companies who ask programmers to submit code samples or take home programming assignments?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/06/eating-our-own-careers-dogfood/","date":"2010-01-05T23:00:00.000Z","tags":["Careers"],"title":"Eating Our Own Careers Dogfood","text":"In software development circles, eating your own dogfood is shorthand for using your own software. I was ecstatic the first time I used Stack Overflow to ask a programming question about the code that goes into Stack Overflow. And I was even more thrilled when I performed a programming related search that returned a useful Stack Overflow link in the results. This is “dogfooding” at its best. Dogfood. There’s nothing more delicious. Mmm, mmm good! Well, I’m proud to announce that we’ve reached yet another dogfooding milestone — we’re thinking of hiring another programmer to work on Stack Overflow … through Stack Overflow Careers. Naturally. Now, this will just be a part-time gig to start. It’s difficult to expand the Stack Overflow team because we all have the unusual benefit of extensive prior work history together. Jarrod and Geoff knew what they were getting into when they signed up — we’re like a happy little dysfunctional family. It’s highly likely this will turn into a full time thing, but we need some time to get to know each other first. Some broad guidelines: Everyone on the SO team works remotely from home, and sets their own schedule (mostly). We communicate through Skype and email, so you can be anywhere in the world. Good communication skills and sweet internet connection are of course a must. If you are in any way averse to the utility of an expedient hack, it is unlikely we’re the right team for you. We appreciate elegance and continual refactoring as much as the next developer, but we love results even more. We will be looking for people with some kind of track record on the public internet. Doesn’t have to be an empire, but we want to see evidence of someone who … do I really have to say it? … is Smart and Gets Things Done. While we are platform agnostic, the bulk of our work runs on Windows Server 2008, is written in C# 3.5 / ASP.NET MVC, and talks to SQL Server 2008. If any of that stuff is a turn-off, we’re not the team for you. Anyway, if you’d like to work on Stack Overflow with us, and the above guidelines seem reasonable — I encourage you to list your CV at Stack Overflow Careers. Along with many other employers, that’s where we will be looking. Because as responsible software developers, we gotta eat our own dogfood."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/04/stack-overflow-where-we-hate-fun/","date":"2010-01-03T23:00:00.000Z","tags":["Background"],"title":"Stack Overflow: Where We Hate Fun","text":"I noticed that the Stack Overflow question Strangest language feature has been closed and reopened several times now. The text of the question is brief: What is in your opinion the most surprising, weird, strange or really “WTF” language feature you have encountered? I agree this is not exactly an ideal question for Stack Overflow, per the FAQ: Avoid asking questions that are subjective, argumentative, or require extended discussion. This is not a discussion board, this is a place for questions that can be answered! I think some members of the community have gotten the idea that Stack Overflow is strictly business — unless your question fits our rules exactly to a T, it is absolutely disallowed. That, here on Stack Overflow, we hate “fun”. This is not entirely true. In my mind, there are three broad guidelines that determine whether a question is appropriate for Stack Overflow: Does this question match the criteria provided in the Stack Overflow FAQ? Is this question accepted by the community, as reflected in upvotes, favorites, views, and answers? Does this question teach me anything that could make me better at my job? Can I learn something from it? How does the “fun” question Strangest language feature fare? Does this question match the criteria provided in the Stack Overflow FAQ? Not really, no. Is this question accepted by the community, as reflected in upvotes, views, favorites, and answers? Yes. Lots of upvotes, views, favorites, and many detailed answers. Does this question teach me anything that could make me better at my job? Can I learn something from it? Yes. These odd language corner cases bite programmers all the time, and the more programmers that are aware of them, the better. As Meat Loaf once said, two out of three ain’t bad. It’s guideline #3 that ends up being the pivotal decision in most borderline cases. I should clarify that we absolutely do not want the site overrun with “fun” questions. There’s no way we’re sacrificing our core Q&A; mission to turn into a brainless LOL-fest like Reddit or Digg. But, there is a certain balance we’re trying to achieve. A world without fun is like a world without waffles and ponies. And what kind of monster would want that? I know that we’re all programmers, so we love thinking of the world in absolute, binary terms — either fun questions must never be allowed, or fun questions must always be allowed. Well, I hate to be the one to break this to you, but the world is more … floating point. We will sometimes allow fun questions that meet the three broad guidelines I outlined above, but even then, only a limited amount. On Stack Overflow, contrary to popular opinion, we don’t hate fun. But only a certain amount of fun will be tolerated, and always with steely, businesslike frowns."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/03/new-lower-careers-pricing/","date":"2010-01-02T23:00:00.000Z","tags":["Careers"],"title":"New, Lower Careers Pricing","text":"You asked. We listened. While it is completely free to create and publish a public CV at Stack Overflow Careers — with the vanity URL of your choice, naturally — there is a nominal fee to make your CV searchable by hiring managers through our private search interface. We call this process “filing” your CV. Our new year’s resolution is to reduce the price of filing your CV. The CV filing fee is not there to make us obscene profits (as if), but to ensure that people who file CVs are … y’know … serious. Joel explains in the Stack Overflow Careers FAQ: When hiring managers search through CVs, they want to know that they’re looking at active, serious job applicants. If it were free to file a CV, a lot of applicants that weren’t looking for jobs, or who knew that they had no reasonable chance of getting a job, would post them, making it harder for the employers to find serious applicants. That’s why we charge a nominal amount to file a CV. It is, however, absolutely guaranteed, and if you’re unhappy or don’t get the result you want, just let us know, and you’ll get your money back on the spot. We believe the barrier is necessary to reduce noise. But it’s also a goal to reduce that barrier as low as we can. We want to make as many love connections as possible. That is, connections between talented software developers and companies who know the true value of these programmers they’re paying so much for. The more people and companies in the “dating pool”, the better the odds. Thus, effective from January 1, 2010 until further notice: File your CV for one year — 19 File your CV forever — 99 File your CV as a student — free We plan to keep improving and refining the careers service throughout the year. Specifically, we’ll be exploring other options to reduce barriers to filing CVs, as well as publishing broad statistics about employer searches. So if you haven’t created your free Stack Overflow Careers CV yet — what are you waiting for?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2010/01/01/stack-overflow-gives-back/","date":"2009-12-31T23:00:00.000Z","tags":["Background"],"title":"Stack Overflow Gives Back","text":"It’s hard to believe that Stack Overflow has been “a thing” for over a year and a half now. I quit my job in March 2008, we announced Stack Overflow in April 2008, and the site was launched in September 2008. The rest is kind of a blur. During 2009, the company became somewhat stable, and has threetwo totally awesome associates who are finally getting a reasonable fraction of what they’re worth. It’s only appropriate that Stack Overflow, the company, start giving back to all the people and projects that helped us succeed. First and foremost, our community moderators. They, more than anyone, set the tone and direction for the community — and generously contribute their time to make Stack Overflow, Server Fault, Super User, and Meta Stack Overflow into places you’d actually want to participate. As a gesture of thanks for their contributions this year, Stack Overflow offered to make a donation to the charity or nonprofit of their choice. I’m happy to report that through our moderators, the following donations were made: Unicef — $250 Doctors Without Borders — $350 Wikimedia Foundation — $50 Best Friends Animal Society — $100 National Society for the Prevention of Cruelty to Children — $100 Hackers for Charity — $50 I also wanted to give back to the tools, people and projects that helped us build Stack Overflow. To that end, I browsed the meta question What was Stack Overflow Built With and donated to every project we rely on that accepts donations — even if those “donations” are licenses: Upgraded our individual Beyond Compare licenses to corporate full edition licenses ($150) Upgraded our donated VisualSVN licenses to corporate full edition licenses ($150) Licensed copy of PowerGREP, 3 copies of RegexBuddy ($270) Donated $200 to DotNetOpenAuth Donated $200 to HAProxy Donated $1,000 to Creative Commons Donated $1,000 to jQuery Donated $500 to Markdown Donated $200 to TortoiseSVN Donated $200 to Cacti Donated $200 to Ubuntu (Canonical) We also donated another $500 directly to jQuery, as well as indirectly to a number of other popular open source projects, through our sponsorship of the Bad Code Offsets program. To me, the whole point of having money — once you have enough of it to cover your basic business needs, of course — is using it to effect positive change in the world. It is my hope that we can make these donations a yearly tradition at Stack Overflow — and increase the size of the donations every year, too. So, thanks to everyone who participated in Stack Overflow, Server Fault, Super User, or Meta Stack Overflow during 2009. We hope you enjoyed whatever time you spent there, and more importantly, got something useful out of it. Here’s to a happy and prosperous 2010!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/28/introducing-markdownsharp/","date":"2009-12-27T23:00:00.000Z","tags":["Community"],"title":"Introducing MarkdownSharp","text":"One of the things that came out of Markdown, One Year Later was that we really needed to open source our C# server-side implementation of Markdown. While the client side implementation of Markdown is already open sourced, there are two sides to the Markdown story on Stack Overflow — what appears in the Javascript preview on the client, and what is rendered in C# on the server and ultimately stored in the database. While we are trying to normalize the client and server implementation over time — I’ve made significant progress in the last two weeks in doing so — there are inevitably small differences that creep in over time. It would be nice to have more eyeballs on this process to assist. Since the original C# library we used for Markdown was not open source, this was a problem. I mailed the author, Milan Negovan, and he granted copyright to me. Hi there, guys! Sure, I don’t mind at all. I’ve always wanted the community to improve and contribute to its development, but never found the proverbial bandwidth to run the project that way. Cheers! Milan So, I’ve released our C# implementation of Markdown under a proper open source license — as MarkdownSharp! http://code.google.com/p/markdownsharp/ I’ve already made a few changes to properly package it as a decent open source project: included relevant links, documentation, and related files added MDTest 1.1 test suite added Simple test suite both NUnit and console runnable tests standard Benchmark with short, medium, and long Markdown samples refactored and profiled for 2x – 5x more performance the Stack Overflow specific changes (such as stricter italics/bold) are configurable, so you can toggle them on and off. One nice side effect of this process is that I’ve been able to incorporate quite a few bug fixes, some of them fairly serious. The failure to escape backticks was a big one, and there was a subtle bug involving a single character of whitespace that caused all <hr/>s to be wrapped in paragraph tags since.. well, forever. Anyway, take a look at the project, feel free to browse the source, and please contribute whatever you can to make it better for everyone."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/24/podcast-78/","date":"2009-12-23T23:00:00.000Z","tags":["Company"],"title":"Podcast #78","text":"In this episode of the Stack Overflow podcast, Joel and Jeff sit down with Paul, David, and Matthew — the creators of Litmus and DocType — to discuss ASCII vs. pixels, the power of Amazon EC2, and the unglamorous but critically important topic of backup. The fine folks at Litmus created DocType partly as a homage to the Stack Overflow engine. We were so impressed we invited them into our League of Web Justice. You can view DocType as the intersection of what Litmus does (screenshots of browsers and email clients rendering HTML) and what Stack Overflow does (Q&A). Where the Stack Overflow Trilogy is about programmers, sysadmins, and power users exercising ASCII text, DocType and Litmus is about designers exercising pixels. It’s not an audience we can satisfy particularly well, which is why we were happy to partner up. It’s all about getting good, effective answers to your questions, regardless of which site provides those answers. A bit on the technical underpinnings of Litmus. This app has to generate screenshots from a ton of different email clients and a ton of different browsers, for both Macs and PCs. The PC side is served by Amazon Elastic Compute Cloud instances, which was an incredible boon for this type of work. They actually scale up to 400 EC2 instances at peak load times. The original version of Litmus was built using nothing but scripting on a single machine, but was enough to get customers. They were effectively running on a prototype; the entire app has been rearchitected several times since then. DocType is built mostly in Ruby on Rails, and Litmus is a combination of C# and Ruby on Rails. In that sense, they also reflect the platform agnostic spirit of Stack Overflow. A brief discussion of the state of the DocType community. One point of integration between the two sites is that people having difficulty solving layouts problems via the screenshot service in Litmus are encouraged to ask for help on DocType. Joel points out that one way to get a critical mass of core users is to get some kind of sponsorship or mention by people who have large audiences. For example, if you’re starting a music site, try to get Derek Sivers to mention you or, better yet, become the godfather of your site. Anyway, always have the goal of making something that is useful to somebody — and start with yourself. We are a little tired of the backup topic at this point, but maybe it’s a good thing to remind people that every day is International Backup Awareness Day, and it never hurts to revisit your own backup practices, as we did with our Stack Overflow backup policies. RAID is not a backup, but I sure do wish the server which experienced the hard drive failure had some kind of basic mirroring in place to protect against exactly this kind of routine, mundane drive failure. The moving parts are what tend to fail, which is why all our Stack Overflow servers use RAID. Joel elaborates a bit on the importance of focusing on recovery versus backup. There are a lot of ways a valid “backup” can go horribly wrong, and you will never know any of that until you actively restore a backup. Our featured questions this week are: DocType: How does Doctype generate the screenshots they use on the site? A nice description of the ImageMagick commands used to generate the nifty little DocType screenshot thumbnails. SuperUser: Recovering a lost website with no backup? The short vc”go back in time and do proper backups.” The long version is, “How patient are you?” We answered the following listener question on this podcast: Travis from Wisconsin: “I have a music based Stack Exchange site called keyminor.com. I have a ton of questions I plan to seed the site with, and I have a bunch of users I plan to approach for assistance. What’s the best elevator pitch for getting people to understand and check out a Stack Exchange site?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/19/free-vote-based-advertising-for-open-source-projects/","date":"2009-12-18T23:00:00.000Z","tags":["Community"],"title":"Free Vote-Based Advertising for Open Source Projects","text":"I’m happy to announce that Stack Overflow’s program of free vote-based advertising for Open Source projects, originally proposed back in September, is now live! Some say Stack Overflow is now the largest programming site on the internet. I’m not sure about that, but I can tell you that Stack Overflow regularly gets well over a million pageviews per day. While we’ve done some responsible advertising since March 2009, we still have a lot of excess (or “remnant”) ad inventory, and more of it every day. Rather than let this go to waste, we thought it might benefit the programming community if we could let the programming community use our remnant ad inventory space to publicize open-source projects in need of programmer assistance. Here’s how it works: Visit the special meta.stackoverflow.com question thread for this advertising period. It will always be tagged [open-source-advertising]. Construct a 220×220 image advertisement for the open source project that you would like to publicize to your fellow programmers. Post an answer containing your image to the question. It must be in exactly the right format, as documented in the question itself. Get at least (n) upvotes for your answer. Your advertisement will now be featured in Stack Overflow’s remnant ad inventory, in the sidebar ad slot on most pages. In other words, it goes directly from this answer on the meta question: To an advertisement to your fellow programmers on most pages of the Stack Overflow site itself: I’m thrilled to see this go live, as I think it’ll help get the word out about a lot of interesting open source projects that are in need of programmer input. Kudos to Portman Wills, who you may remember from our (sadly failed) Amazon ad experiment — he was instrumental in getting this done. (Have I mentioned how nifty his site shuffletime is? Go check it out!) Now, while these ads are absolutely community driven, we do reserve the right to exert editorial control and disallow any ads that we aren’t comfortable running on our site. Above all, they need to be (mostly) professional and on topic for our fellow programmers. The specific rules will always be in the latest meta question tagged [open-source-advertising]; please read carefully before posting. So, what are you waiting for? What open source project would you like to see publicized on Stack Overflow? Brush up on those Paintbrush or GIMP skills and make it happen!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/18/scheduled-site-maintenance-saturday/","date":"2009-12-17T23:00:00.000Z","tags":["Company"],"title":"Scheduled Site Maintenance – Saturday","text":"This Saturday, December 19th, from 4 PM to 8 PM PST, all trilogy sites and the blog will be down for a spot of maintenance. What are we doing? A few things, several of which were inspired by comments on our Server Rack Glamour Shots: Upgrading one server which does a lot of VM utility work to Windows Server 2008 R2. Installing shorter power cables. Installing shorter ethernet cables. Installing a 24-port gigabit switch, which we will reverse 1U mount. Adding dual redundant daily USB hard drive backups, as suggested by Joel. This probably won’t take 4 full hours, but we figured it was better to warn about more than we needed, just in case! All done; behold the beautiful results of Geoff’s hard work — and compare with the old setup."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/17/podcast-77/","date":"2009-12-16T23:00:00.000Z","tags":["Company"],"title":"Podcast #77","text":"In this episode of the Stack Overflow podcast, Joel and Jeff discuss how to (accidentally) destroy your software business, Google’s new DNS and page speed rankings, and why the most productive employees aren’t paid 10 times as much. Just as a disaster planning exercise, what kind of things could happen that would destroy your software business? Your website? Joel proposes doing test failovers for live customers. He says the important metric isn’t measuring how long you are down, but how fast you can recover from being down. How much down time per month is acceptable for a service? What’s your agreement with your customers? Does a free service even have “customers”? If catastrophic failure doesn’t get you, what about the more pernicious and subtle problem of users losing interest in your site, such as what is currently happening to MySpace? One software development parallel to Joel’s position on recovering from datacenter failure — how quickly you can iterate and fix your software product is probably more important than having perfect releases. Google may start prioritizing sites in search results by page load time. This makes total sense to me, as I am willing to forgive a lot if a site loads quickly. The quicker it loads, the quicker I can determine if the site’s content is what I was looking for or not. Speaking of Google, they introduced a public DNS service which is optimized for speed. Joel theorizes this is to replace broken ISP DNS services. It’s ad-free, which is an odd juxtaposition to the free, ad-subsidized OpenDNS service it will inevitably compete with. DNS speed is definitely important; we outsourced our own authoritative DNS servers as discussed in Podcast #68. What would the world we be like if employees who are 10 times more productive than their coworkers were paid 10 times as much? We’re not sure, but I predict the rapid end of that company and possibly civilization as we know it. It’s an interesting thought experiment. Joel says all developers should know C. I’ll counter by saying it’s far more important that all developers know the fundamentals of databases than how to write a working pointer based string copy algorithm. In our experience, one of the easiest ways to ensure failure on a software development project is to micromanage, get in their way, and put barriers in front of them. For best results, give the team everything they need, along with a strong vision statement, get out of their way and let them own it. It seems that every programming language has some kind of evolutionary dead end in it — language features that, while part of the core spec, almost every programmer working in that language will actively discourage you from using. Some of this comes down to issues of programming style that you should agree on as a team, but some of it evolves into generally accepted lore for that language. Joel is offering a free Fog Creek t-shirt of your choice for the best question asked next week — so get those (audio only, please!) questions called or mailed in! And leave us a way to reach you. Our favorite Stack Overflow question this week: Have you ever restricted yourself to using a subset of language features? This is the question C++ was born to answer. We answered the following listener questions on this podcast: Kelly French: “If it’s true that some programmers are 10 times better than other, why don’t companies pay 10 times as much for these star programmers?” Brad: “What is your opinion on developers creating databases? What if you work at a company where only ‘Data Architects’ can create databases, and programmers aren’t considered competent to create a database?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/16/badges-positive-only/","date":"2009-12-15T23:00:00.000Z","tags":["Background"],"title":"Badges: Positive Only","text":"There’s been no shortage of proposals for new badges since we first announced the badge system in August 2008. And we have implemented quite a few new ones since then, many of them based on community feedback: Tag-based badges Reversal and Pundit Enthusiast and Fanatic Mortarboard, Epic, and Legendary (Yes, more are planned.. I have one in mind that should go in before the new year as a little present to everyone.) One of the newest badges, Legendary — awarded for hitting the reputation cap on 150 days — even got an amusing shout-out from Rands in his latest blog entry: Most achievements do have an empirical value, but that’s not what makes them important. The point of an achievement is to have someone you know or don’t know look at your Violet Proto-Drake and say, “Holy crap, do you know what he had to do to pull that off?” It’s wondering exactly how far you’ll go to get the Legendary badge on Stack Overflow. I should mention that Rands was a guest on the Stack Overflow podcast a while back, as well. Badges exist to reward and encourage the kind of positive behavior we want in our community. But not everyone seems to understand that. It’s tempting to suggest “funny” badges which reward behaviors that, if you really sat down and thought it through, are actually negative. So rather than explaining, for the umpteenth bazillion time, why that would be a bad idea, I’m just going to forward them to this brilliant Scott Meyer cartoon from now on. And that, my friends, is why you should be extraordinarily careful if you’re thinking of introducing a troll cap “award”."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/14/stack-overflow-rack-glamour-shots/","date":"2009-12-13T23:00:00.000Z","tags":["Background"],"title":"Stack Overflow Rack Glamour Shots","text":"We installed our secondary (backup) database server tonight. Geoff took the opportunity to snap a few glamour shots of the Stack Overflow server rack at our host PEAK Internet. I present them here for your unbridled enjoyment and pleasure: update: Based on feedback from this post, we went back and improved our rack hygiene: These are primarily Lenovo RS110 and Lenovo RD120 servers, with a few other rackable items in the mix: 1U web servers (5) 2.83 Ghz quad core, 8 GB RAM, 2 drive RAID 1 Primary 2U database server 3.33 Ghz quad core x 2, 48 GB RAM, 6 drive RAID 10 Backup 2U database server 2.5 Ghz quad core x 2, 24 GB RAM, 6 drive RAID 10 QNAP TS-409U network attached storage device 500 Mhz CPU, embedded Linux, hot-plug 4 drive RAID 6 Netgear GS108T smart switch (2) 8 ports, gigabit, managed SNMP, web interface Netgear GS724Tv3 ProSafe switch 24 ports, gigabit, managed SNMP, web interface Tripp-Lite RS-1215-20 12 outlet power strip seriously? it’s a friggin’ power strip. Oh fine. Note that the primary database server is shared across all sites; only two of the web tier servers currently serve Stack Overflow. We have quite a bit of extra capacity in the rack. If you’d like to see more, you dirty hardware perv, you can peruse a more detailed breakdown of the internals of the servers in Stack Overflow Server Glamour Shots."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/13/blog-outage-backup-policies/","date":"2009-12-12T23:00:00.000Z","tags":["Background"],"title":"Blog Outage – Backup Policies","text":"On Friday, the server which hosts this blog suffered catastrophic data loss. Fortunately, the blog server is at a different datacenter entirely than PEAK, which hosts all the Trilogy sites. It’s a long story, and I’ll document it in more detail elsewhere, but the short version is this: This particular host’s (again, not PEAK) backup processes were fatally flawed, as they were unable to backup a live virtual machine hard drive file. So the “backups” they had were nonexistent, because the backup process was failing on the most important server files every single night. We belatedly realized we should never have trusted the host with backups in the first place — we should have been backing up the relevant bits of content in the virtual machine ourselves, instead of assuming the host’s backups were working. The blog was not a high priority for backup since it was a) on a singleton server in a completely different data center and b) it’s not an actual trilogy site, but a “helper” site. Anyway, we were able to piece together a backup from different sources, and I took this opportunity to move the blog from WordPress on Windows (which has been incredibly quirky) to WordPress on Linux. You may be wondering how this incident relates to our Stack Overflow disaster recovery plan. Mostly, it doesn’t. I just never viewed the blog as part of our core mission (though I probably should have) and subsequently didn’t give it the attention it deserved. We’ve since moved the blog to an actual PEAK “family” server in our rack, so it’ll get folded in with our standard backup process. So what is our standard backup process? We take full database backups of all databases at 4 AM, 4 PM, and 12 AM. (some databases are backed up more aggressively, but this is typical.) These full database backups are stored on our NAS RAID-6 device on the rack at the PEAK datacenter. We have a 500 GB USB hard drive attached to the database server. There is a C# script which copies the latest backups from the NAS to the USB hard drive every night at around 1 AM. The oldest files are deleted to make room for the new files as necessary. (The current Stack Overflow full backup is about 7 GB compressed, and the other databases are perhaps 2 GB compressed.) new: we’ll have two USB hard drives connected and do identical copies in parallel in case one of the drives develops problems. One of our team members, Geoff Dalgas, lives a mile from the PEAK data center. He drops by and physically swaps out the USB hard drive every few weeks. He holds onefour 500 GB USB drives at his home, while the other two are at the data center. They continually get cycled back and forth over time. new: Fog Creek will FTP in and transfer the most current database backups to their hosting facility every week, during low traffic periods on Saturday. We do Creative Commons data dumps of all sites (Stack Overflow, Server Fault, Super User) every month. This is a subset of the data, but a sizable one, and it’s available on Legal Torrents. These data dumps are physically hosted on and seeded by Legal Torrents. Our Subversion source control repository is copied to the NAS every day and also gets copied to the USB external drive, etc, through the same script. We also run a few VM images — for Linux helper services, mostly — and they are backed up through the same process. As our other host learned the hard way, backing up live VMs can be tricky, so this is definitely something you need to be careful about. We regularly download the latest database backups and restore them locally (we develop against live data all the time), so we know our backups work. This was originally documented in a private email, but I believe in maximizing the value of my keystrokes, so I made it public. We try to be transparent in everything we do; hopefully this eases any lingering concerns over the blog outage."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/08/stack-overflow-trilogy-lego-minifigs/","date":"2009-12-07T23:00:00.000Z","tags":["Background"],"title":"Stack Overflow Trilogy Lego Minifigs","text":"Courtesy of Stack Overflow user MicTech, we have the following photos of Lego characters in Trilogy-appropriate garb: The League of Web Justice has never been so darn adorable! Update: I finally got much higher resolution pictures of the Trilogy minifigs, and you can view them here."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/05/database-server-upgrade-outage-today/","date":"2009-12-04T23:00:00.000Z","tags":["Company"],"title":"Database Server Upgrade: Outage Saturday","text":"There will be an outage today from 5 pm – 7 pm PST as we upgrade the database server. If you’re curious, we’re going from 2.5 GHz to 3.33 GHz CPUs, and using the old CPUs to build a second, backup database server. Our last upgrade was in July when we went from 24 GB to 48 GB. That old pulled memory will also be used to populate the second database server."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/04/podcast-76/","date":"2009-12-03T23:00:00.000Z","tags":["Company"],"title":"Podcast #76","text":"In this episode of the Stack Overflow podcast, Joel and Jeff discuss the Stack Overflow Careers philosophy, online community growth patterns, and how to tell if you’re Sid Meier or not. Stack Overflow Careers is now fully open for business! Joel explains what it’s all about, the proverbial programmer search engine. One thing we have resisted is employer demand for a sort order of CVs by Stack Overflow reputation scores. This is sort of like colleges sorting incoming applications by SAT or ACT scores. We have a brief discussion about how the college admissions process relates (or doesn’t) to job “admissions”. Joel shares his tips on what makes a CV / resume look good to him. And remember, Joel wrote the book on this stuff! So in theory, at least, he knows what he’s talking about! Fog Creek does a lot of hiring every year. Now that we have a so-called “Careers” site on Stack Overflow, any perceived crossover between your professional life and online life is 100% intentional and by design — as correctly noted by the Cerebral Mastication blog. I am now required by law to link to this amazing and hilarious SO post (on the perils of matching XML with regex) which already has a stunning two thousand upvotes! It went hyper-viral. Should we allow Facebook questions (or other questions specific to a website) on Super User? It’s a bit complicated because websites are becoming legitimate “software applications” in today’s computing world, and even more so in the future. The line between a traditional software executable and a website is becoming less and less clear. Discussing how you scale a community on Stack Exchange — is it about having lots and lots of questions, or garnering a solid audience of experts? There appears to be a distinct difference between the early, adolescent, and mature stages of a community. You have to plan for and adapt to each stage; there is no “one size fits all” approach. I’m reminded of Robert X. Cringely’s classic essay Commandos, Infantry, and Police. Joel’s counterpoint is that maybe you’re actually working with Sid Meier. My counterpoint: everyone wants to think they’re Sid Meier, but as in Highlander, “There can be only one”. Per Joel, programming is not about knowing a programming language any more than being a concert pianist is about knowing how to read music. But is programming anything like creating art or music? Joel is offering a free Fog Creek t-shirt of your choice for the best question asked next week — so get those (audio only, please!) questions called or mailed in! And leave us a way to reach you. We answered the following listener questions on this podcast: Josh from Taiwan: “I’m looking to move from QA into programming. Is it better to know one language really well, or lots less well? Also, does Objective-C pass the Joel Test of knowing C?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/12/02/careers-now-open-for-businesses/","date":"2009-12-01T23:00:00.000Z","tags":["Careers"],"title":"Careers: Now Open for Business(es)","text":"I’m pleased to announce that the employer beta is now complete, and Stack Overflow Careers is now fully open for business! The employers and hiring managers rates are: 1 week subscription is $500 1 month subscription is $1,000 6 month subscription is $3,000 1 year subscription is $5,000 Employers can give our search interface a spin for free, to see total match counts and get an idea of how many candidates they’ll be looking at with a subscription. As always, this whole thing is backed by our 90 day no-questions-asked total satisfaction policy. Got more questions? We’ve documented everything in the faq. Although November and December are not exactly banner months for hiring, we have a solid stable of employers already using the site — many of whom were already participating on jobs.stackoverflow.com. They’re searching through filed CVs, and actively sending messages to candidates that look promising. So keep those CVs in good shape for January! If your company is hiring top software engineers, I encourage you to check out Stack Overflow Careers!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/11/26/google-offers-named-openids/","date":"2009-11-25T23:00:00.000Z","tags":["Background"],"title":"Google Offers Named OpenIDs","text":"I love Google — and I’m not just saying that because they deliver 90% of our traffic and more than 60% of user OpenIDs, I swear. But I am a little bitter that their OpenID support has two major flaws which cause us a great deal of ongoing pain: Google’s OpenIDs are domain specific. The very same gmail account, if you sign up on 5 different OpenID enabled websites, will result in 5 different random hash OpenIDs being generated. While this is probably OK in the general case (though still an exceedingly rare behavior among OpenID providers), it’s incredibly aggravating for us because we like to let users map their Stack Overflow, Server Fault, Super User, Meta, and Careers accounts to each other. And cross-site user mapping is a huge PITA when there is no common per-user identifier between those 5 sites. We have a workaround in place but it is not pretty, and I think writing it drove Jarrod to drink. Google’s OpenIDs are random hashes to the server. This means I have no idea if you used crazyman45@gmail.com, hellaleet@gmail.com, or lovezwafflez1@gmail.com to sign up with us. It is literally impossible for me to help you figure out which one you need to use to log in. All I can tell you is, “you used a gmail account”. Which one, I have no idea. And neither do you, apparently. While there is certainly an argument for privacy to be made here, it sure would be nice to have the choice between a random per-site hash OpenID like … https://www.google.com/accounts/o8/id?id=aitoaxleeuzwdizb1g2_wvnob5pwvx And a stable, readable OpenID like … http://www.google.com/profiles/your.name.here Well, the good news is, now you can! Google just gave us a fantastic Thanksgiving Day present in the form of Google Profiles supporting OpenID. And with a Google Profile, you get to pick a named URL of your choice! So, if you’d like to add a named Google OpenID to your account, here’s how. First, log in as yourself. Go to your user page and look for the “add openid” or “change openid” link. (Note that we support up to two openids per account and you can change them at any time.) Since you’re already logged in you are adding a new openid. Enter your Google Profile URL in the area where it says “manually enter your OpenID URL”, and click Login. You’ll get redirected to Google where you can OK the use of your OpenID by our website. You’ll get redirected back to us, and we confirm that yes, indeed, you do want to add this OpenID to your account. (In case you’re wondering, this confirmation is required — otherwise clicking a single evil link could automatically and silently add a new, rogue OpenID to your account effectively owning you.) Now you’re back on your user page — note the newly added OpenID on my account. And if I want to change it, I can just click “Change OpenID” any time I want. The only thing that throws a monkey wrench into this process is when you have a single OpenID provider and that provider either changes their string format, or goes belly-up. Don’t worry, both cases are fixable, but it requires emailing us. Still, I highly recommend having two different OpenID providers associated with your account at any given time. Kudos to Google for rolling out named OpenID support in the form of Google Profiles. While you can of course continue to use the existing Google OpenID support, if you plan to use multiple ‘stack sites (or Stack Exchange sites) I assure you that your life will be much easier if you pick a stable, named Google OpenID rather than relying on the default random hashes."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/11/24/podcast-75/","date":"2009-11-23T23:00:00.000Z","tags":["Company"],"title":"Podcast #75","text":"Joel and Jeff sit down with sysadmin extraordinaire Tom Limoncelli of Everything Sysadmin to discuss IPV6, dumb things for System Administrators to check, and the sysadmin community as reflected in Server Fault. Tom has written some classic sysadmin books such as Time Management for System Administrators, The Practice of System and Network Administration. A brief discussion of the April Fool’s RFCs, which go back every year to 1989 per wikipedia. There are even some outliers in the seventies, starting with ARPAWOCKY. These aren’t just humor, but artifacts of computing history. Tom shares his thoughts on the IPV6 transition — where we are, how much progress we’ve made, and some of the practical rationales for going to IPV6. What problem does IPV6 solve for us today? I’ve often wondered: is the last address space transition we’ll see in our lifetime the one from 32-bit to 64-bit? Are 128-bit address spaces necessary for system memory? I press Tom on this topic. He notes that the IPV6 committee was originally going to pick a 64-bit address space, but doubled it to 128-bit. We examine Tom’s hilarious and excellent list of dumb things to check. I guarantee that parts of this list will seem eerily familiar to you. We attempt to enlist Tom’s help in measuring the boundaries of Server Fault. This is challenging, because the sysadmin world encompasses security, networking, databases, websites, hardware, and general operations and support. We had great difficulty pinning down the sysadmin community, in contrast with the programming community. Tom is as close as we’ve ever come to the “Joel Spolsky” of the sysadmin world. Tom points out that there is some natural overlap between programmers and system administrators, mostly in the area of release management. Beyond that, there are groups like LOPSA, NPANET, and SAGE. Tom notes that if you have a small site that can be served by one box, any stack will do. If you have a medium site that needs hundreds of requests per second, go with what your team knows best. But beyond that, once you get the hundreds of thousands of queries per second, everyone builds a custom solution. You do want to think seriously about optimizing for the decreasing price of commodity hardware, however. Somehow I hadn’t seen the classic sysadmin comedy routine The Website is Down yet until Tom mentioned it. There’s a series of videos at the eponymously named website. If you fancy yourself a Google-scale computing endeavor, or if you are simply interested in the ultimate sysadmin fantasy, definitely read Google’s Guide to Warehouse-Scale Computing. We answered the following listener question: Thomas Arnold: “How feasible is it to host a new web application using the Microsoft stack, considering scalability, performance, and cost versus the open source alternatives.” Our favorite questions this week — from Server Fault naturally! Sysadmin Professional Groups and Associations. An excellent resource. The Data Center tag is awfully good reading for anyone who has a server room. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/11/24/server-fault-and-the-powerscripting-podcast/","date":"2009-11-23T23:00:00.000Z","tags":["Background"],"title":"Server Fault and the PowerScripting Podcast","text":"I was invited on as a guest of the PowerScripting Podcast last week for show 93. That show is now live! I’m a huge fan of PowerShell, which is one of the most innovative scripting languages out there. It’s a sort of post-modern, truly next generation scripting language where you’re piping actual objects-as-text around instead of mindlessly grepping text. I swear it actually manages to out-UNIX UNIX. In my humble opinion, anyhow. But I digress! It was a fun podcast, and particularly illuminating for Server Fault, since PowerShell itself is rather emblematic of the grey area between Stack Overflow (programming) and Server Fault (system administration). Anyway, if you have any interest in scripting languages whatsoever, I encourage you to check out PowerShell! It’s good stuff!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/11/19/careers-employer-beta-underway/","date":"2009-11-18T23:00:00.000Z","tags":["Beta"],"title":"Careers Employer Beta Underway","text":"The CV side of careers.stackoverflow.com has been reasonably complete, ever since we added free public CVs. Well, I’m proud to announce that we’ve begun serious beta testing of the other half of the equation — the part of careers.stackoverflow.com for employers and hiring managers. We’ve been trickling in “friends of Stack Overflow” who happen to be employers (including Joel) over the last week and a half. If you’re familiar with our sloppyiterative development style, here’s what we like to do: build out some more features let a few people experience those features gather detailed feedback GOTO 1 This way we know whether we’re on track, and how far we have to go — while (hopefully) avoiding building The Wrong Thing. We’re pretty deep into this cycle now, so I have reasonable confidence that what we’ve built for employers doesn’t suck too much. The basic process is not complicated: hiring managers have a flexible ajax-y search form, and the ability to save and email candidates they’re interested in. While the primary form of communication in the system is email, we realize email is a fallible system, so we also have web-based notifications alongside email. You may also notice a new “messages” tab in the careers UI. Here, you can view the status of any pending communication between hiring managers and candidates from either side. We’ve also turned on many of the statistics in the system, like how many searches have been performed, how many times your CV has been viewed by the public (if published) and potential employers (if filed), and so forth. We plan to keep a ridiculous number of live stats, so you can see how well that CV filing fee is actively working for you (or not). I should also point out that the $29 / 3 years special introductory filing rate for your CV is conclusively over. That was our way of thanking the truly early adopters, who went out of their way to trust in this careers thing we’re doing, even before it was fully built. We won’t let you down! That said, we’re still sort of in the beginning, as you can see from the employer beta, so we’ve extended a new introductory CV filing rate until the end of 2009: $29 for 1 year Fair warning, the price absolutely will go up in 2010. So if you think you might need to file your CV — that is, make it searchable by hiring managers — any time in the next year, consider jumping on this offer before January 1. (as a reminder: as always, publishing a public CV on careers.stackoverflow.com is and always will be totally 100% free, forever! There’s a modest filing fee only for those who wish to be searchable by hiring managers.) To everyone who has signed up for careers, thank you. We won’t let you down. Our goal is to take your job situation from this … … to this! Well, metaphorically speaking. Keep an eye on those email boxes, messages tabs, and stats over the next two weeks. We’re going to do everything we can to make the magic happen. If you’d like to be a part of that magic, file your CV at Stack Overflow Careers. Oh, and if you happen to have awesome programming jobs that are worthy of the Stack Overflow Careers community — email us at careers@stackoverflow.com and we’ll see what we can do."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/11/19/podcast-74/","date":"2009-11-18T23:00:00.000Z","tags":["Company"],"title":"Podcast #74","text":"Joel and Jeff sit down with Kathy Sierra and Bert Bates backstage at the Business of Software 2009 conference. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/11/07/podcast-73/","date":"2009-11-06T23:00:00.000Z","tags":["Company"],"title":"Podcast #73","text":"In this episode of the Stack Overflow podcast, Joel and Jeff discuss the meaning of “professionalism” online, the divide between ad-subsidized and pay business models, and the five things everyone should hate about their favorite programming language. A brief mini post-mortem of DevDays. What makes a good conference? What makes a worthwhile event for software developers? Speaking of conferences, Joel and I will both be at the Business of Software conference next week in San Francisco. A discussion of Robert Scoble’s article on the chat room / forum problem. Some of this stuff is counter-intuitive: you don’t actually want to be too welcoming to newbies, and you don’t actually want too much pure discussion. As Robert said, “the more conversations I got involved in the less I found I was learning.” I object a little bit to people proposing social design patterns to me that are historically demonstrated not to work — or, worse, are known to be toxic. Essentially, they offer opinions without any research or even knowledge of prior research in the field. We examine Joel’s latest Inc article, Does Slow Growth Equal Slow Death?. 37 Signals responded in their blog. Joel and I both tried to explain our careers strategy. I think Joel’s post on careers.stackoverflow.com was clearer than my post on careers.stackoverflow.com, in that I had to post an update to mine because I failed to explain it adequately — at least based on the reader comments. To the extent that careers is focusing people on “how can I be more professional online?” we heartily encourage this side-effect. Why wouldn’t you behave professionally online all the time, anyway? It is possible to have fun while being professional at the same time. We posted the results of our Amazon advertising experiment. It looks like software developers are a worst-case scenario for some types of advertising. Unfortunately. You can use free to undermine your competitors, but Google is going them one better — they are paying companies to use their products. It’s “less than free”. Google’s strategy is to get as many people online as possible, since more people online equals more ad clicks, statistically speaking. There’s an interesting tension between the “charge for stuff” (Microsoft) and “give people ad-subsidized stuff for free” (Google) models. Having been on both sides of this now, there are definite pros and cons to both. Joel and I concur: it probably doesn’t matter what language and toolchain you use, as long as it has a certain level of critical mass. What you should be more concerned about is the product you’re creating. If you’re happy with your current tool chain, then there’s no reason you need to switch. However, if you can’t list five things you hate about your favorite programming language, then I argue you don’t know it well enough yet to judge. It’s good to be aware of the alternatives, and have a healthy critical eye for whatever it is you’re using. Most programming languages don’t evolve particularly well over time. They’re usually replaced by other languages rather than new iterations of themselves. Why? What languages would you point to as the best example of growing and evolving in useful, relevant ways? We answered the following listener questions on this podcast: Edward: “What fun technologies are coming up that you think employers are willing to spend money on?” Colin: “If I’m happy with PHP, why would I want to convert to ASP.NET?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/11/05/our-amazon-advertising-experiment/","date":"2009-11-04T23:00:00.000Z","tags":["Company"],"title":"Our Amazon Advertising Experiment","text":"Do you remember when I discussed the crushing disappointment that is Google AdSense in Podcast 64? If Stack Overflow, a site that does a million pageviews a day, can’t make enough from AdSense to pay even one person half time — and let me tell you, that’s being overly generous based on the actual income it generated — how does anyone make a decent living with AdSense? Seriously, how? Exclusively talking about Mesothomelia and Asbestos, or what? As a result, we dropped AdSense like a hot (or, rather, a particularly cold) potato. Instead, we turned to our pal Alex of The Daily WTF, and hooked into his curated ad network for software developers. We are firm believers in responsible (read: no flash, no animation) and restrained (read: limited to 3 ad slots, reduced ads for >200 rep) advertising. This has worked quite well for us so far. How well? On the order of fifty to a hundred times better than AdSense! I am not exaggerating. Those are actual numbers. Even though Alex does a great job, we always have a lot of left over unsold ad space. And as the site has grown over the last 6 months, this gap has widened. So then the question becomes — if AdSense doesn’t work for us (and boy, does it ever not work for us) — then what can you do with that remnant ad space? I hate the word monetization with a passion, but surely something useful could be done here? That’s when Portman Wills approached us. He’s not only an old school 4 digit Stack Overflow user and fellow programmer — he also has extensive experience in his previous gigs with advertising code. Portman is currently busy building cool stuff like shuffletime (not to mention his hilarious parody sites woofer and feeling unlucky). But he was enthused about the opportunity to help out Stack Overflow — and maybe, just maybe, generate some ads that were actually (gasp!) useful and relevant to his fellow programmers at the same time. Thus, Portman generously offered to build a custom ad-serving site for us, which we gladly hosted at rads.stackoverflow.com. Rads has three main components: A spider which uses the Amazon Product Advertising API to crawl the Amazon product catalog. A website which renders an advertisement based on Stack Overflow tags. Some analytics to determine which ads, books, and tags are most effective. The spider was fed the top 5000 tags on Stack Overflow. For each tag, it preformed a keyword search on the “Computers & Internet” node, returning the top 10 books with five-star reviews, sorted by number of reviews. You can read the full skinny in Portman’s summary. We had high hopes of building something that connected great programmers with quality programming books on Amazon. The ads looked nice, too: Excellent plan, right? Smart. Clever, even! Well, it was a complete and utter failure. Despite our purported cleverness, it didn’t work. Not even a little. The Amazon ad experiment was a total failure by any metric I can think of. Clicks, revenue, goodwill, newton-pounds, cuils, you name it. It was literally a waste of everyone’s time. Even flipping burgers would have paid more. But this failure was not for lack of trying. If a guy as skilled as Portman — who not only has a deep background in custom advertising, but is also a programmer capable of writing a solution tailored to our specific audience — can’t make this work, I had to regretfully conclude that nobody could make it work. It’s just not possible. So we scrapped the whole thing, and we’re going in a different direction. More news on that soon. But in the meantime, since we had our fancy-shmancy Amazon Affiliates account set up, we might as well put it to good use. Even way back in the original Stack Overflow beta, people were proposing that we convert any Amazon book links to Stack Overflow amazon affiliate book links. I was hesitant to do this at the time, but given our failure, I was licking my wounds. I was willing to give it a try. Particularly since the community seemed totally OK with the concept. So, onward to plan B: we now auto-insert Stack Overflow affiliate info into any amazon book links posted on Stack Overflow. Oh yeah, and here’s the kicker. These silly little rewritten text links work 200%-300% better than our custom amazon book ads! Go figure. All I can say is, advertising is hard, let’s go shopping! And when it’s not hard, it’s borderline scammy, which is something we just don’t do at Stack Overflow. At any rate, I’m glad Portman is here to take the blamehelp. Apparently we can add advertising to the long, long list of things that we suck at. But we do plan to suck less every year!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/10/30/podcast-72/","date":"2009-10-29T23:00:00.000Z","tags":["Company"],"title":"Podcast #72","text":"Joel and Jeff sit down with Jon Skeet, software engineer at Google London, and the first Stack Overflow user to achieve 100,000 reputation. A brief audio snippet of Jon’s presentation at London DevDays, featuring Tony the Pony and his sidekick. A discussion of the Google London offices, which aren’t quite up to Joel’s high standards, but are quite fun in their own right. And, they do offer free unlimited Curly Wurlies! The London office mostly does mobile development, which in Google world is Android. Joel explains his analogy of software development as a biology-based process, instead of a physics-based process. In Coders at Work, Peter Norvig — chief research guy at Google — explains that his definition of correctness in software now mostly involves statistics intervals, not absolute boolean “this is right”, “this is wrong” tests. A brief discussion of Joel’s painful 14 line AppleScript odyssey. There is a wall — literally — of hundreds of mobile phones at Google London that they use to test against. We wonder how Google’s Android will avoid devolving into the same miasma of dozens or hundreds of different versions of hardware, all of which behave differently and require special software support or workarounds. Is Apple becoming to mobile apps what Microsoft was, and is, to desktop PC apps? Will success in future mobile devices _require _an iPhone emulation layer? Although Apple unquestionably deserves their success with the iPhone, Joel and I are deeply concerned that too much Apple dominance in this area is bad for developers, as Apple serves developers poorly. Jon spends a lot of time dealing with date and time issues, and shares one particularly horrifying timezone example. Apparently, time is often ambiguous and subject to change by human processes that aren’t … entirely rational. It is OK to have “fun” questions on Stack Overflow, but a) only occasionally, as we can’t have the system overrun by pure entertainment and b) the question must be legitimately programming related and accepted by the community. As with so many things in life, moderation is key. If you’re Jon Skeet, you can post your schedule on meta and it will get 40+ upvotes. Mind you, there is no technical answer there, it’s just Jon’s schedule. The daily reputation cap is partly there to encourage programmers to take a break. The goal isn’t to be on Stack Overflow, but to generally do things that make you a better programmer. While that certainly includes the fractional time slices of questions and answers that programmers so generously contribute, it also means doing your job, and writing code! To the extent that Stack Overflow itself becomes the goal, we are failing you. Our listener question this week is from … Jon Skeet! Why is the reputation cap (currently 200 points per day) time based? Would other forms of capping reputation work better or be more preferable? Our favorite Stack Overflow question this week is: What is the best Battleship AI? A good example of a fun, but appropriate, question for Stack Overflow. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/10/29/free-public-careers-cvs/","date":"2009-10-28T23:00:00.000Z","tags":["Careers"],"title":"Free Public Careers CVs","text":"We unveiled a milestone in Stack Overflow Careers at DevDays London earlier today. We had originally envisioned careers as a completely private subscription service, but we belatedly realized that was kind of a mistake, and the source of much confusion. One common bit of feedback we got from users was the cognitive dissonance between Stack Overflow, which is free and public by default, and Stack Overflow Careers, which was private and subscription only by default. We agree. That’s why we’ve now added a free, public side to careers.stackoverflow.com: Publish CV free, public CVs for any working programmer who wants one, at the URL of their choice. File CV subscribe for a nominal fee, and make your private CV visible to and searchable by hiring managers Public CVs can be made visible, with full privacy controls, at the custom URL of your choice. Like so: You can view a sample public CV at http://careers.stackoverflow.com/community to get an idea of what public CVs look like. Of course you can associate and link your Trilogy accounts to your public CV as well. Obviously, each URL has to be unique, so they are provided on a first-come, first-served basis. If you want a specific http://careers.stackoverflow.com/foo type URL for your public CV, sign up with Careers now and reserve your desired URL on the Publish CV tab. But Public CVs isn’t all. This careers update also has: re-ordering of experience and education entries to taste support for full Markdown formatting in all free text CV fields automatic blocking of any of your previous employers from finding you in searches (by company name) optional free, public CVs with the URL of your choice, with detailed privacy control lots of other little bug fixes little new improvements! Creating and publishing your CV are, and will always be, completely free. But filing to make your CV visible and searchable by hiring managers will still involve a nominal fee. The introductory filing rate of $29 for 3 years runs until November 9th. If you think you’ll ever be looking for a job in the next three years, I encourage you to take advantage of this faaaaaaaabulous introductory rate. After November 9th, it will go away! We’re serious about creating connections between smart developers and companies who appreciate smart developers. If you have any questions or feedback, let us know on meta.stackoverflow.com in the careers tag. We’re always listening. Our #1 goal is to actively improve careers in every way we can over the next few months."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/10/23/alternate-sorting-orders/","date":"2009-10-22T22:00:00.000Z","tags":["Background"],"title":"Alternate Sorting Orders","text":"As you know, we sort answers (and sometimes questions) in simple descending score order by default. Score is defined as upvotes minus downvotes. Way back in February, Mike Schiraldi of Reddit emailed us about an alternate sorting mechanism. After about 6 months of testing, It looks like Reddit has implemented this algorithm, and you can read about it courtesy of Reddit guest blogger Randall Munroe (aka XKCD): If a comment has one upvote and zero downvotes, it has a 100% upvote rate, but since there’s not very much data, the system will keep it near the bottom. But if it has 10 upvotes and only 1 downvote, the system might have enough confidence to place it above something with 40 upvotes and 20 downvotes — figuring that by the time it’s also gotten 40 upvotes, it’s almost certain it will have fewer than 20 downvotes. And the best part is that if it’s wrong (which it is 5% of the time), it will quickly get more data, since the comment with less data is near the top — and when it gets that data, it will quickly correct the comment’s position. The bottom line is that this system means good comments will jump quickly to the top and stay there, and bad comments will hover near the bottom. The original article, How Not To Sort By Average rating, elaborates on the math. We need to balance the proportion of positive ratings with the uncertainty of a small number of observations. Fortunately, the math for this was worked out in 1927 by Edwin B. Wilson. What we want to ask is: _Given the ratings I have, there is a 95% chance that the “real” fraction of positive ratings is at least what?_ Wilson gives the answer. Considering only positive and negative ratings (i.e. not a 5-star scale), the lower bound on the proportion of positive ratings is given by: He also provided some sample Ruby code that implements the above formula: def ci_lower_bound(pos, n, power) if n == 0 return 0 end z = Statistics2.pnormaldist(1-power/2) phat = 1.0*pos/n (phat + z*z/(2*n) - z * Math.sqrt((phat*(1-phat)+z*z/(4*n))/n))/(1+z*z/n) end pos is the number of positive rating, n is the total number of ratings, and power refers to the statistical power: pick 0.10 to have a 95% chance that your lower bound is correct, 0.05 to have a 97.5% chance, etc. (other implementations in different languages were provided in this Reddit thread.) I met Mike in person at the LA DevDays, where he presented on Python. He reminded me about this article, and we discussed whether it would work on Stack Overflow. I generally like it, but there are some important differences between Reddit and Stack Overflow: Statistically speaking, it is quite rare for us to get a question with more than 30 answers. Since votes are limited to 30 per user per day, we have a much lower volume of voting overall than Reddit. As downvotes cost reputation on Stack Overflow, the overall incidence of downvotes is probably much lower here than it is on Reddit, where downvoting costs nothing. By the time a question gets to more than 30 answers, and has tons of voting, it’s arguably not a very appropriate question for Stack Overflow. I worry that a sort order where lower scoring items are ranking higher than higher scoring items will confuse users. Score has its problems, but it is immediately understandable — low numbers are low, high numbers are high. While this algorithm is definitely cool — and a clear improvement for Reddit users — I am not sure it’s as clearly useful for Stack Overflow."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/10/22/podcast-71/","date":"2009-10-21T22:00:00.000Z","tags":["Company"],"title":"Podcast #71","text":"A collection of clips recorded at the San Francisco DevDays conference, including Joel Spolsky, Mark Harrison, Jeff Atwood, Scott Hanselman and Rory Blyth. This episode runs a bit longer than usual. Joel Spolsky on web usability Mark Harrison on Python and the Norvig spell checker Rory Blyth on iPhone development Scott Hanselman on ASP.NET MVC 2.0 Jeff Atwood on Stack Overflow Ad-hoc roundtable podcast with Scott, Rory, Joel, and Jeff backstage at DevDays. Warning: extreme ramblosity ahead! Joel explains his Duct Tape Programmer post. Apparently DevDays is a duct tape conference, and this section of the recording is a duct tape podcast. Some discussion of the ubiquity of mobile code. Also, if you are nostalgic for the era “when development was hard”, the consensus is that you should be doing mobile development today on iPhone, Android, Windows Mobile, or Symbian. Rory elaborates on his experience with (and effusive opinions on) iPhone development to date. Is coding in Objective-C best accompanied by a flux capacitor, New Coke, and Max Headroom? Also, his excitement for MonoTouch. Joel and Scott put on their amateur language designer hats and have a spirited discussion of type inference and Fog Creek’s in-house DSL, Wasabi. Scott covers some of the highlights of new and shiny features coming in the Visual Studio 2010 IDE, the C# 4.0 language, and the ASP.NET MVC 2.0 web framework. Our favorite questions this week: How do I create unicode smileys? So far beyond it isn’t even funny. Who knows, you might even learn some typography along the way! If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/10/16/stack-overflow-outage/","date":"2009-10-15T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow Outage","text":"Our apologies for the all-site outage today. According to our Pingdom monitors, we were down from 7:18 PM PST to 9:43 PM PST. There goes our vaunted envy-of-the-industry three nines uptime guarantee! Apparently there was a router meltdown at our ISP, Peak Internet. They promised pictures of the (literally?) melted router via an update on their Twitter account. If they come through, I’ll post the pictures here for our viewing pleasure. (not as dramatic as I had hoped, but there are some definite scorch marks around that solder!) At any rate, if you guys and gals could send a few less fiery packets of network doom to our ISP’s routers, we’d appreciate it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/10/15/markdown-one-year-later/","date":"2009-10-14T22:00:00.000Z","tags":["Background"],"title":"Markdown, One Year Later","text":"We made a few key technology bets when we created Stack Overflow: OpenID Markdown ASP.NET MVC I’ll defer the discussion on the other two items for another day, but after spending a year immersed in Markdown — the lightweight markup language we use to format posts on all Trilogy sites — I have some thoughts I’d like to share. We knew early on that there were a handful of Markdown Gotchas, thanks to the sage advice of John Fraser (who, sadly, I have completely lost contact with.) Based on those gotchas, we quickly adjusted our Markdown support to fix a few obvious things: Removed support for intra-word emphasis like_this_example Added auto-hyperlink support for http:// URLs in posts Apparently GitHub also uses Markdown, and they independently arrived at some of the same conclusions we did — synthesizing something they call GitHub Flavored Markdown. Removed support for intra-word emphasis like_this_example Added auto-hyperlink support for http:// URLs in posts Automatic return-based linebreaks instead of “two spaces at end of line” linebreaks Support for some magic strings that auto-convert to GitHub specific links Since GitHub and Stack Overflow match exactly on #1 and #2, it’s fairly safe to say that those are in fact deficiencies in Markdown, at least for a programming audience. (Though I’d argue they apply to general audiences, too.) As for #3, that’s one I hadn’t considered. In normal Markdown, this: Roses are red¶ Violets are blue¶ Will render like this: Roses are red violets are blue The Markdown answer is to add two spaces at the end of the line (or a literal , I suppose). Roses are red ¶ violets are blue¶ Although it’s easy once you know the trick, this is far from intuitive to most. I’m reminded a bit of the double-click mouse problem. I wonder if we should adopt the GitHub linebreak approach here. As for the fourth item, when text is entered in these specific formats … * SHA: be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2 * User@SHA ref: mojombo@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2 * User/Project@SHA: mojombo/god@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2 * #Num: #1 * User/#Num: mojombo#1 * User/Project#Num: mojombo/god#1 … those magic strings are detected by the GitHub Flavored Markdown and auto-converted into GitHub specific hyperlinks. Something similar has been proposed on meta for internal Stack Overflow references, so this is an idea we’ve been entertaining for some time as well. Markdown is remarkably flexible, because it allows you to intermix a narrow list of whitelisted HTML tags with Markdown “fancy ASCII” syntax in a fairly logical way, at least most of the time. So, now that you’ve had a chance to mess around with Markdown for a year — what are your thoughts?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/10/15/podcast-70/","date":"2009-10-14T22:00:00.000Z","tags":["Company"],"title":"Podcast #70","text":"In this episode of the podcast, Joel and Jeff discuss DevDays, the diversity of Stack Exchange sites, the debut of CVs and careers on Stack Overflow, and the viability of WiFi at tech conferences. Stack Exchange is now officially in public beta! There are a huge number of sites running on the Stack Overflow engine. Far more than I expected at this early stage, anyway. The Stack Exchange sites are pushing the boundaries of the specific audience (that is, programmers) we designed it for. Consider the audience overlap between answers.onstartups.com, epicadvice.com, and moms4mom.com. I was getting usability reports from my wife on that last one, which was quite surreal. Also surreal: that Jon Skeet is a top user on one of the above. You’ll never guess which one! Do some of the Stack Exchange sites compete with Stack Overflow? Such as ask.sqlteam.com and snippetgood.com? Not necessarily; if you’re particularly enthusiastic about some niche, you’ll get more questions and tighter focus of community by going to site dedicated to that topic. Joel feels that Stack Exchange works so well as a support forum that he’s shutting down all the other online FogBugz web support tools in favor of fogbugz.stackexchange.com. What’s the minimum number of knowledgeable, invested users you need to have a functional online Q&A community? Joel says one (!). I think it’s more on the order of a few dozen. The software part is easy, the real hurdle is this: can you rustle together a core community of a few dozen enthusiastic, knowledgeable folks? An extended discussion of our new careers section of Stack Overflow, which we launched last week. Joel sort of wrote the book on this topic, with Smart and Gets Things Done: Joel Spolsky’s Concise Guide to Finding the Best Technical Talent. Our careers approach grows out of Joel (and my) dissatisfaction with the current status quo. It sucks, and we’d like to build something better. This is the philosophy behind careers.stackoverflow.com : smart companies should be pursuing good programmers, and not the other way around. We also want to cut out the cheesy for-pay contingency recruiters (or any other middlemen, for that matter) from the mix, and directly connect passionate programmers with companies that understand the value of programmers who hit the high notes. This is Fog Creek’s guarantee for every service they charge money for: “The Fog Creek Promise: If you’re not satisfied, for any reason, within 90 days you get a full refund, period, no questions asked. We don’t want your money if you’re not amazingly happy.” Stack Overflow has adopted this promise as well. Why don’t all companies do this? Why would you want to keep an unsatisfied customer’s money — it generates ill will far out of proportion to the tiny amount of money involved. As a part of careers, we’re planning to roll out free, public CVs with user-selectable “vanity” URLs in a week or two. In retrospect, we should have done this from day one, as it compliments the public record of your Q&A on Stack Overflow. As Joel notes, the best way to control your online presence is to fill it yourself with all the cool stuff you’ve been doing! Don’t let others tell the story of you when you can tell it yourself. Our favorite question this week is from Server Fault: Why is Internet access and Wi-Fi always so terrible at large tech conferences? Based on Joel’s recent DevDays experience, reliable WiFi at tech conferences seems to be rare. Why? How can this be fixed? What does it take? If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/10/07/introducing-stack-overflow-careers/","date":"2009-10-06T22:00:00.000Z","tags":["Beta"],"title":"Introducing Stack Overflow Careers","text":"When we integrated jobs.stackoverflow.com, I dropped a little hint: That said, this is just a start on the careers front. We have some more innovative things we are working on in this area that we hope to roll out in the next 6 to 8 weeks. Like, say, wouldn’t it be cool if your CV listed the stuff programmers really care about, such as your first computer … Joel just announced what we’ve been working on for the last 6-8 weeks at Boston DevDays: careers.stackoverflow.com is intended as a private complement to the public profiles at stackoverflow.com. Sam Saffron correctly identified our key goals in a speculative meta post: I know what you’re thinking, there is already the woeful non-international, poorly targeted, tiny note on every page and a check box on your profile that does nothing. Nonetheless, employers are willing to pay lots of money to find good people, and there is a pool of over 100K developers on stack overflow with a living, breathing resume. Surely we could do better than having a couple of non-relevant links on every page. Target job ads at the location the user is from. I, for one, am not really interested in relocating my life to Albuquerque at the moment. Create a new entity that does jobs better, partner with local job agencies. Collect more information from the end users. Eg. Would you be willing to move? Would you be willing to work from home? Looking for contract or full time? Etc … We believe that every professional programmer should have a job they love, and current sites like Monster, DICE, craigslist, and so forth do a woefully inadequate job of matching professional programmers with the type of employers who understand the true value of programmers who hit the high notes. So, then, our goals are twofold: 1. **Avoid the keyword-spam-free-resume ghetto**, and build a community of top-notch programmers who are serious about finding a great job. Yes, that means there is a nominal fee to file your CV. 2. Allow optional, but deep, integration of your **public** Stack Overflow profile with your **private** CV. So instead of being a mere list of keywords and answers to questions, you become a living, breathing track record of what kind of programmer you are. In short, we’re trying to change the rules of the game. I encourage you to scan through the about page and the faq and share your thoughts in the comments. Will it work? We don’t know. But, for what it’s worth, we honestly want to connect passionate programmers with companies who appreciate, respect, and — most of all — love passionate programmers. Go ahead. Try careers.stackoverflow.com out. It’s totally free to get started and see how everything works, and our f_aaaaaaaaaaaaaaa_bulous introductory offer of $29 for 3 years of filing is good until November 9th. As usual, if it works and it’s awesome, the Stack Overflow team takes full credit. And if it sucks, well, I told you this was all Joel’s idea!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/10/07/stickers-for-stackers/","date":"2009-10-06T22:00:00.000Z","tags":["Background"],"title":"Stickers for Stackers","text":"Our program for world domination through stickers is well underway. Check out the cool stuff that Stack Overflow users have sent in for stickers to date: See, Stack Overflow really is built on love, internet style! I guess Joel wasn’t kidding when he said “just send us anything!” in your SASE sticker request. Let’s see what other kinds of crazy things we can get up on that wall — request your stickers by sending in, y’know, something! Once you get the stickers, post your sticker action shots on meta, too! And yes, I am still planning to send out free stickers for top users on each Trilogy site. Things are a bit backed up at the moment, but I expect to get all the free stickers mailed out by the end of October. These were mailed October 13th. (I suppose this is as good a place as any to mention that there will be no podcast this week due to the flurry of activity necessary to support DevDays — which kicks off tomorrow in Boston. Stay tuned for some big announcements within 24 hours..)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/30/one-million-pageviews/","date":"2009-09-29T22:00:00.000Z","tags":["Background"],"title":"One Million Pageviews","text":"A small, but arbitrary milestone in Stack Overflow history: Per Google Analytics, we finally did one million pageviews in a single day on Tuesday, September 29th. After flirting with hitting this limit all month (so many golf crowd “awww” near-miss moments), we were finally rewarded with 1,015,756 pageviews yesterday, just barely squeaking it into the month of September. As a point of comparison, when Stack Overflow launched to the public a little over a year ago, on September 15th, 2008, we did about 750k pageviews on the 16th with all the launch publicity in full swing. But once that died down, the site quickly normalized to about 300k pageviews on a typical weekday. So in about a year: traffic has more than tripled the site has grown from one server to three (database, web1, web2) over 300k questions over 120k real, active users we’ve launched twothree other sites in the trilogy serverfault.com (May 26 2009) meta.stackoverflow.com (June 28 2009) superuser.com (Aug 18 2009) It’s been a great year, but I suspect the next 12 months will be even better! We have some exciting announcements planned for DevDays, so stay tuned."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/30/podcast-69/","date":"2009-09-29T22:00:00.000Z","tags":["Company"],"title":"Podcast #69","text":"Joel and Jeff sit down with Peter Seibel to discuss his new book Coders At Work, the effect of listening to music while coding, and the future of programming books. Peter draws on some commonalities in the 15 famous programmers he interviewed for Coders at Work. Peter agrees with Joel that concurrent (threaded) programming is some of the hardest programming anyone can do — even the extraordinary programmers he interviewed concur on this point. Susan Lammers’ book Programmers at Work was the early inspiration for Coders at Work. It’s a similarly fantastic read. The other book in the same series, Founders at Work, is a great (albeit less technical) too. Many of the programmers interviewed (with the lone exception of Brad Fitzpatrick) got their start before home microcomputers such as the Apple II were even available. But they all spent deep, huge hands-on volumes of time on a computer, somehow. One big sea change in the last 30 years of programming: per Jamie Zawinski, “these days, almost all software is social software”. The days of the solitary, disconnected programmer toiling away in a server room are essentially over. Even a hardcore game programmer like John Carmack (who, sadly, could not be reached for interview in Peter’s book) has gone on record with a back to basics approach: “if I were off by myself, I would want to become an iPhone game developer.” Does listening to music affect your ability to program, positively or negatively? Joel cites one unpublished study, then goes on to mention that he occasionally watches video while programming. Is there any actual, verifiable data on this either way? Have we passed through the “golden age” of technical books? Are technical books dead? What niche will books fill for programmers in the future? Joel and I both remember poring over programming manuals in great detail in the early days because there were no other sources. We answered the following listener question this week: Stuart: “Do you have any opinions on listening to music while coding? Is this a viable alternative to having a private office?” Our favorite questions this week: Proposal: Free Vote-Based Advertising for Open Source Projects. We’d like to put some of our Stack Overflow remnant ad inventory to work for the community via voting and popular nominations. The goal is to highlight useful and interesting open source projects that programmers might not be aware of. What is the single most influential book every programmer should read? Why, Coders at Work of course! This was one of the first popular questions posted on Stack Overflow during the private beta; programmers do love their books. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/29/free-trilogy-stickers-for-top-users/","date":"2009-09-28T22:00:00.000Z","tags":["Community"],"title":"Free Trilogy Stickers for Top Users","text":"If you’re a top user on any of the Trilogy sites, I’ve got some good news for you. As a gesture of thanks for being such an involved member of the community, we’d like to send you some Trilogy stickers absolutely free! The fine print: to take advantage of this offer, you must be on page 1 or page 2 of the /users page of any trilogy site. stackoverflow.com/users serverfault.com/users superuser.com/users meta.stackoverflow.com/users (page 1 only) (due to strictly limited “special edition” meta stickers, you must be on page 1 of meta.) If you are a top user on multiple sites, you have my most hearty congratulations, but you can only claim stickers once, not multiple times. If we have already sent you stickers for any reason, you can’t request them again. To claim your stickers, simply click here to enter your address and we’ll get the stickers mailed out to you within a week or so. Also, because not everyone reads the blog, I’ll try to shoot an email tomorrow to all the relevant users to make sure they’re aware of this fabulous offer. update: all stickers were mailed Tuesday, October 13th. This reflects any top user sticker requests up to October 7th, and I don’t see any new ones, so I think we’re complete! Enjoy your stickers — you’ve earned them."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/24/congrats-on-100k-rep/","date":"2009-09-23T22:00:00.000Z","tags":["Background"],"title":"Congrats on 100k Rep","text":"Sometime today, Jon Skeet reached 100,000 reputation on Stack Overflow. Congratulations! In unrelated news, there will be no podcast this week due to illness."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/18/help-stackexchange-with-colors/","date":"2009-09-17T22:00:00.000Z","tags":["Community"],"title":"Help StackExchange With Colors","text":"The first public Stack Exchange sites have surfaced. While the service is still very much in beta, I have to admit I’m deeply disappointed in the color schemes that are being aired in public. I agree with Joel Coehoorn, who posted: I know it’s a demonstration and high-contrast design is not only intentional but also somewhat necessary, but this is part of your sales pitch. Probably well worth the money to let a graphic designer have some fun with this one. The crimes against my eyeballs are manifold: All but unreadable low-contrast color pairings. Jarring, disharmonious color choices. Apparent utter lack of designer input. Now, I’m not saying that our trilogy color schemes are perfect — far from it. Design is really, really hard and takes at least a month of tweaking in my experience to get it even close to right. We’ve been creeping further and further towards the refuge of minimalism in our Trilogy layouts over the last year. fact, I just deployed a change to remove the accepted answer color to make color schemes a bit easier for SE. But I do believe that we can and should do much, much better than the existing Stack Exchange color schemes. Seriously, what does this say to you? Opinions vary, but to me, that says “I don’t give a crap how this looks.” It is programmer design at its finest. Would you want to be associated with something like this? I believe it is our responsibility to offer a few preset, reasonable color schemes for Stack Exchange users to choose from. Allowing users to choose their own color schemes from scratch, with no preset schemes to choose from or work against, is the equivalent of letting a thousand Hot Dog Stands bloom. OK, enough with the complaining. So, how can we fix this? How can we involve outside designers in creating CSS color schemes for Stack Exchange? What’s a good, public web-friendly way? In the future, how can we cultivate a deeper template / layout ecosystem for Stack Exchange? Help us help you. And your eyeballs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/18/podcast-68/","date":"2009-09-17T22:00:00.000Z","tags":["Company"],"title":"Podcast #68","text":"Joel and Jeff discuss outsourced DNS, virtual machine “appliances”, and programmers as library users versus library writers. As a dyed in the wool fan of fake plastic rock, I am required by law to mention that The Beatles: Rock Band was released last week. It’s great! We changed DNS providers, as our existing registrar’s DNS service was highly … irregular. Should you pay for outsourced, dedicated DNS? What do you get for that money? What kinds of value can outsourced DNS provide? What clever things can a smart DNS provider do? If you need to troubleshoot your DNS, try DNS Stuff. DNS is heavily cached throughout the internet, but I think we overestimate how efficient these distributed caches are. For example, Yahoo found that 40-60 percent of their users have an empty browser cache experience. There is value in having a fast, distributed core service for the no-cache scenario. A brief discussion of our use of virtual machines in our little server farm. Since the only trouble spot for VM performance is disk, that gives us the flexibility of using a lot of great Linux and open source tools for networking (no or very little disk dependency), such as HAProxy and Cacti. Sometimes people should question the premise of your question; as in our Server Fault question about having two default gateways, it turns out that the only sane answer is “don’t do that.” When it comes to Stack Exchange, the broader the topic, and the more unanswerable questions you have, the worse the engine will do for you. The engine is designed for reasonably narrow topics, with a majority of questions that can actually be answered in some reasonable way. Joel likens the classic divide in software developers to “library users versus library writers”. At what point do programmers cross that chasm? Do they need to? Joel says “we write one algorithm per year.” How do you deal with the dancing bunnies problem? Also known as the Dancing pigs problem. “Given a choice between dancing pigs and security, users will pick dancing pigs every time.” We answered the following listener questions this week: Steve: “The etiquette rules for meta are much looser than on the other Trilogy sites. Does this have ramifications for Stack Exchange sites?” Brian: “Technology changes so fast that most developers burn out in 20 years. How do we retain our historical knowledge if the rate of attrition is so high?” Our favorite questions this week: How can I gently explain to non-techie friends they are the victim of a hoax? It is part of the responsibility of a true superuser to tend to those users who can’t protect themselves. What is the worst real-world macros/pre-processor abuse you’ve ever come across? The C, she is dangerous! If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/11/new-dns-provider/","date":"2009-09-10T22:00:00.000Z","tags":["Background"],"title":"New DNS Provider","text":"Our domain name registrar is GoDaddy. We’ve had a lot of problems with GoDaddy’s handling of DNS, where DNS entries will suddenly appear and disappear at random. Often, changing a completely unrelated DNS record would result in other DNS entries going missing for hours. Extremely frustrating. As a result of many, many bad experiences, over the weekend, we’ll be switching DNS providers. I asked around about quality DNS providers and I got a few consistent recommendations: EasyDNS ZoneEdit DynDNS / Dynect UltraDNS DNSMadeEasy EveryDNS I was also (hilariously) referred to a Server Fault question on Hosting Your Own DNS. The entire DNS tag on Server Fault is good reading as well. We eventually decided to go with Dynamic Network Services. They must know DNS cold, because they have a freaking three letter domain name, man! I also got to learn the exciting intricacies of exporting DNS records to text format, including the thrilling Start of Authority (SOA) record. example.com. IN SOA ns.example.com. hostmaster.example.com. ( 2003080800 ; sn = serial number 172800 ; ref = refresh = 2d 900 ; ret = update retry = 15m 1209600 ; ex = expiry = 2w 3600 ; min = minimum = 1h ) Starting at 5 pm PST today, we’ll flip over to the new nameservers: ns1.p19.dynect.net ns2.p19.dynect.net ns3.p19.dynect.net ns4.p19.dynect.net It is our hope that outsourcing our DNS to professionals — to companies that specialize in this stuff — will result in less unpredictability when navigating to our websites."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/10/podcast-67/","date":"2009-09-09T22:00:00.000Z","tags":["Company"],"title":"Podcast #67","text":"In this episode of the Stack Overflow podcast, Joel and Jeff discuss the ethics of Craigslist, the pitfalls of customer-installable software, and caching for anonymous web users. If you’d like a Stack Overflow, Server Fault, or Super User sticker, you can now get three! Just send a SASE to Fog Creek software as documented in this blog post. Please don’t start a Ponzi scheme with those international reply coupons, though! There was a excellent, huge Wired article on the pros and cons of Craigslist, titled Why Craigslist is Such a Mess. I am mentioned in the article, as an example of someone who created an tool to do all-city search that got shut down by Craiglist, which is quite militant about controlling the service. Joel feels that what Craig Newmark is doing with Craigslist is a brand of evil, in that it has destroyed the income stream (classified ads) that supported professional journalism. Craigslist was one of the models we studied extensively when building Stack Overflow, even cribbing their flagging mechanism. Joel and I have an extended discussion about the ethics of Craigslist. Joel and I disagree about the future of professional journalism; I think the newspaper business model was fundamentally flawed. It is tempting to blame Craigslist for the downfall of newspapers, but if it wasn’t Craigslist, someone else would have done the same thing. For a thoughtful discussion of the topic, check out Clay Shirky’s article Newspapers and Thinking the Unthinkable. One side effect of Craigslist being free and incredibly popular (more pageviews than eBay and Amazon combined) is that they are breeding the perfect spammer. We looked at Craigslist as an key example of designing for evil. We suspect that over time Craigslist might have to start charging money for most, if not all categories. Joel’s Stack Exchange playground is biztravel.stackexchange.com, but we need better color schemes. I think we need to have a contest to set some reasonable default color schemes for Stack Exchange customers to choose from. One thing Joel has learned from selling Fogbugz: software designed to be installed on a server in-house at a customer’s site, under full control of that customer, is almost never worth the hassle. Virtual machines, or the software-as-appliance models, are more sustainable. But most companies won’t allow outside vendors to remote into the app to troubleshoot it, either. A tremendously important part of designing a large public website is optimizing for anonymous user access, which will be a large proportion of your traffic. At Stack Overflow, even before our public launch in September, we spent a lot of time ensuring that anonymous usage is aggressively and heavily cached. Our favorite Stack Overflow trilogy questions this week are: Countdown app for DevDays. Joel needs a cool app to help start DevDays sessions on time! Here’s an opportunity to show off your mad coding skills, and have your software prominently featured at every DevDays venue. We answered the following listener question on this podcast: David Smalley from DocType: “Shouldn’t websites optimize heavily for anonymous usage patterns?” Absolutely! If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/04/i-heart-stack-overflow/","date":"2009-09-03T22:00:00.000Z","tags":["Background"],"title":"I [heart] Stack Overflow","text":"We get the nicest email. (Well, mostly.) This one made me laugh, so I wanted to share it with everyone. After all, who doesn’t <3 ASCII hearts?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/04/load-balancing-stack-overflow/","date":"2009-09-03T22:00:00.000Z","tags":["Company"],"title":"Load Balancing Stack Overflow","text":"Starting right now, we will be load balancing the Stack Overflow servers — going from one web tier server, to two. This means you may end up on a different server depending on what HAProxy decides the hash of your IP address is. This shouldn’t cause any problems, but … If you notice anything unusual, feel free to report it on meta.stackoverflow.com. We’ll be monitoring closely."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/03/podcast-66/","date":"2009-09-02T22:00:00.000Z","tags":["Company"],"title":"Podcast #66","text":"In this episode of the Stack Overflow podcast, Joel and Jeff discuss reverse proxies, the pitfalls of self-support communities, and designing for engagement. It is my intent to attend the London and Cambridge DevDays, if my passport comes back in time. Speaking of which, is there anything funnier than a baby’s passport picture? We officially disabled the built in ASP.NET Session state, so as to set ourselves up for multiple Stack Overflow servers. Fortunately, we don’t need a lot of shared state, but we were using it in a few places. We created a small database table to store the small bits of per-user state that we need. I take an inordinate amount of joy in deleting code from our project. Nothing is more satisfying! To switch over to multiple servers, we need some kind of load balancer. We chose HAProxy, but we also had to configure tproxy (transparent proxy) support so that the IP addresses arriving at the web servers are not all the same. For now we’ll be load balancing using a simple hash of the incoming IP address. Depending on which hash you get, you may end up on a different server, but you’ll stay on that server as long as your IP address is stable. This is a fairly crude form of balancing, but should be sufficient. It’s incredible how aggressive Google’s indexing of our site is; it regularly pulls down a gigabyte of compressed text from us per day, and it wants to do even more. One of the primary motivators for adding a second server is to reduce the traffic load enough so that we can “unleash” google via webmaster tools. A belated welcome to our newest and third site in the trilogy, Super User — it’s for any general computer software or hardware questions, but we’ve already had to disallow videogaming questions. How much overlap will there be between our public websites, and the sites launched through the Stack Exchange service? But remember, the software (however great it may be) is the easy part. Building a community is the truly difficult part! To succeed, that’s what you should focus on. Joel discusses the shifting meaning of “Beta” — it’s been contorted into “the first five years of a product”. But there is an art to the classic beta, in terms of releasing in a staggered fashion to fresh testers who haven’t seen it yet. Google’s self-support model is often unsatisfying because it is community driven, yet the community is powerless and has no real stake in developing the product. They’re given padded rubber rooms to bounce around in harmlessly. That’s not a good way to build community. Google needs a lot more evangelists out there interacting with the community and bringing messages back and forth to the mothership. This is something that Microsoft does extraordinarily well, but Google does not seem to “get it”. A brief discussion of some key changes to (hopefully) increase engagement between question asker and answerers. The goal is for answerers to be able to quickly scan a question and see if they’re dealing with someone who cares, or not. The default votes answer sort order had a flaw: the sub-order was relevant! We now use random as the sub-order to the votes sort, to minimize any effect of the sub-order. Answers will now appear in random order if they have the same number of votes. Answers should be voted up because they’re inherently good answers, not because they happen to accidentally be on top at that particular moment. We answered the following listener questions on this podcast: Nathan Long: “Is it valid to discuss iPhone and Blackberry questions on Super User?” This has been discussed on meta. Brian Kelly: “Is there any formal organization for potential candidates to meet employers at DevDays?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/09/02/the-first-super-user-with-10k-rep/","date":"2009-09-01T22:00:00.000Z","tags":["Community"],"title":"The First Super User With 10k Rep","text":"I sort of dropped the ball on this, but sometime in the last week or two, the first user reached 10,000 reputation on Super User. That user is John T. July 15th was the first day of beta, and John — as of this writing — has 11,232 reputation. That means in about 48 days, John has produced 234 reputation per day. (Remember that bounties and accepted answers are immune to the 200/day reputation cap.) Impressive. It’s all the more impressive when you realize that John is a mere 18 years old! (He’s also Canadian, but I won’t hold that against him.) Looks like we have another lifetime Super User on our hands. Congratulations John, and thanks for leading the charge to provide great answers on Super User!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/28/in-stickers-we-trust/","date":"2009-08-27T22:00:00.000Z","tags":["Background"],"title":"In Stickers We Trust","text":"Remember the trilogy stickers I wrote about a while ago? They’ve arrived. All 40,000 of them. Each box was around 22-25 pounds. Here’s a close up of each sticker. They are all about 4 1/2″ wide. Imagine the endless fun you could have with this many stickers! As to how you, yourself, can get hold of these totally awesome stickers — attend Stack Overflow Dev Days where they will be given away in great profusion! In fact, we reserve the right to physically adhere these stickers to anyone in attendance! (Not really. As far as you know.) Beyond that, we’re still not sure. Joel is a fan of the SASE (self-addressed stamped envelope) approach, but I still feel that’s asking a bit too much of my fellow sticker enthusiasts. If you’d like to get Stack Overflow stickers, see how in this post."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/25/yet-another-reason-to-dislike-france/","date":"2009-08-24T22:00:00.000Z","tags":["Company"],"title":"Yet Another Reason to Dislike France","text":"Joel’s vacation in France is going so very swimmingly that he has declined to participate in the Stack Overflow podcast for yet another week. I’m not one to judge, but apparently Joel loves France more than he loves Stack Overflow. I’m just sayin’. But, maybe we can pull something together sans Joel. There are some ideas on meta for the as-yet-unrecorded Podcast #66, so feel free to go in there and upvote or add your own. (disclaimer: I’m just kidding, I have nothing against France. It’s Australia that really sucks.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/23/new-question-asker-features/","date":"2009-08-22T22:00:00.000Z","tags":["Community"],"title":"New Question Asker Features","text":"In order to increase engagement between the people asking questions and the rest of the community, we’ve rolled out two new features. The first is a “batting average”, if you will. Below the question owner signature block, for non-community-wiki questions, we show the percent of accepted answers for that user. It won’t always appear, though. The following rules are used in the calculation: Questions must not be community wiki. Questions must not be closed. Questions must be more than 3 days old. Questions must have at least 1 answer. There must be at least four eligible questions as determined by the above rules, otherwise the statistic will not appear. Certain visual styles will be applied to the percentage depending on how high or low it is. We show this number because it provides relevant information to anyone interested in that question: If the stat doesn’t appear at all, it’s a new user, or someone who rarely asks questions. If you see a low percentage, it’s a user who asks a lot of questions but accepts almost no answers. If you see a high percentage, it’s an engaged user, someone who frequently goes back and interacts with their questions after asking. If you see a middle of the road percentage, it’s an experienced user who understands what accepted answers are for. It is considered good manners to accept answers on your questions, eventually, but accepting answers is not required. I personally consider anything at 70% or over quite good, meaning you accept answers on 7 out of 10 questions that you ask. There are certainly cases where you don’t get an answer you like, or the question is inherently unanswerable. I think you see where this is going: the accept rate percentage is shown to encourage the behaviors we view as positive and compatible with our sites — and to implicitly discourage those behaviors that aren’t. Another change we made is to highlight comment responses from the user who asked the question. Why do we highlight question owner comments? It’s visually consistent. It carries the “highlight” from the signature block in the original post, to the comment signature block. (not to mention any owner answers, which were always highlighted in the owner color..) It makes it easier to scan a post for owner comments because they have highlighted signatures. This is important if you’re trying to answer the question as all question owner feedback will be helpful in providing and refining your own answer. You can “at a glance” tell if you’re dealing with an interested (comments on most answers) or disinterested (no comments at all) question owner. While we certainly have our share of experiments and mistakes, we try to roll out features only after discussion — both internally and on meta — and examining the data to see if those features are solving an actual (not theoretical) problem or meeting a real (not perceived) need. At any rate, hopefully these changes make it easier to ask good questions and provide good answers!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/22/us-versus-hyphen/","date":"2009-08-21T22:00:00.000Z","tags":["Background"],"title":"Us Versus Hyphen","text":"It’s Friday, so that must mean it’s graph day! Here are some graphs I picked completely at random that I’d like to show you. Google Alexa Compete Quantcast No hyphens were harmed in the creation of this blog post. (disclaimer: we have a healthy respect for other websites similar to ours, and we believe the internet is quite big enough to support lots of different websites doing things as they see fit. The friendly rivalry presented here is intended for your interest and amusement, nothing more.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/21/browsers-and-screen-size-on-stack-overflow/","date":"2009-08-20T22:00:00.000Z","tags":["Background"],"title":"Browsers and Screen Size on Stack Overflow","text":"The question occasionally comes up: what web browsers do Stack Overflow users tend to use? Here’s a quick look at our Analytics data from June 1st – August 19th. Firefox 50.53% Internet Explorer 29.12% Chrome 9.04% Safari 7.33% Opera 2.44% Mozilla 1.15% Konqueror 0.10% Note that within Internet Explorer, the breakdown is 45% IE7, 29% IE8, and — this is depressing — 24% IE6. Which means that about 7% of our overall audience is still on creaky, broken, ancient old IE6. The Firefox breakdown is primarily 3.0 and 3.5, with a smattering of older versions. As for the screen size of Stack Overflow users: 1280×1024 24.03% 1680×1050 14.52% 1280×800 14.32% 1024×768 12.32% 1440×900 11.57% 1920×1200 8.40% 1600×1200 3.24% 1152×864 1.68% 1920×1080 1.32% 1400×1050 1.28% Those resolutions account for about 90% of the audience — those that report this data back to Analytics, anyway. (Just as an aside, in case anyone was waiting for the podcast: as noted on last week’s episode, there will be no podcast recording this week.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/18/super-user-now-public/","date":"2009-08-17T22:00:00.000Z","tags":["Company"],"title":"Super User Now Public","text":"After a month long semi-private beta, Super User is now open to the public! It’s exciting to complete the trilogy (and even have our own Christmas Special). Now brace yourselves for a massive influx of ewoks. They’re too cute to be angry with! Remember, Super User is for computer enthusiasts and power users. If you have a question about … computer hardware computer software … and it is not about videogames or consoles, then Super User is the right place to ask your question!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/17/congratulations-super-user-moderators/","date":"2009-08-16T22:00:00.000Z","tags":["Community"],"title":"Congratulations Super User Moderators!","text":"After a brief informal nomination period by the existing moderators, and a small impromptu vote on meta, we’ve settled on our three Super User community moderators: Congratulations to TheTXI, splattne, and Diago! They are all that is standing between us and an endless armada of Ewoks, so wish them luck, and try to support them in whatever way you can. They are of course joined by our fellow League of (web) Justice member, How-To Geek. Super User comes out of semi-private beta tomorrow — at 00:01 PST on Tuesday, August 18th. So if you want that coveted Beta badge, this is your last chance!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/13/podcast-65/","date":"2009-08-12T22:00:00.000Z","tags":["Company"],"title":"Podcast #65","text":"In this episode of the podcast, Joel and Jeff discuss lessons from a year of building Stack Overflow, the mysteries of COBOL, some YSlow website optimizations, and magic numbers. What have we learned in a year of building Stack Overflow? If someone wanted to design a system like Stack overflow, I’d give them these two pieces of advice. First, never have any unbounded behavior in your website. Anywhere. Bounding, velocity and rate limiting, should be pervasive throughout your design from day one. Second, provide an outlet for meta discussion from day one. Unless you provide a teacher’s lounge, or afterschool activities for the students, you haven’t completed the experience. In our experience, the best way to manage online behavior is to make the positive behaviors fun and rewarding. If you do this right, the bad and negative behaviors fall by the wayside. (Although you also, regrettably, will still need tools for dealing with rare but aberrant behavior.) Neither Joel or I have ever met a COBOL programmer. That’s why we’re skeptical of these dramatic claims that the world is overrun with invisible COBOL code. There are, surprisingly, some good COBOL questions on Stack Overflow, but it’s a tiny fraction. How much COBOL code can you fit in the 1 megabyte (at most!) memory that these 60’s and 70’s era servers had? Or the tiny hard drives? Is what happened to COBOL programmers eventually what happens to all programmers? Take SQL as an example. If you have 256 gigabytes of main memory — not very expensive already, and getting cheaper every day — is all that SQL and disk stuff still relevant? We recently spent some time improving performance on Stack Overflow, and as always we’ve learned that whatever we think is slow, is not, and the part that is slow is in a totally unexpected area of our code. Never assume you know where a performance problem is, because I can almost guarantee you’re wrong. Profile it and look at the data! We’ve seen huge benefits, more than anticipated, by moving our static web content to a rate, cookieless domain. (We registered sstatic.net for this purpose, which explains the rationale.) This is one of the key recommendations from tools like YSlow and Google Page Speed. It’s a surprisingly effective form of poor man’s web farm scaling. A brief digression into the “why does anyone still use IE6” argument. Here’s Microsoft’s official position, as crazy as it may seem. We may be at the end of the road for the low hanging fruit of website performance optimizations. Of course we can always buy faster hardware. But that doesn’t fix the speed of light problem. Given our large international audience, I sort of wish we could have multiple server farms in different geographic locations, but that may be quite a long way off. Computer “magic number” number bugs are kind of fun; you may remember a very public Excel bug in this vein. Joel once got a credit card with an expiration date set in 2049, which is technically valid, but it barely worked anywhere. Our favorite questions this week: Is 23,148,855,308,184,500 a magic number, or sheer chance? A fascinating tale of programmer number forensics. How to learn Cobol. OK, but first of all, why in the world would you want to do this? If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/12/stack-overflow-and-doctype/","date":"2009-08-11T22:00:00.000Z","tags":["Background"],"title":"Stack Overflow and Doctype","text":"Remember our League of (web) Justice? Well, I’m pleased to announce we have recruited another superhero into our league: Doctype. What is Doctype? Doctype is a free question and answer site for web designers. You can get fast solutions to your CSS, HTML, web design and email design problems. For each question, Doctype can generate screenshots of your design on any browser or email client. This makes it much easier for other people to see the problem and help you fix it. Doctype was inspired by Stack Overflow, but it was custom-built and tailored to the needs of web designers by the fine folks at Litmus. Litmus is a tool designed to show how your HTML and CSS will render in a variety of different browsers and email clients, so naturally Doctype supports Litmus integration. When you ask those gnarly design questions, in addition to posting raw HTML and CSS, you can also post a set of automatically generated screenshots illustrating the design problem. Being “inspired by” Stack Overflow, the site also borrows generously from our concepts of reputation, tagging, and markup — but with their own decidedly designer-ish bent. While we certainly encourage web design questions involving HTML and CSS on Stack Overflow, it’s intended first and foremost for programmers. So if you’re a web designer, and less of a programmer, you might find a better audience for your question (plus some cool auto-screenshot capabilities) at Doctype. What does this mean in practical terms? Our /faq will direct designers with pure HTML/CSS web design questions to Doctype, to better serve this subset of our audience. Our “hero roster” at the bottom of every page will officially list doctype.com as a member of the team. We will host Doctype discussion on meta, so the Doctype developers can participate and respond to community reactions and feedback for their site. While this is a looser, less direct partnership than the one with How-To Geek, it does align well with our core Q&A; format. By combining forces with How-To Geek and DocType, we’re creating an even stronger Justice League on the web. All the better to serve our central mission: getting the best possible answers to your questions. Whatever those questions happen to be."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/10/coming-soon-trilogy-stickers/","date":"2009-08-09T22:00:00.000Z","tags":["Background"],"title":"Coming Soon: Trilogy Stickers","text":"As mentioned on the podcast, we’re working on Stack Overflow Trilogy stickers. I just placed the order with websticker, in fact, and here are the proofs: And because we fully support members of our League of (web) Justice, I ordered some for our fellow league member, How-To Geek, as well. (all stickers are 4 1/2″ wide, custom die cut white vinyl, and printed in full color) These will of course be given out at Stack Overflow Dev Days, and in other ways that we haven’t quite figured out completely yet."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/09/a-few-speed-improvements/","date":"2009-08-08T22:00:00.000Z","tags":["Background"],"title":"A Few Speed Improvements","text":"Over the weekend, we rolled out a few speed improvements to the Stack Overflow engine. First, we did a quick pass with ANTS Profiler (which is great, by the way) and identified a few places where redundant or unnecessary database queries slipped into our code. We like to do this every few months on common pages as a sanity check. We start a trace, refresh a given page 50 times, then view the hot code paths in the trace. It’s almost always database queries gunking up the works, but once in a blue moon we’ll write code so bad that it actually registers in the hot code paths. Anyway, the golden rule is to measure, then optimize, and that’s what we try to do. We also took a long, hard look at optimizing the browser cookies we’re sending down to clients (and thus, clients are dutifully sending back to us in each HTTP request). You’d be surprised how big an impact on performance cookies can be. We were able to remove our ASP.NET forms authentication cookie entirely, and cut the length of our standard cookie key in half. I also removed a number of cookies that the /login page was storing which weren’t really necessary. In my testing our typical cookie is about 360 bytes now, compared with over 500 bytes before. Over time, these old unnecessary cookies will fall away naturally, but you may want to clear your domain cookies manually if you want the fastest possible Stack Overflow family browsing experience. This isn’t as new, but it’s worth mentioning. A few weeks ago, we turned up the HTTP GZIP compression level for dynamic content from the default of 0 to 4. That’s ever-so-slightly slower, but offers an additional 10% reduction in page size. The tradeoff between CPU performance and file size for this setting is documented in exhaustive detail by Scott Forsyth and the “sweet spot” is definitely 4. (Another item that similarly isn’t new, but always a solid best practice, is to minify your JavaScript and CSS. We’ve had our build script set up to do this for months, using the Java based YUI Compressor.) We’ve been long time users of YSlow, and more recently Google Page Speed. Some of the recommendations these tools make are only sensible if you are Google or Yahoo (a very rare and select club of the ‘gee, that’s a nice problem to have’ variety) — but many of them are indeed essential no matter how big your website is. One of the last remaining YSlow / Page Speed recommendations that we felt was worth tackling was Use Cookie-free Domains for Components. When the browser makes a request for a static image and sends cookies together with the request, the server doesn’t have any use for those cookies. So they only create network traffic for no good reason. You should make sure static components are requested with cookie-free requests. Create a subdomain and host all your static components there. If your domain is www.example.org, you can host your static components on static.example.org. However, if you’ve already set cookies on the top-level domain example.org as opposed to www.example.org, then all the requests to static.example.org will include those cookies. In this case, you can buy a whole new domain, host your static components there, and keep this domain cookie-free. Yahoo! uses yimg.com, YouTube uses ytimg.com, Amazon uses images-amazon.com and so on. Another benefit of hosting static components on a cookie-free domain is that some proxies might refuse to cache the components that are requested with cookies. On a related note, if you wonder if you should use example.org or www.example.org for your home page, consider the cookie impact. Omitting www leaves you no choice but to write cookies to *.example.org, so for performance reasons it’s best to use the www subdomain and write the cookies to that subdomain. We registered the domain sstatic.net for this purpose a month ago, and I’m pleased to announce that all the static resources for the Stack Overflow family of websites are now hosted at sstatic.net. This domain is of course cookieless and optimized for serving static content with the lowest possible overhead (and, as before, a far-future expires header, so zero requests are made to the server for cached static elements). Here’s a sample get / response for the new configuration. <b>GET</b> /so/js/master.js?v=4143 HTTP/1.1 <b>Host:</b> sstatic.net <b>User-Agent:</b> Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 (.NET CLR 3.5.30729) <b>Accept:</b> */* <b>Accept-Language:</b> en-us,en;q=0.5 <b>Accept-Encoding:</b> gzip,deflate <b>Accept-Charset:</b> ISO-8859-1,utf-8;q=0.7,*;q=0.7 <b>Keep-Alive:</b> 300 <b>Connection:</b> keep-alive <b>Referer:</b> http://stackoverflow.com/questions/1252349 <b>Pragma:</b> no-cache <b>Cache-Control:</b> no-cache And the response from sstatic.net: <b>HTTP/1.1</b> 200 OK <b>Cache-Control:</b> max-age=604800 <b>Content-Type:</b> application/x-javascript <b>Content-Encoding:</b> gzip <b>Last-Modified:</b> Sun, 09 Aug 2009 18:45:13 GMT <b>Accept-Ranges:</b> bytes <b>ETag:</b> \"75e6f1872119ca1:0\" <b>Vary:</b> Accept-Encoding <b>Server:</b> Microsoft-IIS/7.0 <b>Date:</b> Sun, 09 Aug 2009 23:40:45 GMT <b>Content-Length:</b> 10417 <i>(... gzipped data ...)</i> Look, ma, no cookies! (yes, I’d love to kill the Server header and ETag header in the response, but that’s not so easy.) Using another server for your static content is also a rudimentary form of load balancing; we’ve shaved off hundreds of thousands of requests from our primary servers and delegated them to another server explicitly optimized for and dedicated to that task. Web browsers also tend to “parallelize” their load patterns for the page when they see resources coming from different domains — or a different subdomain, at least. Anyway, we believe that performance is a feature, and we’re serious about the Stack Overflow family of sites being as fast as we can make them. We continue to revisit our performance every couple of months and try to improve it a little more each time. Do you also take performance seriously? Discover new career opportunities in network engineering."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/06/podcast-64/","date":"2009-08-05T22:00:00.000Z","tags":["Company"],"title":"Podcast #64","text":"Joel and Jeff discuss the disappointment of Google AdSense, the difference in skillset between programmers and testers, and the value of standards groups to working programmers. If you have feedback for Stack Exchange (still scheduled for beta by September 1st), please leave it on meta.stackoverflow.com under the Stack Exchange tag. The speaker list for Stack Overflow DevDays is coming soon, it’s looking really impressive so far. For example, both John Resig (of jQuery fame) and Miguel De Icaza (of Mono fame) will be at the Boston leg, and there are still seats available! There’s also a rumor that Jeff Atwood, whoever that guy is, may show up in London. We are forming a League of Justice on the web. The first new hero in our league is How-To Geek, of the most excellent How-To Geek website. It’s the editorially cultivated content yin to our user-generated yang. On the crushing disappointment of Google AdSense on Stack Overflow. The theory of AdSense, matching topical ads to the content on the page, is fantastic. The reality of the type of ads we actually saw on Stack Overflow is a terrible disappointment. They were barely relevant, and often quite ugly. Our hand-selected ads, targetted to our audience, perform 50 times better than AdSense. We believe that if Google could somehow tag a site with a specific audience topic (such as, say, “programmers”) it would do much better. If a site like Stack Overflow, which does almost a million pageviews a day, can’t make enough to cover even one person at half time using Google AdSense, how does anyone make a living with AdSense? Does it even work? Joel says the only people making decent money with AdSense are scammers who specifically build websites to do nothing except target high pay-per-click keywords. I am not sure this is what Google had in mind. It is a stunning indictment of “the power of the algorithm”. Our ad partner is Alex from The Daily WTF, and we take responsible advertising seriously. The right kind of advertising, the relevant, interesting, thoughtful kind is win-win. And always in moderation. We are willing to leave money on the table to have the right kind of ads that we like editorially. Joel has a great discussion about the difference in skillset between a good tester and a good programmer. “There’s something about the nature of the work that’s different enough that a lot of good developers are bored by testing, and a lot of testers are too detail-oriented to get anything done as a developer.” Some programming skills are helpful, but they’re different. There is great risk in creating standards in advance — how do you know if you’re solving a problem people care about, or even the right problem in the first place? Also, the disconnect between the theory and practice can be rather painful. Who can we blame for the codified misspelling of “referer”? I would like to have some words with this person. We frequently use Stack Overflow to build Stack Overflow. It’s almost a recursive endeavor. If you browse the questions the team asks on Stack Overflow or Server Fault, many of them are directly related to development and deployment issues on the sites themselves! Our favorite questions this week are both from Super User, which for now is still in semi-private beta. If you need the password it is “ewok.adventure” without the quotes. Upgrading from Windows 7 RC to Windows 7 RTM. It’s perplexing why Microsoft doesn’t officially support RC to RTM without a little hack. Troubleshooting Failed Upgrade to Windows 7. Three out of four of my Vista machines upgraded to Windows 7 fine. That fourth one, though … I meticulously documented all the steps I took to troubleshoot it, so maybe my failure will be helpful to someone else in time. We answered the following listener questions on this podcast: Adam: “The Fog Creek way of hiring programmers has been well documented. What about hiring testers, and how they fit into your view of how software should be built?” Kevin: “What do you see as the role of standards committees in the development community?” George: “You talked about open sourcing Stack Overflow. Why not just write a book about it?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/08/01/one-year-of-stack-overflow/","date":"2009-07-31T22:00:00.000Z","tags":["Background"],"title":"One Year of Stack Overflow","text":"It was one year ago today that the Stack Overflow private beta started. The first question was asked at 21:42 on July 31st, 2008. Which means we’ve been doing this thing in public for a full year now — it’s a Stack Overflow birthday! Some stats for our first year: Three new “family” sites have launched (serverfault.com, superuser.com, and meta.stackoverflow.com) 208 blog posts have been posted 63 podcasts have been recorded 258,560 questions have been asked; 932,356 answers have been provided 104,213 registered accounts have been created two full-time associates are on board (Jarrod and Geoff) Stack Overflow now peaks at 965k pageviews per day, and 414k visits per day. But more important than any of this, is that I think we’ve honestly raised the quality bar for getting good answers to programming questions on the internet. There is nothing more thrilling to me than clicking on a Stack Overflow family search result in my own web searches — I know the page will load fast, and the information I seek will be right at hand. And it’ll be clean, clear, and formatted well through the tireless fractional effort of programmers just like me. Oh, and I do my part too — I vote the heck out of things I find useful, and always try to leave them better than I found them, by providing more information in an answer or comment, or editing the posts for clarity. If this thing we’ve been doing for the past year has been a success, I can’t take credit for that. But you can: This is the scary part, the great leap of faith that Stack Overflow is predicated on: trusting your fellow programmers. The programmers who choose to participate in Stack Overflow are the “secret sauce” that makes it work. You are the reason I continue to believe in developer community as the greatest source of learning and growth. You are the reason I continue to get so many positive emails and testimonials about Stack Overflow. I can’t take credit for that. But you can. I learned the collective power of my fellow programmers long ago writing on Coding Horror. The community is far, far smarter than I will ever be. All I can ask — all any of us can ask — is to help each other along the path. Nothing motivates me more than the idea that, together, we’re raising the quality of our little corner of the internet in a tiny but measurable way. It is both a pleasure and an honor to serve the community in this endeavor, and I look forward to many more years of the same. update: Yearling badges are now being awarded. Consider that your birthday cake!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/31/happy-sysadmin-appreciation-day/","date":"2009-07-30T22:00:00.000Z","tags":["Community"],"title":"Happy SysAdmin Appreciation Day!","text":"Today, July 31, 2009, is the 10th Annual System Administrator Appreciation Day! There’s a rather nice definition of the term sysadmin on the page, so if you’ve ever wondered who the target audience is for Server Fault — have a read: A sysadmin unpacked the server for this website from its box, installed an operating system, patched it for security, made sure the power and air conditioning was working in the server room, monitored it for stability, set up the software, and kept backups in case anything went wrong. All to serve this webpage. A sysadmin installed the routers, laid the cables, configured the networks, set up the firewalls, and watched and guided the traffic for each hop of the network that runs over copper, fiber optic glass, and even the air itself to bring the Internet to your computer. All to make sure the webpage found its way from the server to your computer. A sysadmin makes sure your network connection is safe, secure, open, and working. A sysadmin makes sure your computer is working in a healthy way on a healthy network. A sysadmin takes backups to guard against disaster both human and otherwise, holds the gates against security threats and crackers, and keeps the printers going no matter how many copies of the tax code someone from Accounting prints out. A sysadmin worries about spam, viruses, spyware, but also power outages, fires and floods. When the email server goes down at 2 AM on a Sunday, your sysadmin is paged, wakes up, and goes to work. A sysadmin is a professional, who plans, worries, hacks, fixes, pushes, advocates, protects and creates good computer networks, to get you your data, to help you do work — to bring the potential of computing ever closer to reality. So if you can read this, thank your sysadmin — and know he or she is only one of dozens or possibly hundreds whose work brings you the email from your aunt on the West Coast, the instant message from your son at college, the free phone call from the friend in Australia, and this webpage. So unless you want your servers to end up looking like this … … pat your friendly local system administrator on the back today. And while you’re doing that, of course, encourage them to celebrate this important holiday on Server Fault!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/30/howtogeek-and-stack-overflow/","date":"2009-07-29T22:00:00.000Z","tags":["Community"],"title":"How-To Geek and Stack Overflow","text":"Remember the League of Justice I said we were forming? Well, I’m thrilled to announce that our League has added its first new superhero: the How-To Geek. I’ve been a fan of The Geek’s site since the very first time I discovered it in late 2007. It’s a fantastic resource filled with great content, and just the right tone. I knew he had a massive success on his hands from day one, and I’ve had an off-and-on email correspondence with Lowell (aka The Geek) long before Stack Overflow was anything more than a gleam in Joel’s eye. This has been in the works for a while. The Geek is truly one of us. He’s a programmer who had a Stack Overflow account since the beginning … … and he can solve a Rubik’s cube in 3 minutes. Like us, Lowell believes in the power of getting good content out on the web and in the hands of the community — and always in a clean, ethical, web-friendly way. That’s why I am proud to announce our official affiliation. Starting today: Lowell will be an active moderator and participant on Super User, helping drive the direction and content of the site. Our “hero roster” at the bottom of every page will officially list howtogeek.com as a member of the team. How-To Geek will act as the ‘editorial content’ yin to Super User ‘user-generated content’ yang, in order to complement and support each other. This partnership is tremendously exciting to me. By combining forces into our own little Justice League on the web we hope to not only help each other grow, but also to deliver great justice to the web, together, in the form of first-rate content and community! Any evil we defeat along the way will, I’m sure, be completely coincidental … oh, and stay tuned for another superhero we’re recruiting into our League over the next months.."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/30/podcast-63/","date":"2009-07-29T22:00:00.000Z","tags":["Company"],"title":"Podcast #63","text":"In this episode of the podcast, Joel and Jeff discuss the Mythical Man Month problem, keeping communication in check, Windows 7, and web scaling. Joel is fielding his largest team ever at Fog Creek — 9 programmers, 2 testers, and 2 program managers. They only have 10 usable weeks in the summer to build a product with their interns, so they have to parallelize their development. Contrary to popular myth, it is possible for a large team to be effective, if you mitigate the Mythical Man Month problem, which is really only about adding people to a late project and bringing them up to speed. How do you deal with an excess of communication (the explosion of paths) on larger teams? First, with program managers. That’s what they are there to address, by becoming the conduit for communication. Second, constantly try to reduce the number of meetings and people in meetings. Speaking of communication excess, is email = efail? This is also why I believe in maximizing the value of your keystrokes, and the value of public communication. If you must email someone, keep it extremely short, a paragraph at most, with a direct question and call to action that is obvious and clear. One thought experiment: what would happen if all your email became Twitter messages? Or, as Joel proposes, is online communication itself a failed paradigm? At the very least, know the limitations of the communication medium you’re using, and escalate as necessary. Some classes of plugins that can complement a product without competing with it: plugins that make the UI complex or dangerous, plugins that require a subscription fee, plugins that compete with the core business model of the product, and plugins that connect to a different commercial product. Products that have a vibrant plugin ecosystem and API are almost by definition successful products. It also creates a sort of weird ambient lock-in around the ecosystem, as in Lotus 1-2-3 macros, or Firefox users who won’t switch browsers due to their favorite plugins. A brief discussion of Windows 7, which has much more “curb appeal” than Vista. Joel was not a fan of Vista; I was. And Windows 7 is the best Vista service pack ever. Stack Overflow almost reached a million pageviews per day last week, and we’re consistently doing around 120 requests/sec, or 7200 requests/minute. We’re starting to hit peaks of about 80% CPU usage on our single web server, so we may have to add a second webserver to the SO farm soon. Speaking of sticky sessions, we were surprised to find that there are those rare few users whose IP addresses will change radically from request to request. We are a Microsoft stack so we’re looking at Velocity to share state across multiple webservers. It’s a clone of memcached. Scaling problems are easy to solve. Just throw money at them, like 37signals recently did. The “getting people to give a crap about your application” problem does not respond to money in the same way. We run a number of LogParser queries on our webserver logs to identify statistically anomalous things that are happening on our website — what sorts of queries do you run on your web logs to show unusual activity? One of the weirder spiders that’s hitting us a lot is Omgili, a sort of forum search tool. Our favorite question this week is from Server Fault: Recommended LogParser queries for IIS monitoring? This is an example of putting the sort of information out into the world that we’d like to see exist — as well as documenting and sharing our own experience in hosting what is now a fairly large public website. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/29/stack-overflow-search-now-61-less-crappy/","date":"2009-07-28T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Search – Now 61% Less Crappy","text":"Remember when We Made Search 51% Less Crappy? Well, we rolled up our sleeves and increased search quality a whole ten percent to 61%. How? Search now heavily weights title in the results, since people seemed to really like that approach. This is currently used on the /ask page, which does a title-exclusive search when you tab away (onblur) the title field. Any individual search terms which map directly to the top 40 tags will be auto-converted to tag searches. So if you enter c++ entities it will convert to [c++] entities automagically on your behalf. This alone is a rather substantial improvement. One specific query, cited as an example of how bad the old search was, is to search for “what is a Monad”: http://stackoverflow.com/search?q=what+is+a+monad As you can see, pretty solid results now. (And don’t forget to avail yourself of the Votes sort tab on the search results page. It defaults to relevance but sometimes votes is a better default sort IMO. There were users who almost literally fought me to the death on the choice of this default search results sort order in the Stack Overflow beta, so that’s how it is.) I’ve also started implementing some BETA advanced search operators, as requested on meta. The current advanced search operators are: posts from a specific user user:1234 apples oranges questions with a minimum number of votes votes:15 apples oranges questions that have an accepted answer hasaccepted:1 apples oranges questions that have no answers answers:0 apples oranges questions that have been closed closed:1 apples oranges questions that are community wiki wiki:1 apples oranges Yes, these are a little buggy at the moment, but they mostly work. And they can be combined with [tags] and search terms of course. One thing to bear in mind: the advanced search operators will sometimes kick you into a combined questions and answers search result format. So don’t be alarmed, when you decide to browse all posts by Jon Skeet voted up 20 or more times, that you see a mixture of questions and answers in your search results! All of the above is documented on our new search help page: http://stackoverflow.com/search Feel free to file bugs/feedback on this on meta, and please tag them with [advanced-search] if you’re talking about a search qualifier with a colon in it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/26/why-cant-you-have-just-one-site/","date":"2009-07-25T22:00:00.000Z","tags":["Background"],"title":"Why Can’t You Have Just One Site?","text":"Now that we have four sites in the Stack Overflow trilogy: Some users disagree with the idea that there should be four sites. Why do we need the trilogy instead of just one site? Having four sites to jump between is ridiculous! Why not one Site? Trilogy Portal: Community Colloboration The whole point of these sites is to form a community around specific topics. There’s nothing more toxic to a community, in my experience, than not being able to set boundaries around it. To define what it is, and is not. If you allow discussing everything, you have allowed discussing nothing. There is no (good) community that can form around “let’s just talk about everything and tag it”. Is it really so hard to figure out which community you belong to, and thus, where your question belongs? Ask yourself this: what is your job title? which community do you consider yourself a part of? what are you trying to accomplish? You can use the same mountain to go downhill really fast on snow — but it’s plainly evident to the participant which culture they consider themselves a part of, “skiers” or “snowboarders”. There’s not a whole lot of confusion within the community itself. It’s the same reason neighborhoods naturally tend to form in real world communities — Chinatown, Little Italy, garment districts, Wall Street, etcetera. Shared interests are the very basis of community. Furthermore, there’s plenty of precedent for the “many sites, each dedicated to a specific topic” model on the web. Consider: GigaOM Network Gawker Media Network Weblogs, Inc. Network We’re doing something like that, but we don’t think of it as a mundane “network”. No. We have much grander plans. We are building our own League of Justice on the web. Do you think anyone sets up camp outside the League of Justice with a bullhorn, shouting: It’s too confusing to keep track of all you super heroes! Which one has which power, and should be used to fight which enemy? Which one is the right one to help us out in an hour of need? Why can’t there just be one giant superhero, SuperBatGreenMartianFlashHawkManWoman?? No. Because that’s patently ridiculous. In the League of Justice, each hero combines forces to make something greater than the whole — without sacrificing their original identity. The power of the League is self-evident and testament to the individual strength of each member. In fact, we have plans to expand our own League of Justice even further in the next few weeks. We’re recruiting some new superheroes to join our League, making it even more awesome. Stay tuned, because we plan to dispense a whole lot of Justice to the web."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/23/non-english-question-policy/","date":"2009-07-22T22:00:00.000Z","tags":["Community"],"title":"Non-English Question Policy","text":"Since this came up on meta, here’s our official policy towards non-English questions on Stack Overflow, Server Fault, and Super User. (note that I say “programming” below, but this policy is the same across all the sites — when reading, you should substitute the actual topic of the site you use, e.g. “sysadmin topics” for Server Fault, etc.) It is not, nor has it ever been, our goal to be the one place in the world for all programming information in every possible human language. Thus: Direct programmers to native language resources. Users who post non-English questions should be gently directed to programming forums in their own language. Community should form around the gravity of native human languages. (see: Chinatown, Little Italy, etc.) Feel free to post links to appropriate human language-specific resources. It is not our goal to teach English. It is our goal to teach programming. If the post has salvageable English and makes some modicum of sense, it should be edited and improved just like any other post. If it does not, it should be closed. The asker has to put effort into the question. Barging into an obviously English dominated forum and insisting on posting a question in another language is no different than the “do my work for me” sort of programming questions — the worst possible sin on Stack Overflow in my humble opinion. You want us to give you answers? Then prove that you’ve put some effort into the question, and you can begin by politely asking it in the language this community is formed around. Now, if askers try to use English and put in “sorry, my English isn’t very good”, that’s fine. Heck, a lot of native English speakers aren’t very good at it, either! The reason we have collaborative editing is to learn and improve together. This is totally fine and even encouraged. (Please do try to make sense, as our users are often brilliant, but not telepathic as far as I know.) But the idea that we should be forced to accommodate random human languages in our community is completely unsustainable. Now if you want to form an any-human-language-goes community like that, be my guest. I fully support your effort and we’ll be more than happy to direct any non-English questions your way."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/23/podcast-62/","date":"2009-07-22T22:00:00.000Z","tags":["Company"],"title":"Podcast #62","text":"In this episode of the Stack Overflow podcast, Joel and Jeff discuss software updates, the power of APIs and plugins, and leading by example. A brief discussion of how software should be updated, using Firefox and Apple’s Software Updater as examples. In a perfect world, you wouldn’t need to care about software updates because you’d always be on the latest version. A smart and silent update mechanism should be architected into your app from day one. Web apps largely get a pass on the “latest version” problem, but even here, you could update smart by having multiple web servers behind a load balancer, and rotating some servers out of service to update, then back in with the latest version. Speaking of software updates, Fog Bugz 7 has shipped. It’s the first new version in two years, with a brand new, extensive plugin API. Joel wonders if having a robust plugin model can replace the need to constantly ship new major versions of your software with new features. I question whether Fog Creek got their plugin API right the first time, but if done right, this is totally plausible. I view plugins as free product design and highly valuable product feedback — so you should fold the top 5 plugins / add-ons into your product every year or so. But how do you do this without crushing your partners in the ecosystem? There are plenty of examples of popular iPhone paid apps being obsoleted by, say, iPhone OS 3.0. Joel argues that plugins should go vertical, and stay out of the path of that oncoming steamroller. Now that we have four sites in the er.. trilogy.. it is finally possible to associate your accounts between the sites, and migrate questions fairly painlessly from site to site. Sometimes we belatedly realize that we got something wrong. We’re now thinking that our current +10 upvote, -2 downvote formula nerfs downvotes into oblivion, and lets certain classes of users who tend to ask a lot of low-quality “do my work for me” questions gain a substantial amount of reputation over time. We are pondering making an adjustment here, which is under discussion at meta.stackoverflow.com. Maybe we should be weighting question votes differently, since users who continue to repeatedly ask dozens of low quality questions are still an ongoing concern. As we get more and more questions in the system, the voting system needs to help us discriminate good questions from poor ones, so we want to encourage question votes. There is now officially a full time Fog Creek developer working on Stack Exchange — welcome Aaron Maenpaa to the team! On a related note, one advantage of open source tooling is that you don’t have to have painful discussions about licensing expenses and whether the tool is worth using as your team grows. R language enthusiasts are taking a clever and effective approach to get more R content on Stack Overflow — we think this is a great way to build a community that is completely in tune with the spirit of the site. In the post Leading by Example, I proposed that one of the best ways (maybe the only way?) to lead junior programmers is to do the things you wish they’d do, and let them observe your success. Those that can be led, will follow to some degree, and the rest are a lost cause. Let’s broaden the terms. Forget programmers, how do you get pizza guys or car wash guys to get excited about what they do? Joel says you can’t. I say there has to be some kind of hippie commune shared ownership business arrangement. At the very least, you can become interested in efficiency, since that might mean you could leave earlier, make more money, or work less. We answered the following listener questions on this podcast: J.D. Long: “The R language is attempting to move away from isolated mailing list and adopt Stack Overflow as a resource. What’s a good way to do this?” Sergei: “I am a programmer in a small IT company. I often see my junior teammates program things that are not optimal. I try to help them, but they’ve complained to my manager. What should I do about this?” Our favorite site questions this week are: DNS failing to propagate worldwide. I used this as an example of asking a question the right way, in that you put some effort into the question — research the problem first and provide all the information necessary for people to help you. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/22/stack-overflow-flash-mobs/","date":"2009-07-21T22:00:00.000Z","tags":["Background"],"title":"Stack Overflow Flash Mobs","text":"Coding Horror reader Alex Vincent wrote to let me know that there is a Stack Overflow Birds-of-a-Feather session at OSCON 2009, which is going on right now. The premise of the BOF session is intriguing; it’s not at all what I expected: In concert with users online across the country, this session will lead a flashmob to populate Stack Overflow with R language content. R, the open source statistical language, has a notoriously steep learning curve. The same technical questions tend be asked repeatedly on the R-help mailing lists, to the detriment of both R experts (who tire of repeating themselves) and the learners (who often receive a technically correct, but terse response). We have developed a list of the most common 100 technical R questions, based on an analysis of (i) queries sent to the RSeek.org web portal, and (ii) an examination of the R-help list archives, and (iii) a survey of members of R Users Groups in San Francisco, LA, and New York City. In the first hour, participants will pair up to claim a question, formulate it on StackOverflow, and provide a comprehensive answer. In the second hour, participants will rate, review, and comment on the set of submitted questions and answers. While Stackoverflow currently lacks content for the R language, we believe this effort will provide the spark to attract more R users, and emerge as a valuable resource to the growing R community. This is a fascinating way to populate Stack Overflow with questions on a particular programming language. We officially condone this, because it is a “bottom up” approach, in that the questions placed on Stack Overflow are by actual working developers who have real world questions about the R programming language. Even better, they’re “best of” questions from existing mailing lists and resources! We’ve been approached in the past about using Stack Overflow as a support forum for various products, and I’ve always turned these proposals down. I feel the content in Stack Overflow should not be driven by official support channels, or product teams, but by the programmers themselves. If there’s interest, the questions will appear organically and in their own time. And if there isn’t interest.. well, that’s what you need to fix first before worrying about adopting Stack Overflow as a support resource! Though I can’t contribute much to this effort due to my woeful lack of R skills, I applaud the way the R language enthusiasts have tackled it — it’s clever, effective, and completely in tune with the spirit of Stack overflow."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/17/high-scalability-blog-on-stack-overflow/","date":"2009-07-16T22:00:00.000Z","tags":["Background"],"title":"High Scalability Blog on Stack Overflow","text":"It was quite an honor to see that the High Scalability Blog posted an entry on Stack Overflow! We referred to the HSB, and its exhaustively detailed information about how other websites handle scaling, many times during the course of Stack Overflow development. And I’ve cited it myself when researching what we think is the largest public same-stack (Microsoft) website on the internet, Plenty of Fish. It’s an excellent resource. I don’t know if Stack Overflow has that much traffic relative to many of the other truly giant public websites profiled on the HSB. You can see our public Stack Overflow traffic stats at Quantcast if you’re curious. Still, it’s great to be able to give back to the community and help document our own process of scaling our little corner of the web. That said, I agree with the overall conclusion that Todd Hoff reaches: If you need to Google scale then you really have no choice but to go the NoSQL direction. But Stack Overflow is not Google and neither are most sites. When thinking about your design options keep Stack Overflow in mind. In this era of multi-core, large RAM machines and advances in parallel programming techniques, scale up is still a viable strategy and shouldn’t be tossed aside just because it’s not cool anymore. Maybe someday we’ll have the best of both worlds, but for now there’s a big painful choice to be made and that choice decides your fate. Scaling up is definitely a viable solution, as both Plenty of Fish and we can attest. Like all of Todd’s pieces, it is exhaustively researched and documented, and well worth your time to read. I was a little stunned how thorough it was, actually — I doubt anyone outside our core development team has thought about our design and scaling this much!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/16/podcast-61/","date":"2009-07-15T22:00:00.000Z","tags":["Company"],"title":"Podcast #61","text":"In this episode of the podcast, Joel and Jeff sit down with Miguel de Icaza of the Mono project to discuss Mono, Silverlight / Moonlight, and the pros and cons of open sourcing your code. Miguel is one of the lead developers on the Mono project, which is an ongoing effort to bring the .NET framework to Linux and other non-Microsoft platforms. Miguel characterizes Silverlight (known as Moonlight on Mono) as “the good parts” of WPF. It’s a newer way to build a cross-platform GUI app, an alternative to GTK and Windows Forms. A brief discussion of the implications of cross-platform GUIs, which lack that native flair. Do you have the manpower to maintain three distinct versions of your GUI application — one for Mac, one for Windows, and one for *nixes? Do only programmers notice the subtle differences? Revisiting Fitt’s Law, and applications and operating systems that don’t make good use of it. Certain areas of the screen, mostly the top and bottom and to a lesser extent the sides, are infinitely large, and should be used prominently in the UI to leverage Fitt’s Law. Mono runs on the iPhone, through the Unity game engine! This was challenging for the Mono team to develop, because interpreters and runtimes are explicitly disallowed in terms of the iPhone SDK. Mono had to be converted from a JIT to a static compiler. Per Miguel, programmers wanted Mono because Objective-C is fairly primitive in memory management and requires a lot of repetition and boilerplate. With Mono “this is all taken care for you”, as a higher level language. Due to concerns within the free software community, Microsoft made a legally binding promise that it will not enforce patents against Mono — for the core framework. It turns out that the Microsoft Office 2010 web component, which is free for consumers, is 100% JavaScript + HTML. If Silverlight wasn’t required to pull off Office-in-the-browser by Microsoft itself, is Silverlight really necessary in the bigger scheme of things? Miguel divides the world into PutPixel Programmers and printf programmers. Which type are you? Some big game projects that use Mono for scripting: Second Life, and The Sims 3. Also, a very large social networking site I can’t mention by name was recently ported to Mono. One of my long term 5 year goals is for the Stack Overflow discussion engine to become a go-to choice for public internet discussion, on par with phpBB and its kin. Miguel offers his insight into the controversial discussion of whether open sourcing Stack Overflow would destroy our business model. We actually have contributed one open-source component of Stack Overflow back to the community — the Javascript WMD editor. Also, we provide all of our question and answer content back to the community licensed as cc-wiki. Our Stack Exchange hosted solution will offer free versions for non-profit organizations, and we’re also looking at provided an ad-subsidized version of it as well. Miguel de Icaza is also a Stack Overflow user — with 22 answers and 3,484 reputation. Check out the Mono Migration Analyzer, which will tell you how easily you can (or can’t) port your .NET project to Mono and run it on other platforms. Please do, because feedback from this tool is used to prioritize future Mono development! Miguel committed to speaking at the Boston Stack Overflow DevDays and presenting some of the same Mono goodness he talked about here. In other Stack Overflow news, the Super User semi-public beta is now open. Come join us! Our favorite Stack Overflow question this week: Is Mono ready for prime time? but of course! See for yourself with a new Mono Visual Studio plugin! If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/15/super-user-semi-private-beta-begins/","date":"2009-07-14T22:00:00.000Z","tags":["Beta"],"title":"Super User Semi-Private Beta Begins","text":"The semi-private beta for Super User has begun. That’s right, it is officially Ewok Time. At any rate, if you wanted a community where (almost) anything goes, you’re about to get exactly what you asked for in the form of superuser.com. If your question has to do with computers, it will be allowed there. But then again, so are Ewoks. Be careful what you ask for, I guess. To get started, go to superuser.com and sign up with your OpenID. Here’s the password you’ll need: ewok.adventure Be sure to visit the accounts tab of your user page after you join, so you can get the +100 account association bonus on Super User! (Note that this requires at least 200 rep, so be sure to initiate the association from the site where you have at least 200 reputation.) Leave any feedback/bugs on meta — just tag them superuser. Have fun — this semi-private beta will run for approximately 2-3 weeks. Also, a little birdie told me that there might be the chance for a user who distinguishes him/herself during the private beta to be elevated to Super User moderator status, if the stars were to align just so…"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/14/migrate-questions-between-websites/","date":"2009-07-13T22:00:00.000Z","tags":["Company"],"title":"Migrate Questions Between Websites","text":"First, I’ve got a little joke for you, courtesy of Kip and TheTxi. A doctor, a lawyer, and a rabbi log into Stack Overflow. The bartender looks at them and says “sorry, you guys are not programming related.” I didn’t say it was a good joke. Moving on. Now that we have threefour Stack Overflow websites in the Stack Overflow trilogy … Stack Overflow (programming) Server Fault (system administration, servers, and IT pros) Super User (general computer software/hardware) Meta Stack Overflow (site and community bugs/features/discussion) … it became increasingly clear that we needed better ways to move questions amongst the sites. We already had a primitive version of this set up for migrating questions back and forth between Stack Overflow and Server Fault, but it was very limited, and forced all moved questions into Community Wiki mode. We now have a much more robust solution for migrating questions between any of the Stack Overflow “family” of websites. It works through the same question voting mechanism as before. If you think a question doesn’t belong on the site, and you have the requisite 3,000 reputation to be able to cast close votes — then cast a “belongs on {other site}” vote: Note that we now have a tooltip which describes in much more detail what each close reason (and family website) is for, if you’re not clear. This is still a vote-based process, unless a moderator intervenes. If the post reaches the close vote threshold (currently requires 5 close votes, with a majority of the belongs-on type), then it is migrated to the other website. Let’s look at a specific example of migrating a question from Stack Overflow to Meta Stack Overflow. We’ll start with the Stack Overflow side, where this question originated. On the Stack Overflow side, this question: Is closed (so no more answers can be added) Is locked (so it cannot be edited or voted on) All its answers are soft-deleted This info is logged in the post history, and on the post itself in a clickable footer. Essentially, the question itself is left as a “stub” so interested parties can figure out what happened to it and where it went. Now let’s look at the destination side, in this case, Meta Stack Overflow. All the original answers, comments, tags, and of course the question text itself, are preserved and moved over wholesale to Meta Stack Overflow. Note that all owners of questions, answers, and comments are automatically mapped to Meta Stack Overflow users whenever possible. This is primarily driven by OpenID, and aided by our new Cross-Site Account Association feature in the case of Google’s per-site hash OpenIDs. One extra cool new feature is that ownership can be automatically re-associated for users who don’t happen to exist on the destination site at the time their question is migrated, but later decide to join and register. We wanted to get this all rolled out and working in anticipation of the Super User beta — now that there are several distinct communities for questions to live in, it’s important that moving them around to where they belong is a relatively painless process."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/13/reversal-and-pundit-badges/","date":"2009-07-12T22:00:00.000Z","tags":["Community"],"title":"Reversal and Pundit Badges","text":"Two new badges today: Reversal Provided an answer upvoted 20 or more times to a question that was downvoted 5 or more times. (gold) Pundit Left 10 comments with a score of 10 or more. (silver) I think I’ve discussed the Stack Overflow philosophy of badges ad nauseam by now, but the Reader’s Digest condensed version is this: badges exist to encourage positive behavior — both in the sense of contributing to the site and between the users participating. In addition, when choosing new badges, I try to explore new dimensions, rewarding people for behavior that isn’t necessarily accounted for within the existing reputation or badge system. Pundit is the first badge based on comment upvotes, for example. And Reversal is unlike any other badge to date, as it rewards, as TheTXI calls it, the “diamond in the rough” — taking a bad question and miraculously turning it into something positive by providing a great answer, a phenomenon that continually amazes me: Usually, it’s garbage-in, garbage-out. Bad questions beget bad answers. If you sort the Stack Overflow question list by votes and sink to the bottom of the barrel, you’ll find some truly horrible questions, as you might expect. But you’ll also find something you probably didn’t expect — some amazingly good answers! Now, these are questions judged by community votes to be of so little merit that I’d usually delete them without a second thought. But I can’t, because a well-intentioned Stack Overflow user has poured his or her heart into an incredibly insightful and helpful answer. Deleting the bad question would bury the good answer, too. It’s the web forum equivalent of turning lead into gold, and it happens far more often than I ever would have predicted. (This is also the reason why voting on questions should be, and is, independent of answer votes.) I chose these two new badges with input from the meta feedback site, and my own observations of the underlying data. Enjoy!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/10/this-just-in-stack-overflow-defeats-google/","date":"2009-07-09T22:00:00.000Z","tags":["Background"],"title":"This Just In: Stack Overflow Defeats Google","text":"We knew in our hearts this day would come: Stack Overflow has defeated Google! On July 2, from 6:45 AM PDT until 12:35 PM PDT, Google App Engine (App Engine) experienced an outage that ranged from partial to complete. Following is a timeline of events, an analysis of the technology and process failures, and a set of steps the team is committed to taking to prevent such an outage from happening again. The App Engine outage was due to complete unavailability of the datacenter’s persistence layer, GFS, for approximately three hours. The GFS failure was abrupt for reasons described below, and as a consequence the data belonging to App Engine applications remained resident on GFS servers and was unreachable during this period. Since needed application data was completely unreachable for a longer than expected time period, we could not follow the usual procedure of serving of App Engine applications from an alternate datacenter, because doing so would have resulted in inconsistent or unavailable data for applications. The root cause of the outage was a bug in the GFS Master server caused by another client in the datacenter sending it an improperly formed filehandle which had not been safely sanitized on the server side, and thus caused a stack overflow on the Master when processed. This is excerpted from a newsgroup posting by App Engine PM Chris Beckmann, and was forwarded along to me by Lenny Rachitsky. In other, less amusing news, there will be no podcast this week. But don’t fret — next week, we will have the ineffable Miguel de Icaza of Mono fame. Joel and I are both big fans, so this one should be fun."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/06/are-you-a-human-being/","date":"2009-07-05T22:00:00.000Z","tags":["Background"],"title":"Are you a human being?","text":"Ever had one of these days? Are you a human being? We apologize for the confusion, but we can’t quite tell if you’re a person or a script. Please don’t take this personally. Bots and scripts can be remarkably lifelike these days! Enter the CAPTCHA displayed below, and we’ll be out of your way. If you’re a Stack Overflow user, you have lots of soul-searching to do. Sometimes these requests can tell you what you already knew. (Courtesy of Dave Webb) Other times, they might be uncomfortably accurate: (Courtesy of Lara Eagle) If you get a particularly great ReCAPTCHA, send it our way. (But the bar is high — it needs to be as good as these two, at least.) Consider it our punishment for being human."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/05/database-server-upgrade-48-gb/","date":"2009-07-04T22:00:00.000Z","tags":["Company"],"title":"Database Server Upgrade — 48 GB","text":"We are currently upgrading the database server to 48 GB of memory, which also means we have to upgrade the operating system, too. Should be done in about an hour. OK, this is complete. Our database server not only has 48 GB of memory installed, but has access to all of that memory. Finally. And just for fun, here’s a picture of our fourth server, which will be used to run superuser.com — as with our earlier servers, there’s an inscription on the top. I dedicated 4 and 5 to Jarrod and Geoff, respectively."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/04/welcome-new-server-fault-moderator/","date":"2009-07-03T22:00:00.000Z","tags":["Community"],"title":"Welcome New Server Fault Moderator","text":"Last week, the first user reached 10,000 reputation on Server Fault. That user is splattne. I had already noticed Stefan from his high quality contributions to Stack Overflow and Twitter, where he seems like a genuinely nice guy and a true geek like us. So when he passed the magical 10k mark, I felt comfortable emailing him to ask if he’d be interested in becoming a Server Fault community moderator. Luckily for us, he was! (One other benefit of Stefan as a moderator is that he lives in Italy. A really beautiful part of it, apparently. This gives us better time coverage for the current SF moderators who are mostly US-based.) Anyway, welcome to splattne, our newest member of the growing family of community moderators! If you’re ever curious who the moderators are for a given site, they are all listed on the /about page for each one. The about page for the meta site is probably the best single place to look, since all moderators across our sites are also moderators there."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/02/logo-contest-winner-for-superusercom/","date":"2009-07-01T22:00:00.000Z","tags":["Beta"],"title":"Logo Contest Winner for superuser.com","text":"The logo design contest for superuser.com is now complete. The voting results helped inform our final decision: At the time that screenshot was taken, we had 2,303 votes — but the relative percentages were remarkably stable over time. Two clear leaders. The final winner we decided on was Mogeek, with entry #425 (a late entry!). What I liked about this logo is its simplicity, while simultaneously referencing both the classic Mac OS “face” icon, and old-school ASCII art. This entry was consistently cited by my designery pals (and even Joel himself) as one they liked. First prize is worth $768 or 29 + 28. Congratulations to Mogeek! First runner up is entry #214 from PixMan. He wins $200. Second runner up is entry #362 from J. Nathanial Dicke. He also wins $200. (This was one of my favorites.) A special honorable mention goes out to these entries by Raul Padilla, haim, and mfourex. It was a tough call. Thanks to everyone who took the time to submit an entry! Now that we’ve got a logo and color scheme, the superuser.com private beta should begin sometime the month, and any Stack Overflow or Server Fault user with reputation of 200 or more is invited!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/07/02/podcast-60/","date":"2009-07-01T22:00:00.000Z","tags":["Company"],"title":"Podcast #60","text":"This is the 60th episode of the StackOverflow podcast where Joel and Jeff discuss the value (or lack thereof) of meta-discussion, how much “big iron” popular websites need, and whether code forking is sometimes inevitable. A discussion of our newly launched outlet for meta-discussion at meta.stackoverflow.com. We view this as a pressure release valve. Why is meta-discussion necessary? What purpose does it serve, and for who? Joel and I are both headphone enthusiasts. It’s also a key part of the programmer’s toolkit for getting “in the zone”, so it’s worth investing in this area. A quality set of headphones can deliver an audio experience equivalent to floor-standing speakers worth thousands of dollars! After three logo contests, we are becoming experts in crowdsourcing design. There is a risk here when people don’t know what criteria they’re supposed to be judging on. Joel brings up the point of televisions which all have a “store mode” which maximizes brightness and contrast to the actual detriment of the overall image quality. And if you use a LCD at its out of box brightness (always the maximum) you’re going to go blind! We took the plunge and upgraded our database server to its maximum of 48 GB of memory. This is mostly a cheap form of insurance against future growth. We may also end up taking advantage of SQL Server’s database compression. The old memory will be eventually used in a second database server we anticipate needing by the end of the year. I was spurred on to do this after reading about the massive 512 GB monster server that Plenty of Fish bought. It’s interesting how the cost of “free”, at that scale (they’re a top 20 website in the US and Canada), is no longer cheap. Joel points to a scathing New Yorker review by Malcolm Gladwell of Chris Anderson’s book Free, which covers similar topics. As Joel notes, paying $100,000 for a server could be more effective than spending $100,000 for a year’s worth of programmer time to convert your database from single and monolithic (the traditional, classic SQL / Oracle model) to sharded (Hadoop and BigTable). Twitter, for example, has moved to an almost all in-memory database architecture. The downside is that it is literally impossible for me to get to any of my Twitter messages older than the middle of 2008. Still a fan of twitter, though; it’s actually useful. Consider the story of an indie musician who made $19,000 in 10 hours on Twitter, while netting exactly $0 from 30,000 traditional record sales. What are the ethics and legality of using code from one job on a different job? If you get a job as a programmer and you never signed anything, then you own all the code you wrote. Most employers sign a Work for Hire agreement which means they own all the code you write while on the job. Should Stack Overflow be eventually open-sourced? Joel is concerned that open sourcing the code would interfere with the hosted product Stack Exchange that Fog Creek is building out right now. I don’t see a conflict between these two audiences; one has infinite time and no money, and the other wants a turnkey, “it just works” solution for a reasonable price. Joel thinks that hosts deploying open source software crash the business model down to the cost of the hosting itself. I wonder how companies like Six Apart (of Movable Type fame) continue to survive if that is the case. And eventually, won’t someone create an open source clone of what you’re doing anyway? Why not beat them to the punch and take control of the situation, by open sourcing the real thing yourself? I continue to have deep skepticism that the hosted Fog Creek version of Stack Overflow cannot avoid a serious fork with our code. The audience of the ad-supported general internet, versus the audience of paying customers building topic-specific ‘stacks, is very different. Can version control tools save you when you’re building the “same” products for such different audiences? We answered the following listener questions on this podcast: Lloyd: “I am leaving a business and working for a competitor in a different business. I want to take the codebase I’ve worked on for the last few years with me — to use as a reference point for future products. What advice can you give?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/30/superuser-com-logo-vote/","date":"2009-06-29T22:00:00.000Z","tags":["Community"],"title":"superuser.com Logo Vote","text":"The logo design contest for superuser.com is coming to a close. There are a number of solid contenders, and I’ve already solicited input from the team and friends. But now I want to know what you think. So I put it up to a quick visual poll — click through to vote! (if you think they all suck, feel free to browse the other submissions, or outline a logo concept of your own in the comments!)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/28/cmon-get-meta/","date":"2009-06-27T22:00:00.000Z","tags":["Community"],"title":"C’Mon Get Meta!","text":"What’s the first rule of Stack Overflow Club? You don’t talk about Stack Overflow on Stack Overflow. We have this policy not because we are jerks (or at least, not just because we are jerks) but because we believe meta-discussion kind of gets in the way. As the faq explains: Also, try to refrain from asking questions about Stack Overflow itself unless you absolutely, positively have to. Most programmers don’t come here to learn about the intricacies of Stack Overflow; they come here to get answers to their programming questions. Let’s try to help them out by not cluttering up the system with navelgazing meta-discussion. If you want to suggest a feature or discuss how Stack Overflow works, visit our UserVoice site. Despite this rule, the desire for an “official” meta-discussion site has been strong. Lots of community members want to discuss Stack Overflow itself, the community as a whole, how it works, topics on the blog, the website, and so forth. It’s come up many times on UserVoice, and is currently the #3 ranked UserVoice request: I know this has been declined multiple times, but I really think it’s time to consider the problem of meta-discussions on the site. To understand why something else is needed, let’s look at what doesn’t work: Meta-questions? Closed moments after they are asked rendering them useless. Meta-answers? Assuming a question is available to attach to, these questions clutter up the answer stream. Comments? word and formatting limitations prevent any meaningful discussion. Third-party site? Unlikely to be seen by a critical mass of users to be worthwhile. The current system completely cuts off meta-conversations to the detriment of the SO community. The desire for meta-discussion is so fervent that some enterprising members of the SO community got sick and tired of waiting for us to listen to them and set up their own meta-discussion site. I applaud this initiative. Good programmers get off their butts! They have the right idea: create a separate area for meta-discussion. That way, everyone wins: people who are interested in community building can pitch in together, and the vast hordes of programmers who just want some freakin’ answers to their questions don’t have to wade through a lot of extra noise to get there. That said, the limitations of phpBB (and their ilk) are fairly painful, and felt like stepping back 10 years in time compared to the Stack Overflow engine. So instead of an unofficial, old-and-busted forum, how about an official meta-discussion outlet based on the Stack Overflow engine you’ve come to know and love? meta.stackoverflow.com We’re a little unsure how well the current SO engine will map to discussion-y topics. Remember, we designed explicitly around Questions and Answers — specifically, questions around a theme that can be (mostly) answered! Launching our own internal meta-discussion site is one way of finding out. I’ve made Kyle Cronin and Tom Ritter moderators on the meta.* site, as they already went to such great lengths to create their own community sites around Stack Overflow. I think they’ve earned it. It’s also looking more and more like meta will replace our UserVoice site, so our adjunct UserVoice moderators, Joel Coehoorn and Sean Massa, will of course be invited to moderate meta.stackoverflow.com as well. Kyle had some ideas about changes to the SO engine to help it adapt from the Q&A; format discussion: bounties make little sense on a discussion site wording needs to be tweaked (i.e. questions->topics, answers->replies) need to be able to follow questions/get notices of additional replies remove notion of community wiki, as discussion sites have a stronger sense of ownership, plus nothing will be off-topic ensure that chronological ordering is the default, if not the only, sort order, both for replies and comments remove accepting an answer some of the close reasons will have to be removed or tweaked We’ve made a few of the easier changes already that were based on (groan) meta-data. Others will be tougher. We won’t know until we try, so … C’mon get meta! … and see what happens."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/26/enthusiast-and-fanatic-badges/","date":"2009-06-25T22:00:00.000Z","tags":["Community"],"title":"Enthusiast and Fanatic Badges","text":"We really like the guys at woot!, and not just because they’re paying us to say that as a launch sponsor of Server Fault. The woot team consists of developers and sysadmins like us, who happen to deal with some hard-core scaling problems. Such as scripters who slam their site hundreds of times a second. Ouch! They also have a clever crap-selling website that we’ve referred to more than once for UI ideas about data presentation. It is in that spirit that woot! approached us with a clever new concept for a badge: Enthusiast — visited the site each day for 30 days. For the period of sponsorship, we’ve renamed this the woot! badge. (It’ll revert to Enthusiast once that period is over.) It’s now functional, as 30 days has elapsed since the Server Fault launch. So you can now identify all the addictsenthusiasts who visited either site for 30 days in a row. What I like about this badge is that it measures a dimension of engagement that we haven’t before. For a significant proportion of the users who earned this badge, it is their very first silver badge. It’s OK to reward persistence and enthusiasm! (But we don’t reward it forever; you can only earn this badge once.) In fact, we liked the results from the Enthusiast badge so much we added another level: Fanatic. And remember, this is a continuous award: if you don’t visit the site for a single day, that will “break” your streak, and you’ll have to start over. Good luck. You’re gonna need it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/25/attribution-required/","date":"2009-06-24T22:00:00.000Z","tags":["CC Wiki Dump"],"title":"Attribution Required","text":"All the content contributed to Stack Overflow or other Stack Exchange sites is cc-wiki (aka cc-by-sa) licensed, intended to be shared and remixed. We even provide all our data as a convenient data dump, seeded by us. But our cc-wiki licensing, while intentionally permissive, does require attribution. Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work). I thought it was pretty clear what “attribution” meant, but given the semi-scammy way the content is popping up in some seedier areas of the internet, maybe not: http://hiveminds.se/vote/framed/story.php?id=23472 http://programmingfaq.w3ec.com/ (there may be others; these are just the ones I know about) So let me clarify what we mean by attribution. If you republish this content, we require that you: Visually indicate that the content is from Stack Overflow or the Stack Exchange network in some way. It doesn’t have to be obnoxious; a discreet text blurb is fine. Hyperlink directly to the original question on the source site (e.g., http://stackoverflow.com/questions/12345) Show the author names for every question and answer Hyperlink each author name directly back to their user profile page on the source site (e.g., http://stackoverflow.com/users/12345/username) By “directly”, I mean each hyperlink must point directly to our domain in standard HTML visible even with JavaScript disabled, and not use a tinyurl or any other form of obfuscation or redirection. Furthermore, the links must not be nofollowed. This is about the spirit of fair attribution. Attribution to the website, and more importantly, to the individuals who so generously contributed their time to create that content in the first place! Anyway, I hope that clears up any confusion — feel free to remix and reuse to your heart’s content, as long as a good faith effort is made to attribute the content! Consider turning your Stack Overflow remixes into a new work opportunity. Check out these remote web developer jobs available now."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/24/podcast-59/","date":"2009-06-23T22:00:00.000Z","tags":["Company"],"title":"Podcast #59","text":"This is the 59th episode of the StackOverflow podcast where Joel and Jeff sit down with Damien Katz (of CouchDB) to discuss non-conventional databases, non-conventional programming languages, and taking on non-conventional programming projects. Stop, do not pass go, do not collect $200: watch Damien Katz’ outstanding Rubyfringe presentation, CouchDB and Me. It is a hugely inspirational presentation for any working programmer. I can’t recommend it enough. Go watch it now! We have forgiven Damien Katz for working on Lotus Notes. Mostly. To his credit, he did write some very cool code, as documented in his famous formula engine rewrite. You can think of Damien Katz’ CouchDB project as the distilled “good stuff” from Lotus Notes. Wait! Why are you running away? Come back! It’s not that bad! We swear! Damien used Erlang to build CouchDB, largely because it makes error recovery and multiprocessing so much easier. Or as Damien says “what happens when everything goes to s**t”. In other words, networking fails, or you don’t have enough memory to complete the operation. This is stuff that is very tricky in C++, but almost trivial in Erlang. CouchDB took off when the JSON and JavaScript bindings were produced — and were a big hit. This probably says something about trying to popularize your open source project: is it accessible to the average programmer? On Damien’s journey as a software developer: “eventually you get tired of working on stuff for other people.” The negotiations with IBM included the synonyms “douchebags” and “vapid bureaucrats”. They seemed to appreciate his honesty (at least for the set of bad eggs he’s referring to), and Damien is a guy who has spent some time in the bowels of IBM and knows what he is getting into. I liked that Damien, when he reached analysis paralysis in the middle of his project, turned to the soothing, calming midwestern voice of Steve McConnell — and the classic (and my favorite) book Code Complete 2. While building up two new 1U servers for superuser.com, powering on the server with the cover off would trigger the Moro reflex in our 3 month old baby… two rooms over! That’s how loud they are. REALLY loud. I was happy to have UPS take those out of my house. I didn’t appreciate how much happier I would be with community moderation — I am unburdened from being the judge, jury, and executioner of the occasional serious misbehavior. It’s a group discussion now — thanks to our awesome community moderators, we can reach a concensus together! What does it mean for an open-source project to be version 1? Version 0.1? Version 0.5? When is it good enough to use? Should you look at commit activity; is the project alive? Or should you look at how many people are actually using the software, regardless of version number or commit activity? If you’re a developer, and wondering what specific problem CouchDB could solve for you, Damien says: “would the data you have typically be stored in a document in real life?” The classic example is a contacts database. Do you have a phobia of storing large blobs in a database? I think most hardware-oriented software developers have gone through this thought process at least once: “Hmm. I have gobs and gobs of system memory. Do I really need a swapfile on disk any more?” Don’t try to outsmart the operating system designers, unless you’re an operating system designer. And that goes triple for programmers who think they are language designers! We answered the following listener questions on this podcast: Maayan: “What is your stance about using open source software in production code, when the open source project in question is working, but is either below 1.0 or is not actively maintained?” Our favorite Stack Overflow questions this week are: Can I do transactions and locks in CouchDB? A brief discussion of how this works in CouchDB versus a typical SQL database. Any benefit or detriment from removing a pagefile on an 8GB RAM machine? short answer: no. Long answer: no. Fantastic answer by user quux, who also has an excellent sysadmin blog that we recommend checking out. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/21/stack-overflow-developer-lair/","date":"2009-06-20T22:00:00.000Z","tags":["Background"],"title":"Stack Overflow Developer Lair","text":"Remember Stack Overflow Valued Associate #00002? Me neither. Until I saw these photographs of his developer lair, that is: Never let it be said that I don’t practice what I preach — or rather, that I don’t encourage my teammates to build themselves a proper developer lair! Seen here: Two 30″ monitors and One 21″ monitor for entry into the prestigious triple monitor club A Herman Miller Mirra — someone invested in a quality programming chair Microsoft Natural 4000 — the keyboard of the gods (well, in some religions) Logitech G9 — an excellent mouse custom adjustable height keyboard podium high end custom built developer rig (8GB, quad core, velociraptor, two video cards, etc) And of course a fast internet connection. All part of the programmer’s Bill of Rights! Now, Jarrod Dixon and I have a bit of history, so there are a few other .. “objects” .. visible: Autographed picture of Val Kilmer as “Iceman” from Top Gun Mola Ram and Indiana Jones Mighty Muggs Indiana Jones Fertility Idol Bank (visible in previous photo, above monitor) Sad first generation iPhone, soon to be replaced with an awesome new iPhone 3GS. It’s hard to decide which Val Kilmer role is our favorite — Iceman, Chris Knight, Doc Holliday, Nick Rivers.. Anyway, just a bit of fun for the weekend, and maybe a little food for thought on the care and feeding of software developers."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/18/podcast-58/","date":"2009-06-17T22:00:00.000Z","tags":["Company"],"title":"Podcast #58","text":"This is the 58th episode of the StackOverflow podcast where Joel and Jeff discuss HTML encoding, designing “safe by default”, whether a question can be too simple, and the art of beta testing. Joel wonders if doing his Visual Studio development in a virtual machine is a viable solution. I say in this era of cheap 8 GB RAM and quad core CPUs, why not? As always, Naming Is Hard. We’re struggling with naming the hosted Stack Overflow that Fog Creek is working on. Joel likes the name “Stack Exchange”. It’s not bad, but we wonder if anyone listening has a better idea? I admit, finally, that Joel was right about something. Don’t HTML encode data that’s stored in your database! Take the good advice of Damien Guard and Joel Spolsky! You can choose to store both representations, but don’t store just the HTML; go with the raw data at the highest level of precision. A brief political rant about the evil of view engines that fail to HTML encode by default. The problem with this design choice is that it is not “safe by default”, which is always the wrong choice for a framework or API. Forget to encode some bit of user-entered data in one single stinking place in your web app, and you will be totally owned with XSS. Believe it. I know because it’s happened to us. Multiple times! Joel maintains that, with a strongly-typed language and the right framework, it’s possible (in theory) to completely eliminate XSS — this would require using a specific data type, a type that is your only way to send data to the browser. That data type would be validated at compile time. We continue to ramp up on our computer enthusiast site, superuser.com — we just launched a logo design contest at crowdspring. This will be as close as we ever get to an “anything goes” website, and I’m excited to see what happens. I maintain your online behavior shouldn’t be all that different than your general public behavior. I say “don’t post anything you wouldn’t want your mom to read.” Joel cites the Wall Street rule: “don’t ever write anything you wouldn’t want published on the front page of the Wall Street Journal.” Also, systems where people are able to behave as if nobody is watching are fundamentally broken systems. Joel says that the only bad simple question is a duplicate simple question. I say simple questions are OK as long as they’re actually interesting (in some way) for other users to consider and answer. To prove his point, Joel actually asks the question on Stack Overflow: How do I move the turtle in LOGO? Do you think this question adds value? Some ruminations about the challenge of asking questions when you are a total beginner and not even sure what you should be asking. Perhaps the best solution there is “screenshots”, or in code parlance: just shut up and show us the code! Beta testing is an art, and perhaps the first beta test barrier is if people can actually understand whatever the heck it is you’re trying to do. There’s often a disconnect between what beta users say (particularly gung-ho early adopters who love betas) and what typical users do. Unfortunately at the early beta, you lack the one thing you’d benefit from most: lots of usage data! The absurdity of the term “Content Management System”. It’s for, y’know, managing.. content. What does this even mean? Trying to be everything to everyone means you solve nobody’s problem particularly well. Maybe this is why Fog Creek’s hosted FogBugz is not attempting to expand thematically beyond their core business: software bug tracking. Remember that random NTP server that Joel ran into? They’re back — and they made a slightly .. uh.. disturbing .. theme song for us! Thanks! We think! We answered the following listener questions on this podcast: Joseph: “Now that you have the jobs connection up and running, how do you think that will affect the questions and answers on the site — that some future employer might see what they’re doing?” Frank: “What are your thoughts on getting beta testers (and getting good beta results) when you don’t necessarily have a super high profile project?” Our favorite Stack Overflow questions this week are: Twitter image encoding challenge. Not necessarily useful, but a really fun programming challenge. Great use of the bounty system as well! If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/16/logo-design-contest-for-superuser-com/","date":"2009-06-15T22:00:00.000Z","tags":["Community"],"title":"Logo Design Contest for superuser.com","text":"Remember our logo design contest for stackoverflow.com? And the logo design contest for serverfault.com? Well, it’s time to bust out your copies of Microsoft Paint and rev up those mad MacPaint fat bits skillz, because we just launched a logo design contest for superuser.com. You remember superuser.com — it’s the third site in the Stack Overflow trilogy, intended for power users and computer enthusiasts. If your question is about computers, it’s fair game on superuser.com. But this time, in the interests of mixing things up and keeping it fresh, we’re trying out crowdspring.com as the contest host. Also, we amped up the rewards to make sure the designers who win (or at least come close!) get something reasonable for their efforts: winner: $768 runner-up: $200 runner-up: $200 So if you have design skills, please read the contest design brief — and help us construct an awesome logo for superuser.com!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/16/the-perfect-web-spider-storm/","date":"2009-06-15T22:00:00.000Z","tags":["Background"],"title":"The Perfect Web Spider Storm","text":"We noticed something unusual on our Cacti graphs today. Can you spot it? Yes! The light gray of the graph background does seem a few shades lighter than normal! I see it too! No, no, of course I’m talking about that massive traffic spike from 06:00 to 15:00 PST (server time). In the words of The Office’s David Brent: I think there’s been a rape up there! Bandwidth isn’t usually a problem for us, as we are heavily text-oriented and go to great lengths to make sure all our text content is served up compressed. This is almost 3x our normal peak traffic level. And for what? Geoff ran a few queries in Log Parser and found that this is yet another instance of a perfect web spider storm. Here are the top 3 bandwidth consumers in the logs for that day: IP User-Agent Requests Bytes Served 72.30.78.240 Yahoo! Slurp/3.0 56,331 1,124,861,780 66.249.68.109 Googlebot/2.1 56,579 773,418,834 66.249.68.109 Mediapartners-Google 30,519 671,904,609 As I mentioned, this has happened to us before — and we’ve considered dynamically blocking excessive HTTP bandwidth use. But first we politely asked the Yahoo and Google web spider bots to play a bit nicer: We updated our robots.txt to include the Crawl-delay directive, like so: User-agent: Slurp Crawl-delay: 1 User-agent: msnbot Crawl-delay: 1 We went to Google Webmaster Tools and told Google to send no more than 2 Googlebot search engine spider requests per second. That was a week ago. Obviously, it isn’t working. Now we’ll have to do this the hard way. Fortunately, Geoff (aka Valued Stack Overflow Associate #00003) has a “spare” Cisco PIX 515E laying around that we plan to put in front of the web servers, so we can dynamically throttle the offenders. But we can’t do that for a week or so. In the meantime, since Yahoo (via Slurp!) is about 0.3% of our traffic, but insists on rudely consuming a huge chunk of our prime-time bandwidth, they’re getting IP banned and blocked. I’m a bit more sympathetic to Google, since they deliver almost 90% of our traffic, but it sure would be nice if they’d allow me to at least schedule the massive web spider storms for off-peak hours…"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/11/podcast-57/","date":"2009-06-10T22:00:00.000Z","tags":["Company"],"title":"Podcast #57","text":"This is the 57th episode of the StackOverflow podcast where Joel and Jeff discuss the relationship between speed and skill, iPhone development, and the value of programming fundamentals. Joel comments on the surprising correlation between how fast you can solve a simple problem, and your overall skill level as a programmer. This is why giving even a very experienced programmer a simple problem can still work. If you can’t truly master the fundamentals, it’s hard to work at higher levels of abstraction. We agree with Paul Graham: in general, there tends to be a correlation between the length of a response and its quality. We’ve also observed this pattern on Stack Overflow. It isn’t always true (TL;DR), but it’s a verifiable pattern. Either be the first and quickest, or be the best and most comprehensive! Due to high demand, five new cities were added to the Stack Overflow DevDays: Boston, Austin, Los Angeles, Cambridge (UK), and Amsterdam. I was quite impressed with the striking design Mike Kus put together for the Stack Overflow DevDays website. He breaks it down step by step for us. Like most programmers, I’m a terrible designer, but at least I know what’s good enough to steal! As promised, we released a creative commons data dump of all the Stack Overflow data including all questions and answers. We’re excited to see what the community can do with this data; Brent Ozar put together a data mining video to get people started. Stack Overflow has become a very popular destination for iPhone development. This is completely accidental, but it is a valid reflection of the vibrant and growing iPhone development community. If you’re an iPhone developer, check out the Mobile Orchard website and podcast, which even has a best of Stack Overflow for iPhone developers! Joel and I are tremendously impressed with Apple’s development push for the iPhone, including the App Store. It is remarkably Microsoft-like, in a good way — it’s completely driven by developers, developers, developers! “If you want to be a mobile developer, your #1 choice has to be Apple.” Some comments on the sad state of Windows Mobile (rumored Silverlight reboot), Google Wave (go HTML 5!) and the Palm Pre (is HTML/JavaScript/CSS a viable development platform)? One downside of discussing questions on the podcast is that it leads to the Hawthorne effect, and sometimes radically changes the state of the question. Joel recommends SICP, The C Programming Language, The Unix Programming Environment, and Introduction to Algorithms as solid books for programmers who want to brush up on their fundamentals and potentially do well at programming interviews. We recommend checking out Jason Calacanis’ podcast, This Week in Startups. We answered the following listener questions on this podcast: Josh Hunt: “The first answer to my question, the answer that got the highest number of votes, was not correct — has Stack Overflow failed in the ‘first answer is best’ aspect?” and “We’ve been taught algorithms in our high school using pseudocode. What do you think of this?” “If I’ve applied for a job at Fog Creek (or anywhere else) and didn’t quite make it, what can I do to improve myself as a programmer and have a better chance next time?” Our favorite Stack Overflow questions this week are: Bubble Sort Homework. Homework questions are frowned upon on Stack Overflow, but there is a right way to ask them — and a way to get the community to help you while helping each other. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/04/podcast-56/","date":"2009-06-03T22:00:00.000Z","tags":["Company"],"title":"Podcast #56","text":"This is the 56th episode of the StackOverflow podcast where Joel and Jeff sit down with Jason Calacanis to discuss the business side of software, including Mahalo’s “Skee-Ball” economy, when VC funding is appropriate, and whether SEO matters. Jason Calacanis regales us with his tales of being a BBS script kiddie on his IBM PC Jr. He later got fired from his job in the Fordham computer lab for setting up a warez partition on one of the computers in the lab. Oh, and he installed a keylogger on his boss’s computer, and sold pirated software on floppies, too. Jason was one of the earliest internet reporters on the east coast with Silicon Alley Reporter. Apparently the Q&A format — dubbed “Knowledge Exchange” — was pioneered in Korea with Naver and Daum, which Yahoo Answers copied for the US. In Korea, the primary way to get information is through users exchanging knowledge, not search algorithms. Rather than translate the app, Facebook apparently let users volunteer to translate different parts of the Facebook UI itself. Jason’s Mahalo is not localized. In Korea, the main knowledge exchange sites are all noindexed, so Google is a non-starter there. If all the newspapers in the US noindexed as a consortium, Google would be screwed. Jason is a big fan of the badge system on Stack Overflow, which he plans to add to Mahalo. This of course is modelled on the Xbox 360 Achievements system; every badge in the system is there to encourage community building (and not inadvertently community destroying) behavior. It’s a surprisingly fine line. Joel’s big objection to Mahalo is that, like the now-defunct Google Answers, it turns an intrinsic motivation for asking and answering questions into an extrinsic motivation (hey, I can get paid real money for this!) Jason maintains that money is not the primary motivator on Mahalo. He calls it a “Skee-Ball Economy”, where you are playing skee-ball for fun, and getting lots of tickets to cash out and buy fun things. It’s a “token economy”. You can’t make a lot of money, but it (theoretically) adds a secondary driver to an already fun activity. Jason equates the Stack Overflow community with an “expert economy”, akin to the open source software ecosystem. Jason mentioned that he has used nginx and hadoop mailing lists to identify people to hire and/or bring in to teach the other developers at Mahalo. My question is, why shouldn’t Mahalo also be an expert economy? Jason says “I’m not so much into creating the financial system to get something out of people, it’s more that I like to take work that was previously undercompensated or not compensated and make it into a career. I’m very proud of the fact that we [WebLogs, Inc.] were the company that made blogging into a career.” Jason famously offered the top 25 users of Digg $1,000 a month to become community managers at Netscape. And 23 of the 25 users took that offer. Joel says this is like paying for sex — applying money at the one point where most people do not have a problem getting people to contribute to a community. Jason: “I may have made a mistake”, but traffic increased, and he maintains there was already a shadow economy around paid submissions to Digg. Jason, who has a reporting background, ultimately wanted to add a layer of journalism and editorial control to the stories submitted to Digg. Even on “anything goes” vote driven sites like Digg, they do have one level of editorial control, in that stories can be “in dispute.” Joel asks Jason — with your background in VC and funding, what would you do with Stack Overflow? Would you raise money? How, why, and for what? (Which reminds me: what’s the difference between VC funding and a flaming bag of poop left on your doorstep? Trick question! There is no difference!) We now offer an integrated job board — if you’re looking for gigs, or looking for a great programmer or sysadmin, check out jobs.stackoverflow.com and jobs.serverfault.com. A brief discussion of advertising strategies and philosophies. I’m very skeptical of self-serve advertising after my experience with Google AdSense, which performs abysmally badly on Stack Overflow. Are community-driven sites like Mahalo and Stack Overflow turning users into digital sharecroppers? Is it an economic system where people are working for praise? Does splitting the revenue with the user, ala Knol and Google Answers, really work? The track record for this approach is not good. And if you optimize for things that are popular, no matter what they are, then you end up with a site where every question is the programming cartoon question. I call this “Mahalo”. In the next 6-8 weeks, we’ll be launching the third site in the Stack Overflow trilogy — superuser.com. This is a site for power users and computer enthusiasts. Is writing software “hard”? That depends on your tolerance for frustration and what you happen to be building. Jason, as a serial entrepreneur, points out that there is no downside or risk to starting a company and failing in the United States. If you have great ideas, don’t just let them marinate in your brain forever — get out there and start building them! One of my favorite Calacanis posts is Why people hate SEO … and why SMO is bullcrap. 90% of SEO is simple rules for building clean HTML. The other 10% is that SEOs are really just life coaches who need to transform their clients into something awesome that people actually care about. What you really need to optimize for is being awesome. And that’s a bit harder than pulling some SEO out of your magic bag of tricks. We answered the following listener questions on this podcast: Brian McKay: “I recently read the book Dreaming in Code. One of the concepts in the book is that software development is a very difficult profession — that software and surgery are two of the most difficult things that a person can attempt. Do you agree with this?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/04/stack-overflow-creative-commons-data-dump/","date":"2009-06-03T22:00:00.000Z","tags":["CC Wiki Dump"],"title":"Stack Overflow Creative Commons Data Dump","text":"We decided early on that all user-generated content on Stack Overflow would be under a Creative Commons license. All those great Stack Overflow questions, answers, and comments, so generously contributed by all of you, are licensed under cc-wiki (also known as cc-by-sa): cc-wiki license You are free to Share — to copy, distribute, and transmit the work to Remix — to adapt the work Under the following conditions Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work). Share Alike — If you alter, transform, or build upon this work, you may distribute the resulting work only under the same or similar license to this one. The community has selflessly provided all this content in the spirit of sharing and helping each other. In that very same spirit, we are happy to return the favor by providing a database dump of public data. We always intended to give the contributed content back to the community as a whole. Our primary concern was making sure we didn’t have an AOL-style “incident” where we accidentally release personally identifying information in so-called “sanitized” data. Stack Overflow user Greg Hewgill was kind enough to help us beta test several iterations of the data dump, ensuring that we didn’t release anything except content that is visible on the public website. He also suggested several improvements to improve the data dump, so that it contains as much useful public information as possible. Cheers, Greg! Also, thanks to Stack Overflow Valued Associate #00003, Geoff Dalgas, who patiently worked through many iterations of this to get it together on our end. All public Stack Exchange sites are now included in the data dump: including Stack Overflow, Server Fault, Super User, and so on. Locate and Download the Latest Stack Overflow Creative Commons Data Dump Note that if you republish this data, we require attribution as described in this blog post. Most importantly, there should be hyperlinks back to the original question, and the profiles of all participants. Our plan is to create a new data dump every two months, reflecting all data in the system up to that date. We will seed the latest and greatest dump (at a low bitrate) as long as we can, ideally permanently. And yes, it’s still fun to say “data dump”. We look forward to seeing what the community can do with this data! update: per this message from Cameron Parkins of Creative Commons, cc-wiki is now an alias for cc-by-sa. Hi Stack Overflow-ers, My name is Cameron Parkins – I do community outreach at Creative Commons and recently stumbled across your latest CC data dump. Very cool that you all are using CC! I wanted to give you a heads up that the license you’ve chosen, the “CC Wiki-License”, isn’t really around any more. It is in the sense that it links directly to our CC BY-SA license, but our attempt to brand it as a separate license for wikis never got off the ground. We don’t use or promote it anymore and when we see it, we try and reach out to whoever is using it to let them know. Part of the problem is that the Wiki License doesn’t carry any value, while our BY-SA license (which is what the wiki license is) has widespread community support around it. Would you all consider switching your indication as such? Let me know if you have any questions – would like to promote the project through our networks. Best, C — Cameron Parkins Cultural Program Assistant Creative Commons [aim] cam3ran [work] www.creativecommons.org [linkedin] http://www.linkedin.com/in/cameronparkins [cc newsletter] http://creativecommons.org/about/newsletter Do you love big data? There is a career waiting for you. Find the latest data scientist job listings here."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/03/jobs-at-stack-overflow/","date":"2009-06-02T22:00:00.000Z","tags":["Community"],"title":"Jobs At Stack Overflow","text":"You may have noticed we now have a small job ad in the sidebar: This takes you to jobs.stackoverflow.com or, jobs.serverfault.com. If these job boards look … familiar, there’s a reason. Since Joel and I are already in bed together (figuratively! figuratively!) it makes sense to combine our efforts in the jobs area rather than duplicate work. The last thing I wanted to do was create Yet Another Job Network. Any responsible programmer would resist this, anyway, because of Curly’s Law and DRY. I’ve always admired the Joel on Software job boards, with their integrated Joel Testtm. I’ve referred many people there over the last few years, including my previous employer. Why not combine these two great tastes that taste great together? So if you’re looking for a gig, or you know a company that’s looking for stellar programmers and/or system administrators, head on over to jobs.stackoverflow.com or jobs.serverfault.com. That said, this is just a start on the careers front. We have some more innovative things we are working on in this area that we hope to roll out in the next 6 to 8 weeks. Like, say, wouldn’t it be cool if your CV listed the stuff programmers really care about, such as your first computer …"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/06/01/new-tag-statistics/","date":"2009-05-31T22:00:00.000Z","tags":["Community"],"title":"New Tag Statistics","text":"We’ve added a new stats tab to the tag view that shows some basic statistics within the tag(s). Here’s what it looks like for /questions/tagged/iphone: The number next to the user names reflects the number of non-community wiki answer upvotes for each user. This is the same algorithm used to award the tag-based badges, so if you ever wondered how close you are to getting one of those badges, now you know! The intent here is to highlight Stack Overflow and Server Fault users who are actively contributing within specific tags, even if they don’t have giant reputation scores across the entire site. We may add some more tag-based statistics here; what do you think makes sense to show? We’re considering some sort of monthly league, but I’d prefer to see it at the tag level rather than at the site level, to highlight those new and up and coming contributors in specific domain areas. This is just the first pass; I expect us to refine and improve this feature over the next week or so."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/31/the-stack-overflow-trilogy/","date":"2009-05-30T22:00:00.000Z","tags":["Community"],"title":"The Stack Overflow Trilogy","text":"I’ve always envisioned the Stack Overflow story as a trilogy. You know, like Star Wars. The original, non-sucky Star Wars, I mean. And now that I’ve secured the third domain name, we can complete our trilogy. I think the analogy works on several levels: stackoverflow.com For programmers The first. The fondly remembered classic. A model for so many sci-fi movies that followed. serverfault.com For system administrators and desktop support professionals A darker, more serious movie. Some say the best in the series. superuser.com For computer enthusiasts and power users One word: ewoks. But also, Leia in a bikini. Still canon, but little odder than the earlier movies. In other words, things are going to get a little .. crazy .. in the finale. I was thrilled to be able to secure the domain name superuser.com from fellow geek (and dual-class photographer / sysadmin) Noah Beil. As I’ve mentioned before, naming is hard, and it’s so rare to find a name that a) I like, and b) is available. Noah had actually heard of Stack Overflow and even used it a few times to find answers to JavaScript questions; of all the offers for the domain he had gotten over the years, this was the first one he felt was a good fit. At any rate, if you wanted a community where (almost) anything goes, you’re about to get exactly what you asked for in the form of superuser.com. If your question has to do with computers, it will be allowed there. But then again, so are Ewoks. So be careful what you ask for, I guess."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/30/improved-email-notifications/","date":"2009-05-29T22:00:00.000Z","tags":["Company"],"title":"Improved Email Notifications","text":"In addition to our previous email support, we now offer question owners the ability to receive email notifications of new answers to individual questions. It’s a new option at the bottom of any question you’ve asked: Ticking this box will enable global email notifications in your account preferences, and entering an email address here is exactly the same as updating it in your profile. (This will soon be extended to the /ask page so you can opt-in at the time of asking, too.) Once checked, you will get a single daily summary email of answers to all questions where you’ve checked this box. You don’t even have to visit Stack Overflow to get answers — as long as you’re willing to wait until midnight GMT when the daily rollup email notifications are sent out. And don’t worry — as with every email we send, there is a one-click global unsubscribe if you don’t want to get any more emails from us."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/28/podcast-55/","date":"2009-05-27T22:00:00.000Z","tags":["Company"],"title":"Podcast #55","text":"This is the 55th episode of the StackOverflow podcast where Joel and Jeff discuss killer IDEs, how much interview feedback is appropriate (for both parties), and how to teach young programmers who think they know it all. Server Fault has launched! If you’re a sysadmin or IT pro type, please join us there. You may have noticed that woot! is the launch sponsor of Server Fault. These sorts of (hopefully) tasteful advertiser relationships underwrite continued development of the site — and let us do cool things like bring on Geoff Dalgas as Stack Overflow Valued Associate #00003! What does it mean to be successful as a writer online? Perhaps one metric of success is getting people you respect and admire to link to your writing in an organic, natural way (that is, without asking them to). Steve Yegge indicated he may blog anonymously or not at all in the future. We suspect that Steve’s high profile as a notable software blogger makes it difficult for him at Google, which is a notoriously secretive company. Not Apple secretive, mind you, but close. We agree that as much as Steve writes, it’s coming out of him one way or the other, but unfortunately it may be anonymous from this point on. If we can render virtual 3D worlds at 60 frames per second, why haven’t our software development IDEs evolved much beyond ASCII text for layout? How about visual comments? And Lutz Roeder wonders about Interactive Source Code (ppt). Why not have diagrams in the code, or even better, dynamic visualization of the data structures in that code? My thoughts on what it takes to build a killer IDE. I’m still waiting, by the way. An analysis of what it takes to have a vibrant add-in ecosystem, while still folding in the most popular add-ins to the core of the product, where they rightfully belong. This is a fine line to walk, particularly for commercial software. It really is amazing how many problems go away when your software is all open source. Except for the “how do we pay our employees” one. How much feedback should job interview candidates get when the interview doesn’t work out? Joel and I have an extended discussion. This is a lot trickier than it seems at first glance. At some level, perhaps you have to treat job interviews (particularly at extremely selective companies like Fog Creek) like romantic relationships — sometimes there just isn’t chemistry. Rather than over-analyze it, learn what you can, and move on to the next relationship. Don’t ask what programming language beginning programmers should learn — ask what type of programming do you want to train people to do! Do you want to teach theory, or skill? Joel’s example of the MIT curriculum of robot programming is a fantastic one: “what they care about is not the actual language. It’s not a matter of teaching you the Python, it’s teaching you to be a programmer in an environment where everything is constantly falling down around you, nothing as works as documented, even if there were documentation, and there isn’t, and if there was documentation, it was probably written by a technical writer who was afraid to go into the programmer’s offices because the last time she went in she got her head bitten off.” How to deal with headstrong know-it-all beginning programmers? Been there, done that. And by that I mean I was one, too. You have to fail. In fact, make them fail, if you can. As Joel says, they have to learn that “no code that you write can ever possibly work.” We know. Alternately, throw a copy of Code Complete at them, if they’re in a place where they can actually learn from it. Possibly one of the worst scenarios for beginning programmers is to be in a company where everyone is a beginning programmer. It does help to have some seasoned veterans in the mix, otherwise you’re basically living out Lord of the Flies — and if you don’t know who Piggy is, then it’s you. We answered the following listener questions on this podcast: “I read on Steve Yegge’s blog that he’s not going to blog any more. What are your thoughts on this?” Chris: “Can you point to a particular article or time where you realized that your blog was going somewhere?” Ohad: “Why can’t rich comment be put in source code as comments? Why not use images, document snippets, and so forth?” Our favorite Stack Overflow questions this week are: How can I teach a know-it-all beginner programmer? Many of us start out this way, sadly, so put yourself in.. er.. your own shoes. What programming language should be taught in Computer Science 101? Maybe the question is fundamentally wrong. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/27/server-fault-public-beta-launches/","date":"2009-05-26T22:00:00.000Z","tags":["Beta"],"title":"Server Fault Public Beta Launches","text":"Q: How do geeks know it’s a holiday? A: Because the Google logo changed. Yes, I said we’d launch Server Fault on the 25th, completely missing the fact that the 25th happens to be Memorial Day, a major holiday that most businesses observe, at least here in the United States. Hopefully everyone had a very pleasant Memorial Day holiday, and came back ready to crack their knuckles and get down to some serious server, networking, and desktop infrastructure business, yes? Because as of today, Server Fault is open for public beta! Tell your sysadmin and IT professional friends — come join us at serverfault.com! (and a quick thanks to our friends at woot! who sponsored the launch, too)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/21/podcast-54/","date":"2009-05-20T22:00:00.000Z","tags":["Company"],"title":"Podcast #54","text":"This is the 54th episode of the StackOverflow podcast where Joel and Jeff discuss bespoke software development, URL routing, the God Algorithm, and getting your database under version control. We need to talk to you about your flair. Specifically, your User Flair! It’s a small badge you can embed in your own website to show off your identity and “street cred”, such as it is, on Stack Overflow and Server Fault. If that’s not enough, you can also put it on a t-shirt. Or dress up like the Facebook guy. Hey man, these are your life choices, not ours! A brief discussion of how ASP.NET MVC URL routes should be declared. We do it through an custom attribute attached to the top of the method signature, which we feel provides excellent locality of information. Part of the promise of Stack Overflow was that it would be run by the community. We are trying to continue delivering on that promise by electing new community moderators, and having a moderation policy that all the moderators (including the core team) abide by. Speaking of Stack Overflow DevDays, “the” Jon Skeet is confirmed to be a speaker at the London DevDays; Scott Hanselman will be at the Seattle and San Francisco DevDays. We now have better, AJAX-y support for handling duplicate questions. We believe duplicate mapping is mostly a human-driven task, but we want to streamline the workflow as much as possible. Part of our development style on Stack Overflow is to build features as they become needed, rather than coding speculatively, trying to guess what will become important later. Our UserVoice site has been very helpful in this regard, as we try mightily to retire the top rated user feature requests and bugs. Well, the ones we agree with, anyway.. How do you bid on software development projects without cutting corners and still stay competitive? Joel shares his thoughts. “Your job is not to deliver a spec, it’s to step into the client’s shoes and figure out what their problem is, and how it can be solved with computers.” I maintain this is the blessing and curse of contract software development — you are a proxy employee during the contract. This can be good, if it’s a client you like and have empathy with, or it can be bad, if it’s a client that you don’t respect, or that you have absolutely nothing in common with. Would you work for that company? On the topic of bespoke software, Joel recommends the oddly named book How to Castrate a Bull: Unexpected Lessons on Risk, Growth, and Success in Business. Consider selling coffee makers to a hotel — hotels don’t really want a bunch of coffee machines (even if that’s what they ask for), they want a system that guarantees they never have to think about coffee makers in their rooms again. This is what it means to be “enterprisey”. This is what big consulting firms do. If you’re worried about backdoors in your code, first, don’t work with scumbags. But if you work at an industry where there is a lot of risk, such as banking, then you need an audit trail on everything, and perhaps an internal audit department that does nothing other than check things periodically. A certain percentage of random auditing may be preferable to strict gates on every action. A discussion of O(1), which sort of seems like “The God Algorithm” at first glance. But you do have to define how ‘big’ that 1 is. There are dimensions of space and time here that aren’t immediately apparent. One quirk of keeping your database under version control is that you have to make a distinction between the schema, the data, and the fixed data. At the very least, have tools that let you diff your database! And ideally integrate with your build and deployment. Have you looked at the Rails way of handling database changes, with Migrations? Thanks to our podcast sponsor, Mint — they’re looking for a great developer! We answered the following listener questions on this podcast: “Is it true that the more the complex the software system is, the simpler it is to manage, because there are more rules defining its behavior?” “How do you win software development contracts, while still delivering quality?” Based on an existing question. “How do you deal with a large codebase, and disgruntled employees leaving backdoors in the code?” Our favorite Stack Overflow questions this week are: Do you source control your databases? The answer is always yes! Yes! YES What’s Up with O(1)? Worth some thought. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/21/welcome-stack-overflow-valued-associate-00003/","date":"2009-05-20T22:00:00.000Z","tags":["Background"],"title":"Welcome Stack Overflow Valued Associate #00003","text":"I am pleased to announce that Stack Overflow just added another team member in an officially paid capacity: Geoff Dalgas. Geoff and I met on a customer site in 1996. Here was this crazy kid, in charge of all the computer stuff at a government facility, who knew more about the computers and custom software we were installing than we did! He was incredibly enthusiastic, heck, maybe a little too enthusiastic. I recognized a kindred spirit — another budding programmer who loved to code — and I urged the powers that be to offer him a job. He accepted, and I worked with Mr. Dalgas for the next three years in the best and worst (OK, usually the worst) of conditions. Sorry pal. It was a riot building a tiny but crack coding team with Geoff, and I’m incredibly fortunate he’s available and willing to go down that route with me again on Stack Overflow. Geoff knows me very well by now. His original email response to me? … other than that I am here, ready, and willing to be used and abused. I say let the abuse commence in full. He’s used to it, since we used to write all our code in Visual Basic anyway. Geoff joins Stack Overflow Valued Associate #00002, Jarrod Dixon. Some complained that the pictures we use to introduce our Valued Stack Overflow Associates, which were taken on our trip last year to meet Fog Creek in NYC, are too geeky. Too geeky? What the hell does that mean? Here on the Stack Overflow team, we embrace and relish our geekiness as a badge of honor. As I’ve mentioned before, our goal is for Stack Overflow to be a modest but self-sustaining business. Something that provides a living for a few of your fellow programmers while hopefully, in some small way, improving the world just a little. Bringing Geoff on as Stack Overflow Valued Associate #00003, there to work daily on the site alongside Jarrod and myself, is another important milestone toward this goal. I hope you’ll agree that we have tasteful and relatively unobtrusive advertising to subsidize and underwrite the development of Stack Overflow and now Server Fault as well. Our team now consists of three programmers (well, two good programmers, once you exclude me) and that means the pace of work on the site can accelerate even further. We will continue to satisfy top rated UserVoice requests, of course, but now we can work on larger features that may expand the scope of the sites. Who knows? Maybe there’s a third site out there waiting to be launched. (also, not to be be crass, but if you’re interested in advertising on Stack Overflow, or Server Fault, do drop us an email. Help feed your fellow programmers!) I never thought I’d have the great privilege of hand-picking highly talented fellow programmers from previous jobs — who also happen to be my good friends — to work with me on a project. And not just any project, but one that involves the entire programming community. Stack Overflow is something we can all contribute to together, a site that helps lots of programmers become better at what they do, if only a little bit. I’ve always loved my job, because I love programming. Every day we realize this is a dream job, we love the hell out of it, and we’ll happily do it as long as we can — alongside the rest of our fellow programmers. I say, let your geek flag fly!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/20/linking-duplicate-questions/","date":"2009-05-19T22:00:00.000Z","tags":["Community"],"title":"Linking Duplicate Questions","text":"Today’s update completes another top-rated UserVoice request — making it easier to explicitly link duplicate questions together. There are lots of small improvements that go with this build. We now show the current close vote count in the close menu, so you have some idea why the other 3k+ rep users think this question should be closed: Remember, it takes 5 close votes from 3,000+ reputation users to close a question, but they don’t all have to agree on the reason. (The reason with the most votes, however, will be shown when the question is finally closed. Yes yes, I know, you’re programmers so you are immediately wondering what happens if all five votes are for five different reasons. Stop that right now!) If you select “exact duplicate” as a reason, you’ll get a dynamic as-you-type question duplicate lookup. You can match on any word in the title, or the actual question id number here. If the question reaches the 5 vote close threshold, and has enough duplicate votes, it will be closed with the reason of “exact duplicate”, as before. But now a revision will be automatically edited into the post, summarizing the voted duplicate questions at the top: We tried to look at the existing way the community was dealing with duplicate questions and streamline it into as few steps as possible. Remember, in some cases we may want duplicate questions to stick around … There’s often benefit to having multiple subtle variants of a question around, as people tend to ask and search using completely different words, and the better our coverage, the better odds our fellow programmers can find the answer they’re looking for. … but if not, feel free to flag for moderator attention any closed duplicates you think should be merged. If the moderator agrees, he or she can merge the duplicates together without any loss of answers or comments."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/19/welcome-new-community-moderators/","date":"2009-05-18T22:00:00.000Z","tags":["Community"],"title":"Welcome New Community Moderators","text":"The Stack Overflow moderator election is now complete. There were two users who clearly ran away from the pack in the voting: Marc Gravell and Bill the Lizard. Between the two of them, they accounted for almost a third of all the 2,880 votes cast. It was a tough choice determining such a close race — so we didn’t! Both Bill and Marc are new Stack Overflow moderators. I’ve posted some moderation guidelines and flipped the switch on their accounts. As for Server Fault, that was tougher, because the community is just starting out. None of the existing Stack Overflow team is really qualified to moderate a site intended for system administrators and IT professionals. So we reached out to two members of the existing community who very generously volunteered their time to moderate: Kara Marfia and Denny Cherry. Eventually, once the Server Fault community matures, I expect to hold a moderator election there as well to bring another one or two online. (One thing we haven’t addressed is how long a community moderator should be “elected” for; it seems like a good idea to hold periodic elections and let other trusted members of the community both relieve the existing moderators, and bring a fresh perspective to the mix.) At any rate, congratulations to Marc, Bill, Kara, and Denny. As always, please use your new powers for good and not evil! Unless someone really, really deserves it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/18/a-theory-of-moderation/","date":"2009-05-17T22:00:00.000Z","tags":["Community"],"title":"A Theory of Moderation","text":"We believe deeply in community moderation. That’s why we appoint Pro Tempore Moderators and, ideally, democratically elected community moderators for every site in our network. But what do community moderators do? The short answer is, as little as possible! From the very first version of Stack Overflow faq way back in mid-2008, our goal has always been to give power back to the community: Stack Overflow is run by you! If you want to help us run Stack Overflow, you’ll need reputation first. Reputation is a (very) rough measurement of how much the Stack Overflow community trusts you. Reputation is never given, it is earned by convincing other Stack Overflow users that you know what you’re talking about. We designed the Stack Exchange network engine to be mostly self-regulating, in that we amortize the overall moderation cost of the system across thousands of teeny-tiny slices of effort contributed by regular, everyday users. Specifically, per the reputation privileges: Users with 15 rep can flag posts. Users with 500 rep can review posts from new users. Users with 2,000 rep can edit any question or answer in the system. Users with 3,000 rep can cast close and open votes. Users with 10,000 rep can cast delete and undelete votes on questions, and have access to a moderation dashboard. Users with 15,000 rep can protect posts. Users with 20,000 rep can cast delete votes on negatively voted answers. Even with active community self-regulation, moderators occasionally need to intervene. Moderators are human exception handlers, there to deal with those (hopefully rare) exceptional conditions that should not normally happen, but when they do, they can bring your entire community to a screaming halt — if you don’t have human exception handling in place. The most common moderator task is to follow up on flagged posts. Every post contains a small flag link, which anyone with 15 reputation can use. Posts can be flagged as spam, offensive, or just general “needs moderator attention” with an explanatory comment or link. Once flagged, a post increments a flag count that shows up in the topbar for every moderator. If you see anything in the system that is evil, weird, or in any way exceptional and deserving of moderator attention for any reason… flag it! That’s the primary job of a moderator: to look at every flagged post, and take action if necessary. Moderators also have some special abilities necessary to handle those rare exceptional conditions: Moderator votes are binding. Any place we have voting — close, open, delete, undelete, offensive, migration, etc — that vote will reach the threshold and take effect immediately if a single moderator casts a vote. Moderators can lock posts. Locked posts cannot be voted on or changed in any way. Moderators can protect questions. Protected questions only allow answers by users with more than 10 reputation. Moderators can see more data in the system, including vote statistics (but not ‘who voted for this post’) and user profile information. Moderators can place users in timed suspension, and delete users if necessary. Moderators can perform large-scale maintenance actions such as merging questions and tags, tag synonym approvals, and so forth. So in summary, if you are a community moderator on a Stack Exchange site, here’s what to expect: As a moderator, your actions now represent the community, so you will be held to a higher standard of behavior. You are an ambassador of trust, with the same sorts of rights that the official development team and community coordinators have. Your goal is to guide the community with gentle — but firm — intervention. Respect your fellow community members at all times; demonstrate fairness and impartiality in your actions. Whenever possible, try to leave frequent comments on posts where you’ve taken (or considered taking) a moderator action, explaining the reasoning. This is important so that community members can learn the norms of the community and the moderation policies. Keep the site reasonably on topic by closing, migrating, or removing blatantly off-topic questions. Regularly check for flagged posts, and decide if further action is warranted. In the case of serious disputes, communicate directly with users via email to help mediate and resolve those disputes. While being a community moderator is a volunteer (but often elected) position, and participation is strictly voluntary at all times, we do require three important things of all elected community moderators. You must accept the community moderator agreement within 30 days of election or appointment and remain active on the site. You must stay in communication with your fellow moderators and work with them to resolve any disagreements within the team. There is a process in place for a team to remove moderators who are unable or unwilling to cooperate. On Stack Overflow, due to its immense size and scale, there is another requirement. If you spend time on the site participating but aren’t regularly resolving flags, you may cede your right to remain a community moderator. A lot of the moderation work is extremely mundane, almost janitorial. It’s deleting obvious spam, closing blatantly off-topic questions, and culling some of the worst rated posts in various dimensions. The ideal moderator does as little as possible. But those little actions may be powerful and highly concentrated. Judiciously limiting your use of moderator powers to selectively prune and guide the community — now that’s the true art of moderation."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/17/server-fault-public-beta-nears/","date":"2009-05-16T22:00:00.000Z","tags":["Community"],"title":"Server Fault Public Beta Nears","text":"The Server Fault private beta is going well; it looks like the Server Fault public beta will begin May 25th. It’s been challenging to find the right community for Server Fault, which is intended for IT professionals and System Administrators. Launching Stack Overflow, a site for programmers, was much easier in comparison, because Joel Spolsky and I are highly attuned to the programming community. Building the right community is important, because good answers (and good questions) depend on the quality of the community that forms around the site. That’s not to say I have been disappointed with our “I wear both programmer and sysadmin hats” crossover community; my questions on Server Fault have gotten excellent answers! But we can do better. I am making some tentative efforts to reach out to the sysadmin and IT pro communities. For example, I recently recorded a RunAs Radio podcast with Richard Campbell and Greg Hughes. Richard and Greg talk to Jeff Atwood of Stack Overflow fame about being a developer who also maintains infrastructure. Jeff also talks about his new site, Server Fault, which is a Question and Answer site for the IT Professional. Great discussions about adventures in RAID controllers and NIC drivers and how FireBug can diagnose your network problems. You can listen to the podcast in mp3 or wma formats. I try to explain why I’m excited about the Server Fault community for completely selfish reasons — I have just as many sysadmin and server questions as programming questions! I was encouraged to see that we are attracting some fairly heavyweight members of the sysadmin community; Thomas A. Limoncelli is a Server Fault user, and he’s the author of several notable system administration books including this most excellent compilation of April Fools’ Day RFCs. Tom (justly) noted our ignorance of the sysadmin community, and pointed out a few sites that Server Fault should probably be partnering with in some way, such as www.sage.org and www.lopsa.org. I need your help in building the Server Fault community, not because I’m a shameless self-promoter, but because I am a crappy sysadmin! Yes, yes, I’m a crappy programmer, too, but at least I have enough programming ability to know how much I suck at programming. I can’t say that about being a sysadmin. As of right now, I am removing the restriction that Server Fault OpenIDs must be in a permit list. You’ll still need the site level password … alt.sysadmin.recovery … but anyone who has a valid OpenID, and knows the above password, can participate in the Server Fault beta now. Do you know of any notable sysadmin or IT professional communities? Please help us spread the word, as appropriate."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/15/nowearn-valuable-flair/","date":"2009-05-14T22:00:00.000Z","tags":["Community"],"title":"Now Earn Valuable Flair!","text":"You know what you need? Besides a haircut, I mean? More flair. STAN I need to talk about your flair. JOANNA Really? I have 15 buttons on. I, uh, (shows him) STAN Well, ok, 15 is minimum, ok? JOANNA Ok. STAN Now, it’s up to you whether or not you want to just do the bare minimum. Well, like Brian, for example, has 37 pieces of flair. And a terrific smile. JOANNA Ok. Ok, you want me to wear more? STAN Look. Joanna. JOANNA Yeah. STAN People can get a cheeseburger anywhere, ok? They come to Chotchkie’s for the atmosphere and the attitude. That’s what the flair’s about. It’s about fun. As requested on UserVoice, you can now embed a valuable bit of Stack Overflow (or Server Fault) flair on your own website. Like so: This links directly back to your user page, because Stack Overflow is you. Yes you! Well, OK, it’s also a thinly-veiled scheme to get a bunch of people to link back to our website. You got us on that one. We were inspired by Stack Overflow user Steve Robbins, who didn’t just wait around for us to build this, but built it himself. This is a fine example of how good programmers get off their butts and get things done! Kudos to Steve, for filling the gap until we finally had time to get around to building our own implementation. I’m sure we’ll be doing some tweaking to the Flair over the next few days — but in the meantime visit the Stack Overflow User Flair page to get the full details. And remember: 15 pieces of flair is the minimum."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/14/podcast-53/","date":"2009-05-13T22:00:00.000Z","tags":["Company"],"title":"Podcast #53","text":"This is the 53rd episode of the StackOverflow podcast where Joel and Jeff sit down with Wil Shipley of Delicious Monster to discuss the shifting sands of Apple and Microsoft APIs, the value of software development conferences, intuition versus empiricism for developers, and “parrot programming”. Like all the coolest developers, Wil wrote a web browser. And he’s not shy about mentioning it! Wil and Joel reminisce about NeXT computers, Steve Jobs’ gig after he was unceremoniously ousted from Apple by John Sculley. Wil wrote a lot of Objective C for NeXT before it was popularized on the Mac. We complain about the fact that Microsoft seems to release a new framework every other year that seems to obsolete the previous framework, as famously documented in Joel’s article How Microsoft Lost the API War. Joel announces Stack Overflow Developer Days, in the platform agnostic spirit of the site. Five cities, a great set of speakers from many different disciplines, one day, $99. And yes, we’re trying to get Wil Shipley to speak at the San Francisco leg. Wil has some fantastic advice for software entrepreneurs — witness his presentation How to Succeed Writing Mac Software (pdf). It motivated at least one developer to enter the priesthood. Some thoughts on the utility of conferences for software developers. You should probably try to go to one conference per year, either because you’re interested in the speakers, or you’re interested in networking with other programmers. Beyond that, the benefits are unclear. Wil notes that WWDC is a unique opportunity to get a lot of your detailed Mac programming questions answered by the people who wrote the APIs. Remember, one of the biggest reason to attend these conference is to hang out in the hallways with your fellow developers! I don’t think the legendary Apple secrecy is a good strategy for a developer platform. Witness the absurdity of the iPhone developer NDA. On the other hand, all those developers who learned about WinFS at Microsoft conferences from 2005 to 2007 must be a little cheesed that the feature never shipped. So it is possible to talk about stuff too early. Wil Shipley is also agnostic about unit testing: Unit Testing is Teh Suck, Urr. Isn’t using programs to test programs a case of “who watches the watchmen”? Also, is every bug ultimately worth fixing? Is excessive reliance on unit testing a case of Empiricists versus Intuitionists, as dramatized in the book The Intuitionist? As you get more years of programming experience under your belt, you could argue that you have a (slightly) better “spider sense” of what the problem areas may possibly be in your code. Ideally you should use both empiricism and intuition, of course. Nobody programs using the force. Well, except for Knuth. Even a programmer as experienced as Wil occasionally runs afoul of the First Rule of Programming: It’s Always Your Fault. His anecdote involves writing an email to a VP at Apple, though. Humility is often the best approach; “I think I’m doing something wrong here, can you help me figure this out?” Joel says no question is too simple for Stack Overflow, and we discourage people from responding with RTFM or “too trivial to even ask”. These questions may be simple, but think about each question in terms of future programmers who might encounter this question; is it relevant enough to the world to help them, and not just the one guy or gal with that one ultra-narrow question? If so, then it’s worth asking. Joel calls it page faulting in knowledge. Wil calls it “parrot programming”: newbie programmers who don’t really understand what they’re doing, but occasionally get a search result cracker, so that particular programming behavior is rewarded and reinforced. This is why we encourage neophyte programmers to buy a few key programming books, so they can underpin their giant heap of randomly page faulted knowledge with deeper principles and concepts. We answered the following listener questions on this podcast: Kris: “What are your thoughts on the value of attending conferences?” Clay: “As you become a more experienced programmer, do you use more intuition as a part of your decision making?” Our favorite Stack Overflow questions this week are: Objective-C: what does @private mean? Is this question too simple to be asked? If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/12/stack-overflow-developer-days-conference/","date":"2009-05-11T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Developer Days Conference","text":"Joel mentioned this in passing on one of the podcasts, but I didn’t want to steal his thunder, so I’ll let him explain: We decided to launch a series of Stack Overflow events: the first gathering of the tribe of great developers making Stack Overflow so successful that over 90% of questions get answered. It’s going to be in October, in five separate cities. October 19 San Francisco October 21 Seattle October 23 Toronto October 26 Washington, DC October 28 London In each city, we’re planning a one-day event. We decided to cram as many diverse topics as possible into a single day event. Like a tasting menu at a great restaurant, we’ll line up six great speakers in each city. This is not going to be just a Java conference or a .NET conference or a Ruby conference. This will be completely ecumenical. We’ll have somebody to introduce Microsoft’s new web framework, ASP.NET MVC, but we’ll also get someone to talk about writing code for Google’s new mobile operating system, Android. And in each city, we’ll find one local computer science professor or graduate student to tell us about something new and interesting in academia. For smart programmers who are interested in learning about something a little bit outside of their own immediate field, this is the conference for you. We’re doing it in the spirit of Byte Magazine. Remember Byte? Every issue covered a wide range of topics and technologies. Sadly, Byte disappeared, to be replaced by Mac-only magazines, IBM-PC only magazines, even Microsoft SQL Server-only magazines. The conference is for programmers. The conversation is going to be hard core. Speakers are going to be writing code. And it’s only $99! With a limited # of student tickets for $10! Interested? Sign up for Stack Overflow DevDays. Better yet … participate! We need volunteers in each city. If you live in one of these five cities, and would be able to help check tickets and just generally be useful during the conference, please email devdays@stackoverflow.com. We need sponsors for the meals and breaks. If your company would like to be a sponsor, please email devdays@stackoverflow.com. This is a great way to recruit superstar programmers: sponsors will have the opportunity to set up recruiting booths at the conference. If you listen to the podcast at all, you have got to be sick of hearing myself and Joel ramble on by now. Save yourself, better yet, save everyone — help us pick interesting speakers! Who would you like to see speak in each city? Recommend someone! (and yes, we are trying to get Wil Shipley from this week’s podcast to participate at the San Francisco event.) I’m not supposed to say this out loud, but if those cities sell out, a little bird told me that more cities might be added to the calendar.. so pretend I didn’t just say that. Because I didn’t. Nope. Not me."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/07/interesting-and-ignored-tags-now-support-wildcards/","date":"2009-05-06T22:00:00.000Z","tags":["Community"],"title":"Interesting and Ignored Tags Now Support Wildcards","text":"Today’s new feature will be useful for those of you who happen to have a lot of ignored and/or interesting tags. You can now use the asterisk to set up wildcard matches, rather than having to laboriously construct a list of every single tag as before. This was a fairly highly voted request on UserVoice, too. Simply specify one or more asterisks to match any number of characters, either in the middle, the beginning, or the end of a tag. So all these should work as you might expect: *.net* jquery* *c++ While building this, we realized it would be super-duper mega convenient if we could use a regular expression as a JQuery selector. We did a quick web search and ended up on this Stack Overflow question, which was, ironically enough, the top Google search result for our search terms. Not the first time this has happened to us, but still pretty cool. We built a thing that .. helps us build the thing. Unfortunately, the solution proposed there, JQuery filters, while cool and useful, wasn’t a good fit for our code. So we did some more searching and discovered James Padolsey’s most excellent Regex Selector for jQuery. While there, we noticed that James links to Stack Overflow on his blog under the “Got a problem?” section, and the front page of his blog features another Stack Overflow question. A recent question on Stack Overflow posed a common question concerning DOM insertion and specifically the dire performance of IE6 when using innerHTML to parse a large amount of HTML markup. Head over there to read the question for yourself. I thought it worth sharing my solution; So, naturally, we edited the accepted answer (no offense, Xenph, but the whole “see official documentation” wasn’t a great answer) to include a reference to James’ regex selection filter which we felt best answered the original asker’s question. Thus, in a beautiful kind of synchronicity, we used Stack Overflow to build Stack Overflow, while simultaneously constructing a web of improved links for future programmers to help find their way. I don’t know why, but I personally find that immensely gratifying. Oh yes, and enjoy the new wildcard tag matching feature."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/07/podcast-52/","date":"2009-05-06T22:00:00.000Z","tags":["Company"],"title":"Podcast #52","text":"This is the 52nd episode of the StackOverflow podcast — our one year anniversary — where Joel and Jeff discuss the launch of Server Fault, how you determine if your code is smelly (or just aromatic), how programmers learn by doing, and how good ideas are often too crazy to copy until it’s too late. We’ve been podcasting for one full year now. Hopefully we’ve gotten better at this podcast stuff and not worse, but the jury is still out. Server Fault, the first sister site to Stack Overflow, is now in private beta. Server Fault is for system administrators and IT professionals. If that’s you, come join us! We’ve only done one major branch in Stack Overflow to date, and it was excruciatingly painful in Subversion, even after updating to 1.6 which has “better” support for merging. We’re considering switching to Mercurial to make future merges feel a bit less like gnawing our own limbs off. Joel announces that Fog Creek is working on a hosted version of Stack Overflow, and they are looking to hire a software engineer to work on the project. If it works out, you get the whole Fog Creek relocation package! If you’ve ever wanted to work on the Stack Overflow codebase (and you’re looking for a full time gig) this is your chance! The prospect of an outside developer looking at our Stack Overflow code base makes us nervous. Maybe this is a healthy reaction — is any code ever good enough? Probably not. We do believe in continuous refactoring, and part of that is developing free from fear. Don’t be afraid to break stuff! Have some unit tests, and when things do break, be able to fix it very rapidly. Test Driven Development is possibly the worst and most incorrect name ever applied to a concept in software engineering, ever. And that’s saying a lot. TDD is more about design than testing, but when every TDD tutorial starts with “ok, we write a test to verify..” it’s sort of hard to justify. Perhaps Behavior Driven Development would be a better name. TDD, as far as testing is concerned may be a bit too programmatic. Never underestimate the power of a skilled human tester. We learned ASP.NET MVC as we went. This is a surprisingly common pattern; Joel can’t ever remember a time when he wasn’t building a new application in a new framework. Programming is, almost by definition, continuously learning: your entire career will be one long, unbroken string of learning one new bit of technology after another. Programming is shorthand for learning how to learn. Joel asks: as a professional programmer, how often do you start a new major project that’s going to have a long life expectancy? It’s startlingly rare. Even at Fog Creek they’ve had maybe four in the entire time the company has existed. So when you start a new project, you almost have to bet on the new framework that you think will be vibrant and alive five years from now — that means you’ll be learning as you go, again! There is a double whammy of learning the framework and a language at the same time though — that’s extra-risky. A brief discussion of why unconfirmed “no-touch” user actions are so dangerous on the web; they are a XSRF playground! If the user holds a cookie to your site, and an attacker can get them to click on a GET or POST, they have just forced the user to take that action. We added an interstitial confirmation to a few actions to prevent this; the particular case that was extremely dangerous was associating a new OpenID provider in one click. If that OpenID provider was rogue and controlled by the attacker, they now own the account. Joel notes that if you’re shy about putting things online, you are letting other people control your online identity — and that will hurt you much more in the long run than any potentially questionable things you might possibly put online. One of the goals of creating Stack Overflow was as a vehicle to build your online identity as a professional programmer, a virtual set of bread crumbs showing that you indeed know your stuff, and your programming peers recognize you for your knowledge. Joel gave a speech about Stack Overflow at Google recently. What question did Guido van Rossum, the creator of Python, ask? A brief mention of stackoverflowoverflow … overflow. By the time anyone tries to copy an iPod, Apple is already a generation ahead. Continual innovation and evolution is always the best approach to defeat those who would blindly copy what you’re doing, and that goes double for software which is infinitely malleable. If your software isn’t continually evolving, it is effectively dead! Good ideas sound too crazy for anyone to even consider copying them. The type of people who copy are not interested in anything that remotely resembles risk; they are only going to copy proven successes. So if you’re starting out with a new crazy idea (and you should be!), this is unlikely to be a practical concern. Joel’s computer has apparently been taken over by a Mexican wrestler named Gordo. I have no idea. We answered the following listener questions on this podcast: Paul: “I’ve seen some companies do background checks online with MySpace, Facebook, Twitter, etcetera. Should developers be concerned about old, embarrassing code being posted online?” Tom: “As a startup entrepreneur, what steps should you take, if any, to protect your intellectual property?” Our favorite Stack Overflow questions this week are: None! Every single Server Fault question I’ve asked is my favorite this week! I’ve had all these sysadmin and IT pro questions welling up inside me for months, and it was so intensely satisfying to finally be able to ask them and get really great answers. Please join us in the beta! If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/06/stack-overflow-moderator-voting-now-open/","date":"2009-05-05T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Moderator Voting Now Open","text":"As mentioned on March 20th, we are looking for a new Stack Overflow moderator to be chosen by the Stack Overflow community itself. I walked through the first 30 comments to that post and gathered up the nominations (except the self-nominations and those who recused themselves), and voting is now open: http://stackoverflow.com/users/vote-moderator To be eligible to vote, you must be a Stack Overflow user with 200 reputation. The list of candidates is shown in random order every time it is presented. Only one vote can be cast per user. (no, it can’t be undone.) After a week, the candidate with the most votes will be elected the new Stack Overflow moderator. For those users who don’t follow the blog, we are planning to send out a user alert (similar to the badge award alerts) tomorrow to let them know the voting page is available. Remember, we’re looking for a good moderator; someone who is above all patient and fair leads by example shows respect for their fellow programmers in their actions and words I suggest examining the candidates’ user pages to get a sense of what kind of moderator they might make. I cast my vote; have you cast yours?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/05/02/joel-talks-about-stack-overflow-at-google/","date":"2009-05-01T22:00:00.000Z","tags":["Background"],"title":"Joel Talks About Stack Overflow at Google","text":"On April 24th, Joel Spolsky gave a talk at Google on Stack Overflow. The talk was recorded and is available for viewing on YouTube. The talk highlights how, from the very beginning, we designed Stack Overflow to be a destination page for web search. We explicitly optimize for “drive-by” programmers who type a problem into a search engine; we’re not big on social features, and we don’t demand that users create an account and hang out on the site. Most of all, it’s about the information — solid answers to useful programming questions!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/30/googles-openids-are-unique-per-domain/","date":"2009-04-29T22:00:00.000Z","tags":["Beta"],"title":"Google’s OpenIDs are Unique Per-Domain","text":"If you’ve been trying to log in to the serverfault.com private beta and haven’t been able to, here’s probably why: You use Google’s (otherwise excellent) OpenID support on Stack Overflow. As we just discovered, Google’s OpenIDs are unique per-domain. Thus, the OpenID string key “fingerprint” that we use to identify you on Stack Overflow is not the same as the OpenID string key that Google returns for Server Fault. Until we come up with a better workaround, what we recommend is adding an alternate Stack Overflow OpenID from myopenid or another service where the OpenID URL is stable. For example, one of my OpenID accounts is codinghorror.myopenid.com which works fine in both places. It’s easy to add an alternate OpenID, just make sure you’re logged into your Stack Overflow account, first, then click the “New Login” link as described here. (this strange behavior is documented by Google as well.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/30/server-fault-private-beta-begins/","date":"2009-04-29T22:00:00.000Z","tags":["Beta"],"title":"Server Fault Private Beta begins","text":"We’re launching the Server Fault private beta tonight. What is Server Fault? Server Fault is for system administrators and IT professionals, people who manage or maintain computers in a professional capacity. If you are in charge of … servers networks many desktop PCs (other than your own) … then you’re in the right place to ask your question! Well, as long as the question is about your servers, your networks, or your desktops, anyway. In other words, it is exactly like Stack Overflow, but instead of being a community for programmers, it’s a community for sysadmins and IT pros. We are seeding the beta with programmers who also happen to be sysadmins. The private beta is open to any interested Stack Overflow users with reputation scores of 100 or higher; to get started, simply go to serverfault.com and provide this password: alt.sysadmin.recovery Yes, this is a reference to the alt.sysadmin.recovery FAQ, which is absolutely hilarious. Once you’ve entered the password, log in normally using your existing OpenID. As a Stack Overflow user in good standing, you will get a few Server Fault new account perks: all your user information will be transferred over automatically, and an initial reputation bonus of 101 points added. (note that if you use Google OpenID exclusively, there may be an issue with the OpenID string that is returned for a different domain, so please try our workaround.) For feedback purposes, we have also set up a Server Fault uservoice site, and a Server Fault team email address. Just like on Stack Overflow, these are both linked from the bottom of every page on the site. If you’d like to be a part of the Server Fault beta, but do not have a Stack Overflow account with 100 or more rep, then do this: Sign up for an OpenID if you do not have one already; we continue to recommend myopenid. Send a request to team@serverfault.com with your OpenID URL. Once we have your OpenID we’ll add it to the beta list and you’ll be able to log in, but you will not get the reputation bonus that existing Stack Overflow users get. (Note that requests without an OpenID URL will not be honored, so please make sure you have an OpenID URL before requesting access!) We don’t expect major problems since the site is based on the now-mature Stack Overflow codebase — but if you do encounter beta issues, please let us know via the Server Fault uservoice site linked on the bottom of every page! The private beta should run for about 1 to 2 weeks. Have fun, and feel free to forward this private beta information to any sysadmins or IT pros you think might be interested; everyone is welcome!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/29/handling-duplicate-questions/","date":"2009-04-28T22:00:00.000Z","tags":["Community"],"title":"Handling Duplicate Questions","text":"As we get more and more questions in Stack Overflow, the issue of duplicate questions becomes more pressing. The odds of any question being a duplicate, however small, increases with the total number of questions in the system. So it’s worth considering: what makes a question an exact duplicate? As I see it, there are three classes of duplicate questions, from most clear to least clear. Cut-and-paste duplicate questions. These questions are the very definition of exact duplicates; they are typically from users who willfully take the very same question and post it again. Either they’re not satisfied with the speed of answer, or they just don’t know what they’re doing. We rely on Stack Overflow users to vote down these “questions” and flag them for moderator attention. These sorts of duplicates are typically deleted as soon as we see them, as they’re borderline abuse of the system. They often don’t get answers, so this is fairly easy to deal with. No grey area here. Accidental duplicates. These questions aren’t copy and paste, but they cover the exact same ground as an earlier Stack Overflow question. The overlap is not ambiguous; the question uses the same words and asks the same fundamental question, with no variation at all. This is a failing on several levels; of the asker to do proper diligence before asking, of our internal ask page title search, and possibly of Google search as well. We rely on Stack Overflow users to link these questions together by closing them as “exact duplicate” and posting the URL (as a comment, or edit) to the question this is a duplicate of. These sometimes have multiple good answers attached to each question. We will use our new moderator question merge function to merge them together without losing any answers or comments. Borderline duplicates. These questions are ambiguous; they’re in the same ballpark as a previous question, but have subtle differences that may make them legitimately standalone questions. These are subject to interpretation. We rely on Stack Overflow users to tag these questions appropriately so they naturally “group” with the questions they’re related to. The more tags the questions have in common, the more likely they are to show up together on the related questions sidebar. You can also edit in links to the possibly duplicated posts, if appropriate, but be sure to make the tags match so the system can figure out the relationship without as much manual effort. There’s often benefit to having multiple subtle variants of a question around, as people tend to ask and search using completely different words, and the better our coverage, the better odds our fellow programmers can find the answer they’re looking for. The impending launch of the serverfault.com private beta has interrupted work on this slightly, but better handling of accidental duplicate questions is currently very high on our priority list. We’d like to streamline this so it’s easier, with a friendly UI. (If you have ideas about what UI makes sense in this scenario, we’d love to hear it.) That said, we have implemented a moderator level function to merge duplicate questions — so if we determine two questions are accidental duplicates, we can merge them together without losing anything except the text of one of the questions; all comments and answers are preserved. Thanks to everyone who helps us find and eliminate duplicate questions. We appreciate it, as do future visitors who hopefully will be able to find their answers a bit faster without excessive duplicate questions cluttering up the system. As you have time, please keep doing what I have highlighted in red, above, to help keep duplication in check!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/29/podcast-51/","date":"2009-04-28T22:00:00.000Z","tags":["Company"],"title":"Podcast #51","text":"This is the 51st episode of the Stack Overflow podcast, where Joel and Jeff sit down with Joel’s business partner, Michael Pryor of Fog Creek Software, at Stack Overflow world HQ (i.e., Jeff’s house) in El Cerrito, California. At my home, Joel discovers my secret clock fetish. I have a pong clock, a nixie clock, and I’d love to have an oscilloscope clock! Joel and Michael went to the Computer History Museum, one of my favorite places in the world. It’s not just big iron; Michael geeked out over his old Apple //gs, and Joel enjoyed revisiting old HP calculators. Stack Overflow comments are now elevated to the main page. We’ve gone through several user feedback cycles on this, and we feel the current comment layout is a good balance. The preference for this is still in the works. This was partially inspired by the way comments are displayed on SFGate articles (scroll to the bottom to see how comments are displayed there). A discussion of the value of meta — discussing Stack Overflow on Stack Overflow. How much meta is acceptable? Where should meta-discussion go? Isn’t the podcast and the blog meta enough? Is there a need for stackoverflowoverflow? One problem is that the system we’ve built is good at focused, directed Q&A but quite bad at arbitrary discussion. It’s why Joel objected to me proposing the use of the Stack Overflow engine for the Joel on Software discussion boards and the Business of Software discussion boards. Not a good fit! Consider an analogy with school — if you don’t like the after school activities students are engaging in, it’s because you didn’t provide a good set of alternatives for them. But perhaps a better analogy is that of students who become teachers; they need a “teacher’s lounge” area. The whole point of Stack Overflow is synthesizing _better _answers than what you can commonly find on the open internet. If the answer is already good and easily findable elsewhere on the internet, leave it there! Don’t repost the answer on Stack Overflow unless you’re enhancing and improving the answer in some small way. How is Babby Formed has been removed from Yahoo Answers, and we have removed Programming at Sea. Part of the philosophy of doing lower-level things yourself, such as building your own computers (or even learning C), is to do it enough to understand it — and learn something along the way. It doesn’t mean that you need to (or even should!) do those things forever, but the journey of learning and discovery is its own reward. The best reference for programmers who want to learn what goes on underneath their code is Charles Petzold’s outstanding book, Code. Learning black hat techniques is important, because when good is dumb, evil will always triumph. Don’t be dumb. Know what’s out there, and how to exploit it. The morality of studying black hat techniques derives from what you do with that information. Will you sell it? Distribute it and actively attack ? Or quietly disclose it to the vulnerable software or website? Joel marvels at the enormous size of the Microsoft campus since he worked there; when he was at Microsoft in the early 90’s, there were around 5,000 employees and it was not uncommon to see Bill Gates walking around the campus. The Redmond visitor center is a disappointment; it should be more like the Computer History Museum, highlighting Microsoft’s central role in so much of that history to date. Apparently the best estimates are that there are around 9 million programmers in the world, roughly the population of New York City. Imagine a whole city of nothing but programmers. On second thought, that’s too scary — let’s not. A small clarification on last week’s Steve Yegge project; Steve is not the author of the Google JavaScript compiler, but a client of it. We answered the following listener questions on this podcast: Peter: “What do you think about the practice of finding an answer, and re-posting it on Stack Overflow?” Juma: “Should software engineers learn how the underlying hardware works?” Our favorite Stack Overflow questions this week are: Black hat knowledge for white hat programmers. Definitely important; if you aren’t performing basic due diligence on what the bad guys do, you’re likely to end up like one of these clowns. Developer Salaries to Rise? We’re not sure that the number of CS degrees being awarded necessarily correlates with the number of programmers seeking jobs. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/26/joke-questions-please-refrain/","date":"2009-04-25T22:00:00.000Z","tags":["Community"],"title":"Joke Questions: Please Refrain","text":"The problem of joke questions has come up more than a few times now, so it’s worth going over how we will handle them. In a nutshell, please do not post joke questions. What do I mean by joke question? It’s a question that.. Looks authentic, but is a parody of a real question. Describes situations that sound plausible, but are not based on fact or reality. Posted with the intention of tricking users into believing it is an actual question from a peer. Is successful when some users answer it in good faith, not understanding that it is a joke. Am I referring to fun questions? No. We’re not anti-fun. Even Amazon occasionally allows some fun to slip through, as Steve Yegge mentioned on the last podcast, with the Tuscan Milk and The Story About Ping. Fun questions are open and honest about their “fun-ness”, and are often tagged as such. That doesn’t mean the Stack Overflow community will accept your fun question, necessarily, nor do we want the site overrun with nothing but xkcd cartoons, wedding cakes with code, cool server names, etcetera. But you do get bonus points for being up front about your intentions. Joke questions are different, because they are deceptive. Some members of the community might see that it’s a joke or parody and treat it as such, but a sizable percentage of the audience won’t. They will not understand that it’s a joke and spend their time answering it — while the original poster (and those “in the know”) are laughing at them! This is unfair to those members of our community who provided detailed responses in good faith. It’s a waste of their time. It’s also kind of a rotten thing to do to people in general. So, to be clear: Joke questions are not real questions. Joke questions do not belong on Stack Overflow. Joke questions will be treated as abuse. The bottom line is that posting joke questions or answers on Stack Overflow intended to deceive your fellow users is unacceptable and anti-community, and it will not be tolerated."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/23/comments-top-n-shown/","date":"2009-04-22T22:00:00.000Z","tags":["Community"],"title":"Comments: Top n Shown","text":"You’ll notice that the top 5 comments are now shown under each question or answer. If you want to see all the comments, or add a comment of your own, clicking will load the rest and reveal the comment entry box. The flagging and voting tools are still there for each comment, but require a Twitter-style mouseover to reveal. We did this to reduce visual clutter. We laid the groundwork for this change last week with voting, as I alluded to at the bottom of that post. This is setting the stage for some of the comments to be visible on the page at all times, without having to click the comments button. There was a grander plan with comment voting, and that plan was to promote some of the best voted comments to the question page. The default sort order is votes, descending, then date; we pick the top 5. Why did we do this? There are often important clarifications and addendums left as comments that substantially improve the original post. It seemed a shame that these sort of comments were all locked behind the “expand comments” button, and every reader had to click on that link (or know they should click on it) to get the benefit of those comments. Information was being lost! The comments were not being indexed for web search, as they were hidden behind JavaScript and loaded dynamically via AJAX. More relevant search terms on the page means more people can potentially find the answer to their programming questions. While I don’t want the site to devolve into a one-liner contest, some of the comments are quite witty and still on-topic. Our fellow Stack Overflow users who manage to “edutain” us deserve to have those comments seen and appreciated by a wider audience. We originally implemented comments as almost an afterthought, with virtually no emphasis placed on them in favor of our core Question and Answer mission. But I’ve been amazed how useful and relevant the comments have become over time. We don’t want to overwhelm the page with dozens of comments, necessarily, but my regular ritual of “open question, expand comments, expand comments, expand comments..” seemed wrong, too. If I cared enough about the question to read it, I always cared enough to see the comments, too. So we’re now promoting the top 5 comments under each post to the question page itself. It really is top (n), though. The “# of comments initially shown” will be available as a setting on your user page preferences tab soon. If you’d rather click to see comments, never fear. Just set the “# of comments initially shown” to zero, and it’ll be back to the old way. Update: Based on feedback in this thread, we made the following changes to comments: More compact two-column rendering style Mouseover now highlights the entire row, if actions are available Small border between comments Top 5 comments are shown in chronological order Removed the arrow shown next to numbers, to reduce clutter On questions with >30 answers, only comments of +1 or higher will be shown We didn’t get to the user preference yet, but it’s coming."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/23/podcast-50/","date":"2009-04-22T22:00:00.000Z","tags":["Company"],"title":"Podcast #50","text":"This is the 50th episode of the StackOverflow podcast, where Joel and Jeff sit down with Steve Yegge of Google and the most excellent Stevey’s Blog Rants. This episode was recorded on site at the Kirkland, Washington Google office, where Joel gave a talk earlier in the day. A brief discussion about the APL language, whose keywords are symbols. Imagine how challenging it would be to program in a language where you need a special keyboard. There’s a more popular (not sure “popular” is the right word) version of APL named J which drops the symbols in favor of plain ASCII. How big a fan of working at Google is Steve? He worries that new hires from college will expect the rest of their working life to be as good as their Google experience. Steve can finally talk about what he was working on, which he was so vague about on our previous podcast with him. Mostly, he was disturbed at the state of JavaScript tooling at Google — “dude, you spelled it fuction again.” The state of the art in tools means painstakingly adding support for each individual language into each individual editor. What if there was a way to plug first-class language intellisense / compilation functionality into any editor — in a generalized way? That’s the problem Steve set out to solve. Take compilers that are defined for IDEs — Eclipse has three Java compilers built into it — a fast inaccurate one as you type, a better batch one, and then a great big one that does exhaustive analysis on large trees (Steve says Eclipse has “a better Java compiler than the Java compiler”.) This is all necessary to get good editor support! Why not take these compilers and run them on the google infrastructure, so they are commoditized and available to any editor? Steve says the way tools and languages integrate today is utterly backwards. Languages should support the tools, rather than the other way around. “We should have been doing this for 20 years!” Prototype doesn’t play well with the JavaScript compiler at Google, partly because nobody has actually tried to compile the code before! It exposes some problems that weren’t immediately obvious. All the common JavaScript frameworks require some tweaking for the JavaScript compilation process. Steve likens the comparison between compilation and dynamic typing to taking a shower and brushing your teeth. You should do both! The only reason we can’t do both of these things is because, as Steve points out, our tooling currently sucks. JavaScript has a more interesting origin than I realized — it was originally based on Scheme. Per Steve, Scala is like Haskell but with more concessions to real world programming. He points out that the great thing about Java is the fantastic tooling, which means it’s ultimately a better programming experience than a theoretically “superior” programming language. Joel doesn’t hate Unix; FogBugz supports Unix (although that support tends to be complex and costly) and Joel regularly runs cygwin on his laptop. That said, modern Unixes have their faults too. Steve observes that the only way to determine what packages are installed on Ubuntu is to diff the dpackage output against a clean machine. Also, Firefox is very slow on Linux relative to Mac and Windows. Stack Overflow is for programming related questions, but defining programming related isn’t easy. There will always be a gray area, which is further complicated by the fact that we do want the _occasional _fun questions — we just don’t want the system overrun with the stuff. Steve points out that even Amazon has examples of “fun” product reviews that wouldn’t normally be permitted, such as On Amazon, All of a Sudden Everyone’s a Milk Critic and The Story About Ping. We answered the following listener questions on this podcast: “What is Joel’s history with Unix? He mentions Unix a lot in vaguely pejorative ways. Did he have a bad early Unix experience?” No, Steve, the caller did not say “eunuchs”! Our favorite Stack Overflow question this week is: What do I need to do in order to be a programmer out at sea? Exhibit A in the eternal close wars. We aren’t sure this is a valid programming question, but some people object to it being closed. For that matter, some people object to anything being closed. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/22/how-many-questions-are-closed-or-deleted/","date":"2009-04-21T22:00:00.000Z","tags":["Community"],"title":"How Many Questions are Closed or Deleted?","text":"Based on the discussion about The Stack Overflow Question Lifecycle, which I’d characterize very broadly this way… Programming Related Question -> Answers! Non-Programming Related Question -> Closed -> Deleted (eventually, depending) … I thought it would be a good idea to couch the discussion in terms of actual data. Here’s a breakdown of all the Stack Overflow questions and answers to date: Closed Deleted Questions 150,433 5,900 9,794 Answers 625,734 n/a 55,765 The number of closed questions is not quite 4% of all questions ever asked. Remember that we do not require any form of registration; we allow totally anonymous users to ask whatever they want. Even a hard-line inclusionist would agree that half of those closed questions should have been closed as obviously not programming related, spam, or garbage. (Also, if you are a dogmatist who thinks no Stack Overflow question should ever be closed for any reason, Stack Overflow is probably not the right website for you.) So that means when we cast close and open votes on a question, we are disagreeing about one question in every fifty."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/17/the-stack-overflow-question-lifecycle/","date":"2009-04-16T22:00:00.000Z","tags":["Community"],"title":"The Stack Overflow Question Lifecycle","text":"Apparently some users who really should know better are confused about the way Stack Overflow works. I take this as a sweeping indictment of our current FAQ (both official and unofficial) and I will work to correct this situation — starting with this blog post. Stack Overflow is, at its heart, a Question and Answer site. So the lifecycle of any given question is, by definition, how the site works. I’ve documented it in a series of blog posts over the last few months, but let’s put it all together in Reader’s Digest form right here: Stack Overflow is a community of programmers Right off the bat, if your question is not programming related, it shouldn’t be on Stack Overflow. What is a programming related question? Here’s a solid set of guidelines generated by the SO community itself: Questions intended to resolve a specific programming problem that have multiple possible answers. The “correct” response is subjective. Questions intended to resolve a specific programming problem that have only one correct answer. A “specific programming problem” can be defined as a problem that exists in code and that can be resolved with correct code (or cannot be resolved at all). These questions are normally language-specific. Questions about language-agnostic algorithms for hypothetical problems that have potential real-world applications. For example, traveling salesman or BSP. Questions about best practices and other aspects of programming, including use of software tools used in the development process, standards for maintenance and readability of code, advice to avoid potential coding pitfalls, etc. Questions about software tools that, while not directly related to software development, involve some scripting or programming themselves, for example, Excel or Matlab. Look at the above guidelines, and ask yourself: Does my question fit? If you believe it does, awesome! Ask away! If it doesn’t fit, it doesn’t mean that you’re a bad person for wanting to ask that question. It just means that you should probably ask it elsewhere. If, however, you ask a question that is not a good fit for Stack Overflow, then.. Who decides what questions don’t fit? Trusted members of the Stack Overflow community decide which questions belong on Stack Overflow. Every question goes through a community vetting process: You see a question that is inappropriate for Stack Overflow because it’s not programming related. You have 3,000 reputation, the minimum required to cast close or open votes. You vote to close this question. Four (4) other users also vote to close this question, reaching a total of five (5) closure votes (or, a moderator votes to close — moderator votes are binding.) Once closed, the question can be reopened by voting to open in the same manner. If the question garners five (5) votes to reopen, the process starts over at step #3. If question remains closed for 48 full hours, it is now eligible for deletion. You have 10,000 reputation, the minimum required to cast deletion votes. If the question gets three (3) deletion votes (or a moderator vote), the question is deleted. Note that deleted questions are invisible to typical users — but can be seen by moderators and users with 10,000+ reputation. The question can be undeleted at any time by voting for undeletion in the same manner. If the question garners three votes for undeletion, the process starts over at step #7. No, it is not a perfect process, because not everyone agrees all the time. If this surprises or shocks you in any way, I’d like to gently remind you that the earth you’re currently living on is populated by these things we call “human beings”. And disagreement is, believe it or not, normal. Expected, even. As one Stack Overflow user said: Congratulations…you’ve found an inconsistency in the world. If only there were some way for you to reconcile it. If you’re looking for a perfectly consistent system, you’ll need to invent robots to implement that system, first. As long as people are involved, the only constant is this: there will always be inconsistency. (And just for the record, it is OK to have fun mostly-programming-related questions that the community likes every now and then — as long as the system isn’t overrun with the things.) Why do you allow content to be deleted? Just like death is an unfortunate but normal part of life, I believe deletion is also an unfortunate but normal part of living websites. Who can delete posts? Post authors can delete their answers. But they can only delete their questions when there are no significantly upvoted answers to the question. Users with 10,000+ reputation can delete questions that have been closed for 48 hours, if they cast three (3) votes for deletion. Questions can be undeleted through the same process in reverse. Moderators can delete anything. Why would you delete a question? Isn’t closing it enough? Some questions are of such poor quality that they cannot be salvaged. They’re literally nonsense. Not every byte of data that is created in the world is infinite and sacred. Some questions are so incredibly off topic that they add no value to a programming community. The mental cost of processing these closed questions is not zero, particularly for users who are actively engaged and scanning questions to find things they can help answer. If users see a lot of closed questions, they’ll note that we don’t enforce the guidelines, so why should they? Without any final resolution, asking questions that get closed becomes something we are implicitly encouraging — a broken windows problem. If this goes on for long enough, we’re no longer a community of programmers who ask and answer programming questions, we’re a community of random people discussing.. whatever. That’s toxic. If enough of these closed questions are allowed to hang around, they become clutter that reduces the overall signal to noise ratio — which further reduces confidence in the system. Let me be clear: we do not seek out deletion, by any means. But we believe not having the guts to cull some of your worst content is much, much more dangerous to your community than letting it sit around forever in the vague hope that it will magically get better over time. Hopefully this clears up the bulk of any confusion about the lifecycle of a question on Stack Overflow. As I said, I’ll try to get the essential parts of this in the faq."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/16/comments-now-with-flags-and-votes/","date":"2009-04-15T22:00:00.000Z","tags":["Community"],"title":"Comments: Now with Flags and Votes","text":"In tonight’s code push, we added the ability to vote for comments, and flag comments if they are inappropriate. Some ground rules: There is no downvoting of comments, only upvotes. Comment votes do not affect comment sort order. No reputation of any kind is earned or lost from comment votes. Each user gets 5 comment flag votes, and 30 comment upvotes, per day. If a comment is flagged by enough users it will be auto-soft-deleted. There is no penalty for this.. yet. Flagged comments will be surfaced to moderators, so if you have a problem with a comment, flag it. You can always delete your own comments. We are removing the ability for users with 5,000 rep to delete comments on their posts — flagging should now be sufficient for this purpose. (your best comments will also show up in your user profile page, but this isn’t implemented yet.) This is setting the stage for some of the comments to be visible on the page at all times, without having to click the comments button. Ideally, the upvoted comments (if any) will be viewed as ‘best of the thread’ and loaded first on the page."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/15/podcast-49/","date":"2009-04-14T22:00:00.000Z","tags":["Background"],"title":"Podcast #49","text":"This is the 49th episode of the StackOverflow podcast, where Joel and Jeff sit down with Alex Papadimoulis of The Daily WTF to discuss the distinction between IT/sysadmins and programmers, online justice for webforums, user-friendly IDs for databases, and the future of software distribution. Some of our favorite Daily WTF entries: Spaced Out and Have You Tried JavaScript? Alex likens their writing process to the Vital Signs column in Discover Magazine. As we build up serverfault.com , the already grey area of “which question goes where?” becomes even .. greyer. The animal, vegetable, mineral problem is not going away any time soon. That said, if you can attach code to your question, it probably belongs on stackoverflow.com. And if your question involves a server (and no code), it probably belongs on serverfault.com. But there are always exceptions, like this question about working conditions. I was surprised to find that there seems to be no critical mass of sysadmin/it bloggers online, certainly no equivalent to the legions of high profile programming bloggers. Thus, we’ll be initially seeding serverfault.com with those programmers from stackoverflow.com who cross over and also wear the sysadmin/it hat in their work. What if there was a programming language that used only abstract symbols instead of existing words in a human language? There is! But it’s only a research project. (And I found out that Joel wasn’t kidding about APL!) Some clarifications about the localization discussion last week. Joel and I continue to disagree about priorities here, is what it boils down to. Joel and Michael are fans of the hellban concept, but I find it to be a bit much like the guys in black masks making people disappear overnight. We implemented a penalty box instead. The hellban might be appropriate for random spammers, but for engaged members of a community, it’s a terrible system of justice. We also improved our flagging system ala Craigslist so it’s easier to communicate with moderators. The specific source of friction was editing. It turns out that the spirit of an edit is as important as the technical rationale for it. We love and encourage editing, of course, but it’s possible to follow the absolute letter of the law and still be toxic to the community. Joel says that the typical programming mindset makes us particularly prone to this behavior. You have to be able to let things go. One of the curiosities of Wikipedia is that the most obsessed users always win. You can’t compete with someone who devotes hours every day to maintaining their pet topic, with scripts to protect it. This system, on some level, must work because if it didn’t Wikipedia would be permanently broken. In addition to software increasingly running in the browser via various mechanisms, we view services like Valve’s Steam as the future of software distribution. Ultimately it should be as easy and painless to install software as it is on the closed-ecosystem iPhone and its App Store. The tension between digital distribution and traditional retail channels is still a major hurdle, however. Alex liked this Stack Overflow question: Database-wide unique-yet-simple identifiers in SQL Server. Great question having to do with the human readability of IDs for unique database records. Lots of food for thought. Alex recommends unique lengths per record type, or the “Smart Key” approach of encoding dates and other unique things in the id. We answered the following listener questions on this podcast: Andy Brice: “What will happen with the market with downloadable software? Everything in the browser? Hybrid between the downloadable executables and stuff running in the browser? Or will it be business as usual?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. Reminder: next week, we’ll have Steve Yegge as a guest. The previous episode with Steve was hugely popular, so hopefully this will be another winner! The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/14/logo-contest-winner-for-serverfaultcom/","date":"2009-04-13T22:00:00.000Z","tags":["Company"],"title":"Logo Contest Winner for serverfault.com","text":"The logo design contest for serverfault.com is now complete. The winner was Joshua Cliff, with entry #184. What I liked about this logo is the thematic similarity to Stack Overflow, while invoking the idea of a server rack along with a graphic equalizer style health readout for the fault. Congratulations to Joshua, who describes himself as “designer, developer, trainer, and pm.” I’ve already sent the 29 prize over. Runner up #1 is from Umasankar Arumugam, who was also a runner-up in the original Stack Overflow logo design contest. He wins $50. Runner up #2 is from Daniel L, another first timer. He also wins $50. And a special honorable mention to Kamil Zadora who came quite close in both logo design contests. Thanks to everyone who took the time to submit an entry! The serverfault.com private beta should begin towards the end of the month, and any Stack Overflow user with reputation over 200 is invited."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/13/stack-overflow-voting-pattern-analysis/","date":"2009-04-12T22:00:00.000Z","tags":["Community"],"title":"Stack Overflow Voting Pattern Analysis","text":"Stack Overflow user John Cook recently wrote a blog entry analyzing Stack Overflow reputation scores: The reputation scores follow the expected power law distribution. No surprise there, of course. John explains: This graph was based on a snapshot of the user reputations one day last week. The largest group, 15,219 users, had reputation less than 100. There were 2,494 users with reputation between 100 and 200, etc. The number of users in a 100-point reputation range generally decreases as the reputation score increases. The majority of users have reputation less than 100, and yet the top percentile have reputations over 4,800 and the highest reputation was 38,700. This sort of extreme disparity suggests a power law distribution. The test for whether the reputation scores follow a power law is to plot the logarithms of the number of people with each score and look for a straight line. And after an initial steep drop off, the logs of the counts do fall roughly on a straight line. This is all based on public information from Stack Overflow user profiles. Based on a request by John which was seconded by Bill the Lizard, I elected to provide anonymized Stack Overflow voting data for further analysis. The preliminary results of that analysis just went up. John’s summary: Most users don’t vote, but most users aren’t invested in the site. They also have no reputation. Most votes come from users with low reputation, just because they’re the vast majority of users. The higher someone’s reputation, the more they vote. The number of votes someone is likely to cast is proportional to their reputation. I think this last fact speaks well of the users on the site. The people who receive reputation points also give reputation points. The high-reputation users are not reputation-freeloaders, enjoying the praise of others. They’re giving in proportion to what they receive. You could view reputation as a measure of how invested someone is in the site, not just a measure of their perceived competence. We’ve said all along that reputation was not in any way a measurement of skill — per the faq, it is a (very) rough measurement of how much the Stack Overflow community trusts you. Good to see that corroborated with actual data. John has promised even more analysis of this data as time permits, so keep an eye on his excellent blog for more!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/11/raising-a-red-flag/","date":"2009-04-10T22:00:00.000Z","tags":["Community"],"title":"Raising a Red Flag","text":"Are you familiar with the way craigslist handles post flagging? Based on recent feedback, we’re enhancing Stack Overflow’s flagging support to bring it more in line with that well established model. We belatedly realized that asking users to email us to report content problems on the site* was not exactly efficient. Now you can flag something that needs moderator attention with three clicks (and a little typing). Some rules: You still need 15 reputation to flag anything at all. Each user gets a limited number of flags per day (5 offensive, 5 spam, and 10 inform moderator). These flags age. After two days, they automatically dissipate harmlessly and without effect from the system. If an individual post reaches a threshold of six offensive or spam votes within two days, it will be automatically deleted from the system by the Community user. You cannot flag the same post multiple times. Flag counts are no longer shown to anyone except moderators. This is more or less directly based on discussion around previous blog entries In Defense of Editing and A Day in the Penalty Box. I closed the related UserVoice ticket as completed. And yes, a similar style of flagging (but more lightweight) is coming very soon for comments. as always, our email address is at the bottom of every single page if you need to contact us. All mail is read, and every reported issue is researched."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/09/podcast-48/","date":"2009-04-08T22:00:00.000Z","tags":["Company"],"title":"Podcast #48","text":"This is the 48th episode of the StackOverflow podcast, where Joel and Jeff discuss planning your career, the importance (or not?) of localization, what makes a good moderator, and dealing with programmers who lack interpersonal skills. Until 2004, I felt sort of like that feather in the movie Forrest Gump, or the plastic bag in American Beauty. I had no real plan for my career. This prompted me to think about what I wanted from my career, and it’s why I wrote The Eight Levels of Programmers. Think about who you respect, and why, and whether those paths work for you. If you’re very lucky in your career, perhaps you’ll be able to build Bongo’s Dream House. Joel and I have a long (REALLY LONG) discussion about the Chinese Stack Overflow clone, cnprog. It’s excellent that we are inspiring other programmers, but we do draw the line at copying our look and feel down to the tiniest detail (including the blog). Don’t be a content stealing jerk! One reason localization has been a very low priority is that we feel for our particular audience, namely programmers, English is the de facto standard language. Not that other languages aren’t important, but it’s easier to get engineering work done when everything coalesces around a standard language. It is true that localization is not even close to being on our radar. Programming communities need to form in local languages, too. We’re open to providing a dump of our cc-wiki licensed content, but we don’t want to have an AOL data scandal. That would be .. bad. It’s the biggest risk blocking that from happening at the moment. Joel believes that there are five “important” languages that programming content should eventually be localized into: German, Spanish, French, Chinese, and Japanese. We’re beginning the process of promoting a notable user from our community to full-blown moderator status. Shaya Loney, who works at answers.com, had some excellent advice for us — one of the risks is that when you take one of your best teachers and turn them into the principal of the school, you lose a great teacher. We also want moderators with a variety of different backgrounds for diversity. We were able to test our datacenter disaster contingency planning a little with a recent server error. Lesson: always have your contingency plans ready to go in practice, not just in theory. We only lost time, but we’re considering the use of remote KVMs if this becomes an ongoing concern. One way to deal with programmers who come off as abrasive and perhaps lack interpersonal skills, is to focus on the specific behaviors that are problematic. Detail the very specific, ultra-narrow things that they could change to improve the way other people react to them. There’s a good reason to fix this, beyond the bad apple theory. As Joel points out, “for marginal performers, the people who don’t get along, are probably going to get fired, and the people who everybody likes, are probably going to stay around.” Revisiting the “architect” title. We still think it’s a bad idea, but perhaps it’s more palatable if you think of it as “software engineer with lots of experience.” And get rid of the title! That said, there are the rare few, with Joel’s example of Dave Cutler, who truly was the Architect of Windows NT in every possible sense of the word. We answered the following listener questions on this podcast: Demitrios from Brazil “What do you do with a solid contributor who on a personal level is very annoying, nobody likes him, and nobody can get along with him?” Rudy from Denver “Is it possible that Architect is a valid title, for those developers who have the skill to develop large applications?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/08/in-defense-of-editing/","date":"2009-04-07T22:00:00.000Z","tags":["Community"],"title":"In Defense of Editing","text":"Editing is the backbone of Stack Overflow, and probably (along with the reputation system) one of the single most important distinctions between Stack Overflow and “just another forum”. What’s so special about editing? You might as well ask what’s so special about editing on Wikipedia? Uh… everything? As it says in the FAQ: Other people can edit my stuff?! Like Wikipedia, this site is collaboratively edited. If you are not comfortable with the idea of your questions and answers being edited by other trusted users, this may not be the site for you. In The Great Edit Wars, we discussed some general guidelines for good editing. Please do read those. But I realized that I could have been clearer, and more specific. So here’s some additional guidance. If you are going to edit a post, make sure you’re substantively improving it.¶ Avoid making isolated, trivial edits, as they are the source of much friction. For example, don’t bother changing “its” to “it’s” unless you have several other edits to make in the same post. There has to be a legitimate case that your edit made multiple changes transforming the post from good to great — or at least substantively improving it. (Except when you happen to be editing that rare “perfect except for this one misspelled word” post. This is obviously OK to edit. In my experience, the type of posts that really cry out for editing need a lot of editing to be whipped into shape.) To be very specific, I would discourage editing a post solely to remove salutations like “hi” and “thanks”. That’s just adding an unnecessary edit on top of an unnecessary set of salutations. I completely agree that salutations add little to a question or answer, but if you’re going to take the time to go in and remove salutations, fix the whole post while you’re at it! If there’s nothing else to edit, then don’t bother. Be diplomatic in your edit-related comments.¶ If you are going to make edits, you have to be more diplomatic and friendly than “suck it up, the FAQ says I can do this.” Explain that the spirit of SO is collaborative editing, and you’re only trying to make substantive improvements (see rule #1). More readable questions and answers leads to better information for all future travellers! Above all, be nice. And as mentioned in the blog entry on edit wars, if there’s any resistance — even unwarranted and unjustifiable resistance — just let go and move on. Every edit is a judgement call.¶ Do we encourage editing? Yes! Do we demand that every user accept every edit? No. There’s no way I can make a blanket statement like that. Do I trust my wife? Sure. Do I agree with every single thing she’s ever done? No. It would be irrational to expect any person on the internet to extend more trust than this to me. We know editing is a net good, but not everyone does… yet. Forcing the issue does nobody any favors, generating active hostility and ill will. Unless the edit is of critical importance (which seems implausible, except in cases of vandalism or evil, which is a wholly different thing) you have to just let them learn the system at their own pace. As they say, you’ll get more flies with honey than vinegar. The vast majority of edits I see, I am fine with. But in the case where the original poster is unwilling to accept the edits and actively rejects them — please do not force the issue. It just leads to heartache. When in doubt, move on. There’s no shortage of editing opportunities, in fact, more are being written every minute. There are thousands of users who would appreciate reasonable edits that improve their post. Do not fight an edit war over a crumb of bread — there’s nothing there worth fighting for! It’s easier to just move on and get work done than create pain all out of proportion to the importance of the individual edit. Editing is often the difference between crap and not-crap. It is hugely important. But how you edit — the spirit of the edit — is just as important as the edit itself. By all means, edit away, but please try to keep that in mind."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/06/a-day-in-the-penalty-box/","date":"2009-04-05T22:00:00.000Z","tags":["Community"],"title":"A Day in the Penalty Box","text":"Are you familiar with the Penalty Box? The penalty box (sometimes called the sin bin, bad box, or bin) is the area in ice hockey, rugby football and some other sports where a player sits to serve the time of a given penalty, for an offense not severe enough to merit outright expulsion from the contest. Teams are generally not allowed to replace players who have been sent to the penalty box. It’s not something we looked forward to, but as of tonight, we’re instituting a penalty box on Stack Overflow. Our general strategy is to discourage specific problem behaviors, not individual users. But sometimes you just can’t seem to reach people, and it becomes necessary to place accounts in timed suspension. When users exhibit a pattern of either … No effort to learn and improve over time This user does not put reasonable effort into the questions they ask of the community. There is little or no evidence of this user learning over time, either in the topic itself or in the community norms on the site. This user intentionally spams the site with the same question or very similar questions, over and over. The user never gives anything back to the community, but only takes. Disruptive behavior Other users tend to react poorly to this user’s contributions, posting negative responses in kind and generally causing a commotion. There is a broad sense of community resentment over this user’s behavior, and they are frequently cited in discussion about the community. There is a dark storm cloud of moderator flags that seems to follow this user around wherever they go. The moderators get email complaints about this user’s behavior. This user makes overtly snide, rude, or hostile comments to their fellow users. … these problem behaviors have to be dealt with. When they aren’t, it takes up excessive moderator time that could be used for something more productive — and, even worse, these behaviors begin to actively turn people away from our community, stunting its growth and harming everyone. So starting tonight, there will be consequences for patterns of problem behavior. If we think you are reachable, and the behavior is one that we feel can change, we will try to warn you via email first when there are behavior problems — so that we can address them before they become deeper problems. But I make no guarantees; the community moderators are very, very busy and there are a lot of things that need their attention. The odds of moderators contacting you with a warning first will be in direct proportion to how much evidence you’ve given us that you are, in fact, a potentially valuable and contributing member of the community. Depending on the severity of the problem behavior — and at the complete discretion of the moderator — your account will be placed in timed suspension for anywhere from 1 to 365 days. That means: Your account will be locked at 1 reputation. Your user page will have a visual indication that you are in timed suspension, and for how long. You will be unable to vote, ask, answer, or comment. At the end of this timed suspension period, your reputation will be recalculated, and your account will resume as normal. We don’t hold grudges. The point of all this is to address the behavior. If the behavior improves, you are welcome back. (This should probably go without saying, but if the problem behaviors do continue beyond the timed suspension, your account is very likely to be permanently deleted.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/05/what-stack-overflow-can-teach-you/","date":"2009-04-04T22:00:00.000Z","tags":["Community"],"title":"What Stack Overflow Can Teach You","text":"We get wonderful emails from programmers almost every week, programmers who are impressed with the effectiveness of Stack Overflow and the platform agnostic community spirit it embodies. We consider ourselves very fortunate to be in a position to get such email, and we greatly appreciate each and every one of them. I always reply and share those emails with our team, but I don’t necessarily reprint them here — I don’t want this blog to become a rah-rah marketing effort. But I do want to share with you one of those emails, the one that made me proudest to be a part of this community. (You may know this Stack Overflow user, so I’ve redacted anything that would make it personally identifiable.) I’m not sure if you have thought about this side effect or not, but Stack Overflow has taught me more about writing effectively than any class I’ve taken, book I’ve read, or any other experience I have had before. I can think of no other medium where I can test my writing chops (by writing an answer), get immediate feedback on its quality (particularly when writing quality trumps technical correctness, such as subjective questions) and see other peoples attempts as well and how they compare with mine. Votes don’t lie and it gives me a good indicator of how well an email I might send out to future co-workers would be received or a business proposal I might write. Over the course of the past 5 months all the answers I’ve been writing have been more and more refined in terms of the quality. If I don’t end up as the top answer I look at the answer that did and study what they did differently and where I faltered. Was I too verbose or was I too terse? Was I missing the crux of the question or did I hit it dead on? I know that you said that writing your Coding Horror blog helped you greatly in refining your writing over the years. Stack Overflow has been doing the same for me and I just wanted to thank you for the opportunity. I’ve decided to setup a coding blog in your footsteps and I just registered a domain today. Hopefully that will go as well as writing on SO has. There are no tougher critics than fellow programmers who scrutinize every detail, every technical remark and grammar structure looking for mistakes. If you can effectively write for and be accepted by a group of programmers you can write for anyone. There’s nothing I respect more than a great programmer. But if you can manage to become a great programmer and a great communicator, there’s almost nothing you can’t accomplish. I know I’ve said this several times already, because I tend to repeat myself. I said I tend to repeat myself! But I have to point to my favorite Joel Spolsky quote again: The difference between a tolerable programmer and a great programmer is not how many programming languages they know, and it’s not whether they prefer Python or Java. It’s whether they can communicate their ideas. By persuading other people, they get leverage. By writing clear comments and technical specs, they let other programmers understand their code, which means other programmers can use and work with their code instead of rewriting it. Absent this, their code is worthless. By writing clear technical documentation for end users, they allow people to figure out what their code is supposed to do, which is the only way those users can see the value in their code. There’s a lot of wonderful, useful code buried on Sourceforge somewhere that nobody uses because it was created by programmers who don’t write very well (or don’t write at all), and so nobody knows what they’ve done and their brilliant code languishes. I won’t hire a programmer unless they can write, and write well, in English. If you can write, wherever you get hired, you’ll soon find that you’re getting asked to write the specifications and that means you’re already leveraging your influence and getting noticed by management. To the extent that Stack Overflow is helping my fellow programmers achieve the goal of becoming better writers and communicators, it is succeeding beyond my wildest possible dreams. And for that, I am immensely thankful. Thankful to each and every programmer who sees fit to slice off a small bit of their time to share their expertise and knowledge through Stack Overflow. You guys (and gals) rock. Have you honed your communication skills? Discover opportunities to put them to work in our job listings for developers using Java, Python and many other languages. But remember that those languages are not necessarily the most important."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/04/logo-design-contest-for-serverfaultcom/","date":"2009-04-03T22:00:00.000Z","tags":["Company"],"title":"Logo Design Contest for serverfault.com","text":"Since we had such good results from our previous community logo contest, we’re doing the same thing for serverfault.com: We have a serverfault.com logo design contest at 99 designs, with a prize of $29 at stake. This time I’ve also added $50 prizes for second and third place. I always felt bad that the logos we didn’t pick for Stack Overflow were so good, and I had nothing to give the designers for their effort. Luckily, our good friend Leon Bambrick stepped in at the last minute with free licenses for TimeSnapper, which was a very nice gesture. No disrespect meant to Mr. Bambrick, but I think they’ll like the 50 bucks even better. I’ve noticed that a few of the logo designs that initially appeal to me are thematically matching to Stack Overflow. I like this trend! To be clear, we plan for stackoverflow.com and serverfault.com to be “sister sites”, meaning: they run the same underlying software they support shipping questions back and forth to each other But each one will have its own community its own domain name its own set of moderators its own logo its own set of colors and visual style We will also have a brief (1 week?) beta period, as mentioned before, and all Stack Overflow users with > 200 rep will be invited to participate."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/02/no-we-have-not-forgotten-about-the-hacker-badge/","date":"2009-04-01T22:00:00.000Z","tags":["Community"],"title":"No, We Have Not Forgotten About the Hacker Badge","text":"In case you were wondering, no, we haven’t forgotten about the Hacker Badge. Which is sort of like Eric Raymond’s universal hacker emblem. It’s explained thusly by Mr. Raymond: When you put the glider emblem on your web page, or wear it on clothing, or display it in some other way, you are visibly associating yourself with the hacker culture. This is not quite the same thing as claiming to be a hacker yourself — that is a title of honor that generally has to be conferred by others rather than self-assumed. But by using this emblem, you express sympathy with hackers’ goals, hackers’ values, and the hacker way of living. Not everyone is a fan. That’s just background. I’m specifically referring to the secret Stack Overflow hacker badge. It does exist, though it has yet to be awarded. (There might even be some other secret badges out there.. who knows?) It’s just taking a while to get around to implementing it*, as it doesn’t behave like any other badge; it’s a manually maintained key-value pair of users who have “contributed to Stack Overflow in an unusual way.” Typically this means you’ve found a serious security exploit and sent it to us privately rather than making it public or exploiting it and harming the site. But that’s not the only way to earn it! In other news, there will be no Stack Overflow podcast this week because Joel has the flu. There are lots of other great software podcasts out there to fill that gap, though! more than our usual 6-8 weeks."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/04/01/tuesday-outage-its-raid-tastic/","date":"2009-03-31T22:00:00.000Z","tags":["Company"],"title":"Tuesday Outage: It”s RAID-tastic!","text":"We had a brief outage early Tuesday morning from 3 AM – 5 AM PST, because the database server was doing this: Oh noes! Not … !!! CRITICAL ERROR: Memory retention failure, unflushed cache lost !!! There are six exclamation points so you know it’s serious. Also, you have to press ENTER. Because it’s a CRITICAL ERROR !!! (we didn’t know this at the time, we only belatedly found out later — once Geoff got up in the morning and had time to head down to the data center.) One of the pieces of advice I got on server hosting was to have extra servers on hand just in case. We currently have three web tier servers, though we’re only using one (and soon two), so one of those was quickly pressed into service as our temporary database server. We have a reasonable backup scheme in place using our little NAS; full database backups occur at 2AM, and incremental backups every four hours. This problem happened at 3AM so we did lose about an hour of data. Our apologies for that. Our contingency planning isn’t what it should be. We went back and forth with the datacenter for a bit trying to figure out what had happened, and that wasn’t smooth due to our lack of planning and the late hour (~1 hour). After I realized a quick power cycle wasn’t going to fix the issue, I had to reconfigure one of the web servers. This meant downloading the SQL Server 2008 ISO (25 minutes), installing a hotfix and reboot (5 minutes), then completing the installation (20 minutes). I could then, finally, restore the latest backup from 2 AM (10 minutes). So we were down longer than I would’ve liked. What’s unnerving about this problem, though, is that the RAID controller on the Lenovo RD120 — an Adaptec card that has been rebranded the “IBM ServeRaid 8k” — has had three BIOS updates since I built the machine in late January, with the (then) latest BIOS! The good news is that the latest BIOS for the ServeRaid-8k fixes this specific ‘press ENTER’ problem, in fact. So Geoff burned it to bootable CD and installed it. (On a related note, I discovered that the lower-end LSI 1064e RAID card on our web servers has also had a driver update which fixes the “bluescreen on drive eject” problem I observed while building them — and assumed was the norm. I guess not.) We know why the server didn’t come back after the reboot. But we still don’t know what triggered this server reboot in the first place. The event logs and SQL logs look clean, with no hints on rebooting. Now, the Adaptec / ServeRaid 8k card has always been a little wonky for us, causing oddball hard drive incompatibilities with its factory shipped BIOS, and leaving us unable to turn write-back caching on without suffering from bizarre I/O pauses under heavy writes even with the (then) absolute latest firmware, bios, and drivers. So I am tempted to blame it, in the absence of any other evidence. If I’ve learned anything from this experience, it is: Never skimp on your RAID controller. Invest in something quality. Pick a RAID controller with good community buzz, and a proven track record of support and reliable performance. I thought when I bought Lenovo / IBM, I’d be getting decent RAID controllers with the servers. This is at least partially true. Those rebranded entry-level LSI 1064e RAID controllers on the Lenovo RS110 servers have been solid and reliable performers. The fancier Adaptec/ServeRaid 8k RAID controller on the Lenovo RD120 has been … uh, less so. But at the rate they’re releasing new BIOS updates for the ServeRaid 8k, maybe they’ll get there eventually? Or at least let us turn write-back caching on without crippling I/O pauses under load? At this point I’ll settle for please don’t corrupt all our data.."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/26/podcast-47/","date":"2009-03-25T23:00:00.000Z","tags":["Company"],"title":"Podcast #47","text":"This is the 47th episode of the StackOverflow podcast, where Joel and Jeff discuss Eclipse, plugin architectures, sketching mockups, and optimizations that don’t optimize. I had the honor of keynoting EclipseCon this year with Clay Shirky. Eclipse is an open source IDE with an excellent plugin ecosystem. It’s also a great Java GUI framework. A brief discussion of the communal relationship between applications and plugins. I am cautiously optimistic about the release of Internet Explorer 8. The betas were very scary, but the final released version is surprisingly solid and fast. A totally respectable update from Internet Explorer 7, and it has a very convenient “switch to IE7 rendering mode” (along with a HTML header that does the same thing) that means it’s super easy to essentially have both browsers. Joel explains that he’d rather spend any amount of money than have his developers “take a few weeks” to optimize the FogBugz compiler. Remember, hardware is cheap, and programmers are expensive. This may include buying 8 GB of memory (cheap!) and the super-fast Intel SSD hard drive. It’s recommended by Linus! Be careful with SSDs, the only ones worth having at the moment are the very high end models like the Intel one. Cheaper ones can be slower than regular hard drives! I continue to recommend the two-spindle approach for desktops for optimal performance. It’s the same reason, on a database server, you typically have the OS on one drive and the data on another drive. It reduces contention. We joke about pure architecture software releases, where nothing visible changes in the product, except the underlying code. There are reasons to do this, such as performance, scalability, and simplicity. But for a product users pay for, a pure architecture release would be suicide. Our live podcast from MIX went great — thanks to everyone who participated! You can watch our 5-minute bit at about 50 minutes into the day one keynote on the official MIX website. The classic example of a free site attacking the business model of a pay site is Markus Frind’s Plenty of Fish. What’s odd is that PoF has been so successful that Markus is looking to acquire a pay dating site at this point. On the other hand, he’s adding some pay features to his free site as well. Joel talks about how smart the design of Balsamiq Mockups is. It actually forces you to stay simple and abstract, which is the whole point of sketching. Sketching is on our minds because the Bill Buxton book Sketching User Experiences was provided to every MIX attendee, and Bill Buxton was the first day 1 keynote speaker. Joel complains that so many design books start by talking about the design of the iPod, to the point that it’s cliche. Perhaps one design lesson is that people care more about the content than the design — the websites they load are far more important than what browser widget they load it in, despite how important choice of browser is to us geeks. One of the points Clay brought to our EclipseCon keynote was that social software ends up being a mirror, a reflection of the community you drop it in to. Unlike PhotoShop, which works exactly the same no matter how many times you copy it or who is using it, the same social software may behave completely differently for different communities. This is why Reddit cloning itself into weheartgossip isn’t really working — the audience is too different. Make sure your “optimizations” are actually optimizing, otherwise you’re pessimizing — with the best of intentions, you make your code slower. Benchmark first, not last! There are huge categories of premature optimization you should avoid, but you also want to avoid making big design mistakes early on. It’s not necessarily optimization, per se, but don’t do things that are so incredibly boneheaded you will regret them forever. We answered the following listener questions on this podcast: “What about Stack Overflow for car questions?” Our favorite Stack Overflow questions this week are: What is the most ridiculous pessimization you’ve seen? In other words, the opposite of optimization? If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/25/responsible-advertising-feed-a-programmer/","date":"2009-03-24T23:00:00.000Z","tags":["Community"],"title":"Responsible Advertising: Feed a Programmer","text":"We’re now experimenting with serving up a small AdSense banner for users with less than 200 reputation. This banner appears just under the title of any question. Up to 90 percent of our traffic is from Google now. We feel that users arriving from Google search will be accustomed to seeing a small ad banner at the top of the page, so it shouldn’t be a bother. While we don’t want to pummel anyone with ads, we do need to advertise responsibly to ensure we generate enough revenue to fund continued development of the site — specifically, so I can pay Jarrod and Geoff. I’d love to be able to hire Geoff full time, and continue to increase Jarrod’s meager salary so it actually resembles something approaching professional wages. This money does not go into buying gold-plated humvees and designer megayachts. Yet. It all goes directly toward feeding your fellow programmers! Once you’ve earned 200 or more reputation: The question ad banner will no longer appear. The two sidebar ads will stay, however, they will switch from a contrast visual style to a blend visual style (for text ads). We aren’t planning to have more than 3 ads, and as always, we will never accept animated, Flash, or Silverlight ads. We think this is a good, responsible balance of advertising, and hopefully sufficient to underwrite the continued development and improvement of Stack Overflow! That said, like everything we do, it’s an experiment. We’ll continue to tweak and adjust as necessary."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/21/more-voting-anomalies/","date":"2009-03-20T23:00:00.000Z","tags":["Community"],"title":"More Voting Anomalies","text":"In December we began tracking and removing anomalous voting patterns. This happens automatically as part of a daily script, and it’s worked well to date, nullifying the most egregious upvoting and downvoting anomalies. I’ve been getting a few reports of further voting issues via the email link provided at the bottom of every Stack Overflow page. We take any reports of exploits or problems on Stack Overflow very seriously, and they’re all investigated. In particular, we will not tolerate gaming our vote system. Based on additional analysis of the voting data and user data, we’ve refined our detection of voting anomalies even further. I have to be coy (again) about exactly how we do this because I don’t want users optimizing around the various checks we do. But, in a nutshell: We can automatically detect sockpuppet accounts now. Sockpuppets used for the purpose of upvoting or downvoting will be deleted, and their votes — cancelled. We now perform a more detailed statistical analysis on voting patterns. Any voting patterns that are too far outside the statistical norm will be nullified. If you see a reputation drop today, it’s likely because our new, improved daily vote anomaly check found something that should be removed. And if you own a sockpuppet account, you may find it no longer exists. That said, we believe in discouraging behaviors rather than the user. Nobody will be banned or penalized. Just refrain from engaging in these behaviors unless you want them undone every day, like clockwork. The bottom line is this: it will always be easier to earn reputation legitimately — by asking good questions and providing great answers — than by gaming the system."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/20/nominate-a-new-stack-overflow-moderator/","date":"2009-03-19T23:00:00.000Z","tags":["Community"],"title":"Nominate a New Stack Overflow Moderator","text":"Stack Overflow has exactly four moderators: Joel, Jeff (me), Jarrod, and Geoff. It’s no coincidence that the list of moderators is identical to the list of co-founders and mainline developers. As we launch the upcoming IT / SysAdmin sister site, we’ve had very little luck locating notable folks from that community to act as moderators and spiritual leaders for the site. So we’re flirting with the idea of promoting users with high reputation scores and the respect of the community to moderator status. Moderators (indicated by the small star icon) are the most highly trusted members of the system, so this is not something we take lightly. Moderators can: cast one-shot binding votes on open, close, delete, and offensive. edit anything in the system, including user profiles. delete revisions. have visibility into our internal error logs. .. and so forth. It occurred to me that we might as well test this theory out by starting with Stack Overflow itself. So let’s give this a shot. Reply in the comments, nominating up to three Stack Overflow users you think would make good moderators. Some ground rules: Must be a currently registered Stack Overflow user in good standing Must have at least 7,000 reputation (I was going to say 10k, but as long as you’re in the ballpark, that’s fine.) Should exhibit patience and fairness at all times in their questions, answers, and comments. Should lead by example, showing respect for their fellow programmers in everything they write. They should want the responsibility. Nominating users isn’t the same as an obligation. It’s purely voluntary. The nomination period will last for one week. At that point, I’ll tally the nominations up and put it to a public vote — but only registered Stack Overflow users with a reputation score of 200 or higher will be able to cast votes! update: voting is now open from May 6 until May 13."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/20/podcast-46/","date":"2009-03-19T23:00:00.000Z","tags":["Company"],"title":"Podcast #46","text":"This is the 46th episode of the StackOverflow podcast, live from MIX09, where Joel and Jeff answer questions from the live audience. This podcast is live from the MIX09 conference! Joel and I also had a small 5 minute segment in the Day 1 keynote, which you can view online. It’s at around the 50 minute mark or so. We had a live audience, so the focus of this podcast is on questions from our live audience. We answered the following live audience questions on this podcast: “What’s the point of Silverlight?” The short answer is, it’s like Adobe Flash, but much more programmer oriented. Silverlight 3 beta was just launched at MIX, with lots of new developer-y goodness. “What’s the most number of questions asked by an actual Stack Overflow user?” That would be Edward Tanguay with 210 questions, closely followed by Thomas Owens who asked 207 questions. One reason the “ask a question” button isn’t more prominent on the site is that we encourage people to read and answer a while before asking anything. Good questions take some effort! “Have you ever considered moving Stack Overflow to the cloud?” The cloud makes more sense for experimental projects that may or may not succeed. We did the math and decided that owning the hardware was a better deal for our project. It could also make sense for hot-standby disaster recovery backup servers. It depends whether or not you prefer flexibility, or fine-grained control. “What issues did you have with using ASP.NET MVC?” Other than the typical beta issues, not much. The big advantage, to us, is that MVC is a much more web-centric development model. It is a much closer match to our mental model of how web programming should work, and how URLs should be formed. “What does the new guy do on the first day?” Fix the simplest possible bug in your product. And on the next day, fix a slightly more complex bug. It helps to do this in an environment of active pairing or mentoring. “Are there some things about the web platform (HTML, CSS, etc) that you wish worked differently?” Sure, the platform barely works. There’s something inspiring about so many programmers are building great stuff on such a rickety platform. And it’s creating a whole new generation of programmers. There’s a certain inexplicable elegance to the madness. “We have a lot of relatively unstructured data that we’re storing in a database, is there some other way do deal with this? And what about REST vs. SOAP access to it?” Joel points to Adam Bosworth’s classic talk about the flexibility of loosely structured data. Perhaps something like Lucene or CouchDB would be a better choice than a traditional rigid database. And remember that meta-tags, while worthless on the open web, are trustworthy on local data. Sometimes you don’t need a perfect 100% right answer back from the data. Joel describes the advantage of REST over SOAP thusly: you can just type stuff into the browser’s address bar and see the results in real time. “Should you teach the framework, or the underlying languages?” Joel points out that maybe students shouldn’t be studying programming at all. You can learn a lot about programming through related fields. Joel and I disagree a bit on this one. I think good developers are inherently curious, so they can learn the framework and dip into the lower level language as necessary to solve whatever problem is at hand. Joel says you should start with the language and scale up. “How different is the world view of a programmer who is twenty-something and grew up with the web, versus a thirty-something who didn’t? How important is historical context?” Can developers who only know JavaScript, HTML, and CSS grow into being generally great developers? I argue that there’s an inherent intellectual curiosity in all great programmers, so they can start anywhere and get amazing results. Joel notes that some of the historical context can become a burden and possibly even incorrect over time. There’s a tension between necessary mentoring between older and younger programmers, and fresh eyes questioning the status quo. It’s good to continually question the programming status quo. Otherwise, how would we make any progress? We’d carry forward our old biases and decisions forever, even after they were no longer necessary. “At what point in Stack Overflow do you see yourselves hiring specialists? How do we justify bringing in experts to management?” We already have, to some degree; we have Jeremy Kratz helping us with design and Brent Ozar helping us with advanced database stuff. You have to know your own limitations, what you’re good at and not good at, and how to slice off a small piece of work that’s appropriate for the specialist. If you need to sell this to management, try it on a small part of the project first and show what the difference would be on the full project. Our favorite Stack Overflow questions this week are: Stack Overflow on Line 25 — this is one of the downsides of having the name “Stack Overflow”. It’s impressive how good the answers are to a question by a poor, beleaguered end user who just got a stack overflow JavaScript error in their browser Why does setting a stack method result in a Stack Overflow? — this is a classic example of a mind reading answer. The asker wasn’t able to establish what their question really was. Is there a human readable programming language? — yes, until everyone decided that was a really dumb idea. Its name was COBOL. Should a function have only one return statement? — a classic discussion question. Discussions are valid as long as they’re focused. Here, the goal is to avoid writing “arrow” or “pacman” code and to keep the functions as small as possible. It’s amazing to us that some developers are still dogmatic about this one. In theory, this is a good rule, but in practice, it isn’t. And practice always overrules theory in my book. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/19/stack-overflow-podcast-bingo/","date":"2009-03-18T23:00:00.000Z","tags":["Company"],"title":"Stack Overflow Podcast Bingo","text":"At our first “live” podcast for MIX09, the developers at Woot! cleverly converted the Stack Overflow podcast drinking game into Stack Overflow podcast bingo, and handed out cards for everyone to play along. Hilarious — hopefully someone scored a bingo during the live podcast! Click to see it larger."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/16/it-stack-overflow-update-naming-is-hard/","date":"2009-03-15T23:00:00.000Z","tags":["Community"],"title":"IT Stack Overflow Update: Naming is Hard","text":"A quick update on the IT / SysAdmin themed Stack Overflow. 1) The launch will realistically have to be late April, as March has been pretty busy for a variety of reasons. 2) The pursuit of a Joel Spolsky or Jeff Atwood equivalent figure to be the spiritual godfather of the site has been .. unsuccessful. The IT / SysAdmin culture seems more fragmented and less community driven than the programming community for some reason. It’s looking more and more like we will eventually promote selected users with high reputation on the IT site to moderator status. 3) We still need to have a private beta before the public launch, though less than we did with Stack Overflow, as the software is reasonably mature. I will automatically extend private beta invitations to any Stack Overflow user with 200 or more reputation. The initial community for the IT / SysAdmin site will come from programmers who cross over. 4) Thus, if you have a Stack Overflow account in good standing, you will get a small reputation bonus when creating your account on the IT site. Of course this will be done through OpenID as usual. There will also be ways to send questions back and forth from site to site. They are “sister sites”, but they do have their own distinct communities, visual style, and domain names. 5) No, we can’t call it Rack Overflow, and here’s why: Sorry. I know it’s clever, and all, but it’s just a bad idea. At the moment I am leaning heavily toward the name serverfault.com. A quick straw poll on Twitter got reasonably positive results. I realize it’s not as good a name as Stack Overflow. But this site has such high risk of a billion “how do I install my printer” questions that the name has to be more obvious (e.g. the word server, specifically), and clearly indicate that this is a community for IT Pro and SysAdmin types. I’ve noted many times that naming is one of the hardest things in programming, and really in life altogether. Having a “good enough” name to move forward and get things rolling is probably more important than getting it perfect. I liked Jon Skeet’s take on this, where he opens with the T.S. Eliot poem The Naming of Cats. The Naming of Cats is a difficult matter, It isn’t just one of your holiday games … When you notice a cat in profound meditation, The reason, I tell you, is always the same: His mind is engaged in a rapt contemplation Of the thought, of the thought, of the thought of his name: His ineffable effable Effanineffable Deep and inscrutable singular Name. And this quote from Phil Karlton: There are only two hard things in Computer Science: cache invalidation and naming things. Having recently named a human being, I heartily concur. If you’re part of this community and are job-hunting, look no further than our system admin and network admin postings."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/15/stack-overflow-and-bizspark/","date":"2009-03-14T23:00:00.000Z","tags":["Background"],"title":"Stack Overflow and BizSpark","text":"Stack Overflow is language and platform agnostic by design. We feel that building cool stuff is way more important the brand of screwdriver you used to build it. Argue all you want about which brand of screwdriver is better, but what really matters is the end result — what you’ve actually built with your screwdriver of choice. That said, we’ve been very open about the fact that Stack Overflow runs on a Microsoft development stack. It’s OK to be proud of your stack if you aren’t a jerk or a bigot about it. We chose the Microsoft stack because we knew it intimately, and we all had years of development experience under our belts. We were also very much enamored of the ASP.NET MVC style of building websites, and IIS7. The .NET framework is quite fast and mature by now, with a nice 64-bit top to bottom toolchain supporting it. In short, we love our stack! One downside of a Microsoft stack for a young, poor startup (have I mentioned that Stack Overflow was mostly funded out of my pocket?) is that, unlike the open source world, you have to pay for software licenses. This isn’t a big deal for the mega corporations that seem to make up most of Microsoft’s revenue. What’s a hundred thousand dollars in licensing fees when you have millions in income? Relative to how much it costs to pay human beings to do the work, it’s almost nothing. Startups, however, are running not so much on money, but on moxie. Moxie is an essential ingredient in any startup, but it is sadly not legal tender for purchasing software licenses. And Microsoft software licenses aren’t cheap, particularly the Windows Server licenses, and especially the SQL Server licenses, which are absolutely eye-poppingly expensive (think $10k and up). This is where Microsoft’s BizSpark program comes in: No fees to join (though you do need a “network sponsor”) Access to as many production Microsoft product licenses as you need, for free, for three years MSDN Professional full access subscription to download the software This is good for three years. At the end of that three year period: you have to pay $100 you have to license the software you’re actually using Basically, it’s a gamble that some startups will transform into successful businesses in a few years, businesses that don’t care when they have to spend less than 1% of their income on software licensing fees. I don’t think BizSpark will magically turn startups who hate closed-source software into Steve Ballmer fans overnight. However, it’s a pretty nice option for developers who have skills in Microsoft development tools and are looking at running a lean, mean startup with legal licenses. The options before BizSpark were pretty dismal — Piracy? Grey market licenses? Co-opted MSDN keys? Stack Overflow has been enrolled in BizSpark for a while now. Eligibility requirements are as follows: In the business of software development Privately held In business for less than 3 years Less than US $1 million in annual revenue This isn’t a silver bullet that will magically close the chasm between open source and closed source toolsets. But it’s clearly a step in the right direction. I almost wish Microsoft had launched BizSpark five or ten years ago. If you’d like to get started, check the BizSpark website. They also have a Twitter account which highlights some of the other startups involved, and includes this essential advice: Bizspark friends please RT: if you need a invitation code to join Bizspark, just email BizSpark@microsoft.com, we will sign you up ! Given the weird “network partner” requirement, I’d give that a shot if this is at all a fit. What do you have to lose, other than all your open source street credibility?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/13/jeff-and-joel-at-mix-09-live-podcast/","date":"2009-03-12T23:00:00.000Z","tags":["Community"],"title":"Jeff and Joel at MIX 09: Live Podcast","text":"Joel and I will be at the upcoming MIX 09 conference in Las Vegas next week. More specifically, we’ll be doing the Stack Overflow podcast live from the show! Tuesday, March 17, 2009, at 6:30 PM At the Third Place hang out area The Venetian Las Vegas 4th Floor, Marcelo 4403 You will need to be registered for the conference (which takes place at the Venetian). You do not need to be registered for the workshops. This is technically the day before the conference begins, but if you’ll be there, do stop by! I know Joel is bringing all kinds of crazy audio equipment for lots of audience participation. Geoff Dalgas and Jarrod Dixon from the Stack Overflow team will also be present for the duration of the conference, so if you spy them walking around the Venetian, feel free to strike up a conversation with them and grill them on any aspect of SO. I grant anyone reading this full permission to monopolize their time. If you can’t attend the conference, as a perk for those viewing remotely over the web, there’s also a brief 30 minute online-only Q&A; after the keynote with Scott Guthrie (aka “The Gu”) and myself. I believe we’ll be taking questions through the Twitter #askthegu hashtag. And with any luck I’ll have nothing to say because the Gu has more programming knowledge in the tip of his pinky finger than I have in my entire body."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/12/podcast-45/","date":"2009-03-11T23:00:00.000Z","tags":["Company"],"title":"Podcast #45","text":"This is the 45th episode of the StackOverflow podcast, where Joel and Jeff discuss what a program manager does, the value (or lack thereof) of a functional spec and vision statement, building developer community, and planning your development time. Joel and I will be at the upcoming MIX09 conference. We’re also trying to set up a live podcast there on Tuesday, March 17th in the evening. Joel’s essay How to be a Program Manager attempts to explain the essential role this person plays on a software project. It’s a shame the job has such a nebulous title. Is writing a functional spec at the heart of agile development? What is a spec, exactly? There has to be something between sitting down and pounding out the code with no planning whatsoever, and meticulously, bureaucratically documenting every tiny detail of your application. Not all storyboarding has to be painful. Wireframing the user interface with tools like Balsamiq can take the pain out of a lightweight “functional spec”. Describe every screen, and have some annotations about how stuff is supposed to work. I call this UI-first software development. The often cited article No Functional Spec doesn’t actually mean no functional spec, if you read it closely. At least in our interpretation of the text. Can your team pass the elevator test? You also need a vision statement or “elevator pitch”. Everyone on your team should be able to explain what your application does, in a few simple paragraphs, to a layman. If they can’t, it’s sign of deeper problems on your project. The book Dreaming in Code, which documents the Chandler project, might be a good example of a project that had a vision statement that hurt the project instead of helping. It described where they wanted to go, but not how they planned to get there. Flock might be another example — what does “we’re a social web browser” mean? Dave Winer maintains that, if you read the description of some new technical thing and can’t understand it after the first readthrough.. it ultimately isn’t important and can be safely ignored. Has Joel Spolsky been honest about his time at Microsoft? Realize that the article in question is one of Joel’s first non-blog blog posts, way back in 2001, describing something that happened in 1992. So it’s ancient history. Joel maintains that Greg Whitten’s 2005 email is simply the other half of the story. There’s no conflict, just two sides of the same coin. For all the talk about how Reddit comments have degenerated, we felt the programming reddit comments on the Joel article were generally quite insightful. Joel and I are big fans of Hacker News. Although I have criticized the lack of downvotes in the Hacker News system, it’s important to note that there is a secret cabal of 30 editors that will kill flagged articles. So it’s not entirely subject to the whims of user voting, either. Joel thinks that every hacker who maintains a community comes up with a manifesto that puts them squarely in Clay Shirky a Group is its Own Worst Enemy land. Even he has done it, with Building Communities With Software. You have to make very different decisions based on the size and the composition of the group at any particular time. Joel and I both dislike threaded discussion formats. When I delved back into threaded discussion this week on the programming Reddit and Hacker News I was reminded how awkward they are. I think developers have a myopia about tree structures, which are incomprehensible to the average person but a daily part of their programming work. I was shocked to discover that SQL Server will sometimes look at a parameterized query and come up with an incredibly bad query plan, which it will then store in the query cache, and (even worse!) use over and over! The trick is to use the optimize for unknown hint, which tells the query plan generator to use a statistical sampling of potential inputs rather than basing its decisions on whatever random parameter happened to be passed in the first time. On getting developers to come up with realistic schedules — first of all, always think in terms of coaching rather than punishment. Punitive measures never work. We recommend following Joel’s advice on evidence based scheduling, which opens with “break it down”. We answered the following listener questions on this podcast: Nik Reiman: “What about Stack Overflow for IT questions that aren’t programming related?” Our favorite Stack Overflow questions this week are: How to Deal with Chronic Time Issues? Apparently, beatings will continue until morale improves. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/09/the-value-of-downvoting-or-how-hacker-news-gets-it-wrong/","date":"2009-03-08T23:00:00.000Z","tags":["Community"],"title":"The Value of Downvoting, or, How Hacker News Gets It Wrong","text":"Paul Graham’s Hacker News is a great website to find interesting programming links and sane discussion. The site reflects a sort of post-Reddit sensibility; the design of HN was directly intended to address the shortcomings of programming.reddit.com from someone very much on the inside (Reddit was a Paul Graham Y Combinator startup). As such we studied it closely when building Stack Overflow. It is true that discussion on Hacker News is more serious and less incendiary than the wild-west anything goes of programming.reddit.com. I’ve seen this firsthand, on blog articles I’ve written that have been posted to both sites. In What I’ve Learned from Hacker News, Paul explains: It’s pretty clear now that the broken windows theory applies to community sites as well. The theory is that minor forms of bad behavior encourage worse ones: that a neighborhood with lots of graffiti and broken windows becomes one where robberies occur. I was living in New York when Giuliani introduced the reforms that made the broken windows theory famous, and the transformation was miraculous. And I was a Reddit user when the opposite happened there, and the transformation was equally dramatic. I’m not criticizing Steve and Alexis. What happened to Reddit didn’t happen out of neglect. From the start they had a policy of censoring nothing except spam. Plus Reddit had different goals from Hacker News. Reddit was a startup, not a side project; its goal was to grow as fast as possible. Combine rapid growth and zero censorship, and the result is a free for all. But I don’t think they’d do much differently if they were doing it again. Measured by traffic, Reddit is much more successful than Hacker News. But what happened to Reddit won’t inevitably happen to HN. It’s a good read for anyone interested in building communities online. As you might imagine, I read it with particular interest since we’ve been running a full blown (and far larger than I would have predicted) programming community over the last 7 months. Perhaps the most notable difference between Hacker News and Reddit is that it’s impossible to downvote anything on Hacker News. There exists one, and only one, form of vote: the upvote. So you can either upvote something, or do nothing at all. It’s an interesting design decision, but ultimately a bad one, in my opinion. (update: Apparently it is possible to downvote comments, which I never realized. It is buried in the faq Why don’t I see down arrows? There are no down arrows on submissions. They only appear on comments after users reach a certain karma threshold [ed: this is unstated for some bizarre reason, but it is currently 100]. (I apologize for my misunderstanding, but there’s no visible UI for downvoting, and I can’t recall ever seeing a single negative voted comment in all the times I’ve visited Hacker News! Also, I put these comments in parens to make them extra-LISPy so Paul Graham would see my corrections.) Let me get some important caveats out of the way: we have to be careful in drawing comparisons between Hacker News and Stack Overflow, because they are fundamentally different sites. We’re a Q&A site with some accidental discussion, and Hacker News is a site that exists for the express purpose of discussion and link sharing. So to the extent that we have different missions and different goals, approaches that work for our site might not work for HN, and vice-versa. On Hacker News, every post effectively starts at zero (technically, one implied upvote, which is your own, but we’ll call that zero), and can be upvoted indefinitely. The advantage of this system is that nobody gets downvoted, but at a steep cost: we’ve lost half the potential information. If a post has zero upvotes, does that mean it’s bad? incorrect? uninteresting? mediocre? There’s no way to tell, because zero has multiple meanings. If you add back in the negatives, suddenly the range is doubled. An evil or incorrect post is now different than a mediocre or uninteresting post, because it will have downvotes and a negative score. But getting downvoted isn’t anyone’s idea of a good time. It’s tempting to disallow it entirely, to avoid this inevitable discussion: Please do something else to discourage downvoting. Maybe increase the cost to the downvoter (there’s already a “declined” on force user to comment on downvoting). This isn’t about points. It’s about participation. Downvoting should be reserved for nasty/offensive/stupid/poorly-thought-out/totally-off-base comments. If someone spends the time to make an honest effort to answer a question, but it’s not that great an answer, just don’t upvote them… Downvoting sends a message, “We disapprove. You spent your valuable time, but we don’t care.” It makes me think, why should I bother spending the time to write up answers for this forum? I stopped posting on several usenet newsgroups because the major participants were just nasty and sarcastic. Don’t let this happen to Stack Overflow. You could argue that the saner level of discussion on Hacker News is because downvotes are disallowed. I’m not so sure; I think it’s more attributable to the fact that Hacker News is relatively young, having launched in February 2007, and the small (but growing) size of the community. In building Stack Overflow, we realized the intrinsic informational value of full range post scores. Downvotes give you the critically important ability to distinguish between the good, the bad, and the ugly. Without downvotes, how can you possibly tell the difference between a post that is harmless but uninteresting, and one that is actually wrong or harmful? Sure, it stings a bit to get downvoted. I’ve been downvoted myself on Stack Overflow. And each time, it makes me pause. But that’s good! That’s necessary! You have to believe there are potential consequences for every post you make — both good and bad. This is how things work on real playgrounds; why would we expect our web playgrounds to be any different? The idea of a world where nobody can be downvoted strikes me as more than a little utopian. Is it realistic for users to expect to post in an environment where there are no penalties at all, no way for their peers to express disapproval or disagreement with their post? When you can’t leave a quiet, anonymous downvote, you’re more likely to post a snarky reply to express your displeasure. That’s why disallowing downvotes is actively harmful to community. The problem isn’t downvotes, per se, but encouraging responsible downvoting. That’s why on Stack Overflow, we do it this way: Upvotes add 10 reputation to the post author Downvotes remove 2 reputation from the post author, and 1 from your reputation The trick here is that downvotes are mostly informational. The cost of a downvote to the users’ reputation (or karma in Slashdot/Reddit parlance) is quite low. It would take a whopping 5 downvotes to equal the effect of a single upvote. And, on top of that, downvotes cost you a tiny bit of reputation. The net effect is that you have to feel very strongly about something to downvote it. Downvotes are serious business, and not to be cast lightly. We designed our system around that maxim. Does it work? I think the data itself tells the story. Here are the total number of votes cast on Stack Overflow through 3/7/2009: upvotes 1,251,020 downvotes 122,141 On average, there are 10x as many upvotes cast as downvotes. That’s even more optimistic than math would predict (10 / 2 = 5x). That’s because we also do a few other things that help keep downvoting in check: We limit total votes per day to 30 per user. You do not have the right to cast downvotes at all until you earn the equivalent of 10 upvotes, or 100 reputation. The endless inflation of a system with no voting limits is something we learned early on. Instituting vote limits has many advantages besides reducing the inherent inflation. Even if you want to maliciously downvote someone out of revenge, you can only do -60 damage to that user’s reputation per day — while simultaneously reducing your own reputation by -30. And you’ll have to wait 24 hours to do it again, which is a nice de-facto timeout to potentially let cooler heads prevail. I understand what Mr. Graham was aiming for in Hacker News. An environment where nobody has to feel the sting of a downvote is a laudable goal, and it’s certainly easy to implement. But is it real? Is it honest? The lack of a downvote removes far too much of the critical community feedback loop from the system. And in the longer term, that will do more to tear down your community than build it up."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/06/new-10k-rep-tools-now-available/","date":"2009-03-05T23:00:00.000Z","tags":["Community"],"title":"New 10k Rep Tools Now Available","text":"Those 10,000 reputation tools I promised, lo those many moons ago? They are now live. If you have the requisite reputation, you’ll see a link at the top of every page which leads to the tools area: Congratulations on achieving 10,000 reputation! You’ve earned the right to see (and undelete) deleted posts, and vote to delete questions that have been closed for 2 days. You also have access to these moderation tools: posts with 2 or more offensive votes recently deleted posts recently closed questions see all recent edits in chronological order new posts by new users new answers to old questions recent questions with most view velocity recent questions with most edit velocity recent questions with most vote velocity Nothing secret here, it’s all public information you can get from the website itself, for the most part, just in an easier to consume form. Yes I did say “a few days” at the end of December. 6-8 weeks, a few days, what’s the difference? Which part of “six to eight weeks” didn’t you understand? These are the same tools we use to keep an eye on the system and make sure nothing too weird is happening. We intend to deliver on the promise of our about page: We don’t run Stack Overflow. You do. Stack Overflow is collaboratively built and maintained by your fellow programmers. Once the system learns to trust you, you’ll be able to edit anything, much like Wikipedia. With your help, we can build good answers to every imaginable programming question together. No matter what programming language you use, or what operating system you call home — better programming is our goal. Hopefully this will help us manage the flow of incoming Q&A; together. Clearly, our small team does not scale, so I’m relying on you experienced Stack Overflow users to lead the way for others. I am open to adding more tool pages here that make sense — but please don’t make serious requests until you’ve tried these pages for a while to see how they work!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/05/podcast-44/","date":"2009-03-04T23:00:00.000Z","tags":["Company"],"title":"Podcast #44","text":"This is the 44th episode of the StackOverflow podcast, where Joel and Jeff discuss the enduring influence of C, the questionable value of the title “Software Architect”, and the evolution of Java. Joel brings the YouTube video Write it in C to our attention. “Pascal won’t quite cut it, write in C.” Did you know that there’s a new version of C++ on the horizon, C++0x? It even has its own tag on Stack Overflow. Speaking of C, Joel had lunch (and just guest-taught a class at Princeton for) Brian Kernighan. Brian is of course the co-author of the classic K&R book, and the creator of the Awk language. And his second favorite language is Visual Basic, surprisingly. I’m a little bitter that so many languages (C#, Java, JavaScript, etc) followed the “look” and many of the important design decisions of C, but Joel blames Algol-68. One C design decision I agree with: using carriage return as your programming line terminator is not a good idea. Having an explicit line ending character like semicolon gives you so much more flexibility, and is far less awkward than weird line continuation characters. Extension methods in C# are a poor man’s way of extending the underlying language. One new feature in C# 4.0 is named parameter arguments. Joel notes that Excel’s VBA implementation went through this same evolution, and it can potentially mask problems, like “why the heck do we have a function with 7 parameters in the first place?” We implemented the fantastic open-source Cacti tool to graph how much bandwidth and CPU time we’re using on our servers. Our ISP does burstable billing at the 95th percentile, and this graph is built into Cacti. Right now we’re doing about 750 KB/sec or 6 megabits/sec under those terms, which is (unfortunately) more than we agreed on with our ISP. This throughput number is 99% GZIP compressed text. What is the rationale for expressing all network bandwidth units in terms of bits? I prefer bytes. And while I’m at it, what the heck is a kibibyte? Remember Alexa? They’re still around. It is sort of a mystery how sites like Alexa, Compete, etcetera can infer web traffic for any random website without access to the webserver’s logfiles. It’s essentially client sampling, but the accuracy of this approach is anyone’s guess. Joel’s classic article on unnecessary choice in software reminds us how customization is a double-edged sword. We’ve resisted a lot of per-user customization options on Stack Overflow for similar reasons. Joel and I both are unsure that the title “Software Architect” is a good one. We’re leaning towards it being almost.. a net negative. “It’s almost disrespectful of the actual architects who work in construction, to use that word to refer to some kind of high-falutin’ big-picture UML-drawing code monkey.” To the extent that the architect is not in the trenches with you doing the work, they don’t have enough context, and will inevitably make the wrong decisions. If we had the power, we’d do away with the title “Architect”. But if you’re stuck with it — and the architecture astronomy that it frequently engenders — what is the proper role for a so-called Architect? They could work to connect disparate groups at large organizations, to provide context and reduce duplication for disparate groups that are working in isolation. It can be hard for groups working locally to see the context of the larger organization. But I traditionally think of this role as an evangelist and educator, not an architect. The catch-22 of rekindling a nascent programming career is that.. good programmers can’t stop programming. So if you can give up programming, it sort of almost means that you shouldn’t be doing it anyway. This is Joel’s tough love answer. Bottom line: if you want to be a programmer, get out there and start writing code.. yesterday. Joel thinks that Java on the desktop is essentially dead. I don’t necessarily disagree, but I think Java is still a fine choice on the server. In the context of history, it is an excellent replacement for C++ if you don’t need to-the-metal performance. Joel has called Java “the new VB”, or “the new COBOL”. The enterprisey and extra-verbose culture around Java is a bit problematic. Steve Yegge’s pieces on this are quite famous and apt. Bear in mind, Steve is a guy who has written hundreds of thousands of lines of Java code, and he essentially concluded that size is the enemy. We answered the following listener questions on this podcast: Brad from Denver: “How do you get rid of incompetent architects?” Ben Younkins: “I graduated with a CS degree, but I haven’t been working as a programmer for 10 years. I’d like to get back into it. How should I do this?” Our favorite Stack Overflow questions this week are: How accurate are the technical arguments in JWZ’s ten-year-old “java sucks” article with today’s Java? Jamie Zawinski is a fairly notorious programmer, and these are valid concerns. How do languages evolve, and how has Java evolved in the last 10 years? Is it better? Worse? The same? If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/03/04/the-great-edit-wars/","date":"2009-03-03T23:00:00.000Z","tags":["Community"],"title":"The Great Edit Wars","text":"Alas, Stack Overflow has fallen prey to that dread disease that plagues all wiki systems: The Edit War. We’re not exactly like Wikipedia, because we are a hybrid system, but it’s worth scanning the official Wikipedia definition: Edit warring is the confrontational use of edits to win a content dispute. Administrators often must make a judgement call to identify edit warring when cooling disputes. Administrators currently use several measures to determine if a user is edit warring. The most common measure of edit warring is the three-revert rule, often abbreviated 3RR. The three-revert rule usefully measures edit warring, as it posits that surpassing three reverts on any one page in under 24 hours is edit warring. While nobody should interpret the three-revert rule blindly, reaching this threshold strongly signals that serious misconduct is afoot. The 3RR metric is not an exemption for conduct that stays under the threshold. For instance, edit warring could take the form of 4+ reverts on a page in a day, or three, or one per day for a protracted period of time, or one per page across many pages, or simply a pattern of isolated blind reverts as a first resort against disagreeable edits. Edit warring is different from a bold, revert, discuss (BRD) cycle. Reverting vandalism and banned users is not edit warring; at the same time, content disputes, even egregious point of view edits and other good-faith changes do not constitute vandalism. Edit warring is a behavior, not a simple measure of the number of reverts on a single page in a specific period of time. And then there’s the list of the lamest Wikipedia Edit Wars, for context. Some of these are hilarious. Given our recent feud with Australia, this one comes to mind: Pavlova (food) Not the dancer, but rather the tasty antipodean dessert, which was invented in Australia[4], New Zealand [5], Australia[6], [7], [8], New Zealand [9], Rabbit Season, Duck Season, fire! Good times. Stack Overflow is a bit different than Wikipedia. We have a much stronger authorship and owner attribution bent than Wikipedia. We’re not trying to be the single point of worldwide reference on a given topic. There could be hundreds of different, related, perfectly valid questions on the same topic. There is no One True Question. So while the general advice on handling edit wars is roughly the same, here’s some detailed guidance specific to our hybrid system. As it says in the faq: if you aren’t comfortable with the community editing your posts, Stack Overflow may not be the right website for you. What we do here is edit posts, together, to make them better and clearer. If you think that’s crazy talk and we’re all nuts, that’s fine. Like I said: there are millions of existing traditional discussion forums on the internet. We’re trying to do something different and perhaps more experimental here, so if you’re not tolerant of that, posting here is probably .. not advisable. I don’t like to see people go, but sometimes it’s just not a good fit. As it says on the sidebar of every edit page, here’s what makes up good editing practice as we see it on Stack Overflow: Fix grammatical or spelling errors. Clarify meaning without changing it. Correct minor mistakes. Add related resources or links. Always respect the original author. Editing is welcomed and encouraged. However, if the author of the post is resistant to your editing changes, even a perfectly legitimate edit based on the above rules, be the bigger man (or woman) and let them have it their way. Our goal here is not to cause friction between users, or to make everything perfect overnight. All we aim to do is gradually clean up and improve questions and answers together. When in doubt, just move on! There will be plenty of other posts and other edits you can make. In time, that reluctant author will learn how Stack Overflow works. Remember, we’re all adults here .. in theory. Please try to resolve edit disputes through simple communication, hopefully the kind that doesn’t involve being rude to your fellow developers. It says “Be Nice” in the faq for a reason. However, if you’ve tried to work it out and you’re still at an impasse, email us! We will happily mediate and help resolve disputes. Above all, remember that we’re building a little community together. There’s a place for disagreement in that community, to be sure; if I’ve learned anything from trying to define “programming related”, it’s that there are only guidelines subject to interpretation by the community, not hard and fast rules. In interpreting those guidelines, try to behave in ways that enhance the community and collaboratively build it up."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/27/happy-100000th-question/","date":"2009-02-26T23:00:00.000Z","tags":["Community"],"title":"Happy 100,000th Question!","text":"I’ve been remiss in not celebrating an important Stack Overflow milestone. Sometime on Wednesday, February 25th, a user asked.. Our 100,000th Question! I didn’t say it was a good question, mind you. But it was the hundred thousandth question posted to Stack Overflow. So, for reference — and remember our private beta started on 7/31/2008, and the public beta on 9/15/2008 — here’s how many questions and answers have been posted to date, by month: Questions Answers July 08 5 4 August 08 4,612 25,488 September 08 16,291 89,369 October 08 16,474 74,469 November 08 14,164 54,752 December 08 13,587 55,273 January 09 17,741 70,612 February 09* 15,941 60,397 We are pretty regularly doing 500k pageviews per day now. Geoff has also been tracking our bandwidth usage through the most excellent Cacti tool. Here’s what the last 24 hour period looks like: So far: peak of 6 Mbit/sec or 750 KB/sec average of 4 Mbit/sec or 512 KB/sec That’s actually a lot for a site like ours which is nearly 100% text with precious few images. And compressed text at that! We’ve had the GZIP religion for a long time, but last night we went through and double checked everything to be sure. I did some port 80 sniffing and found a few cases where content wasn’t served up compressed, even when the client asked for it. Looking for commonalities and doing research, I discovered that HTTP 1.0 traffic and proxy traffic wasn’t being compressed. Turns out those are both off by default in IIS 7. I turned them on like so: %windir%system32inetsrvappcmd set config /section:httpCompression /noCompressionForHttp10:false %windir%system32inetsrvappcmd set config /section:httpCompression /noCompressionForProxies:false I was surprised how many proxies actually identify themselves as HTTP 1.0, given how ancient HTTP 1.1 is. It’s especially ironic considering many of these very same proxies asked for gzip content — I’m not sure GZIP compression is even valid under HTTP 1.0. But I digress. Congratulations to everyone who has helped make Stack Overflow a success by asking and answering questions. Here’s to many more years of learning together! partial data up to Feb 24th"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/26/podcast-43/","date":"2009-02-25T23:00:00.000Z","tags":["Company"],"title":"Podcast #43","text":"This is the 43rd episode of the StackOverflow podcast, where Joel and Jeff discuss dealing with incompetent programmers, whether salaries should be public, dealing with technical debt, and programming for small businesses. Joel is away this week in Florida at the Future of Web Applications conference, where he was a speaker. He mentioned that the new Atlas web GUI builder was particularly impressive. We will try to be more careful about our use of Begs The Question. Joel asks about the rationale behind requiring 50 reputation to leave a comment, but allowing a brand new user to post a question or leave an answer. The reason is mostly because we have no mechanism for voting or marking offensive on comments, because they’re ultra-lightweight. One way to avoid the dilemma of dealing with bad programmers is to be selective who you work for — only choose employment at companies where they Hit the High Notes. It’s even in the Joel Test itself: do new hires have to write code? I’m not a fan of puzzle-based interview processes. I met with a Stack Overflow user this week, Chris Jester-Young, and he revealed a clever and potentially more useful strategy: give interviewees a C program full of bugs, and have them try to debug them! Of course, Chris is a big Code Golf enthusiast, so of course he nailed that one. Sometimes you have to try to change your organization to fix the root problems, otherwise you’re just fighting the symptoms and not the disease itself. This can be quite a challenge when you have no real authority. Joel offers some advice in Getting Things Done When You’re Only a Grunt. Are there happy incompetents? I argue that there are; Joel argues that there aren’t. Among the Inept, Ignorance is Bliss. Perhaps the better question to ask is, how can you help this marginal programmer find a career they’ll enjoy? Many so-so programmers can make outstanding testers, for example. We wonder: what would it be like to work at a commercial for-profit company where everyone’s salaries were public knowledge? I imagined it as something like The Lord of the Flies. Just make sure you aren’t Piggy! At Fog Creek, salaries aren’t technically public, but they have a formula through which everyone’s pay can be derived. This is the Fog Creek Professional Ladder. Fog Creek also does profit sharing, so when the company does well, everyone does well. Is there a two-class society at Microsoft, between Testers and Developers? Joel wonders why they need different titles. I had always heard Microsoft did a great job of giving test engineers a viable parallel career track. Joel believes manipulating compensation to motivate people does not work, almost by definition. Top developers will do a good job no matter what compensation system you put in front of them. It’s a “blunt instrument” that can cause as much harm as good. Joel is an advocate of “taking salary discussion off the table, paying people fairly and justly and well, so they can stop worrying about it so much.” We have a lot of anti-bot code on Stack Overflow. What we didn’t think about was human-entered spam! Now we do — yet another example of the incredible power of rate limiting techniques. On matters of customer service, we do endeavor to not make the situation worse. Start practicing saying “I’m sorry, it’s our fault.” Updates may slow down on Stack Overflow for a little while. We have built up a lot of technical debt around our database, and we have to hunker down and refactor a few core database tables that affect 80% of our code. If you don’t pay down your technical debt every so often, you could end up like Twitter — a reliability laughingstock. But, somehow, still successful. There’s something liberating and energizing about going in and tearing down huge parts of your application to rebuild it and make it better. Unlike our previous discussion on learning languages, I’m more of an advocate of the big bang model here, whereas Joel proposes something more incremental. If you work in programming or IT for a small business, can you give an elevator pitch explaining the value you bring to the business to the powers that be? Are you scaling your solutions to the size of your business, and not over-engineering it? What can you outsource, versus what is strategic? We answered the following listener questions on this podcast: Matt Rogish: “How does one ethically get rid of of incompetent programmers?” Our favorite Stack Overflow questions this week are: Choosing a technology stack for a small ‘budget conscious’ business — if the company is unwilling to spend any money at all, that means they place no value on what you’re doing. Fix that first, if you can. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/21/new-question-answer-rate-limits/","date":"2009-02-20T23:00:00.000Z","tags":["Community"],"title":"New Question / Answer Rate Limits","text":"Stack Overflow is somewhat unique in that we encourage participation of essentially anonymous, random programmers. Our idea is to radically reduce the bar for participation, and take one giant leap of faith: Trusting our users. Well, most of them, anyway. We have the typical hurdles in place to prevent bots from gaming our system: JavaScript and “too fast to be human” triggered CAPTCHA. This works in conjunction with community use of the offensive flag, which auto-deletes any post after 5 users tag it “offensive”, and traditional downvoting. This system has been fairly effective to date. We’ve only had a handful of spam and trolling, and it’s all been handled with a minimum of fuss or impact to the typical Stack Overflow user. That is, until tonight, when we were hit by a malicious user of a type we haven’t seen before: In a way, I suppose I should thank this user for doing this on a Friday night when traffic levels are pretty low. Here’s my official response: How does it feel when we vandalize you, Mr. Tupac Shakur? Eh? Not so good, I bet! But in all seriousness, the surprising thing here is that this user was not a bot. Our anti-bot stuff would be challenging to get around. It was an actual human being, entering the CAPTCHAs, cutting and pasting text into every post. We verified this by looking at the logs, and the timestamps on the entries. The times are slow and variable, not at all what you’d expect to see from a bot. Wow. How bored is this guy? (And yeah, it’s always a guy, who are we kidding.) I’m not going to name any names, here, but we tracked all the IPs that this activity came from and they were all geographically similar. As if I needed another reason to hate Kangaroos and Koalas. I’ve been thinking for a while that we should have more stringent throttles on new users, rate limits for asking and answering questions. This human spam storm was my excuse to implement them. So, effective immediately… If you’re a new user, with reputation below 100: You may only post 1 question every 20 minutes You may only post 1 answer every 3 minutes This is tracked at the IP address level, so multiple posts from the same IP, even as different “users”, will still be blocked. So take that, Australian wanna-be Tupac Shakur!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/20/our-backup-strategy-inexpensive-nas/","date":"2009-02-19T23:00:00.000Z","tags":["Company"],"title":"Our Backup Strategy – Inexpensive NAS","text":"As part of our new backup strategy, I decided to invest in an inexpensive Network Attached Storage (NAS) unit — the QNAP TS-409U. The TS-409U has the following specs: 1u rack mountable 4 SATA drive bays 500 MHz embedded CPU, 8 MB flash RAM, 512 MB RAM, Linux based Supports RAID 0, 1, 5, 6 with hot-plugging drives Gigabit ethernet network interface w/ web UI Mac, Windows, Linux filesystem support Being Linux, you can also do lots of other cool stuff on it, like run Apache+PHP, MySQL server, FTP server, BitTorrent server, Multimedia Server (whatever the heck Twonky is), and iTunes compatible media sharing. But for our purposes, it’s an inexpensive RAID-based filesystem. It’s a minimalistic set of hardware, as you can see in this Techware Labs review: I populated our TS-409U with four of the best price/capacity hard drives I could source. As of today, at least, the sweet spot is 640 GB drives. Total price was $799 for the device, and $60 each for the drives, so around $1,200 total with tax and shipping. Our Database Ninjatm, Brent Ozar, gave me a little flak for investing in such a low-end NAS device. It’s true, for around $1,400 I could have built yet another quad-core, 2 drive mirror Lenovo RS110 server. However, I felt that having an embedded device dedicated to backups — and one with four drive bays that can do better than RAID 0 or 1 — was the more logical choice. But I agree, it would have been nice to have another full-blown server to pinch hit for scalability or anything else. It’s a grey area. As for setting up the QNAP TS-409U, I was a little annoyed that you have to run a Windows or Mac executable for the initial setup, instead of just booting it and configuring everything through the comprehensive (and very nice) web UI. But it detected my drives and configured OK, at which point I could use the web UI for everything else: Seventeen (!) hours later, the array was fully synced and ready for benchmarking. RAID 6 is just like RAID 5, but with one more parity block, so it can survive two drive failures instead of just one. The downside of picking a low end NAS is speed. The relatively anemic 500 MHz embedded CPU, combined with software-only RAID and the inherent write penalty of RAID 6’s dual parity calculation, means … well, this is not what I would call a “fast device”. Here are some quick benchmarks I ran: 1 file; 6.06 GB read 21.0 MB/sec write 7.62 MB/sec 5,784 files; 1,114 folders; 355 MB read 2.46 MB/sec write 1.81 MB/sec For our intended use, storing a bunch of large single file daily database backups, blazing speed isn’t particularly important. Now that we have a 1+ TB backup device on the local network, we can store a huge history of daily backups. These check in at about 5GB per day currently, with a growth rate of 50 – 100 MB per day. This also takes some write pressure off the database server, since whatever backups we take will be spooled to the NAS over ethernet. We plan to complement our onsite daily backups with informal offsite “sneakernet” backups. As I’ve mentioned before, we are fortunate to have Stack Overflow team member Geoff Dalgas live about a mile from the data center. We bought him a 500 GB 2.5″ USB drive, so he can head over the data center every 2 months or so and copy some backups off to keep in the (hopefully) unlikely event something terrible happens to our data center."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/19/podcast-42/","date":"2009-02-18T23:00:00.000Z","tags":["Company"],"title":"Podcast #42","text":"This is the 42nd episode of the StackOverflow podcast, where Joel and Jeff discuss ethical email, backup strategies, how to learn new programming languages, and dealing with underperforming developers. The Conversations Network, a non-profit organization that graciously underwrites the bandwidth costs of this and many other great podcasts, is looking for a sponsor. Email us at podcast@stackoverflow.com if you know of any We finally rolled out email support at Stack Overflow. If you haven’t been to the site in 7 days, and have provided a valid email address, we include all the responses to your questions and answers (if any) in that period. And of course there is a true one-click unsubscribe. We’re still tweaking the parameters of how it works — what is the optimal email relationship between a user and a website? Sending email these days is a bit of a minefield. How do you avoid instantly going into people’s spam folder? One key piece is having a Reverse PTR record, which is set up at the ISP level. There’s a whole “Deliverability” industry around sending email to people. We’re encouraged by the emerging standard of entering your OpenID provider’s address as your OpenID login. For example, “yahoo.com” works for Yahoo OpenIDs, and eventually “gmail.com” will work for Google. (Today you must use “google.com/accounts/o8/id” for Google, which is not optimal for hopefully.. obvious.. reasons.) Microsoft is also coming on board, though their OpenID support is in private beta. We also implemented gold and silver tag-based badges, based on upvotes within a tag. It’s a way of rewarding people who participate heavily in certain topic areas. We did have to rule out discussion based questions for this algorithm to work. We are also considering a tag leaderboard, as suggested by Greg Hewgill. Our backup strategy has been half-hearted so far. To improve this, we invested in an inexpensive embedded Linux based 1u Network Attached Storage device, the QNAP 409u. This will become our dedicated backup device. It has four drive bays and supports RAID 6 (dual parity). Kind of a neat little device; there’s a whole subculture of inexpensive NAS devices I hadn’t explored until now. Drobo, for example. As it turns out, the cost of bandwidth ends up being the gating factor for us when dealing with our daily multiple – gigabyte database backups. Jim Gray had an eye opening piece on the economics of bandwidth and the surprising effectiveness of “sneakernets”, even today. How likely is it that your datacenter is going to explode? Unless you have a fancy multiple datacenter setup for redundancy, it might be more effective to do some trickle uploads to services like Amazon S3, or even some monthly datacenter driving runs to copy data off using a cheap USB 2.5″ hard drive. Luckily, one of our team members lives a mile from the data center, so that’s the approach we’ll be using. We had some semi-serious issues with our IBM ServeRAID 8k controller, having to do with write-through versus write-back caching. Write-through blocks on actual disk writes, whereas write-back writes to a fast RAM buffer, returns very rapidly, and spools the writes over time (e.g. “lazy writes”). The performance of write-back is dramatically better, but we were seeing some eventual system-wide I/O blocking under heavy write load with write-back caching on. Supposedly this is normal for some RAID controllers, but we opted to downgrade to write-through because the nightly backups would always trigger this behavior for us. Speaking of blocking: it’s funny how many of the techniques discussed on the High Scalability blog boil down to hashtables in memory. Memory is one of the fastest things you have in a computer, and it almost never blocks for any significant amount of time. Unlike, say.. hard disks or network. The act of trying to learn a new language will make you a better developer. Where do you go if you only know PHP? I think you should go to Java or C# to build up a bit more structure, then to Python or Ruby to tear down that structure, as a sort of natural ebb and flow progression journey that I’ve seen a lot of developers make over time. Joel disagrees, and thinks thinks you should go for something radical right out of the gate, like Haskell. “At some point it has to blow your mind, or you’re not learning.” Joel recommends the classic Abelson and Sussman lectures on Structure and Interpretation of Computer Programs. This of course complements the freely available on-line version of the SICP textbook. Go blow your mind! “Once you learn those concepts, you’ll write better code in any language.” Is it an legitimate argument to say that, if you haven’t tried something, you’re not entitled to have an opinion about it? How much does it add to your opinion to have experience in a subject? Joel references Paul Graham’s How to Disagree. Shouldn’t every software project you work on be a learning experience, regardless of whether the software ever sees the light of day? Why would you work on a project that isn’t teaching you anything at all? Is it possible to help programmers who can’t help themselves? We’re not sure throwing a copy of Code Complete at a sub-par developer will necessarily make them any better. I believe pair programing and mentoring is the only way to get this to work, insofar that it ever does. And tread very lightly here, because it’s quite possible to make things worse by being didactic or overbearing. How do you fix not caring? How do you fix lack of motivation? Perhaps the better way to look at this is to keep your project inherently interesting and relevant. Convince your teammates that you’re working on something that matters, at least in some small way. Are we happy with what we’re doing? And if not, how can we fix that? We answered the following listener questions on this podcast: Michał Tataranowicz: “I am a PHP web developer. I want to learn a new language to improve my skills. What language should I learn? It doesn’t have to be useful for web development, although it would probably help.” Adam from PA: “I work for a R&D group at a large defense contractor, I’ve been told my project is ending. How do I keep my motivation going when I know this project is going to be put on a shelf and not used?” Our favorite Stack Overflow questions this week are: When to Drink When Listening to the Stack Overflow Podcast. Are you guys listening to the same podcast as us? We never do this stuff! I have a PMP certification, and the answer just happens to always be 6-8 weeks. Tips on how to inoffensively help an older co-worker to become a developer instead of a code-monkey? This is a tough one. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/17/specialist-badge-implemented/","date":"2009-02-16T23:00:00.000Z","tags":["Company"],"title":"Specialist Badge Implemented","text":"The long-awaited Specialist badges are now working; you can browse them on the badges page. After I worked with it for a while, I realized that these are just tag-based badges, so I dropped the “Specialist” name and stuck with the name of the tag as the badge name. There are two levels: Silver 400 upvotes Gold 1000 upvotes … for non-community-wiki answers on questions with the specified tag. I was originally going to include community wiki answers in the calculations, as badges have historically ignored that designation. I changed my mind, however, when I saw the huge number of silver and gold “subjective”, “fun”, “off-topic”, etc etc badges this would create."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/16/when-is-an-account-abandoned/","date":"2009-02-15T23:00:00.000Z","tags":["Community"],"title":"When Is An Account “Abandoned”?","text":"Let’s talk about deletion. Not question deletion, which works this way, for the record. The deletion I want to talk about today is account deletion. Stack Overflow is a bit unusual in that our accounts are ultra lightweight. We don’t require registration; we allow essentially anonymous posting. We were inspired by Wikipedia in this regard. We wanted to reduce the friction of asking and answering to little more than entering an anonymous comment on a blog. For example, we often don’t even have an email address for our users. And we’re fine with that. I can’t think of very many sites with as loose a definition of account as Stack Overflow. Once someone asks or answers a question, they automatically get a cookie-based account and user id. This account can potentially be “upgraded” by attaching an OpenID to it. The downside of this choice is that we end up with lots of abandoned one-shot “accounts”. But here’s the question: when is it safe to declare an account abandoned? We came up with these two rules of thumb. If.. the user has not visited the site in six months AND the user has not done anything of significance, ever .. their accounts are effectively abandoned. We don’t believe those users are ever coming back. With that in mind: We delete cookie-based unregistered accounts when: The user has not visited Stack Overflow in six months AND The user has less than 50 reputation, and no visible (not-deleted) posts We delete OpenID registered accounts when: The user has not visited Stack Overflow in six months AND The user has only 1 reputation, no visible posts, and no other accounts on the network I think these criteria are safe. I was, however, surprised to discover there are a lot more abandoned registered accounts than abandoned unregistered, cookie-based accounts. Note that when we delete an account, the user information on their questions and answers (if they have any) are denormalized into text fields. At the very least we have an IP address, and a user-entered name, so you still have some inkling of who the original author was. When someone wants their account deleted we normally ask that they edit the profile and email us – this adds a human sanity-check to the process, since accounts are hard-deleted (unlike posts). However, if you signed up to post a single question and never used your account again, it’s a bit simpler: users with next-to-no presence on the site (left at most one post or one vote, received at most one up-vote, etc.) will see a delete option on their profile: This ended up being a fairly common request from folks who created an account but never used it, or accidentally created a new account before remembering that they already had one."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/13/now-showing-email-notifications/","date":"2009-02-12T23:00:00.000Z","tags":["Community"],"title":"Now Showing: Email Notifications","text":"We just implemented a basic form of email notifications, which (mostly) closes our highest voted UserVoice request. If you… Tick the option to allow emails on your user page preferences Provide us a valid email address in your user settings Haven’t been to the Stack Overflow website in at least 7 days Have at least one comment/answer response to you in that time frame You’ll get an automatic weekly summary of any responses to your questions and answers in your email inbox. We include the first 300 characters of every response in that timeframe. Email HTML formatting is incredibly primitive, so we tried to keep it HTML 3.0 simple. We also set up a Reverse PTR record with our ISP so hopefully our emails won’t get flagged as spam. Two notes on this. We have taken the liberty of turning on the “opt-in” email flag for any users who haven’t been on the site for more than 60 days, and have a valid email address and a reputation score of at least 25. We did this to reconnect with Stack Overflow users who have been gone so long they might not know they have a bunch of new answers and comment replies to their posts. (Not to mention all the awesome new features on the website since then.) That was about 3,000 users in total. We are also turning on this flag for users who have a bounty question in play. We want to make sure users have at least one day of email warning before their question bounty expires, so they remember to check for an answer and accept one, if they want to avoid the auto-accept that kicks in for the highest scored answer (minimum of 2 score required). Of course, we offer a one-click instant unsubscribe link at the bottom of every single email we send, so this is very easy to get out of. We don’t spam, we just want to show you the answers and comments that relate to your stuff! Yes, we realize there are a dozen other ways you might want to be notified by email, and we’ll get to those. But for now, this is a simple way to keep abreast of any activity on Stack Overflow when you’ve been away from the website. So if you’re interested in the automatic weekly email notifications, be sure to visit your user page and check under the Preferences tab to turn it on (or off) — and make sure you have a valid email set in your user profile."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/12/podcast-41/","date":"2009-02-11T23:00:00.000Z","tags":["Company"],"title":"Podcast #41","text":"This is the 41st episode of the StackOverflow podcast, where Joel and Jeff sit down with Robert Martin aka “Uncle Bob”, and discuss software quality, the value of software engineering principles, and test-driven development. Joel clarifies that some of his comments in Podcast #38 were a bit unintentionally ad-hominem, and apologizes to Uncle Bob for that — see Bob’s open letter blog post. But on the positive side, it did get us a podcast with Uncle Bob! This was a big week for Stack Overflow; we moved to a new hosting provider — PEAK Internet in Corvallis. We did have a few blips with DNS but other than that the move was relatively smooth. Increasing our servers from 4 GB (web) and 4 GB (database) to 8 GB and 24 GB, respectively, opened up tons of breathing room and unleashed a lot of latent performance. Memory is incredibly cheap right now; there’s no reason not to install ridiculous amounts. It is (almost) free performance. Bob reminisces about when he bought memory by the bit! When I said “quality doesn’t matter”, I didn’t mean it literally. If you deliver a software product that nobody likes or wants to use, it doesn’t matter how great the quality of your code is. You can always fix code quality — but fixing “nobody gives a crap about our product” is far more difficult. That’s what you should be worrying about most of all. Quality has many dimensions. The cleanest code in the world could utterly miss the point on usability, scalability, performance, and meeting users’ expectations. On the other hand, as Bob points out, there are companies that have shipped broken products which permanently damaged their reputations and, in some cases, even forced themselves out of business. Bob’s SOLID principles are based on some well known conventions. I talked about the first one, the Single Responsibility Principle, in Curly’s Law: Do One Thing. You may have heard this before as Don’t Repeat Yourself (DRY), Once and Only Once, or Single Point of Truth. We wonder if some of these guidelines — such as “deploy independently” — are obviated by the inevitable forward march of technology, such as software delivered through the cloud, and virtual machines. What happens when principles fall into the hands of people who don’t really know what they’re doing? Or people who become bureaucrats, rigidly enforcing rules on everyone? We think the existence of rules, in and of itself, isn’t necessarily a net good. The types of developers who need those rules are often immune to them. Often, software developed internally doesn’t have to be good; users are forced to use it. This software would never survive as a real product that had users who actually had to want to pay for and use the software. Bob is fond of asking “why is open source software so much better”; part of the reason is that this software has to survive in the real world on its own merits to garner users and attentions. It’s not isolated on some peculiar little corporate Galapagos island where it has no competition. Joel worries that excessive TDD (say, going from 90% to 100% test coverage) cuts time from other activities that could benefit the software product, such as better usability or additional features users are clamoring for. Unit tests are absolutely useful as a form of “eating your own dogfood”, and documenting the behavior of your system. Even if you disregard the actual results of the tests completely, they’re still valuable as documentation and giving you a fresh outside perspective on your codebase. Joel notes the difficulty of testing the UI (web or executable) versus testing the code behind the UI. The classic method of doing this is probably documented in The Art of UNIX Programming, where you start with a command-line app that takes in and spits out text. The GUI is simply a layer you paste on top of the command-line app, which leads to perfect testability — but perhaps not such great apps, in the long run. Which is more important? The hidden context of wondering whether a large switch statement you’ve written is the right choice is that you’ve already won — the types of developers who are actively thinking about their work aren’t really the problem. Our favorite Stack Overflow questions this week are: Everyone: Large Switch statements: Bad OOP? The idea that giant switch statements are fundamentally evil is a bit of a knee-jerk reaction. It really depends how simple and straightforward you can make the switch statement. We answered one listener question on this podcast: Andrew Davis: “My rule of thumb is that unit tests should be written for clearly defined code that has highly constrained input going in and coming out. Is it even worth writing tests for GUI code?” Tim Kington: “True test-driven development has one benefit you didn’t talk about: you can approach your code from the perspective of the client.” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/08/new-datacenter-migration/","date":"2009-02-07T23:00:00.000Z","tags":["Company"],"title":"New Datacenter Migration","text":"We just finished migrating our new servers over to the new datacenter at PEAK Internet. The installation was aided greatly by Stack Overflow team member Geoff Dalgas, who happens to live about a mile from PEAK in Corvallis, Oregon. He visited the facility before the servers arrived, and also helped with their installation. Having Geoff as our “Remote Human Access Card” wasn’t the deciding factor in our choice of datacenter — but it definitely helped! Geoff recently had his first child, Caleb, and we thought it’d be fun to juxtapose his baby with.. our babies. Aww. So cute! The servers, I mean! You did a fantastic job on both, Geoff. PEAK internet impressed us with their detailed technical responses to our requests (yeah, we’re picky), and their outstanding dedicated business hosting rates. Note that we have moved a bit further to the west coast of the USA in this migration (from Arizona to Oregon), so you may see a tad more latency depending on where in the world you live. Not much we can do about that. “There’s nothing you can do about latency,” says John Romero, referring to physical restraints that slow down network play. “It’s inherent in the system.” “Yeah,” says John Carmack wistfully, “the speed of light sucks.” We believe the speed increase of the new servers will more than offset any latency differences. Here’s to a long and harmonious relationship with our new hosts, PEAK Internet!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/06/server-speed-tests/","date":"2009-02-05T23:00:00.000Z","tags":["Company"],"title":"Server Speed Tests","text":"We now have the new servers set up in the data center, and configured with copies of the Stack Overflow website and database. We excitedly ran a few quick speed comparisons with the live site and found.. the new site was two times slower than the old one. (insert sound of analog record needle being ripped off a record, here.) Er.. what? That was our reaction too. These servers have 2 – 4x the memory, 1.5x the processing power, and faster drive arrays. How could they possibly be slower? Through a process of elimination, we deduced the following: Lightweight pages on the new site indeed load faster. This means the web tier is probably OK. A long-ish running SQL query extracted from the old database server, runs faster when executed manually against the new database server. This means the database tier is probably OK. The more heavyweight the page, the more pronounced the slowdown. This led us to believe the network was the culprit. We double and triple checked all our network settings, and verified our little NetGear GS108T managed switch was configured properly and had the latest firmware. We couldn’t find a single thing wrong or misconfigured. This was turning into a real mystery. We were pondering whether we’d have to eliminate the switch and try a direct crossover ethernet connection between the web tier and database tier. While we were discussing it, I figured I’d update the network drivers from the default provided with Windows to the latest versions from Broadcom’s website. It’s a little risky when done remotely, but it worked. To my utter amazement, once the network drivers were updated on both tiers, our performance magically went from 2x slower to 2x faster! Here’s a firebug network trace of me retrieving my user page on both servers. Existing site: New site: For context, prior to the network driver update, this page was taking over 900 milliseconds to load on the new servers. Just the page itself, mind you, everything else was on top of that. The overall time was around 1.35 seconds average. Ouch! Going from 715ms to 560ms user page load time is the kind of performance increase we expected from the new hardware. Note that I cherry-picked the best page load time from the old server here, versus an average page load time from the new server. In the typical case it’d be even faster. We expect a lot of the heavier pages on Stack Overflow will load anywhere from 50% to 100% faster. We’re planning to switch over to the new servers on Sunday, if everything goes as planned. I guess the lesson here is the same one I learned last time: always update your drivers to the absolute latest versions, or you’ll be sorry. Really sorry! I had no idea out-of-date network drivers could cause such catastrophically bad performance. I guess I do now."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/05/podcast-40/","date":"2009-02-04T23:00:00.000Z","tags":["Company"],"title":"Podcast #40","text":"This is the 40th episode of the StackOverflow podcast, where Joel and Jeff sit down with Michael Lopp, aka Rands, to discuss how a geek manages other geeks, the dangers of working remotely, the pitfalls of offshoring, and some techniques for continual learning. You may know Michael Lopp from his excellent blog, Rands in Repose. We highly recommend the Best Of category if you haven’t visited Rands before. Heck, even if you have. Rands is a Manager of Humans, and many of the entries on his blog are a fantastic resource for other Managers of Humans. “A lot of people stuff on a daily basis, it’s 60 to 70 percent of my day.” He wrote a book on this topic, Managing Humans: Biting and Humorous Tales of a Software Engineering Manager. If you transition from being a software developer to a manager, you will almost never write code. As a manager, how do you balance writing code — if only as a form of daily exercise, to keep your skills sharp — with the rest of what you do? The #1 management skill? Listening. Which means Joel and I should probably never be managers. The magical number of people one person can manage without having serious problems is seven. Beyond that, you’re probably not giving the people on your team enough attention. On managing geeks and nerds: it should be done systematically. They like structure, and you have to put that around this messy business of us being human beings. Perhaps the handbook will be of use. Leading by example can only get you so far. What do you do when you inherit the world’s best programmer in some language you don’t even know? It’s much more hands on than that. Your strengths are not your team’s strengths. Building a so-called Nerd Playground is one way to attract talented developers. But as Joel says, “10% of the joy of coming in to work is that it’s a great place to work, and 90% is that I love these people.” The danger of working remotely is that there’s a lot of non-verbal communication that typically goes on. Our tentative recommendation for working remotely, if you must do it, is to have frequent intervals where you all come together multiple days and work together. In order for the remote relationship to work, there has to be a face to face relationship in place to support it. Michael asks about the Stack Overflow badge system, which was explicitly modelled on the Xbox 360 Achievements system. The Bronze, Silver, and Gold badges are there to support beginners, intermediates, and the hardcore respectively. The idea that you have to figure out why you got a badge is there very much by design; the mystery is part of the fun. There were complaints that answers came too fast on Stack Overflow, which we have hopefully addressed — there is an art to answering questions quickly and effectively. If anything, Stack Overflow “games” you into learning how to progressively answering other people’s questions more and more effectively over time. How, exactly, is this a bad thing? A brief discussion of offshoring. “If people were getting as much value out of remote developers as local developers, then the price would be the same.” It’s also difficult to get good results out of teams when their skin isn’t in the game. While I am deeply uncomfortable with using Stack Overflow as a hiring tool, it is totally reasonable to use it as a “breadcrumb trail of your awesomeness” as a programmer. If your questions and answers are well written and clear, and getting upvoted by your peers, that is something to be proud of. How do you manage continually learning? Reading, writing, and practice of the things you enjoy. It is possible to take this too far, though, and become a magpie developer. One advantage of older developers is that they have more failures under their belt. Michael looks for a combination of ego and humility when he hires — these are somewhat contradictory traits, but they balance and complement each other. Our favorite Stack Overflow questions this week are: Joel: What do you do to keep learning? Jeff: I was recently asked for my stackoverflow rep score in a job interview. Is that appropriate? We answered one listener question on this podcast: “What makes a great software development manager? Should he or she be a good developer to be a manager?” Alex: “What do you think of the feasability of building a workforce of people who work remotely from home?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/02/01/the-stack-overflow-development-process/","date":"2009-01-31T23:00:00.000Z","tags":["Background"],"title":"The Stack Overflow Development Process","text":"I occasionally get questions about the Stack Overflow development process. It goes a little something like this: (with apologies to the always-excellent Bug Bash.)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/30/podcast-39/","date":"2009-01-29T23:00:00.000Z","tags":["Company"],"title":"Podcast #39","text":"This is the 39th episode of the StackOverflow podcast, where Joel and Jeff discuss database design and the shell game of performance, the value of short, focused presentations, and the importance (or not) of a prestigious degree for software engineers. Joel insisted that we run the stackoverflow.com books on QuickBooks. I was more open to using an online accounting solution, but we were worried about someone holding our business finances hostage. Joel also maintains that “every accountant in the world knows QuickBooks”. I’m not happy about it, but small business reality. Now that we can (theoretically) afford to pay ourselves to work on the site, we deployed two new features: reputation bounties on questions and new reply notifications. Joel expresses some concern about the value of panel discussions at conferences. There are lots of variables: who is on the panel, what are the topics, and how skilled is the moderator? It’s almost better to give each person on the panel a 10 minute window to talk about some topic they think will have value for the audience. I often think of small, focused presentations as “Grok Talks”. One presentation format which hews closely to this model is Pecha Kucha. It’s generally a good idea to err on the side of keeping it small. The larger the talk, the more material you should have whittled away and deleted to get it down to size. In building Stack Overflow, we copied a key part of the Wikipedia database design. This turned out to be a mistake. We are due for a massive database refactoring, which is going to be very painful, but it is necessary to avoid excessive joins in a lot of our key queries. We also begin to appreciate why the giant multi-terabyte table schemas (like Google’s BigTable) are completely join-free, basically simple hashtables or tuples spread across a server farm. My benchmarking shows that CPU speed is surprisingly important on our database server. Going from 1.86 GHz, to 2.5 GHz, to 3.5 GHz CPUs I see an almost linear improvement in typical query times! The exception is queries which don’t fit in memory, but right now with 4GB RAM most of our DB fits in ram; with the new 24GB RAM server I expect the database to be entirely in memory for quite a while. Joel talks a bit about queueing theory, and its relation to OS scheduling. I propose that performance is a shell game with bottlenecks, where you’re constantly trying to decide whether the bottleneck should be memory, CPU, or I/O. More discussion about unit testing: when it’s appropriate, when it isn’t, and what it is for. Remember, 100% code coverage (or even 90% code coverage) is not free. You’re playing another shell game, so decide what axes of that resource balancing equation are important to you. Perhaps the greatest risk is being dogmatic about it. If you enjoy this podcast, you might also enjoy Hanselminutes — Joel gives it his seal of approval! Joel revisits the SOLID principles, and compares them to designing replaceable batteries, or a headphone jack, into your product. Appropriate in some narrow cases, but not all the time. Imagine a consumer product where every single part of it could be plugged in and replaced with another compatible part. Is that realistic? Perhaps new language features will advance programming a lot faster than any given set of programming principles, no matter how good they are. I’ve often thought that design patterns are how languages evolve. Joel says you don’t have to go to a prestigious name brand school, necessarily, but you need to choose schools that have a rigorous selection process. “These people are a tiny little bit more likely to succeed at our rigorous selection process.” I concur — if you aren’t seeking out challenges, whether they are large, small, or somewhere in-between — what are you doing? Our favorite Stack Overflow questions this week are: Jeff: Is mathematics necessary for programming? It can’t hurt, and often helps, but it is not strictly necessary in our opinions. Joel: Does it matter where you get your CS degree? In brief, yes, but not for the reasons you might think. We answered one listener question on this podcast: Michael Coney: “Joel mentioned the SOLID principles on the previous podcast. Our software architect was also fond of over-isolation but was talked out of it. In the real world, if you need to change something, you just rewrite it.” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/30/updated-wmd-editor/","date":"2009-01-29T23:00:00.000Z","tags":["Company"],"title":"Updated WMD Editor","text":"Thanks to the herculean efforts of several Stack Overflow users, we were finally able to deliver some long-overdue bugfixes to our beloved WMD editor in early January, once it was fully reverse engineered. (Sadly I still have yet to hear from the original WMD author, John Fraser, after months of attempting to contact him in every possible way I know how, short of hiring a private detective. I seriously hope he’s OK; it’s mightily unusual in my experience for a programmer to drop off the internet so completely, and for so long.) Since then, Dana Robinson has been toiling away, removing cruft from the WMD editor and implementing my #1 feature request: CSS sprite toolbar buttons. This is a big deal because it reduces the number of HTTP requests necessary to render the WMD editor from about 14.. To one! This one change speeds up almost every single page we serve up! We allow and encourage low-friction anonymous participation on Stack Overflow, so the WMD editor is always right there, inviting awesome (and not-so-awesome) new answers, at the bottom of every question page. All 80,000+ of them! I’ve already noticed the site is much, much snappier with this new revision of the WMD editor deployed. If you’re interested in spriting some of your web UI, there’s an updated, more modern article on CSS sprites that demonstrates how to do it using JQuery. Spriting your whole UI would probably be overkill, but it’s a big win in the right scenario, like this one. But CSS spriting isn’t the only improvement Dana delivered: Slimmed down some polling loops for better performance Added additional CSS DOM caching to reduce unnecessary DOM traversals Removed extraneous code to reduce download size You can pull the changes from the repository if you’d like to take a look. As I’ve mentioned before, Dana is a big fan of the Fake Plastic Rock much like myself. As a reward for the tremendous amount of work Dana put into this, I was more than happy to hook him up with a set of Rock Band 2 wireless drums and Triple Cymbal kit. Pretty soon, he’ll be rocking out like this: The code is fairly maintainable at this point, so hopefully we can be much more responsive to any editor issues from now on. The next phase is to create a JQuery-ized version of WMD, to reduce its size and enhance its browser compatibility even further."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/29/new-replies-notification/","date":"2009-01-28T23:00:00.000Z","tags":["Company"],"title":"New Replies Notification","text":"We just rolled out a new replies notification feature. You’ll notice that there is a small envelope icon next to your name at the top of the page. Every 30 minutes, we check to see if new comments have been added to your posts, or if new answers have been added to your questions. If so, the envelope will light up. Mousing over the envelope will explain what’s going on. Clicking on the envelope in either state will take you to your recent activity page. This page is private to you. The focus of the recent activity page is things other Stack Overflow users have done to your stuff! In other words, if users have… added answers to your questions commented on your questions or answers edited your posts voted your content up or down (or otherwise) affecting your reputation It’s visible here. We also have a handy topbar notification if you’ve been away from Stack Overflow for at least 24 hours. It links to the exact same page, but will tell you exactly how many new answers and comments your posts have generated while you were gone. We’re still refining how the recent activity page works, but hopefully this will make it easier for you to find (and possibly respond) to the answers and comments left on your posts!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/27/reputation-bounty-for-unanswered-questions/","date":"2009-01-26T23:00:00.000Z","tags":["Company"],"title":"Reputation Bounty for Unanswered Questions","text":"Do you feel like your Stack Overflow questions just aren’t getting the answers they deserve? If so, you’re not alone. As Corey Trager noted in a blog comment: Speaking for myself, you don’t have to reward me for ASKING questions on Stackoverflow: Getting an answer is enough of a reward in itself. Just do whatever you can to keep the answer-ers motivated. We are now rolling out the long awaited bounty feature tonight, and it’s designed to do just that: motivate answerers. If: you have at least 100 reputation your question is at least two days old your question does not yet have an accepted answer. You’ll see the “start a bounty” link at the bottom of the question. Clicking on it expands the bounty panel. Use the slider to establish a reputation bounty on this question anywhere between 50 and 500 reputation in 50 point increments. (Yes, you must have at least as much reputation as the bounty amount.) Everyone who visits the question will see the active bounty details posted directly under the question, indicating how long the bounty period runs for, and what the potential reward is. (Note that the total bounty award is +50 because we throw in 50 bonus rep on top of whatever reputation you’ve put up.) There are some definite perks to being a bountied question: All active bounty questions are listed on the homepage under the new “Featured” tab in descending expiration order. So, the bounties about to expire will naturally be on top. All active bounty questions have a distinctive icon next to their titles, so you can tell when you see one mixed in with other questions. The bounty period lasts for 7 days. There are three possible outcomes: You accept an answer. The bounty is subtracted from your reputation, and awarded to the answerer. You do not accept an answer. Any answer that was a) provided after the bounty period started and b) has 2 or more upvotes is automatically accepted after 7 days. The bounty is subtracted from your reputation. The answerer is awarded half the bounty amount (unless it’s your own answer, see #3 below). You accept your own answer. The bounty is subtracted from your reputation. Note that all bounty awards are immune to the daily reputation cap, of course. Also, a bounty accepted answer is permanent and cannot be undone. The traditional accepted answer check is “glowing” to indicate that this is a special kind of accept. Mousing over the accept check provides additional detail in a tooltip, such as when the accept was granted, and how much of a bounty (if any) there was. Stack Overflow already works well for smaller, simpler questions. We’re hoping the new question bounty will improve answer quality on those tougher questions that aren’t so easy to answer. But they do require a bigger commitment from both the asker and the answerer — you must be willing to slice off a piece of your own reputation and bestow it upon the person who is best able to answer your question."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/25/new-stack-overflow-servers-ready/","date":"2009-01-24T23:00:00.000Z","tags":["Company"],"title":"New Stack Overflow Servers Ready","text":"After many trials and tribulations, the new Stack Overflow servers are now ready to ship. Ladies and gentlemen, meet the newest members of the stackoverflow.com hardware family: SOWEB1, SOWEB2, and SODB1. That’s right, I even labelled them with my black and silver sharpies. It’s been an awfully long month and a half since I originally asked whether we should rent servers or buy them. I’ve finished burn-in testing on all three servers and I am totally confident (barring any shipping disasters) they’ll arrive at our hosting provider ready to slide into a rack and “just work”. The benefit to you is that we make stackoverflow.com even speedier than it already is, and far more scalable. I learned quite a bit in building up these servers, and I certainly paid my dues in the process. So you’ll forgive me if I took the liberty of personalizing our servers a little bit. That’s right, I build my servers with an extra-special ingredient: love. And if loving these computers is wrong, I don’t wanna be right. I guess I was inspired by the old Amiga A1000 I used to own, which had the signatures of the designers molded into the underside of the case. Of course I’m just a schmuck who assembled some parts, and these guys were actual hardware design gurus far ahead of their time, but you know what I mean. In particular, I have to emphasize two things I learned. If you’re building up servers, make sure you do these two things as soon as they arrive: Update the BIOS and RAID firmware to the latest possible versions. Make sure you have the latest operating system drivers. I’m no stranger to BIOS updates and firmware flashes for my desktops and consumer hardware, but I was hesitant to mess with the firmware on a server. I figured if it ain’t broke, don’t fix it, that sort of thing. Well, I was wrong. The RD120 server demanded a BIOS flash as soon as I installed the slightly newer CPUs I ordered for it. No problem; that’s fairly typical for newer CPUs. Done and done. What was much more unusual, however, was the way RAID port #6 refused to operate on the server. RAID ports #1 through #5 worked like a champ, but not #6. I ordered a grand total of 12 hard drives (6 + 2 + 2 + 2 spares), and I tried three of them in that port, to no avail. It would see the drive, then reject it within a few minutes. I figured this had to be a hardware problem so I called Lenovo. They dispatched a very friendly tech the next day who came out and replaced the RAID backplane. Unfortunately, this didn’t fix the problem! After he troubleshot it for a bit, I got a lecture about using “non-Lenovo” industry standard SATA hard drives in a server. I actually have two official Lenovo 160 GB drives here, but he wouldn’t use those either as they’re not on the parts list for the RD120, somehow. I insisted, and we inserted the drive. To my amazement, this worked. I hadn’t even considered putting in a different brand of drive. I thanked the tech, and after he left I tried another random SATA drive I have here. It too worked! (As an aside, I had a rip of a time finding the Windows app that shows you the status of / lets you control the RAID arrays, but I eventually dug it up — the IBM ServeRAID application. Thanks for nothing, Lenovo!) At this point I belatedly realized what my problem was. As soon as I got the RAID controller updated with the latest firmware, all my problems magically went away — RAID port #6 started working perfectly with the original drives. I would have done this earlier, but Lenovo’s update download didn’t work for me, so I had to call support to get a pointer to the IBM ServeRAID 8k series bootable ISO update, which did work. (By the way, have you ever read anything scarier than RAID controller bugfix change histories? brrr. The latest patch was January 9th!) There were still some performance oddities until I updated the default (apparently very out of date) Windows Server 2008 driver to a newer version I downloaded from Lenovo’s website. The moral of this story? See above. Update the damn firmware and OS drivers to the very latest versions as soon as you get the servers, not weeks later! You’ll save yourself (and your vendor) a lot of hassle. I’ve done a fair bit of burn-in testing on all the servers, typical stuff like multiple instances of Prime95. but I paid special attention to the RD120 as it will be our database server. Brent Ozar, our friendly neighborhood DBA ninja, recommended I configure the six-drive array thusly: Two drive RAID 1 mirror — Operating System, SQL Server 2008, and Logfiles Four drive RAID 10 array — Database files I made it so, and I ran some tests with SQLIO to verify that the data file array had good performance characteristics. I created a 24 GB test file on the array, and used this syntax: sqlio -k{R/W} -t8 -s120 -d{drive} -o16 -f{random/sequential} -b{kilobytes} -BH -LS Testfile.dat That means 8 threads, for 120 seconds, hardware buffering only, 16 outstanding I/O operations per thread. 1kb sequential writes 19.18 mb/sec 6ms 8kb random reads 26.90 mb/sec 36ms 8kb random writes 64.65 mb/sec 15ms 64kb sequential reads 344.77 mb/sec 22ms 64kb sequential writes 359.32 mb/sec 21ms 128kb sequential reads 395.40 mb/sec 39ms 128kb sequential writes 413.90 mb/sec 38ms 256kb sequential reads 464.85 mb/sec 68ms 1mb sequential reads 458.50 mb/sec 278ms This compares very favorably with the extremely expensive SAN configuration Chad tested (it’s labelled Server #2 in his charts). Behold the power of inexpensive SATA drives in a directly connected RAID 10 array! It would have been even faster if had we gone with a six drive array, but we felt that the OS needed to be on a separate set of spindles. I also did a quick run of SQLIOSim, which completed fine but produced a few warnings about long IO requests — but apparently that’s to be expected. SQLIOSim will generate sufficient IO requests to overwhelm almost any disk subsystem. The long IO message from the simulator are normal. Although this does tell you that at some point the disks won’t keep up. As Joel pointed out on the last podcast, me personally building up these servers makes zero business sense if you factor in the cost of my time. But I’ve also learned a ton about these servers and the server industry in general in the process. Stuff I feel like I need to know to operate these servers responsibly while they live at a remote data center. To me, that’s worth it — I feel like I’ve paid myself to learn. So here’s to you, SOWEB1, SOWEB2, and SODB1. Long may you run, you magnificent bastards."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/24/adventures-in-delclusionism/","date":"2009-01-23T23:00:00.000Z","tags":["Company"],"title":"Adventures in Delclusionism","text":"In Wikipedia, there are two opposing camps: the inclusionists and the deletionists. I found Nicholas Carr’s definitions to be the clearest and most succinct: Inclusionists believe that there should be no constraints on the breadth of the encyclopedia – that Wikipedia should include any entry that any contributor wants to submit. An article on a small-town elementary school is no less worthy for inclusion than an article on Stanford University. Deletionists believe in weeding out entries that they view as trivial or otherwise inappropriate for a serious encyclopedia. If you have time, you should read Nick’s article; it’s an excellent survey of the topic. Although I’ve always thought of myself as an inclusionist, more or less, it’s becoming increasingly clear that I also have some deletionist tendencies. I guess you might say I’m a delclusionist. (my friend and ex-coworker Jon Galloway claims I’m also an analyst and a therapist, but who can take that guy seriously? Also, he gets upset with me when I don’t hyperlink his name to his blog, but I don’t hold that against him.) Since Stack Overflow has elements of wiki in its hybrid design, we also have to deal with the inclusionist/deletionist debate — although much less so than Wikipedia. With that in mind, I wanted to talk a little bit about how deletion has evolved to work in Stack Overflow over the last 6 months. First: who can delete things? Post authors can delete their own questions or answers. Three (3) users with 10,000+ reputation can vote to delete questions that have been closed for 48 hours. Questions are closed when five (5) users with 3,000+ reputation vote for a question to be closed — and can be reopened at any time through the exact same process in reverse. Moderators can delete anything. This seems fair and just, on the face of things. When you vote to close a question, you are really voting for that question to be eventually deleted. There are some exceptions, most notably for duplicates which need to stick around so people can find the same information using completely different words. But a closed question is no longer alive in any meaningful way, and certainly well on its way to the bit-bucket of /dev/null. But let me share with you a thoughtful email I received from Christian Nunciato that illustrates some of the subtle problems with deletion. On to my question. I realize users have the ability to delete their own questions, which does seem right and good on the surface of things, but I have to say, it’s a shame when some of us put such time and consideration into submitting thoughtful and complete answers, only to have the questions removed from the site inexplicably. I’m writing in reference specifically to this one: http://stackoverflow.com/questions/470230/using-a-function-to-create-an-object-in-actionscript-3-0#470379 … which I thought was an excellent question, and one other site users might ultimately benefit from; it digs a bit into the arcana of the language, and it’s interesting stuff for those looking to deepen their understanding. For some reason, though, it looks like the OP chose to take it down, which is a shame, because I personally spent a good deal of time drafting a submission for it, one that was upvoted and appeared to fix the user’s problem and then some. I’m not asking for anything, though — I just wanted to share that it’s mildly discouraging to have put such work into something, in an attempt to contribute to the community, only to have the product taken down inexplicably and without recourse. While the knowledge of having written it stays with me, which is great, it doesn’t get out into the world, and it’ll also make me think twice about spending as much time next time — something that, as site owners, you might want to be aware of. This is an unfortunate side-effect of deleting a question, which cascade deletes all the child answers. Now, deletions are soft in Stack Overflow, meaning the question is still there; it’ll just return a 404 to all users except those with 10,000+ reputation or the moderator flag. It’s precisely because of situations like this that we recently extended the ability for high-rep users to see deletions, and help mediate any potential issues. Note that the user who deleted a question is always identified, in giant type — directly below the four users who elected to close the question first, and effectively nominated it for that deletion. If someone deletes an individual answer — this can, by definition, only be done by a moderator or the post owner — they’re identified, too: So in response to Christian’s email, and a few other similar emails I’ve received, we have amended the deletion rules a bit: Post authors can delete their answers. But they can only delete their questions when there are no significantly upvoted answers to the question. Usually, it’s garbage-in, garbage-out. Bad questions beget bad answers. If you sort the Stack Overflow question list by votes and sink to the bottom of the barrel, you’ll find some truly horrible questions, as you might expect. But you’ll also find something you probably didn’t expect — some amazingly good answers! Now, these are questions judged by community votes to be of so little merit that I’d usually delete them without a second thought. But I can’t, because a well-intentioned Stack Overflow user has poured his or her heart into an incredibly insightful and helpful answer. Deleting the bad question would bury the good answer, too. It’s the web forum equivalent of turning lead into gold, and it happens far more often than I ever would have predicted. (This is also the reason why voting on questions should be, and is, independent of answer votes.) I am neither an inclusionist (everything should be allowed, without restriction) or a deletionist (anything not on a strict list of allowed topics should be deleted). I’m somewhere in between, a delclusionist, so Stack Overflow is going to reflect that design philosophy. Let me be clear: deletion isn’t something we seek out, but we believe it’s necessary. That said, it’s not an easy line to walk, and we continue to evolve the system. Sometimes it’s hard out here for a delclusionist."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/22/podcast-38/","date":"2009-01-21T23:00:00.000Z","tags":["Company"],"title":"Podcast #38","text":"This is the 38th episode of the StackOverflow podcast, where Joel and Jeff discuss YSlow optimizations for large websites, the value of unit testing, and the hidden pitfalls of asking questions to programmers. Joel notes that simply paying attention to what your coworkers are doing is an effective way to build and lead a team. If you aren’t interested in what your teammates are doing.. why are you on that team, again? I’ve followed the excellent Yahoo YSlow tool for a while. It really is intended for large scale websites, as I’ve noted before. But Stack Overflow is exactly the type of website that can benefit from YSlow recommendations! We’ve been using the Expires or Cache-Control Header since we launched. This saves the browser round-trips when getting infrequently changing items, such as images, javascript, or css. The downside is that, when you do actually change these files, you have to remember to change the filenames. A part of our build process now “tags” these files with a version number so we no longer have to remember to do this manually. We also integrated the YUI Compressor into our build, to minify our CSS and JavaScript resources. We had bad luck with the .NET port of this tool, so we just shell out to Java in the build. Works great, although we had some crazy pathing issues that made us put the JAR file in the root. It’s also possible for Google to host your shared javascript files, if you’re using a popular third party JS library. We chose not to do this because we package related JavaScript together, so it would defeat the benefits of packaging. Browsers will parallelize their requests, but only so many requests can be “in flight” to the same domain. So it can be wise to split your website components across domains. Simple aliases such as a.mydomain.com seem to work fine for this purpose. Joel explains CSS sprites, which is an effective way to minimize the number of HTTP requests your website is generating. This is particularly useful on toolbars and the like which contain a lot of related images. There are analogs here in the Strings tab of Process Explorer, and the UNIX command Strings, as well as classic Windows resource browsing — spelunking for whatever icons and image resources you can find in a file. This is all important because I want Stack Overflow to be as fast as possible. Performance is a feature, and I think often underestimated. Even half a second delay can cause a 20% drop in traffic. We discuss differential database backups and DNS time to live, to make the upcoming site transition to new harware as painless as possible, and minimize downtime. We’ll also update the old site with a static HTML page that tells you you need to flush your DNS. Joel notes that his partner Michael had to order thermal compound back in 2000 when he built up PCs for Fog Creek. This stuff is important! Please don’t use vegemite. We finally fixed our paging algorithm, which had some aggravating edge condition bugs. I dedicate this fix to John Topley. Joel and I have some reservations about unit testing, at least the dogmatic test-first kind, where your goal is to have code coverage in the 95%+ range. It seems to us that this works best for legacy type applications that aren’t changing very much. At some level, the tests become friction preventing you from making changes, as every change results in a stack of failing tests. Joel talks about Robert Martin’s (aka Uncle Bob) Solid Principles, as explained on a recent Hanselminutes podcast. Joel: “it sounded like extremely bureaucratic programming” that “could theoretically protect you against things, but You Aren’t Gonna Need It.” On the other hand, if you’re building a framework or API, something designed to be used by thousands or millions of developers, then having a lot of unit tests — or Uncle Bob’s Principles of OOD — might make sense. Principles and rules are fine, but thinking about what you’re doing should always come first. The implied part of any question is whether the question even makes sense. I’ve always loved Alex Papadimoulis’ take on this, he “nailed” it with Pounding a Nail: Old Shoe or Glass Bottle? Software developers are trained from birth to ask why; when you ask a programming question, ignore that at your peril. And, please, when you see good questions, vote them up! Our favorite Stack Overflow questions this week are: Jeff: Problems with the MARQUEE HTML tag. I love that we’re reaching out to developers who ask naive (but earnest!) questions like this. Joel: SQL Server “AFTER INSERT” trigger doesn’t see the just-inserted row. Another example of being very careful, when you ask a question, to make sure you explain why you are asking this question. Otherwise you’ll get some answers you didn’t expect, such as “why would anyone ever do that?” We answered one listener question on this podcast: Joe Hopkins: “What have you found to be the most limiting or annoying part of the ASP.NET MVC? And do you have details on the Business of Software 2009 conference?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/17/furtheradventures-of-a-raid-noob/","date":"2009-01-16T23:00:00.000Z","tags":["Company"],"title":"Further Adventures of a RAID Noob","text":"I mentioned in the last podcast that I wasn’t sure how the two-drive RAID mirroring was supposed to work in the Lenovo RS110 1U servers we bought. This server comes with a mini-PCI RAID card as standard equipment, the LSI 1064E. To set it up, I did the following: Installed two 500 GB “datacenter class” drives (well, after I figured out how to obtain the mysterious drive rails of mystery from eBay, anyway). entered the LSI MegaRAID BIOS by pressing CTRL+C during bootup, and built a simple mirror array. booted and installed the OS, Windows Server 2008 x64 Standard. Installed the MegaRAID Storage Manager software for Windows (which I had a hell of a time finding, thanks Lenovo) after OS fully ready — ejected one of the mirrored drives! The good news is this worked fine. The system kept humming away with the one good drive it had left, which is the goal of a mirrored drive array. I’ve done this test with both the first and second drive; works either way. So far so good! However, when I reinserted the drive, the system bluescreened. Doh! That’s the bad news. I assumed this meant the system needed to rebuild the drive from the MegaRAID BIOS utilities. So I rebooted, pressed CTRL+C to enter the MegaRAID BIOS utility during the boot sequence, and began resyncing the 500 GB mirrored array. Resyncing from the BIOS took about four hours. After rebooting, I was up and running again, but having four hours of downtime to replace a failed drive is, uh.. pretty bad. Well, this time I decided to reboot the system as-is after the eject, ok, reinsert, doh! cycle. The server booted the OS fine. I entered the MegaRAID manager, and lo and behold: the array was indeed rebuilding, all on its own! Very very slowly, but still! I had jumped to the conclusion that live rebuilds were impossible when I inserted the new drive and it bluescreened. Looks like the real restriction is that you can’t hot swap a failed drive — you must shut down, swap out the drive, and then reboot. Of course this kind of “live” mirror rebuild takes a heck of a lot longer — 8 hours or more in my testing. And during the rebuild, disk performance is pretty much in the toilet, as you’d expect. The RAID controller has to copy 500 GB of data from the good drive to the new mirror drive.. and on top of that, copy any data that changed during the copy, too. On some level it’s amazing this stuff works at all. Requiring a reboot isn’t optimal for failed mirror drive replacement, but it sure beats the heck out of 4 hours of downtime!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/15/podcast-37/","date":"2009-01-14T23:00:00.000Z","tags":["Company"],"title":"Podcast #37","text":"This is the 37th episode of the StackOverflow podcast, where Joel and Jeff discuss the expansion of Stack Overflow into non-programming IT topics, the pernicious problem of “systemitis”, and how to reach the next generation of programmers. I was star-struck that Alan Kay actually participated in Stack Overflow, both answering a question and even asking a question of his own. We finally reverse engineered the WMD source code, thanks to the noble and herculean efforts of Dana Robinson. If you’re interested you can pull the latest version from Dana’s Git repository. Joel recommends Eric Raymond’s Understanding Version-Control Systems. Our (very, very limited) experience with Git emphasizes the importance of editing code with the goal of creating easy to apply patches. If your changes are hard to merge, they’re likely to be ignored. I’ve been having fun (for particularly small values of fun) configuring and building the new server hardware for Stack Overflow. I was moderately surprised to find that live rebuilding a RAID array with a 500 GB drive takes around 8 hours; rebuilding a simple 1-1 mirror array in offline mode takes 4 hours. Joel recommends the built in Windows Server Network Load Balancer (nlb); there’s also the open source equivalent, HAProxy, which the Reddit guys mentioned in our podcast with them. We are planning to launch an IT-centric Stack Overflow in the next few months. This will be a place for System Administrator and IT professionals — people who work with computers in a professional capacity, but aren’t necessarily programmers — can go to get their questions answered. Our first challenge with the IT-centric Stack Overflow is naming it. Naming is extremely difficult, whether you’re naming functions/variables, businesses, websites, or new human beings. We also need to find the leaders and moderators who will drive the community and set the tone for everyone else. Joel heard the world population of computer programmers is 4 million. I can’t find a source for this; does anyone have one? Joel thinks the current downturn is unlikely to affect the tech sector, except possibly as a broad excuse to cut dead wood out of companies. It’s interesting to contrast the Web 1.0 crash in 2000-2001 with the current environment; it certainly doesn’t feel the same to us. Joel and I don’t agree with rigidly defined Project Manager, Programmer, and Test roles; how can you judge other people’s competency in a particular discipline if you have zero competency in it yourself? Obviously this varies by company and person, but cross-training in related disciplines will make you a better programmer. Joel talks about “systemitis”, programmers who spend the bulk of their time creating giant universal programming solutions to business problems that don’t really make sense. This is perhaps a sign of programmers who aren’t being challenged in their jobs. Rather than letting them spend their time creating another Universal System, try to recognize systemitis, and encourage these programmers to improve their skills in related disciplines instead of building “the system” We remember the classic BASIC programming that a whole generation of programmers grew up with. Typing in and modifying these simple little games was our first programming experience, an experience that launched a lifelong career. What is the equivalent for today’s young programmers? Our favorite Stack Overflow questions this week are: Joel: Significant new inventions in computing since 1980? Joel picked Alan Kay’s question, even before Joel knew it was from Alan Kay. We swear! We answered several listener question on this podcast: Alfred: “What will happen to the open source movement in a sluggish economy? Will it grow or shrink?” Shawn: “On the Business of Software: why do companies sell only small personal pizzas instead of individual pizza slices?” Daniel: “Large companies have well-defined roles like PM, Dev, and Test that are quite rigid. Is this a good strategy?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/14/coming-in-march-it-stack-overflow/","date":"2009-01-13T23:00:00.000Z","tags":["Company"],"title":"Coming In March: IT Stack Overflow","text":"As I alluded to in a previous post, part of the reason we’re investing in new server hardware is so that we can expand. We will launch an IT-centric Stack Overflow sister website in March 2009 While we haven’t quite worked out all the details yet, here’s what we do know: It’s a place where System Administrator and IT professionals — people who work with computers in a professional capacity, but aren’t necessarily programmers — can go to get their questions answered. It will be functionally identical to Stack Overflow: same software, running on a different server, with its own private database. It will have its own unique name and domain (and logo) We’re well under way on the hardware and deployment side, what we don’t have is two things. We’re hoping you could help us with these: A name. We need a domain name for this new site! We’d like it to be a term immediately recognizable to sysadmins and IT pros, but with a double use. Very much like the name ‘Stack Overflow’ is for programmers: as a programmer, you know what a ‘stack overflow’ is, even if most people don’t, and yet ‘stack overflow’ is reasonably interpretable to the layman. That’s what we’re shooting for. We’d love to hear your suggestions that meet these guidelines (and are actually available as domain names, of course). Moderators and Leaders. We need at least two people who are plugged into the IT and sysadmin community to lead this thing, and act as moderators, guiding the nascent community. Ideally this would be someone who has a solid online presence, not necessarily huge, but a small audience at least. The important thing is that the candidates are part of the online conversation. And, obviously, system administrators or IT pros themselves. Note that this site will be platform-agnostic, very much like Stack Overflow. We welcome UNIX, Mac, and Windows sysadmins and IT pros alike — we believe, just like programmers, we all have one thing in common: we love this stuff, and we’re willing to learn from each other! So if you have suggestions for either, definitely leave them in the blog comments — or if you’d like to email us a suggestion privately, do so at this email address please."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/14/where-in-the-world-do-stack-overflow-users-come-from/","date":"2009-01-13T23:00:00.000Z","tags":["Community"],"title":"Where In The World Do Stack Overflow Users Come From?","text":"Someone asked what the breakdown of Stack Overflow users is by country — on Stack Overflow. I didn’t think it was a particularly appropriate question, because it’s a poll, a meta-question, and not even really a poll about programming per se. Sort of a triple whammy. But I’m happy to answer here on the blog, with a breakdown of Stack Overflow traffic by country, courtesy of Google Analytics, accounting for all traffic since our mid-September 2008 launch: United States 36.3% United Kingdom 8.5% India 7% Canada 5.1% Germany 3.7% Australia 3.0% Netherlands 2.1% France 1.9% Sweden 1.8% Italy 1.6% There’s definitely a long tail to this graph, if you consider that the top 10 countries only make up 71% of the total. Related: The Best Time to Ask a Stack Overflow Question?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/12/new-stack-overflow-server-glamour-shots/","date":"2009-01-11T23:00:00.000Z","tags":["Company"],"title":"New Stack Overflow Server Glamour Shots","text":"In Server Hosting — Rent vs. Buy? I solicited opinions on whether it made more sense to continue renting our Stack Overflow servers, or to buy them. Thanks for everyone’s feedback on that! Now the die is cast — check out these sexy glamour shots of the two (soon to be three) new Stack Overflow servers: Feast your eyes on that hot, sweet server hardware! We plan to have three servers for now, but we did secure a half rack at our hosting provider for future expansion, as necessary. Here’s what we’ll be shipping to them initially: 2 x Lenovo ThinkServer RS110 1U — web tier 1 x Lenovo ThinkServer RD120 2U — database tier The 1U web tier servers are modest: 1 Lenovo ThinkServer RS110 barebones $630 4 2 GB RAM 240-pin DDR2 800 $70 2 eBay drive brackets $50 2 500 GB datacenter hard drives, mirrored $160 1 Intel Xeon X3360 2.83 GHz quad-core CPU $350 Grand total of $1,260. Plus another 10 percent for tax, shipping, and so forth. The 2U database tier server is considerably beefier: 1 Lenovo ThinkServer RD120 barebones $1,490 12 2 GB RAM 240-pin DDR2 667 FB-DIMM $600 6 eBay drive brackets $150 6 500 GB datacenter hard drives, RAID 10 $480 2 Intel Xeon E5420 2.5 GHz quad-core CPU $700 1 aftermarket IBM heatsink for 2nd proc $90 1 aftermarket IBM VRM for 2nd proc $120 Grand total of $3,630. Plus another 10 percent for tax, shipping, and so forth. I can sell the low-end Xeons and dinky amounts of (incorrectly sized) memory that I pulled out and replaced in every server, to defray the costs a tiny bit. So, in a nutshell, for around $6,000 we’ll end up with the following: Web Tier Database Tier two servers one server 4 cores, 2.83 Ghz, 12 MB L2 cache 8 cores, 2.5 Ghz, 24 MB L2 cache 8 GB RAM 24 GB RAM 500 GB RAID 1 mirror array (hot-fail, cold-swap) 500 GB RAID 10 array (hot-swap, up to 2 drives at once) dual redundant power supplies (I am taking to heart the comment advice I got in my previous blog entry; we’ll be shipping multiple spare hard drives down to the hosting provider, and I added that second 1U server just as a backup in case anything weird happens. We technically didn’t need two web tier servers, yet.) Sure, $6,000 sounds like a lot. But if you take a typical $800 per month hosting bill for renting dedicated servers this powerful, and then cut it in half because you’re no longer paying every month for servers — we save $4,800 per year, every single year! This one-time investment in server hardware pays for itself in a year and a half. Compared to our current two identical dedicated servers, which aren’t exactly chopped liver, this gives us: 1.5x the overall speed (faster CPUs, faster memory bus, more L2 cache) 2x the memory on web; 8x the memory on database larger and faster storage with bigger drives and RAID 10 option What this means to you is a faster Stack Overflow! As far as I’m concerned performance is a core feature; we can never be fast enough, and I’m constantly on the lookout for ways to make pages load faster. Having these new servers in place (hopefully sometime in early-ish February) also enables us to expand, which I’ll be blogging about in more detail tomorrow. Improving performance and server hardware are important skills for any company. If you have them, you check out our postings for network engineering jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/11/welcome-our-newest-member-alan-kay/","date":"2009-01-10T23:00:00.000Z","tags":["Background"],"title":"Welcome Our Newest Member: Alan Kay","text":"I was amused to see this pop up on the Stack Overflow home page a few days ago: If you don’t know who Alan Kay is, first of all, shame on you — he’s one of the most important figures in modern computing: Kay is one of the fathers of the idea of object-oriented programming, which he named, along with some colleagues at PARC and predecessors at the Norwegian Computing Center. He conceived the Dynabook concept which defined the conceptual basics for laptop and tablet computers and E-books, and is the architect of the modern overlapping windowing graphical user interface (GUI). Because the Dynabook was conceived as an educational platform, Kay is considered to be one of the first researchers into mobile learning, and indeed, many features of the Dynabook concept have been adopted in the design of the One Laptop Per Child educational platform, with which Kay is actively involved. I had previously remarked on Twitter that, while browsing Stack Overflow, I noticed that Alan Kay responded to a question about him. It looks like a few people took that opportunity to vote his response up. So did I. Now, it’s likely that Alan was just responding to an automated web search alert for pages containing his name; I have these set up too and I do the same thing from time to time. (Although I desperately try to avoid being an internet-era Beetlejuice who appears in a magical puff of smoke whenever his name is invoked three times.) It’s likely, in my opinion at least, to be the real Alan Kay. He has been known to reply in blog comments in the past. So, if you’ve ever wondered if there are famous developers using Stack Overflow, indeed there are! Short of Knuth himself posting, Alan Kay gets my vote for being the most famous participant so far. Thanks for stopping by, Alan — and as always, it’s encouraging to see someone of your stature still actively engaging with the community. Oh, and enjoy that silver Good Answer badge. I’d say you definitely earned it. Update: Alan posted a followup question: Significant new inventions in computing since 1980."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/10/wmd-editor-reverse-engineered/","date":"2009-01-09T23:00:00.000Z","tags":["Community"],"title":"WMD Editor Reverse Engineered","text":"Remember that WMD reverse engineering project we reluctantly undertook? Check out the current state of the Git repository: This is a major milestone — we’ve essentially de-obfuscated the WMD code, which was my #1 goal! A few thanks are in order: Chris Jester-Young for getting the ball rolling, doing quite a bit of de-obfuscation, and setting up the initial repository. Shawn for contributing versions and setting up a stack overflow “question” on this topic. Dana for doing the lion’s share of the de-obfuscation work and getting us to that magical 1.0, completely de-obfuscated milestone. Also, cbguder, dbr, and zacherates — we appreciate you jumping in early as well. Hopefully you’ll keep going and help us on the 1.0 stuff! It turns out Dana is a huge fan of fake plastic rock, just like me, so I was happy to reward him for his work with one of my customized Les Paul guitars: (ok, it’s not exactly this one, but it’s very similar — silver metallic instead of red metallic faceplate!) Now that we’ve gotten the painful de-obfuscation / un-minification out of the way, it’s time to begin improving our WMD editor: Arrow keys don’t work in Firefox 3 on questions/answer pages Make ctrl-delete work like a normal text editor (WMD keyboard shortcuts should be configurable and/or disable-able) Several Problems with international keyboards — all related to keyboard shortcuts General WMD performance concerns. We believe WMD could do with some optimization, particularly for the “idle” case. I’d like to see us use CSS image sprites for the toolbar buttons rather than downloading 6-8 individual button graphics in 6-8 HTTP requests. Anyway, if you have JavaScript chops and want to dive in, I encourage you to grab the repository and go for it! Your hard work could be rewarded in your job search. Check out these Javascript job listings."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/08/podcast-36/","date":"2009-01-07T23:00:00.000Z","tags":["Company"],"title":"Podcast #36","text":"Joel and Jeff, with special guest Eric Sink of SourceGear, discuss source control present and future, why writing a compiler is an important rite of passage for programmers, and how budding software engineers should be educated. I was convinced Eric was going to agree with me on whether or not software developers should know C. Unfortunately for me, he agrees with Joel. Doh! Eric’s Source Control HOWTO should be required reading for every software developer. Eric literally wrote the book on this, and in fact this series is being converted into a book. Deservedly so; it’s fantastic. The best person to explain source control is someone like Eric who literally wrote a source control system from scratch — SourceGear Vault. An extended discussion of the evolution of source control systems, into distributed version control (DVCS) such as Git, Mercurial, Darcs, and BitKeeper. Eric feels Linus Torvalds’ video “evangelizing” Git does the opposite for many. He’s also uneasy about branching and merging becoming easy, common operations, which is much of the promise of DVCS. Eric feels DVCS solves certain edge conditions very well, but those edge conditions should only be explored when you feel the need, not promoted as broad feature bullets to the average developer. “The harder you try to explain DVCS, the worse it gets, so stop!” Eric points to Eric Raymond’s evolving Understanding Version-Control Systems as a pretty good survey of today’s source control landscape. Often, features aren’t the point — discoverability is. I was amused to find that Eric discovered how convenient background compilation is in Eclipse. This is something that Visual Basic developers have had for 8 years! Java and C# developers don’t appreciate what they’re missing because it hasn’t been surfaced in the product, until now. Eric and Joel note that, at some level, source control is about putting obstacles (let’s call them safety barriers) in front of developers — and the question is, how many does your shop need? Do you remember working without version control at all? It’s incredibly fast, until stuff gets overwritten or lost, of course. Joel and Eric maintain that writing a compiler is an important rite of passage for a programmer. There’s an enormous class of programming problems where writing a lexer, parser, recursive descent, and parse trees will help you. Once you understand how easy it is to set up a state machine, you’ll never try to use a regular expression inappropriately ever again. Eric also wrote a web browser. It’s interesting to contrast the experience of writing a compiler, which is typically extremely strict and will fail to compile if a single character is out of place, versus writing a web browser, which accepts all kinds of malformed and downright incorrect HTML and JavaScript. Eric and Joel think this was categorically a huge mistake; I’m not so sure. On Postel’s robustness principle: “be conservative in what you send, liberal in what you accept.” This becomes a painful war of attrition at some level; everybody is vying to accept just a little bit liberally than the next guy, so isn’t there an implied element of mutually assured destruction at the end? Eric: “Computer Science degrees do not teach programming; they teach how to learn”. And he’s OK with that. We all agree that it’s hugely important to complement your computer science curriculum with either hobby projects, internships in the so-called “real world” — or both! These extracurriculars will improve your chances of landing that first junior developer job. Congratulations to our new UserVoice community moderators — Joel Coehoorn and Sean Massa. Do participate on the Stack Overflow UserVoice feedback site, we check it every day, and we read all the feedback we get! Our favorite Stack Overflow questions this week are: Eric: What is the single most effective thing you did to improve your programming skills? Eric says it was when he wrote a compiler. “You’ll write the crappiest compiler ever, but you will learn so much.” Jeff: What’s your most controversial programming opinion? This question is almost a textbook example of what we don’t want on Stack Overflow, in that it’s an unanswerable and probably contentious discussion. And yet it’s an extraordinarily high quality question! This is a testament to the quality of the participants, another example of the Stack Overflow community defining what they want to see and setting a positive example for other programmers to follow. We answered one listener question on this podcast: Espen Grindhaug: “In many universities and colleges, they don’t teach the ‘new’ technologies. Can you list some books to get up to speed on the new technologies?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/06/accept-your-own-answers/","date":"2009-01-05T23:00:00.000Z","tags":["Community"],"title":"Accept Your Own Answers","text":"Have you ever wondered why you can’t accept your own answer on Stack Overflow? If so, you’re not alone. As they say, a picture is worth a thousand words; here’s what I just did to one of my own questions: Before: After: Hey, look at that, I just accepted my own answer! Now, there are some special rules around owner-accepted answers, to prevent gaming: Wait 48 hours. You must wait 2 days from the time you originally asked your question before you can accept your own answer. This gives other users a chance to answer the question in good faith, and earn the accepted answer. No change in sort order. Normally, accepted answers are “docked” under the question. This is not true for owner accepted answers; they stay in standard sort order like any other answer. No reputation is earned. Normally, accepted answers confer +15 rep to the answerer and +2 to the owner. Owner accepted answers do not earn rep (or badges) for anyone. I was initially very much against this, but several commenters in the Why Can’t I Accept My Own Answer? post convinced me that, with a few rule tweaks, it could work. As you can see on a question I myself asked, sometimes you really have no other option than to close the loop yourself, and it’s nice to be able to do so by accepting your own answer. Enjoy! Oh, and you can thank Jarrod for implementing this one so quickly on his first day on the job. Kudos."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/06/the-best-time-to-ask-a-stack-overflow-question/","date":"2009-01-05T23:00:00.000Z","tags":["Background"],"title":"The Best Time to Ask a Stack Overflow Question?","text":"Simucal asks: What is SO’s peak time of day in terms of number of users on the site? I’m curious because there are times when I want to ask a fairly niche question and asking when the most number of users are on might be beneficial. I did a quick query on non-deleted revisions, grouped by hour of day GMT time. Here’s what I came up with. Looks like the most popular time to post is between 15:00 and 22:00 GMT/UTC, at least for all Stack Overflow data between launch and today. You’ll have to convert those GMT hours to your local time zone, of course. For the USA, that’s: Eastern Standard Time GMT/UTC minus 5 hours Central Standard Time GMT/UTC minus 6 hours Mountain Standard Time GMT/UTC minus 7 hours Pacific Standard Time GMT/UTC minus 8 hours I’m a PST guy, so for me that means the best time to post a question I needed an answer to ASAP would be at the beginning of this activity peak — very early in the morning, probably around 7 AM to 8 AM. Ugh."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/06/welcome-stack-overflow-valued-associate-00002/","date":"2009-01-05T23:00:00.000Z","tags":["Background"],"title":"Welcome Stack Overflow Valued Associate #00002","text":"I am pleased to announce that Stack Overflow just added another team member in an officially paid capacity: Jarrod Dixon. Jarrod and I met on the job in 2002, and became fast friends. Here was the rare programmer who loved to code every bit as much as I did. It was our calling, and we recognized that in each other almost immediately. I wasn’t sure exactly why we got along so well, until we went to one of those corporate teambuilding events that Paul Graham loves so much. During the event, the moderator had everyone go to a corner of the room, depending on whether you were.. the oldest child in your family a middle child in your family the youngest child in your family the only child in your family Of the entire room of 30+ people, only Jarrod and I ended up in the “only child” corner. Our coworkers sadly shook their heads and agreed: this explains a lot. It was always our goal for Stack Overflow to be a modest but self-sustaining business. Bringing Jarrod on as Stack Overflow Valued Associate #00002, there to work daily on the site alongside me, is an important milestone toward this goal. In a (very) small way, I want to do what Joel did: build a fantastic environment for programmers to work on interesting problems. OK, so the fantastic environment isn’t quite there yet, but I do put my money where my mouth is: we’ve already bought Jarrod a Mirra chair, a blazing fast desktop computer, and a 30″ monitor. Just for the record — and I am not trying to put a guilt trip on anyone, I’m just explaining the way things are — pretty much all the Stack Overflow advertising revenue that comes in goes directly to Jarrod’s salary. True story. This is the way I want it. In all honesty, nothing makes me happier than paying my dear friend — who also happens to be an incredibly talented developer — to work on this project with me. And with you! Having Jarrod on board means we can satisfy top rated UserVoice requests much faster, and build cool new stuff into the site with greater regularity. (also, not to be be crass, but if you’re interested in advertising on Stack Overflow do drop us an email. Help us feed a fellow programmer!) Now, Stack Overflow is bigger than Jarrod and I; it’s only through the contributions of our entire team that we’ve gotten to where we are today. I do hope to bring on more of our excellent team in a formally paid capacity as we continue growing the site. Gotta crawl before you can walk. 2009 is shaping up to be a great year for Stack Overflow. We have big plans. I’ll be blogging about them shortly. We need your input, because we know it isn’t about us — Stack Overflow is You."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/05/using-your-own-url-as-your-openid/","date":"2009-01-04T23:00:00.000Z","tags":["Company"],"title":"Using Your Own URL as Your OpenID","text":"One of the cooler features of OpenID is delegation. This means, instead of having your OpenID identifier be yourname.myopenid.com it can be simply yourdomain.com Much easier to remember, right? And it’s really easy to do, too! Here’s how I did it. First, sign up for an OpenID with the provider of your choice (note that Google, Yahoo, and AOL are all OpenID providers now, so you may already have one — but beware that not all providers support delegation, either). I might be a little biased, but I prefer our very own provider at openid.stackexchange.com, so I recommend signing up with us at Stack Exchange. openid.stackexchange.com To enable your domain to act as a delegate to the OpenID provider, you’ll need to figure out what your OpenID identifier is. This is always an URL. To determine your Stack Exchange identifier, visit your profile page on openid.stackexchange.com and look for the Use your own URL to log in link. Then click it! This explains what you need to do. It’s simple; just add two HTML header tags to your web page, like so: <html> <head> <font color=\"red\"><link rel=\"openid2.provider\" href=\"https://openid.stackexchange.com/openid/provider\"></font> <font color=\"red\"><link rel=\"openid2.local_id\" href=\"https://openid.stackexchange.com/user/a0cd3405-f76e-429e-b935\"></font> </head> … Once you’ve set this up, click my logins on your profile page, then click add new login… to add the new, delegated login to your account!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/03/we-now-support-multiple-openids/","date":"2009-01-02T23:00:00.000Z","tags":["Company"],"title":"We Now Support Multiple OpenIDs","text":"The current top ranked feature request is to Allow Changing the Associated OpenID. Just how much would you pay for a feature like this? 50 gp? 740 flooz? 13 plat? 6,999 linden dollars? We’re giving this fabulous feature to you — for today only — ABSOLUTELY FREE! That’s right! FREE! But wait.. there’s more! Not only can you change your login any time you want, to whatever you want, you can now associate an unlimited number of logins with your account. So if something terrible (God forbid) were to happen to your current login provider, you’d still be able to log in and get to your Stack Exchange account! Here’s how. On your user page, note that there is a new link, my logins. Here, only visible to you and moderators, are all your current logins. If you click the “add new login…” link, you’re taken to the login page, where you can add another login of any type to your account. Once you log in (again), that new login will be associated with your Stack Exchange account and immediately visible from your user profile page, as pictured above. We want you to have the freedom to log in with whatever credentials you happen to have in your wallet — and to have at a minimum an alternate login as an “in case of emergency break glass” backup. What an incredible deal! But wait.. there’s more!! Accounts are keyed on either validated emails or OpenID URLs, so if by some accident you end up with multiple accounts, or a “new” registered account you don’t want — don’t fret! It is super easy for us to merge any two (or more) Stack Exchange accounts. Just email us at team@stackoverflow.com with the user IDs or the user page URLs. We’ll merge them for you no problem. Act now! Time is running out!!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2009/01/01/podcast-35/","date":"2008-12-31T23:00:00.000Z","tags":["Company"],"title":"Podcast #35","text":"This is the 35th episode of the StackOverflow podcast, where Joel and Jeff discuss the mysteries of server hardware, anomalous voting patterns, change fatigue, and whether or not Joel is the Martha Stewart of the software industry. A discussion of the bizarre world of server pricing, as discussed in the Best (or Worst) Geek Christmas Ever. It is sort of mysterious how a lot of the same hardware parts are is rebranded “server” parts, along with an instant 50%+ markup. Building your own servers up probably doesn’t make any sense from a business perspective, but Joel and I both enjoy learning about this stuff — and it is critical to our business. I doubt I would personally handle every server we ever use, but the first few, absolutely. I believe understanding the commodity hardware market is important for programmers. Joel notes that you really, really want to test your RAID failover scenarios before deploying your servers. That’s one of the exact reasons I wanted to have the servers here, for me to play with RAID scenarios while the servers are up and running. After receiving a number of complaints, we now check for anomalous voting patterns on Stack Overflow. I guess it shouldn’t be surprising that there were 4x as many anomalous upvote patterns as downvote patterns. Answers to older questions don’t tend to get voted up as aggressively as rapid answers. There’s an aspect of the Fastest Gun in the West to our system. Joel and I believe there are two audiences here; the daily users and the long tail. Sometimes a little (or a lot) of patience in order. We are now reverse engineering the JavaScript based Markdown editor we use on Stack Overflow. Believe me, we don’t want to, but we have no choice. If you know JavaScript and/or GIT, we welcome your contribution! Joel had a great response to a forum post by a programmer thinking of leaving the industry, which I summarized as Programming: Love It or Leave It. Apparently Joel thinks of himself as the Martha Stewart of the software industry? Who am I to judge; listen to the audio yourself. If you’re unhappy with your job as a programmer, it might simply be because your situation is not a good one. If you’re in a bad situation, recognize that: either change your organization, or change your organization. Alternately, if you want to have a great 10 to 15 year career goal, why not start your own software company where programmers are able to work under great conditions, building awesome software with their peers? The Joel on Software discussion forums may soon require (nominal) paid registration, much like MetaFilter. This is something we discussed with Josh Millard, a MetaFilter moderator, on Podcast #22. Joel and I struggle with the definition of “change fatigue” as a career hazard for programmers. Isn’t change the very basis of programming, and the reason most people enter the field? Rather than being a hazard, isn’t the continual change a destination? Admittedly, it must be painful to be a specialist and have your knowledge obsoleted; Joel and I are both broad generalists, so it’s easier for us. I discovered a great Stack Overflow post through Damien Katz: Arrays, What’s the Point? Good Question. This is a fine example of a question that seems sort of ridiculous on the surface, but can provide amazingly insightful answers — and a deeper understanding of programming. Jonathan Holland’s accepted response has 190 upvotes! Our favorite Stack Overflow questions this week are: Jeff and Joel: Arrays, What’s the point? This is exactly why we created Stack Overflow; fantastic result. Understanding data structures is as fundamental as it gets — and so is questioning them. We answered one listener question on this podcast: Ian Varley: “A lot of programmers eventually become exhausted by the pace of change in our industry. How do you keep from getting change fatigue?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/31/i-move-to-close-this-question/","date":"2008-12-30T23:00:00.000Z","tags":["Community"],"title":"I Move to Close This Question","text":"As an active Stack Overflow user, one of the abilities you’ll gain at 3,000 reputation is the ability to close and reopen questions. Closed questions don’t allow any new answers to be added, but can still be edited and commented on. All it takes is one user (with the appropriate reputation level, natch) to decide a question is closed. I had a long email exchange with an avid Stack Overflow user, Mike Stone, on this topic in September. I view closing as working in parallel with voting, serving as an important check and balance by experienced users versus regular votes. I explained my position: Visit any online forum and you’ll find lots of locked threads. Closing is equivalent to locking a thread. Would you really argue that every online bulletin board should allow any topic whatsoever to be opened and discussed? If so then maybe Stack Overflow is not the place for you, because that is definitely not the intent. Based on all the data I’ve seen, closing is working. So is voting. They complement each other! Mike was still adamant that closing questions was a bad idea: Consider the thing that I have seen REPEATEDLY which would be solved by a simple consensus to close. It takes 1 person to close a question… if they just don’t like the question because they don’t see how it relates to programming… they are doing an ACTIVE DISSERVICE to the site by closing it (this happens very often from what I’ve seen). If multiple people are required to close, this both builds the community more and limits the harm 1 person can do (it’s easy to undo, but it’s equally easy to redo). I’ve since come around to Mike’s way of thinking. Almost everything else on Stack Overflow is vote based. Allowing a single person with 3,000 rep to close a question isn’t really in the spirit of having a consensus that SO was founded on. It’s true that a peer can then come along and reopen the question at wiill any time, but this then leads to ping-pong battles of opening and closing between two users. And probably a lot of angst. So as of tonight, I’ve taken Mike’s advice. Jarrod implemented vote-based question closing and reopening. Now, when you click “close”, it’s counted as a vote. If three people agree that a question should be closed (for any reason), it will be closed. If you disagree with this, no problem! You can reopen the question in the very same way. If three users with 3,000+ rep all vote to reopen a question, it will be reopened. It’s important to note here that closing a question is a step on the road to deletion. Closing is effectively “nominate to delete”, as a question that can’t be answered is no longer truly “alive”. That said, some closed questions should be kept around. For example, duplicate questions that have totally different wording are sometimes useful. With the duplicates, people can find either variation with search terms and link through to the original. The majority of closed questions, however, aren’t particularly useful and are much more likely to eventually be deleted. (As an aside, it is a continual source of amazement to me that people can ask two identical questions with almost no words in common — but I see it practically every day!) In fact, one of the moderation powers we now allow for 10,000 rep users is to delete closed questions (they must be closed, first) and complete the loop. Of course, questions can also be undeleted, so I guess the circle begins again.. Here’s to Mike Stone for being patient and sticking with us; this change makes the site better for everyone. See, we do listen. Eventually."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/31/daily-dose-of-daily-reputation-ca/","date":"2008-12-30T23:00:00.000Z","tags":["Community"],"title":"Daily Dose of Daily Reputation Cap","text":"It’s your daily dose of everyone’s best friend, the +200 per day Stack Overflow reputation cap! Did you know that… Without the +200 per day reputation cap, a certain Stack Overflow user would have almost 60,000 reputation? Implementing a logarithmic decline in the value of upvotes would make almost no difference to most people’s reputation scores? Capping all posts at 10 votes (for scoring purposes only) would make almost no difference to most people’s reputation scores? I didn’t, until today! Behold the power of the daily reputation cap! However, based on feedback to the previous bug fix to the daily reputation cap, we are making the following changes tonight: Accepted answers are now immune to the daily reputation cap. Again. This time as part of a policy and not a bug. Partial votes will be awarded if necessary to reach the daily reputation cap. In other words, if you are at 195 today, and someone casts an upvote for your posts right now, you’ll get 5 reputation. Prior to tonight, you’d get none. The partial vote awards sort of reminds me of Superman III, as described in Office Space. <strong>PETER </strong>Yeah. I, I, I...Listen, that virus you're always talking about. The one that, that could rip off the company for a bunch of money... <strong>MICHAEL </strong>Yeah? What about it? <strong>PETER </strong>Well, how does it work? <strong>MICHAEL </strong>It's pretty brilliant. What it does is where there's a bank transaction, and the interests are computed in the thousands a day in fractions of a cent, which it usually rounds off. What this does is it takes those remainders and puts it into your account. <strong>PETER </strong>This sounds familiar. <strong>MICHAEL </strong>Yeah. They did this in <a href=\"http://www.imdb.com/title/tt0086393/\">Superman III</a>. <a style=\"border-bottom: none;\" href=\"http://www.imdb.com/title/tt0086393/\"><img src=\"http://blog.stackoverflow.com/wp-content/uploads/super_iii.jpg\" alt=\"superman iii\" border=\"0\" title=\"superman iii\"></img></a> <strong>PETER </strong>Yeah. What a good movie. <strong>MICHAEL </strong>A bunch of hackers did this in the 70s and one of them got busted. <strong>PETER </strong>Well, so they check for this now? <strong>MICHAEL </strong>No, you see, Initech's so backed up with all the software we're updating for the year 2000, they'd never notice. So, enjoy your newly regained reputation scores! I guess that’s why we still keep that beta disclaimer on the front page.."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/28/reverse-engineering-the-wmd-editor/","date":"2008-12-27T23:00:00.000Z","tags":["Company"],"title":"Reverse Engineering the WMD Editor","text":"We’ve been quite happy with the WMD Markdown editor on Stack Overflow, kindly provided by the author, John Fraser of AttackLabs. However, there are definitely some outstanding bugs and issues with it that we’d like to fix. Progress on this front has been severely hampered by three problems: We only have obfuscated / minified versions of the WMD editor JavaScript code. I’ve been unable to reach John over the last 4 months. My JavaScript skills are average at best. I’m not sure what happened to John, because he was super responsive and enthusiastic early on. He helped us out in a bunch of large and small ways with the WMD implementation. Originally he planned to give me a drop of the un-obfuscated/minified WMD source. But I never heard back from him, and he seems to have fallen off the face of the planet in the last 4-6 months. I’ve sent him brief emails like clockwork every few weeks, but there’s no response. I hate to be naggy, but the alternatives are.. bad. So it is with great regret and heavy hearts that we undertake the painful odyssey of manually un-minifying/obfuscating the WMD code ourselves. Chris Jester-Young, one of the earliest Stack Overflow users, has invested in a substantial amount of effort in this already. He’s set up a git repository for our progress so far: http://github.com/cky/wmd/tree (I should add that Chris, like myself, is a git noob, so be gentle!) Chris adds the following comments: How will we coordinate the changes? Do we want to have a forum where people can post links to their repositories? (My repository is writable by me only — but Git being a distributed VCS, this is not a problem, people just clone their own.) Or do you prefer to have a central repository that everyone checks into? In this case, I’m happy to check things into it — or you can import it from my repository. How will we manage “knowledge transfer”, such as it were? It would help people if I could write some notes (in a wiki or something, so others can update it) on how to go about the translation. Maybe use a community-modded Stack Overflow question dedicated to this? Ideas welcome. I’ll try to get more changes checked in periodically, but I still have a ton of projects to clear, so getting the ball rolling with other coders would probably be a good idea. The easiest way forward is to somehow get a source code drop from John Fraser to start with. If anyone knows him, or knows someone that knows him, can you please try to get in touch? Otherwise it’s back to the salt mines of de-minifiying/obfuscating the JavaScript, until we get it all done. Beyond that, I’d like to create a Stack Overflow branch of the WMD code, under a very permissive license. We have some needs specific to our website, of course, but I’d like to give our modifications, improvements, and bugfixes back to the greater community as well. My gut feeling is that we should go with a “real” code hosting solution for this project, perhaps Google Code or the like.."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/27/new-uservoice-moderator/","date":"2008-12-26T23:00:00.000Z","tags":["Community"],"title":"New UserVoice Moderators","text":"Over the last few months, I’ve noticed a few users that have been exceptionally active on the Stack Overflow UserVoice feedback site. I have extended UserVoice moderator privileges to Joel Coehoorn (it’s pronounced koo-horn) and Sean Massa. I wasn’t kidding when I said this in the Stack Overflow FAQ: At the high end of this reputation spectrum there is little difference between users with high reputation and moderators. That is very much intentional. We don’t run Stack Overflow. The community does. These two guys have gone far out of their way to help other users on UserVoice who have run into Stack Overflow bugs and issues. We think they’ve earned the right to speak as adjunct members of the Stack Overflow team. adjunct (adjective) Added or connected in a subordinate or auxiliary capacity: an adjunct clause. Attached to a faculty or staff in a temporary or auxiliary capacity: an adjunct professor of history. From now on, UserVoice responses from Sean or Joel will be similar to responses from the core team. As highly active users on both Stack Overflow and UserVoice, they’re in an excellent position to help, and they’ll have a close dialog with us to help resolve any issues or concerns that they’ve identified. A big thanks to everyone who participates on the Stack Overflow UserVoice site. I — and I mean this quite literally — couldn’t do it without you. You can expect to see more changes on stackoverflow.com along these same lines, in the very near future."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/24/a-stack-overflow-holiday/","date":"2008-12-23T23:00:00.000Z","tags":["Background"],"title":"A Stack Overflow Holiday","text":"Joel and I started recording a podcast yesterday, but we belatedly realized things are quite slow as this is a holiday week. We decided to postpone until next week so we’d have meatier topics to discuss. Thus, no Stack Overflow podcast this week. But I do have a bit of good news — I am planning a little holiday present for the most avid Stack Overflow users. If you have a Stack Overflow reputation of 10k or greater, you might just find a present waiting for you on the site, sometime over the next couple days!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/23/vote-fraud-and-you/","date":"2008-12-22T23:00:00.000Z","tags":["Company"],"title":"Vote Fraud and You","text":"As we discovered in the Stack Overflow podcast with the Reddit guys, they have a hidden mechanism for detecting and defeating revenge voting patterns. I suppose it’s a measure of how naive we are, but this wasn’t even on our radar. Well, now it is. If you irritate another user, they might be having a bad day and decide to take it out on you by methodically going through and downvoting every post you’ve made. The impact of this is pretty limited on Stack Overflow, as you only get 30 votes per day, and upvotes are +10 while downvotes are only -2 (and -1 to the votee). (As an aside, if you’re regularly pissing off a lot of other users, consider taking part of our FAQ to heart: be nice! We’re all here to learn from and share with each other. This is in no way an excuse for bad behavior, of course, but realize that people tend to respond in kind. When in doubt, always treat people with the same respect and decorum you’d want them to treat you. Even if they don’t deserve it.) Still, it’s unacceptable behavior, and I’ve been getting several reports of this sort of revenge downvoting now, enough that we needed to take action to combat it. I was pleasantly surprised to find that the vast, vast majority of Stack Overflow users do not engage in revenge downvoting. Unfortunately, for those users that do, the pattern was quite clear. As of today, we have several queries that look for unusual downvote patterns. If we discover these patterns in a given user’s voting history, we view all their downvotes for that user as suspect. They’re all silently deleted, and any lost reputation is restored to the unfortunate target of these downvotes. While working on this code, I also realized that we should be checking for the inverse of this behavior — unusual upvote patterns. To game the reputation system, unscrupulous users might create alternate user accounts that vote up their main account. Again, this is a bit tougher on Stack Overflow than other sites, because we don’t allow any user account to upvote at all until they’ve earned 15 reputation first. And then of course there’s the aforementioned 30 vote per day limit. I reformulated my queries, and I found that there were many, many more suspicious upvote patterns than downvote patterns. More than five times as many! I guess I shouldn’t be surprised, since the value of a single +10 upvote is fairly high. In parallel with the downvote validation, we now use several daily heuristics to detect strange user upvoting patterns; if we decide the upvotes are questionable, they will all be removed. Anyway, if you find that your reputation has changed overnight, it might be because we now check for, and remove, any suspicious upvote or downvote patterns. I thought about doling out reputation penalties to the users involved, but I figured it’s better to err on the side of forgiveness. I want to be clear that the “problem” voters are a very, very small part of the Stack Overflow community. Most people use the voting system the way it was intended. Our policy on this is simple: we’ll silently remove any vote fraud we detect. Please don’t do it. In the long run, it will be easier to earn reputation by posting great answers and questions than gaming the system."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/18/podcast-34/","date":"2008-12-17T23:00:00.000Z","tags":["Company"],"title":"Podcast #34","text":"This is the 34th episode of the StackOverflow podcast, where Joel and Jeff discuss the following: Joel recommends a pink HDMI cable as a christmas gift for the special ladies in your life. This will go nicely with her pink ethernet cable, pink USB cable. We’ve placed an order for our dedicated servers and have found a dedicated host we tentatively like. We’ll be exploring the “buy” axis of build vs. buy because it gives us greater power and control over our setup. This will also be my first time building a RAID 10 array, which is supposedly a far better solution than RAID 5, and I’m geeking out a bit over that. Joel remembers George Orwell’s 1984 and The Thin Red Line. It’s advisable for programmers to spend some time rotating through customer support so they can lean to share the customer’s pain. Alternately, Joel has an even better idea: perform usability tests periodically, with your developers observing. Developers sometimes come up with great new features when exposed to actual users working with the software. The Fog Creek Team completed the Endless Setlist on hard in Rock Band 2. That’s 84 songs in a row, mightily impressive, at least to me. I have mixed feelings about easter eggs; if you’re going to put something cool and hidden in your product, why not make it a standard feature so most people will find it and benefit from it? There are two discussions of easter eggs on Stack Overflow: What Easter Eggs have you placed in code, and Is it a good idea to put Easter Eggs in applications? You could argue that a lot of modern large application features are effectively easter eggs because people can’t find them! This is what motivated the move to the Ribbon UI in Office 2007. Nine out of ten feature requests for Office were already in the product. That’s the ultimate easter egg, and not in a good way. The proposed Stack Overflow question bounty feature — to help get those persistently unanswered questions some new attention — has two gating clauses: first, you can only attach a small reputation bounty after 24 hours; second, the majority of the bounty will come from the asker’s own reputation. You have to be willing to slice off a part of your own rep as a reward. We noticed that Jason Calacanis of Mahalo will be doing a Q&A site. The difference is that this site will pay answerers in real money, part of what Joel calls Jason’s Econ 101 management style. The danger is that financial incentives can destroy intrinsic motivation. What’s your management style? Command and Control, Econ 101, or Identity? There is a whole new generation of programmers growing up with code like we did. Here’s hoping they’re learning from our mistakes, so they can make all new mistakes and not repeat all the same dumb mistakes we made. It’s almost like a system of software apprenticeship. Is code elegance in the eye of the beholder? Consider the two answers to Parameterizing a SQL IN Clause — which one is more elegant, and why? Our favorite Stack Overflow questions this week are: Jeff: How old are you, and how old were you when you started coding? This is a great example of using of Stack Overflow to do cool stuff we didn’t anticipate. It also broke our hot question algorithm pretty badly, because it had such a huge number of responses. Joel: What was your biggest CS eye opener? Joel points to K&R’s observation that a[5] and 5[a] are the same thing. Bonus: Parameterizing a SQL IN Clause. Great example of my accepted answer not being accepted by the community. I just wanted to highlight the cleverness of Joel’s solution, which I literally would never have thought of. I ended up using the community’s solution, though. We answered the following listener questions on this podcast: Chris: “It’s often said that the job of the software development manager’s job is to insulate developers from customers. But I’ve found it’s helpful for developers to have interactions with users and stakeholders.” Sinbad Carver: “Did you leave any easter eggs in Stack Overflow? If not, did you consider any?” Derek in Canada: “If you attach a bounty to some questions, will that lead to less people answering regular questions?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/13/uservoice-supports-openid/","date":"2008-12-12T23:00:00.000Z","tags":["Background"],"title":"UserVoice Supports OpenID","text":"I noticed that our friends at UserVoice now support OpenID: This means you can (finally) log into both sites (stackoverflow.com and stackoverflow.uservoice.com) using the very same OpenID. I believe they’re using RPXNow to implement this feature. Hooray for open interoperability, and open identity standards! So I guess that’s what Richard was hinting at when we interviewed him on Podcast #30.. who knew?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/11/podcast-33/","date":"2008-12-10T23:00:00.000Z","tags":["Company"],"title":"Podcast #33","text":"This is the thirty-third episode of the StackOverflow podcast, where Joel and Jeff sit down with special guest Babak Ghahremanpour, the lead developer for FogBugz. I gifted the Fog Creek office with a set of cymbals for the Rock Band 2 drums, to complement the sweet Rock Band setup I bought for them earlier this year. And yes, I already got them a tambourine and cowbell. We’re starting to seriously consider buying our own servers and renting rackspace for the Stack Overflow servers. It makes sense to us from both from a financial standpoint and from a performance standpoint. We’re also considering some of the cloud services like Amazon EC2 and Windows Azure. We wonder why so much of the software that’s bundled with hardware is so terrible. There’s nothing scarier to me as a software developer than the DVD labelled “Install me!” provided with some bit of hardware that I just bought. Why is that? I tend to agree that one danger sign for a new programming job is the requirement to be on call. This is a bit more normal for sysadmin positions, but it’s unusual (and arguably unhealthy) for programmers. Joel and I note that developing software predisposes you to “debug” real world processes that largely aren’t worth the effort. Beware! We’ve probably mentioned this before, but whatever else you decide to do with your database, it is incredibly important that you get your database under version control. Does it make sense for every software developer to start their own company, which is what Paul Graham seems to advocate? It’s certainly one of the few paths to becoming very wealthy, if that’s your primary goal. If you just can’t get enough Spolsky, Joel was featured on the Startup Success podcast with Bob Walsh and Patrick Foley. Our favorite Stack Overflow questions this week: Jeff: Why doesn’t IE7 copy PRE CODE blocks to the clipboard correctly? This is sort of cheating because it’s my own question, but it’s a perfect example of using Stack Overflow to build Stack Overflow! We are the target audience, too. Joel: Dealbreakers for new programming jobs. Some great responses to this question; worth a read if you’re looking for a new job. Babak: What real life bad habits has programming given you? We alluded to this question in the previous podcast; it’s a classic. We answered the following listener questions on this podcast: Peter Bailey: “When you’re designing a new application, how much code (triggers and stored procedures) do you put in the database?” Vincent Tan: “What are your top 3 costs in running a software business, and how do you reduce them?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/10/server-hosting-rent-vs-buy/","date":"2008-12-09T23:00:00.000Z","tags":["Company"],"title":"Server Hosting — Rent vs. Buy?","text":"As Stack Overflow continues to grow, it’s time to revisit our server hosting situation. We currently rent two identical dedicated servers from CrystalTech, which has been an excellent and responsive host for not only SO but Coding Horror as well. If you’re in the market for Windows hosting, I can recommend them without reservation. Although the monthly rates are extremely reasonable, we’re starting to see pressure on our database server for more than 4 GB of memory. SQL Server has an insatiable appetite for memory, and given the ridiculously low cost of memory these days, it seems crazy not to build a server box with 8 GB at the very minimum — and possibly 16 GB or 24 GB depending on how much the server will accept. Unfortunately, upgrading memory on our rental servers isn’t really an option, as the monthly cost increase for the memory upgrade would nearly double our monthly hosting fees. This says more about how insanely great our existing deal is than anything else, but it’s still a bummer. The rental model is something we want to move away from in the longer term, anyway: the more we grow, the more servers we add, the more our monthly costs increase. So, instead, we’re looking at buying our own servers and renting rack space. This way we pay a fixed one-time cost for the servers, and the monthly cost for the rack space plus bandwidth stays the same (mostly, depending on our bandwidth usage). I’m currently looking at the Lenovo ThinkServer RD120. This guy is about $1,500 in a barebones configuration: Two Intel Xeon processor sockets Up to 6 hard drives RAID controller supporting 0, 1, 1E, 5, 6, 10 RAID Up to 48GB DDR2-667 ECC memory (12 memory slots) Dual gigabit ethernet 835w redundant power supply (I considered building my own rack mount using Google-style commodity computer parts in a rack case, but quality RAID, dual-socket, and redundant power supplies are sort of hard to come by in typical consumer computer parts. Starting with a pre-built server chassis that has the correct redundant power and hard drive setup already configured seems like the smarter move here.) See the downloadable hardware maintenance manual for details. We’d need to add the following, which I priced a week ago on NewEgg: Two 2.5 Ghz Xeon quad core CPUs $700 Six 500 GB 7,200 rpm SATA drives $450 Twelve 2 GB ECC DDR2-667 DIMMs $500 That puts it at $500 + $450 + $700 + $1,500 = $3,150 for a very beefy server indeed (Eight 2.5 GHz CPUs, 24 GB RAM, 500 GB RAID 10). This is substantially better than our existing rented dedicated server configuration (Eight 1.8 Ghz CPUs, 4 GB RAM, 320 GB RAID 5). We only need a server this powerful for the database; for the web tier, a smaller Lenovo ThinkServer RS110 1U with basic RAID, 4 GB, and a single quad-core CPU would probably be sufficient. Yes, the initial up front cost would be pretty high — but we could slightly more than recoup the cost of one uber-beefy database server in a single year if we save just $300 per month. And we’d easily do that by renting rack space. What are your thoughts on rent vs. buy when it comes to server hosting? Also, we’re definitely seeking quotes on rack space if you know any great providers — our requirements are five 2U slots (mostly for future expansion), and about 1250 GB per month of bandwidth at the moment (ditto). Are you an expert in server hosting and management? Check out the latest system administrator jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/04/podcast-32/","date":"2008-12-03T23:00:00.000Z","tags":["Company"],"title":"Podcast #32","text":"This is the 2^5 episode of the StackOverflow podcast, where Joel and Jeff discuss software piracy, dealing with public criticism, how to get people to answer your questions, and the ideal programmer office. A brief digression about the analog to digital television switch. Make sure you watch this brief instructional video so you’re prepared. Joel gives an overview of Fog Creek’s attitude towards software piracy and licensing. At its root, we believe that buying your software has to be easier than stealing it. Stop thinking of it as fighting an enemy and think of it as simply being better than the alternative. On advertising: if you can get people to talk about or willingly watch your ad, you’ve already won. This is why Wil Shipley’s rant about the Mojave Experiment is counter-productive. I argue that Apple is making real headway in mainstream marketshare, largely because they’ve won the advertising war so decisively. Joel argues that they haven’t. Which of us is right? One of our major performance optimizations for the “related questions” query is removing the top 10,000 most common English dictionary words (as determined by Google search) before submitting the query to the SQL Server 2008 full text engine. It’s shocking how little is left of most posts once you remove the top 10k English dictionary words. This helps limit and narrow the returned results, which makes the query dramatically faster. Congratulations to Stack Overflow team member Geoff Dalgas; he’s the proud father of a new baby boy as of last week! We plan to mail out weekly email summaries of other people’s answers and comments to your posts — much like FriendFeed — for people who haven’t visited Stack Overflow in a week or longer. Some topics are just fundamentally hard to understand, like the Monty Hall Problem, and lead to a lot of extra discussion. The two banned topics on the XKCD forums are 0.9999 = 1 and airplane on a treadmill for that reason. Joel “doesn’t want to get too inspirational and stuff” but if you’re not doing a few things where you’re failing a little, you’re probably not trying hard enough. I say if everyone likes you, you probably aren’t doing anything interesting. Joel points to Guidelines on Writing a Philosophy Paper: “pretend that your reader is lazy, stupid, and mean.” And the converse, as a reader, is to try to infer the most charitable possible interpretation of what you’re reading. Not that anyone actually does this, in my experience. Can you tell the difference between people who honestly want to have a discussion about a topic, and people who are using that topic as a prop for their ego? Learning to make this distinction can ultimately save you a lot of time. My favorite Stack Overflow question this week is a classic, one of my early favorites: How to get attention for your old, unanswered questions. The response by icelava is absolutely on target — if you want people to pay attention to your question, you have to pay attention to your question. Provide status and progress reports from your own continued effort to answer the question yourself. An excellent example of this is lassevik’s tenacious return to his oddball problem which ultimately turned out to be a bug in the video driver, not his code! Joel’s favorite Stack Overflow question this week is Must haves for a developer’s office. Hard to disagree with the community on this one: a quality chair, two large monitors, whiteboards, and control of the lighting. If possible — and this is usually a hard thing to get, so you have to really consider how realistic a negotiating position asking for your own private office is. That said, Joel and I continue to believe having a private office is the most ideal programming environment; it offers choice between open/noisy and closed/private. This also depends how much noise you can tolerate. In any case, demand your Programmer’s Bill of Rights. As Joel says, “it’s only money”. We answered the following listener questions on this podcast: David Ackerman: “As a recent graduate, I’ve been on a lot of interview trips recently. The interviews that didn’t result in offers have hurt my confidence more than expected. Jeff, you get a lot of flak on your blog, how do you stay positive when people are tearing you apart?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/12/01/why-cant-i-accept-my-own-answer/","date":"2008-11-30T23:00:00.000Z","tags":["Company"],"title":"Why Can’t I Accept My Own Answer?","text":"One question that comes up a lot in Stack Overflow meta-discussion is this one: Why can’t I accept my own answer to my question? In case it isn’t clear, asking a question on Stack Overflow confers a few special privileges to you as the question owner: You can comment on your questions, even if you don’t yet have the required 50 reputation to do so. Any answers you provide are highlighted in a special light blue color. You can mark (or unmark) one of the answers as the accepted answer, which results in a +15 rep boost to the answerer, and +2 rep boost to you. This also “docks” the accepted answer permanently under the question. When viewing your question, you’ll see something nobody else does in the answers: a large checkbox under the voting arrows. This is the accept icon, visible only to question owners. Mousing over the accept icon shows a tooltip that explains what it does. Clicking the accept icon will mark that answer as the accepted answer. (It can be clicked again to toggle it off.) As you can see, the background of the answer turns green to indicate it’s the accepted answer. This will also show up in the profiles of both users, and there are several badges tied to giving or receiving accepted answers. Once the question owner accepts an answer, it is permanently docked under the question, regardless of sort order. It’s generally considered good etiquette to accept an answer to your question, unless your question is fundamentally unanswerable (which means it probably wasn’t the right kind of question to ask on Stack Overflow in the first place, though there are certainly valid exceptions.) I’ve answered variations of this question at least a dozen times on UserVoice, and it always starts with the same response: Accepting answers is completely optional. The question owner is not required to accept an answer to their question. We view accepting an answer as a simple social convention, a little informal “thank you” between the asker and answerer, a virtual tip o’ the hat to that person whose response, as the question owner, you personally found the most helpful. That doesn’t mean the community will agree with your choice. But as the question owner, it is your choice to make. The default sort order is “votes” for a reason. Normally, the best answer will automatically float to the top through community voting. This is important because we expect a lot of our question askers to be drive-bys, programmers who ask a single question, get the answer they need (or don’t), and are never seen again. This is intentional and by design. We’re not building some hyper-viral social networking tool like Facebook or MySpace or LinkedIn where we try to game you into hanging around and socializing and building lists of fake friends to get results. You’ve got work to do, and Stack Overflow is only useful insofar as it lets you get your answer quickly and get on with your job. So in the typical case, you’ll have this: Question Community Selected Best Answer (votes) But you might also have this: Question Owner Selected Best Answer (accepted) Community Selected Best Answer (votes) In the latter case, you have the best of both worlds. The answer the owner thought was best, and the answer the community thought was best. Right next to each other, both directly under the question. No reading through a giant thread required. Immediate satisfaction with a minimum of scrolling. I’m not saying this always works, of course, but we’ve been pleasantly surprised how often it does — and a lot of the emails and feedback I get seem to agree. Generally, the “system” works, which hopefully isn’t surprising because the system is you. Now, this was a very long winded way of getting to the original question. The question owner cannot select their own answer as the accepted answer. This is very much by design. Although it’s fine to ask and answer your own question — this is specifically encouraged in the faq — you’ll have to rely on the community to upvote your answer and validate it as correct. You, sir (or madam), are biased. Of course your answer to your own question will be the best possible answer. You wrote the darn thing! Allowing question owners to accept their own answers would be a violation of the spirit of Stack Overflow, akin to giving yourself a self-congratulatory pat on your own back. We’re here to acknowledge the skill of the collective community, and our own humility in not knowing the answer to everything. It’d be downright rude to deny your peers the opportunity to weigh in on your question, for good or bad. Asking a question is an opportunity to connect with and learn from your peers. That’s what accepted answer is for. It’s completely optional, because if it wasn’t, the system would be in a perpetual state of broken. But in my experience, it’s one of those little details that separates good programmers from great programmers: great programmers enjoy and even seek out ways to acknowledge the skills and experience of their peers. I encourage you to leave your own answer on your own question, of course. But I’d also encourage you to go out of your way to find the greatness in another programmer’s answer to your question — even if you think you’ve already found the right one."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/11/27/podcast-31/","date":"2008-11-26T23:00:00.000Z","tags":["Company"],"title":"Podcast #31","text":"This is the thirty-first episode of the StackOverflow podcast, where Joel and Jeff discuss.. stuff! Based on some comments from Podcast #30, we now know that “Learning about NP-Completeness from Jeff is like learning about irony from Alanis Morissette”. It’s funny because it’s true! It was also noted that “[Jeff] certainly no mathematician.” In my defense, I’ve always been very open about my lack of math skills. It’s even item #3 in my Five Things We Didn’t Know About You list. I noticed that someone posted the halting problem to GetACoder.com, so if nothing else good came of this, at least humor was delivered. How useful is math to most programmers? In other words, how often does a typical software developer use something they learned in, say, Calculus class or beyond? Joel cites the original Google PageRank algorithm paper (pdf) and Google’s MapReduce (pdf) as good examples of math in practice for mainstream programming. I believe it’s important for programmers to develop skills that aren’t programming, necessarily, but that are complementary to programming, such as graphic design. (Or databases, or HTML/CSS, etcetera) Remember, good programmers write code; great programmers steal code. This applies triply to design. Joel and I both believe that status reports should be treated as a “public wall”, never as weapons to determine how people get paid or promoted. The single best thing I’ve ever read on this is Poppendieck’s Team Compensation (pdf) — which I discovered through Joel’s first collection of software writing. If I could, I’d print out a copy of this and staple it to the face of every person in the world who manages software developers. Yes, it really is that good. Go read it! One team at Fog Creek instituted a daily standup meeting for their project, which is a staple of most agile development approaches. In addition to the “Daily Kiwi” convention, Fog Creek also use a locally hosted instance of Laconica, an open source Twitter clone. It’s certainly an interesting alternative to email. Joel believes most small to midsize software companies will deal with an economic downturn by (temporarily) deferring development of new versions of their products. For companies that have a lot of “extra” staff, the economy might be an excuse to get rid of the worst performing 10% of your employees. Joel justifies having a nice office space as 1) a recruiting tool 2) enabling higher programmer productivity and 3) the cost of a nice office space is a tiny number relative to all your other expenses running a company. I argue that companies which don’t intuitively understand why nice office space is important to their employees who spend 8+ hours every day there.. well, those companies aren’t smart enough to survive anyway. My favorite Stack Overflow question this week is Are Parameters really enough to prevent Sql injections? Joel and I have a long discussion about the importance of parameterized SQL, both for performance and for security (beware Little Bobby Tables!). But you should know that it’s not 100% foolproof; it is possible (though rare) to have latent SQL injection exploits even when fully parameterized. Joel’s favorite Stack Overflow question this week is How do you pull yourself out of a programming ‘slump’? Joel knows tons of programmers who have burned out by age 50, and feels it is rare to find programmers who have written code for 20 to 30 years. Joel’s article Fire and Motion and my article Moving The Block sort of cover this topic. Joel also recommends the book Death March as a reference book for what to avoid. We answered the following listener questions in this episode: Mike Akers: “How much time should programmers be spending in Photoshop?” David from the UK: “How do you handle status reports at Fog Creek?” Matthew Glidden: “How do you run a software company in lean economic times?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/11/25/stack-overflow-is-you/","date":"2008-11-24T23:00:00.000Z","tags":["Company"],"title":"Stack Overflow Is You","text":"I was surprised to find the following question on Stack Overflow: Jon Skeet Facts Apparently this “question” is.. somewhat controversial; as of now it has 31 revisions and 65 comments. It was opened by Bill the Lizard, who accepted this answer, from Jon Skeet, appropriately enough: These are written in the third person so as not to disrupt the style of the thing. But hey, as we all know, Jon Skeet can make 1 == 3 anyway, so it makes no difference. Jon Skeet is immutable. If something’s going to change, it’s going to have to be the rest of the universe. Jon Skeet’s addition operator doesn’t commute – it teleports to where he needs it to be. Anonymous methods and anonymous types are really all called Jon Skeet. They just don’t like to boast. Jon Skeet’s code doesn’t follow a coding convention. It is the coding convention. Jon Skeet doesn’t have performance bottlenecks. He just makes the universe wait its turn. Users don’t mark Jon Skeet’s answers as accepted. The universe accepts them out of a sense of truth and justice. Funny stuff. We do prefer that questions on Stack Overflow stay on the topic of programming, but as Joel and I have discussed before on the podcast, this is somewhat subjective, and it’s OK to err on the side of “fun” every now and then. Not all the time, mind you, but occasional peripherally related digressions that the community enjoys (and upvotes) are perfectly fine. This question may be more on-topic than it looks, though. One of the major reasons we created Stack Overflow to give every programmer a chance to be recognized by their peers. Recognized for their knowledge, their passion, and their willingness to help their fellow programmers get better at their craft. Jon, like many other highly voted Stack Overflow users, has gone out of his way to help his peers, and demonstrated an impressive breadth of knowledge in his questions and answers. So much so that his peers felt he deserved this accolade. He does, and he’s not alone. I was happy to find that I am no longer on the first page of Stack Overflow users sorted by reputation. That’s the way it should be. Stack Overflow isn’t about me. Nor is it about Joel. Or anybody else on the Stack Overflow team for that matter. Stack Overflow is you. This is the scary part, the great leap of faith that Stack Overflow is predicated on: trusting your fellow programmers. The programmers who choose to participate in Stack Overflow are the “secret sauce” that makes it work. You are the reason I continue to believe in developer community as the greatest source of learning and growth. You are the reason I continue to get so many positive emails and testimonials about Stack Overflow. I can’t take credit for that. But you can. I learned the collective power of my fellow programmers long ago writing on Coding Horror. The community is far, far smarter than I will ever be. All I can ask — all any of us can ask — is to help each other along the path. And if your fellow programmers decide to recognize you for that, then I say you’ve well and truly earned it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/11/20/podcast-30/","date":"2008-11-19T23:00:00.000Z","tags":["Company"],"title":"Podcast #30","text":"This is the thirtieth episode of the StackOverflow podcast, where Joel and Jeff sit down with Richard White of uservoice.com. Richard worked as the user interface guy on calendar startup Kiko.com; UserVoice was originally inspired by Richard’s work on Kiko, as a hybrid of Reddit and FogBugz. There are some thematic similarities between Dell’s IdeaStorm and My Starbucks Idea and UserVoice — to some degree, UserVoice is users voting on the direction your software should take. Does software democracy work? UserVoice isn’t just for software — there’s also Obama CTO and Rebuild The Party. This generated huge load and traffic, so if nothing else it was a good scaling test. The usual item has a maximum of 50 comments; one suggestion had 980 comments. Our use of UserVoice is a bit anomalous; I prefer to (politely) decline requests that I think we won’t get to. Is it more honest to let reasonable requests like this one languish in the system for literally years, ala Microsoft’s Connect, then to find out that they’ve been set to “wontfix” after 3 years? As a user myself, I find this behavior abhorrent. We do plan to talk a bit less about building Stack Overflow and a bit more about our favorite questions on Stack Overflow. Joel’s favorite Stack Overflow question this week is What Tricks Do You Use to Get Yourself “In The Zone”? UserVoice is a Ruby on Rails app, with approximately 6,000 lines of code. A large portion of that is unit tests. Jeff’s favorite Stack Overflow question is What is an NP-Complete Problem. This is a followup to the blog post where I demonstrate a sadly incomplete understanding of the concept of being NP-complete. Joel notes that there are harder problems than NP-Complete, namely the halting problem. There’s a great Stack Overflow question on this, The Halting Problem in the Field There are a lot of very hard problems in computer software that aren’t necessarily NP-complete — and we’ve had limited success “solving” them, such as speech and voice recognition. Furthermore, if the best algorithm we can come up with is something like n-cubed, is that a realistic solution? UserVoice will be using Jan Rain’s RpxNow to implement OpenID. We wondered how myopenid.com would make money; their RpxNow service is the answer to that question. Now uservoice can mark that item off their own uservoice page — it’s the #2 most requested feature by customers of User Voice. We also answered the following listener question: Chris Conway: “After 26 episodes of the podcast, will you ever take a turn to less self-reflexive discussion?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/11/13/podcast-29/","date":"2008-11-12T23:00:00.000Z","tags":["Company"],"title":"Podcast #29","text":"This is the twenty-ninth episode of the StackOverflow podcast, wherein Joel and I discuss the following: The downside of being a PC gamer: it’s prime game release season. My productivity last week was nil due to the release of Fallout 3, as I discuss on my blog. But it was totally worth it. One videogame cliche is the levels filled with random barrels and crates as filler. The classic game site Old Man Murray used to rate games on how quickly you saw a crate after starting the game. And then there was the Quake 2 mod where you played as a crate .. in a room full of crates! Surreal. I’ve always wondered if Joel was a gamer. Apparently he played Call of Duty 3 and 4, which bring him back to his days as an Israeli Army infantryman. Also, Bioshock, which is outstanding. At least he has good taste. Joel wonders why we don’t use Google search as the primary search method on Stack Overflow. Of course it is possible to search Stack Overflow with Google using the “site:” specifier, as long as you scope to an appropriate “folder”. Currently we offer Google as a search alternative when no results are found. I still think both search methods are desirable, because we can search by user, by tag, and so forth. My first organic hit on Stack Overflow based on a coding search was this question about using Beautiful Soup in IronPython under C#. One of Joel’s favorite Stack Overflow questions this week is Coding In Other Spoken Languages. The discussion is great, but it does beg the question — as much time and money as companies spend localizing software, why don’t we localize programming languages? Joel points out that the Excel macro language is perhaps an exception, as the function names are localized. This is quite rare, but there are non-English based programming languages out there. Joel has literally written the book on hiring great programmers — Smart and Gets Things Done. In this podcast he examines a few guidelines from the Fog Creek hiring practices. One of those is having an intern program that is second to none. I was definitely impressed when I visited. Did I mention that they have fully catered lunches every weekday? Also, don’t forget that the interview process is your opportunity to judge the company that wants to hire you. If they don’t have a good interview process, do you really want to work there? The amount of information you are faced with as a developer is overwhelming, with more new stuff arriving every day. How do you keep up with information overload? I recommend “Just In Time” learning. Joel highlights the difference between the early days of Java and today, now that Java has grown into something of a monster. Is .NET on the same path? We also answered the following listener questions: Jonas from Sweden: “Can you expand on what characteristics a good programmer should have? When hiring, how do I get them to tell me what makes them a good programmer?” Idriss Selhoum: “How do you feel about Microsoft releasing new .NET versions so rapidly, and fragmenting the developer base?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/11/06/podcast-28/","date":"2008-11-05T23:00:00.000Z","tags":["Company"],"title":"Podcast #28","text":"This is the twenty-eighth episode of the StackOverflow podcast, where Joel and Jeff discuss Windows Azure, SQL Server 2008 full text search, Bayesian filtering, porn detection, and project management — among other things. Jeff met the inestimable Joey DeVilla aka Accordion Guy at PDC, who challenged him to pronounce Azure as in “Windows Azure”. My pronunciation reference for Azure is entirely based on the word appearing in the movie A Clockwork Orange. Joel and I greatly enjoyed Corey Trager’s Jeff Atwood is Trying to Kill Me. We do try to exploit the Jewish / Goyish dynamic. Also, Jeff is sorry he tried to kill you, but glad you survived to write that highly entertaining article. We are still struggling with SQL Server 2008 full text search issues. And yes, we have engaged with the SQL Server team on this. Joel’s Inc. magazine article about Stack Overflow is now on newsstands (it’s the issue with Kevin Rose of Digg on the cover). The article is also online as well: How Hard Could It Be? The Unproven Path. We have worked closely with Brent Ozar, who has singlehandedly took it upon himself to be our Stack Overflow database ninja. He’s gone far, far beyond what I would ever expect a volunteer to do — so we’ve added him as an official member of our virtual team. And if you need SQL Server expertise, Brent is your man. Microsoft finally fixed their bizarre position on hotfixes. Instead of the bad old days of mandatory phone calls and requests, you can simply download the hotfix you need. One limitation of Linq to SQL is that it does not support any SQL Server full text search predicates. Fortunately, we can freely intermix SQL strings and Linq syntax as much as we like. Joel points out that Google uses Bayesian filtering the way Microsoft uses an if statement. We worry that Microsoft doesn’t adapt their software well enough to the wider internet world, as demonstrated by the radically differing approaches to spellcheck from both companies. We aren’t clear what the purpose of Microsoft’s new “Oslo” or M modelling language, announced at PDC, is. More domain specific languages? Every developer becomes a language designer? Why does that scare me a little? Ray Ozzie made specific reference to “architecture astronaut” at PDC, which is extra humorous because Joel was referring to Ozzie when he coined the term. Joel remembers Hillel Cooperman, who used to be a star at Microsoft, but now works for Jackson Fish Market. One Stack Overflow question we enjoyed this week: Showing too much ‘skin’ detection in software. The definitive debunking of this technique is from Dan of Dan’s Data, who reviewed PORNsweeper in 2000. We don’t believe the technical landscape has changed since then. Great discussion on Stack Overflow as well. Joel refers to the famous 1994 memo from Steve Sinofsky — Cornell is WIRED! Steve started as Bill Gates’ assistant, and now he’s in charge of Windows 7 after shipping Office 2007. Another Stack Overflow question we enjoyed this week: What do project managers do all day? We’re not sure why the owner keeps deleting this question, as we think the answers have a lot of value. Joel also has a lot to say on the general topic of project management. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/11/01/podcast-27/","date":"2008-10-31T23:00:00.000Z","tags":["Company"],"title":"Podcast #27","text":"This is the twenty-seventh episode of the StackOverflow podcast, where Joel and Jeff interview Alexis “kn0thing” Ohanian and Steve “spez” Huffman, the founders and co-creators of Reddit. Jeff is at the Professional Developers’ Conference in Los Angeles. He co-presented a session with Phil Haack on ASP.NET MVC, which you can view online if you are so inclined. Also while at PDC, Jeff participated in a brief roundtable meeting with Ray Ozzie, who had some completely unsolicited and very positive things to say about Stack Overflow! If you didn’t know, Joel was the genesis of one of the earliest branded reddits — the Joel on Software reddit. We discuss the Reddit switch from Lisp to Python, and the way Reddit stored raw user passwords in the database. We use a weighting algorithm based on Reddit’s when we calculate “hotness” in Stack Overflow. Reddit, like us, ran for quite a while on a single server. Moving to a second server, splitting the database, provided solid gains for Reddit and is something we just did as well. According to Steve, splitting off the database is easy — making sure you can scale to multiple application web servers is the difficult part, because of shared state caching. Steve is a big fan of HAProxy which is a single software load balancer in front of all ~20 Reddit servers. Reddit’s first big partner is The Independent, for branded content. Although there is also WeHeartGossip. Joel and I feel these sorts of communities — to be truly successful — need personalities associated with them that are emblematic of the values and goals of that community. We briefly discuss some of the protection mechanisms Reddit has in place to prevent abuse and spammers. Steve and Alexis have much more experience dealing with abusive users than we do. Per Steve, the Reddit mantra is “anything goes”, so they try to do as little as possible to inhibit users. We generally agree that the volume of badness is remarkably small. Most users behave responsibly — and this isn’t just an optimistic opinion, it’s based on actual data. That’s the good news! Behold the power of the Reddit audience: they may just have saved the world by sending a crowbar to the CERN Hadron collider. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/11/01/sql-2008-full-text-search-problems/","date":"2008-10-31T23:00:00.000Z","tags":["Company"],"title":"SQL 2008 Full-Text Search Problems","text":"You may have noticed that things have been less responsive than usual on stackoverflow.com. The culprit is SQL Server 2008 full-text search. I’ll let Brent explain: Before 2008, full text search wasn’t inside the database – it wasn’t subject to things like transactions. Heck, it was more like Lucene where it lived outside on its own. Now, it’s stored inside data files and it’s subject to transactions. From what I’m hearing, blocking and locking is a completely new issue in 2008 FTS. There’s a big overhead involved with making it subject to transactions. In most environments, you don’t see full text being used for transactions. At StackOverflow, you’re doing heavy transactional activity on the same fields that you’re doing analytical, many-record selects. If you do a full text search on Revisions and you include a common keyword like, say, SQL, you’re going to match tens of thousands of records. When I look at the query plans for these, I’m seeing 50-100k reads. Doing that inside a table that’s also getting heavy inserts – boom, transactional disaster. We rely heavily on full-text search on stackoverflow.com, which worked amazingly well for us under SQL Server 2005. Looks like that’s no longer the case for SQL Server 2008, unfortunately. Brent is following up with the SQL Server team on this, and they have a copy of our database to test against. (Brent has given so incredibly generously of his time on the database front that I’m adding him to the stackoverflow.com virtual team — he’ll get a place on the About page with the rest of the team.) Based on the stunningly poor SQL Server 2008 full text results so far, and the apparent architecture changes, I’m pessimistic that the SQL team will be able to do anything for us. We had always planned to move to lucene.net in the future; looks like we’ll need to move that timetable up aggressively. I’ll see what I can do over the weekend to make that happen. Do you love a good query challenge? Check out our listings for database administrator jobs."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/29/adde-a-second-server/","date":"2008-10-28T23:00:00.000Z","tags":["Company"],"title":"Added a Second Server","text":"Based on traffic levels last week — we’re at and beyond where we were at launch — I decided it was time to pursue adding a second server. The second stackoverflow.com server has identical specifications to our first server, that is: Windows Server 2008 x64 Dual Quad-Core Xeon E5320 (1.8 GHz) 4 GB RAM 271GB SAS hard drive As I’ve mentioned before, one of the most obvious scaling strategies for us is to move the database to its own, private server. We were thinking about upgrading to SQL Server 2008, so this was also a logical time to do that. As of Sunday night, stackoverflow.com is now a two-server system: web on one server, database on the other. They are connected to each other through a dedicated crossover gigabit ethernet connection. I have to give massive credit to Brent Ozar here, who not only helped us tune the database, but also contributed a huge chunk of his own time. Brent wrote a blog post about his experience working with the Stack Overflow databases, if you’re curious. Brent works for Quest Software and he is, without a doubt, a database ninja. So if you have any difficult SQL Server problems — or in our case, blazingly obvious newbie problems — maybe you should check out Brent’s [SQL Server wiki](http://sqlserverpedia.com/wiki ). While many queries are faster under SQL Server 2008, and the tooling is dramatically and indisputably better (intellisense for queries!), there is one downside for us: SQL Server 2008 is slower at full-text search operations than SQL 2005. That’s kind of a bummer because we rely heavily on full text. I saw a glimpse of this in my initial testing, when I had both servers up side-by-side with the same data, running the same queries, to see how much faster it would be (new versions are supposed to be faster, right?). My experiments showed that any full-text queries I tried were inexplicably slower on 2008, but we thought it had to do with different query plans, and was something we could work around. Turns out we were wrong. Apparently SQL Server 2008 was the source of the massive slowdown earlier today. A set of full-text queries that ran fine all last week on a single, shared server caused a newly dedicated 8 CPU, 4 GB server to completely melt down and peg at 100%. Traffic levels were about the same, the database was about the same, and the code hasn’t changed much. Not to mention the whole “newly dedicated database server”, so you’d expect performance to be better, not worse. We’re not the first people to notice that full text performance took a step backwards in SQL 2008: I was lucky enough to visit Microsoft during the CTP period and was testing out integrated full text search in 2008. An issue we experienced was that full text can be slow when there is a high number of updates to the index and is caused by blocking on the docidfilter internal table. That post mentions the DBCC TRACEON (7646, -1) flag. We’ve enabled this flag and restarted SQL Server, but haven’t seen much improvement. The temporary workaround is much more aggressive caching, including caching to disk. Caching is the bread and butter of computer science, and any opportunity to cache smarter and.. er.. harder.. is a good thing. But all things considered, I’d still prefer it if SQL 2008 was delivering better full-text performance than 2005, not worse."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/26/see-you-at-pdc-2008/","date":"2008-10-25T22:00:00.000Z","tags":["Background"],"title":"See You At PDC 2008","text":"I will be attending the Microsoft Professional Developers’ Conference this year, courtesy of Microsoft. The main reason I am attending is to help Phil Haack deliver a session about ASP.NET MVC. ASP.NET MVC: A New Framework for Building Web Applications Monday, October 27th 3:30 pm — 4:45 pm Room 153 Phil invited me to talk for 15 minutes about the real world use of ASP.NET MVC in stackoverflow.com, and I was happy to oblige him. Phil and I have been friends for a few years, so our relationship predates any of the business stuff. If you’re attending PDC08 this year, maybe I’ll see you there — and definitely attend our session! Update: the session Phil and I presented can now be viewed online. (Thanks Zack!)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/25/script-responsibly/","date":"2008-10-24T22:00:00.000Z","tags":["Community"],"title":"Script Responsibly","text":"We’ve noticed there are a number of users running a script that retrieves their uncompressed user page multiple times per second, producing an absurd amount of network traffic. Fortunately, we do cache the user page if the requests come in anonymously, so the database load was not significant. However, this behavior is irresponsible and unacceptable, so we will permanently ban any IP we see doing this. We’ve already banned about a dozen IPs for this, and we will continue to do so. If you persist, your account will be permanently deleted. We might even lay down long term IP block bans if necessary. We would prefer that you use our RSS feeds, or lobby us to improve our RSS feeds, rather than scrape Stack Overflow so aggressively."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/23/no-podcast-this-week-suggested-guests/","date":"2008-10-22T22:00:00.000Z","tags":["Company"],"title":"No Podcast This Week — Suggested Guests?","text":"There will be no podcast this week, because Joel is on a business trip to Korea, apparently at webappscon. I can’t remember his exact words, but they were something along the lines of “I don’t care that the listeners want a new podcast, I am not a monkey who dances for their amusement!” I tried in vain to reason with him, but you’ve heard how he is. But seriously, one thing Joel and I want to do in future podcasts is have more guests on the show. While we of course loooove talking about all things Stack Overflow and Fog Creek, it’s also nice to open the floor up a bit and broaden our horizons. We have a few guests tentatively lined up for future shows through the end of the year: Alexis Ohanian and Steve Huffman of Reddit Richard White of UserVoice Some of the fine folks who write and code woot.com Damien Katz of CouchDB Eric Sink of SourceGear I’d like to open the comments up to suggestions. Who would you like to hear Joel and I talk with on future Stack Overflow podcasts? And yes, Stack Overflow rules do apply — the guest does have to be at least peripherally “programming related”, in theory anyway."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/23/stack-overflow-openid-case-study/","date":"2008-10-22T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow OpenID Case Study","text":"JanRain, an early supporter of OpenID, just posted an OpenID case study featuring Stack Overflow. Stack Overflow, much like Wikipedia, lets anyone edit anything – but unlike Wikipedia, we require users to earn a certain number of votes from other users before the system trusts them (we call this “reputation”). The concept of identity and logins is an essential part of how our site works. As programmers ourselves, we appreciate how challenging it is not only to write an entire authentication system, but to support one. One small mistake and you could expose users’ credentials and possibly even passwords! With OpenID, we didn’t have to write any login code, nor do we have to store user passwords. And not only that, but we are no longer asking users to create yet another account on yet another website. Clearly a win-win scenario from our perspective. We were encouraged to use OpenID because our audience is fairly technical, and OpenID is quite common among technical bloggers and frequent blog participants, our early adopters. Also, there’s a rich ecosystem of third party OpenID providers, not to mention Yahoo, AOL, Google, Sun, and soon MySpace. JanRain runs myOpenID, one of the better independent OpenID providers. I don’t want to mention any names, but some OpenId providers, like one in particular whose name ends in oo, are .. not so great. That’s the blessing and curse of choice: when there are dozens to choose from, some will be better than others. That said, we continue to look at ways to improve the Stack Overflow login experience. A few things in the works on the OpenID front: Offer OpenID registration directly through stackoverflow allow multiple OpenIDs per account Allow changing the associated OpenID"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/21/expressing-your-tag-preferences/","date":"2008-10-20T22:00:00.000Z","tags":["Company"],"title":"Expressing Your Tag Preferences","text":"Geoff “the malice from corvallis” Dalgas has done it again. Over the last week he was busy implementing the number one UserVoice request — tag preferences for a customized Stack Overflow homepage. You’ll notice there are two places you can now enter your ignored tags and interesting tags. On most question pages, in the right sidebar On your users page, under the “Preferences” tab Once you’ve enter some tag preferences, the questions appear differently depending on whether they contain a tag in your list. Interesting questions are highlighted; ignored questions are dimmed. We planning to enhance and build out the tag preferences feature a bit more, but even as-is it should hopefully help you distinguish what you like from what you don’t like a bit better. Note that we also increased the number of questions that show up on the homepage by default, all the better to filter your “ignore” and “interesting” against. Also, a tip of the hat to Jonathan Buchanan’s most excellent Stack Overflow Tag Manager script, which was the inspiration for this feature. I’m sure Jonathan’s add-in will continue to evolve cool new features faster than our website can, so I encourage you to check it out. In fact, there’s quite an ecosystem of third party tools for Stack Overflow. If there are any third party tools or add-ons you feel are absolutely essential, let us know on UserVoice, and we’ll try to roll those features into the core website so every Stack Overflow user can benefit."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/18/stack-overflow-on-hanselminutes/","date":"2008-10-17T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow on Hanselminutes","text":"Geoff, Jarrod and I recently recorded an episode of Hanselminutes with Scott Hanselman. StackOverflow uses ASP.NET MVC – Jeff Atwood and his technical team Scott chats with Jeff Atwood of codinghorror.com and most recently, stackoverflow.com. Jeff and Joel Spolsky and their technical team have created a new class of application using ASP.NET MVC. What works, what doesn’t, and how did it all go down? Listen or download This is similar in tone to Stack Overflow podcast episode #17 with the development team. So if you enjoyed that one, you’ll probably like this episode of Hanselminutes!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/17/stack-overflow-search-now-51-less-crappy/","date":"2008-10-16T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow Search – Now 51% Less Crappy","text":"Believe it or not, the search function on Stack Overflow may just actually.. work.. now. I started to feel really bad when I’d see people post duplicate questions, even after they said they “searched first”. Now, to be clear, we do a fuzzy title-based search when you tab off the title field on the Ask page: This works reasonably well, but it’s limited to questions that have similar titles. It’s entirely possible to ask the same exact question using completely different words in the title. In fact, I’ve found that people have an almost uncanny ability to ask questions using completely different words. There may be other ways we enhance the ask page in the future to better show relevant questions as you type, beyond the title matching. Why ask when the question you were going to ask has already been asked .. and maybe even answered? But for now my goal was to enhance the search page, which has languished over the last month. Search worked, and by that I mean with sufficient effort you could find an exact match to question or answer with specific, unique words that you knew existed in the post. But as far as Google-style “type in some random words and get exactly what you are looking for”, it was a definite bust. I made a special effort to improve the “no search results found” page. It shows a number of easy ways to immediately improve your search results based on my experience searching for stuff on SO: Of course, there’s always Google. As you can see, we pre-emptively build a Google search link for you at the bottom of this page. You can always search Stack Overflow through good old reliable Google. Constructing a Google search for Stack Overflow manually is easy; just add the site:stackoverflow.com/questions command to the beginning of your search to scope it to SO questions, then plug in as many search terms as you want after that. Like so: http://www.google.com/search?q=site:stackoverflow.com/questions i dont know how to search vary good That said, there are things our search can do better than Google. In particular, I’d urge you to take the advice to search within tags to heart. Google kind of sucks at this; you will generally get much better results if you scope your search to one or more likely tags such as [ruby] or [perl]. Just add the tags in brackets to your regular search terms, in any order, as many as you like (note that you cannot yet specify negation for tags in search). I also found that a lot of users were inexplicably searching for things like “c#” and “c++”. If we see you enter a single search term that happens to map to a (reasonably) popular tag, we will assume you wanted that tag and whisk you away to all questions in the tag, instead. There’s just no way a general search for the string “c++” is ever going to produce good results, anyhow, so this felt like a no-brainer to me. Beyond that, we have rolled up search results so only questions are returned. Yes, you can absolutely find text in answers, but the displayed result will be a link to the single question that contained the answer instead of five individual search results for the five answers that happened to match. I know, there’s no real excuse for the insane previous behavior. Like I said, we just didn’t have time to give it the attention it deserved. Also, we do a better job of searching for titles, something else that barely worked before. You should be able to search for the exact title of a question and get it in the first page of results, if not at the very top. That’s, like, searching 101. As of today, we do a better job of discarding stopwords, so you can almost always find a post by searching for its exact title. Even without quotes, although adding quotes will give you a practically guaranteed match. We’ll continue to improve search (some other things I want to add are search for all posts by a particular user, by certain dates, etcetera), but hopefully this upgrade makes search worth using again. Or at least 51% less crappy."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/16/podcast-26/","date":"2008-10-15T22:00:00.000Z","tags":["Company"],"title":"Podcast #26","text":"This is the twenty-sixth episode of the StackOverflow podcast, where Joel and Jeff answer five listener questions, mostly about social software design. Warning: this podcast features cowbell. Really. Christopher Leary: “Any thoughts on the general design of karma and rep systems based on your experience building one for Stack Overflow?” Michael L Perry: “What about a system where votes by people who have more reputation count more?” Jeff Metzner: “If I post personal anecdotes as an answer to a question, is it reasonable for other users to edit that?” Anonymous: “Why can’t we ask IT questions? What about a sister site like Stack Overflow but for IT questions?” Miles Dennis: “For a cost-conscious startup, where do you see the balance between taking inexperienced staff that costs less, versus experienced staff that costs more?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. When calling the audio phone number, be sure to leave your name, so we can properly cite you when we answer your question. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/13/tags-and-tags-or-tags/","date":"2008-10-12T22:00:00.000Z","tags":["Company"],"title":"Tags AND Tags OR Tags","text":"Until recently, we hadn’t done a good job of providing a user interface for combining tags. You’ll notice that all the question browsers now show “related tags”, with a count of how many tags are shown for whatever view you happen to be in (with the exception of search): Let’s say I clicked on the Python tag, anywhere on the Stack Overflow site. Clicking on a tag zips you away to a view of all the questions within that particular tag. Within the tag view, you can sort and browse as expected, but you can also click the related tags in the right sidebar to combine tags, like so: This isn’t exactly new; you could always do this manually in the URL by space delimiting the tags. However, these were always implicit ands, as in: Show me all the questions tagged both “python” AND “django” [http://stackoverflow.com/questions/tagged/python django](http://stackoverflow.com/questions/tagged/python django) We also support a slightly shorter synonym of this URL that does the same thing: [http://stackoverflow.com/tags/python django](http://stackoverflow.com/tags/python django) But maybe that’s too specific for your tastes. Now you use the new or pseudo tag: Show me all the questions tagged either “python” OR “django” [http://stackoverflow.com/questions/tagged/python or django](http://stackoverflow.com/questions/tagged/python or django) We also support NOT if you prefix the tag with a dash, like so: Show me all the questions tagged “python” BUT NOT tagged “django” [http://stackoverflow.com/questions/tagged/python -django](http://stackoverflow.com/questions/tagged/python -django) This works throughout the site, including questions, unanswered questions, and all tag based RSS feeds. Anywhere on Stack Overflow you can specify a tag, you now specify multiple tags with or without the or clause. I’m not sure if that’s super or awesome. I haven’t decided yet. But either way, it was definitely a highly ranked request from a lot of users."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/12/a-question-about-questions/","date":"2008-10-11T22:00:00.000Z","tags":["Company"],"title":"A Question About Questions","text":"Stack Overflow is a place for programming questions. We’ve been quite clear about this for as long as I can remember; the faq and about pages both try to make this point in the first paragraph: What kind of questions can I ask here? Programming questions, of course! As long as your question is: detailed and specific written clearly and simply of interest to at least one other programmer somewhere … it is welcome here. No question is too trivial or too “newbie”. Oh yes, and it should be about programming. You know, with a computer. Do look around to see if your question has already been asked (and maybe even answered!) before you ask. However, as long as you’ve looked, if you end up asking a question that has been asked before, that is OK and deliberately allowed. Other users will hopefully edit in links to related or similar questions to help future visitors find their way. It’s also perfectly fine to ask and answer your own programming question, but pretend you’re on Jeopardy: phrase it in the form of a question. There’s also a bright yellow sidebar for new users which explains what Stack Overflow is — this appears on the homepage, every question page, and (in slightly different form) on the ask a question form: However, there is one little nagging concern — what exactly constitutes a “programming question”? Different people have different ideas. To put it mildly, opinions vary. In order to stem the tide of potentially verboten non-programming questions, any Stack Overflow user with 3,000 points of reputation or more can close a question that is deemed off-topic using the following prefab reasons: exact duplicate not programming related subjective and argumentative not a real question blatantly offensive no longer relevant too localized spam That gives users a fairly reasonable set of guidelines to start with — these are the kinds of questions we really don’t want on Stack Overflow. Not that they are fundamentally bad questions, mind you, or that you’re a terrible person for asking them, but there are better websites on the Internet for those kinds of questions. But even within those guidelines, there’s substantial disagreement. We don’t want people to close questions indiscriminately with the jackbooted heel of justice, however, I also feel that it’s important and necessary to close questions that veer far from the goals of the site — so users understand what is and isn’t acceptable in our community. You can’t let people run roughshod over your community and drown it out in noise. I’m not a huge fan of poll questions on Stack Overflow for a bunch of reasons, not the least of which is that users will get badges for upvotes on poll questions — this is not at all what badges were designed for. However, I have to admit that this poll started by Adam Bellaire is actually quite useful in letting Stack Overflow users themselves define what sorts of questions are appropriate on Stack Overflow. The current results for Which type of “programming related” questions are appropriate [on Stack Overflow]?, in order by votes, are: Questions intended to resolve a specific programming problem that have multiple possible answers. As with this answer, but the “correct” response is subjective. (14) Questions intended to resolve a specific programming problem that have only one correct answer. A “specific programming problem” can be defined as a problem that exists in code and that can be resolved with correct code (or cannot be resolved at all). These questions are normally language-specific. (13) Questions about language-agnostic algorithms for hypothetical problems that have potential real-world applications. For example, traveling salesman or BSP. (13) Questions about best practices and other aspects of programming, including use of software tools used in the development process, standards for maintenance and readability of code, advice to avoid potential coding pitfalls, etc. (11) Questions about software tools that, while not directly related to software development, involve some scripting or programming themselves, for example, Excel or Matlab. (11) Questions about hypothetical problems that don’t necessarily have real-world applications, for example “code golf” or the “FizzBuzz problem”. (8) Questions about social engineering, management, or career building, ergonomics, or other “soft” topics related to development work. (7) Questions about hardware considerations such as server environments, building an optimal machine, problems with hardware, etc. (1) Questions about programmers’ favorite things (e.g. cartoons, books, movies, pop culture references). (-2) Polls about what StackOverflow is for (like this one). (-6) Questions about software not directly related to programming, such as Microsoft Word, or usage (not programming!) of device drivers. (-11) The “winners” of this poll, items 1-7, map strongly to my idea of what we built Stack Overflow for. Items 8-11 … not so much. If you’re wondering what so-called programming questions are appropriate on Stack Overflow, I’d say between our prefab question close menu and the top voted items in Adam’s well constructed poll, you should have a fairly good idea. Oh, and by the way, what’s your favorite programming food?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/09/podcast-25/","date":"2008-10-08T22:00:00.000Z","tags":["Company"],"title":"Podcast #25","text":"This is the twenty-fifth episode of the StackOverflow podcast, where Joel and Jeff sit down with the ineffable Steve Yegge, who you may know from his excellent and extremely popular blog Stevey’s Blog Rants. Steve worked for Amazon and currently works for Google. Steve proposes we use the Muppets Show theme as our podcast theme song. I’m more amenable to “The Touch” as featured in the Transformers the Movie from 1986. We ask how Google maintains its culture in the face of an army of new hires entering the company every month. Steve is, to put it mildly, a language maven. He shares some of his perspectives on language aesthetics. Should languages be designed by committee, or by a benevolent dictator? If Steve could teach every developer one thing, it wouldn’t be how to type, or how to write — but how to market. Google has an infrastructure in place to support “mini-startups” within the company. Joel thinks all good startups must have ideas that sound terrible. YouTube is a great example, as is the Flip video recorder. Being an entrepreneur often means spending a lot of your time not programming. This can be challenging for software engineers who love to code. Make sure you know what you’re signing up for if you go this route. Steve is a big believer in the Google experience, even though his last three projects have been cancelled “for business reasons”. Instead of Joel’s “Smart, and Gets Things Done”, Steve proposes “Done, and Gets Things Smart.” How much does choosing the “right” programming language matter? Isn’t the variance between programmers far more significant to the end result? On the other hand, the best programmers often tend to be fluent in multiple languages. One way to drag the “one horse language” programmers into multiple languages is to support sublanguages within the same runtime, ala IronPython, IronRuby, Jython, and JRuby. Steve is considering porting his game Wyvern to Android. He can’t talk about his current full time project at Google, but he does fess up to owning it — both from the business side and the engineering side. So if this time it’s cancelled, we really know who to blame. Steve: “You can’t write about anything interesting without making a bunch of people mad.”, “Everything you say can be quoted out of context 500 years from now.” One of my very favorite Steve Yegge posts is You Should Write Blogs. Unfortunately, despite my cajoling, blogging just isn’t for everyone. Too many brilliant programmers are virtually unknown because they have no footprint on the web. This is one of the reasons we created Stack Overflow — to lower that participation barrier, at least a few millimeters. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/06/solving-the-fastest-gun-in-the-west-problem/","date":"2008-10-05T22:00:00.000Z","tags":["Company"],"title":"Solving the “Fastest Gun in the West” problem","text":"Some Stack Overflow users are concerned about what they call the “Fastest Gun in the West” problem: Each question’s answers are sorted by descending score and then descending time of posting. This means that if a person sits down and answers a question in a long, thorough way, going through every nook and cranny, once they post their answer, it will already be one of about seven different ones, some of which have already been upmodded. This wouldn’t be a problem if those answers were as thorough as the one this guy’s posting, but they usually aren’t. Some of them are downright wrong, some aren’t even answers to the question asked because their poster didn’t bother to read the question all the way through. This causes a problem I like to call SO’s Fastest Gun in the West Problem. I’ve come to a point where I’d rather just send a short, simple, correct explanation, than to go and do some proper research, write a whole blog post about it or even make sure the code I post even compiles, just so it will be noticed, as opposed to the incorrect ones. A number of solutions were proposed, but I believe many of them were worse than the so-called “problem” they purported to fix. Personally, I agree with Adam Davis, who wrote: I do NOT want to, in any way, discourage the quick and dirty answer. I’ve asked questions that have received an immediate answer with enough information to get me past my block, but not served on a platter as you propose, with all the information I might need. This is extraordinarily helpful – I know I can post something on here, day or night, and get an answer within minutes, often seconds, that will be better than searching through books, online, etc, even though it’s a throw-away post that took someone 35 seconds, who may have only answered for the reputation. If it’s at all helpful, I upvote it. It does seem nonsensical to me that we’d be complaining about getting lots of quick answers to our questions. Oh no! How horrible! Lots of answers to our questions, and nearly immediately! Anything but that! It’s terrible, just awful! Seriously, isn’t getting rapid answers the entire goal of a question and answer site in the first place? That said, the one implementable recommendation that came out of this discussion is an active, GMail like notification when you are composing an answer. We agreed with this feature request, so Jarrod implemented it. Here’s how it works: When you start composing a reply, a timer is created. Every minute, the page checks itself to see if new answers have arrived. If new answers arrive, the notification bar will tell you how many, and offer to update the page for you. Answer updates are performed AJAX style, so they don’t interrupt your current answer. We explicitly used GMail as our model, since that’s what we were familiar with. I hope you like it, and more importantly, I hope it addresses the perceived “fastest gun in the west” problem. Now, armed with this new feature, go forth and answer those unanswered questions as fast as you can. Pow! pow! pow!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/05/youre-my-favorite/","date":"2008-10-04T22:00:00.000Z","tags":["Company"],"title":"You’re My Favorite","text":"We just implemented another highly requested feature — the ability to mark a question as a favorite. You might have already noticed it by now, as every question has a large, clickable favorite star just under the voting arrows. Click to favorite. Click again to un-favorite. Once favorited, these questions will show up in the “Favorites” tab on your user profile page. The default order is last modified, so favorite questions with the most recent edits or answers will shuffle to the top. I wasn’t totally convinced that marking something “favorite” was conceptually all that different from voting it up, but repeated and persistent requests on UserVoice eventually convinced me. By the way, if you’re wondering what sorts of things we are implementing in Stack Overflow on a daily basis, I strongly suggest checking out the Completed Tab on UserVoice. We always go through and mark all related requests (even the declined ones) as completed when we implement features that we believe satisfy those requests. To encourage adoption of this new feature, I’ll probably be adding a few badges around favorites soon."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/10/01/podcast-24/","date":"2008-09-30T22:00:00.000Z","tags":["Company"],"title":"Podcast #24","text":"This is the twenty-fourth episode of the StackOverflow podcast, a special roundtable discussion conducted in NYC at Joel’s Fog Creek offices with the entire Stack Overflow team. That includes Jarrod Dixon, Geoff Dalgas, and Michael Pryor in addition to Joel and Jeff. We muse about the 7.5 million dollar Dreamhost billing error. We admire the openness of Dreamhost, that they would be so up front about such a major gaffe on their blog. There is a rule at Fog Creek which we at Stack Overflow also follow — never ship on Friday. A brief discussion about responsible advertising; contrasting our ad deal with woot and the Audible sponsorship of podcasts. One sells a product we’ve bought before and vouch for, the other sells DRM encumbered product. Michael and Joel bring up the idea of mixing real world money and our reputation system. I don’t think we’ll do this, but it’s an interesting conversation. Discussing Geoff’s cool JavaScript reputation graphing system. The giant “questions” with 300 answers were putting a huge load on the server and on client browsers. We never anticipated this would happen. Jarrod’s pagination feature was deployed last night. Pagination begins at 30 answers, which matches the current wiki community threshold. If your “question” gets to page two of the answers, it’ll be paginated and converted to community mode. Michael asks the eternal question — why not support alternate login methods versus OpenID? I believe that OpenID is a bit of a chicken and egg problem at the moment, and we want to support a better future. We are open to partnering with another OpenID provider to provide a more seamless signup experience; myopenid supports this and we’ll try to get it in the queue. We go around the table, discussing the short term future — what’s the #1 feature each of us wants to see in on Stack Overflow? Michael draws a comparison between Stack Overflow and Project Euler. You get points on this site for solving algorithmic / mathematical problems. Although it has been criticized, we continue to like the Stack Overflow design, which is largely thanks to Jeremy Kratz. We feel providing solid layout and markup control makes our questions look great. We’ve been pleasantly surprised with the SQL Server 2005 full-text search on Stack Overflow, but we agree with Joel that something like Lucene.NET would probably work better, as it operates at the logical “page” level instead of database record level. People don’t think in terms of database records; they think in terms of web pages. Geoff discusses how important sitemap.xml was for us. Unlike a blog, we didn’t have stable, permanent links to questions. until we rolled out sitemap it was literally impossible to find questions using web search, even if you entered the exact word-for-word title. As google says, you should use sitemaps for “any site where certain pages are only accessible via a search form”. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/09/30/i-dont-give-a-damn-about-my-reputation/","date":"2008-09-29T22:00:00.000Z","tags":["Company"],"title":"I Don’t Give a Damn About My Reputation","text":"Geoff Dalgas did a bang-up job implementing the #1 UserVoice requested item — and he did it all while we were away on our NYC trip, no less! You’ll notice there is a now a Reputation tab on everyone’s user page, which includes a graph of your reputation over time a summary of the actual up and downvotes from each question/answer that generated your reputation. The graph is “live” — you can select a time range with your mouse and drill into the specifics for that time period. If you were ever curious where your rep score came from, now you know. This is also the only place we expose downvote counts. There is still some tweaking we want to do with the layout, but hopefully this will meet everyone’s obsessive desire to track their reputation scores in the minutest of possible detail. Not that there’s anything wrong with that. No. This would not have been my first pick for feature priority development, but it was highly requested, and I thought Geoff did a great job on it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/09/30/ok-now-define-answered/","date":"2008-09-29T22:00:00.000Z","tags":["Company"],"title":"OK, Now Define “Answered","text":"One thing we’ve learned on Stack Overflow is that asking questions is easy. But how do you tell when a question has been answered? For a community predicated on the value of getting answers to your programming questions, it’s sort of… important… to know when unanswered questions are hanging around out there in the ether. We do provide a facility for the person who asked the question to mark an answer as an “accepted” answer. Once accepted, the answer is tagged with a checkmark and a special background color, and permanently docked to the bottom of the question. This is a simple social convention we use to close the loop between the person asking and the person answering — with a little reputation sugar to sweeten the deal (+15 to the answer, and +2 to the owner). Accepting an answer is not meant to be a definitive and final statement indicating that the question has now been answered perfectly. Heck, we don’t even expect people asking questions to come back and accept an answer most of the time. Just between you and me, not all question askers are equipped to recognize the best answer to their question anyway — that’s where community voting comes in. That’s why in the default sort order (votes), the answer the community likes best will be either: Directly under the question Directly under the accepted answer, if there is an accepted answer This is how Stack Overflow works — the good stuff gets voted to the top, so you never have to read down very far to get the best information. And for the most part, it does work! However, we still need a way to get to questions that, for whatever reason, aren’t being answered. Initially our unanswered questions view included questions with zero posted answers. That didn’t work too well, as some questions could have multiple answers posted that weren’t … satisfactory. They’d disappear from the unanswered questions view, but these questions weren’t truly “answered” in any real sense. Some people proposed showing all questions without any accepted answers, but that’s contorting a simple social convention into far more than it was meant to be. Expecting every asker to come back and mark an accepted answer is totally unrealistic. There would be tens of thousands. As of today, here’s how we do it: Answered questions have at least one answer with one upvote (or accepted) Unanswered questions have no answers with upvotes (or accepted) More complex solutions have been proposed. We could potentially tweak the number of upvotes required for this to work — but I’m thinking this is a lot better way to measure “answered” than the way we used to do it. So if you were wondering why the number of “unanswered” questions just went from barely a hundred to nearly two thousand, this is why."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/09/24/podcast-23/","date":"2008-09-23T22:00:00.000Z","tags":["Company"],"title":"Podcast #23","text":"This is the twenty-third episode of the StackOverflow podcast, wherein Joel and I discuss the following: The Stack Overflow team will be in New York City from the 24th to the 28th. It’s partly business, and partly a reward to our team for their hard work on the site. What are some cool geeky things for us to do in NYC? We wonder: do newscasters wear pants? Joel describes his upcoming Inc. magazine article enumerating the seven development mistakes we made in building Stack Overflow. I think by seven he meant zero. Most of the reviews of Cuil and Knol are negative because “I tried it for what it was intended to be used, and it didn’t work.” The power of short informal code reviews in bridging the skill gap between beginning and expert software developers. Good developers think of this as self-preservation, because today’s beginner code is tomorrow’s code you’ll have to maintain. There have been a lot of requests for a packaged, customized version of Stack Overflow, but we have some reservations about the difficulty of delivering a packaged solution, and whether the current design will scale down to smaller private communities at all. Should trusted users be allowed to close questions? Or should the community simply vote them down? I argue we need both of these methods; Joel feels we only need voting. It’s ok to have some “fun” programming questions every now and then. It can’t be a community if you don’t stop every so often to have some (at least partially on topic) fun. We also answered the following listener questions: “How do you handle newbie questions?” Richard: “How do you cultivate programmer mentoring at a small company?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/09/21/what-was-stack-overflow-built-with/","date":"2008-09-20T22:00:00.000Z","tags":["Company"],"title":"What Was Stack Overflow Built With?","text":"This question keeps coming up a lot on Stack Overflow for some reason: What was Stack Overflow built with? Some even wondered if Stack Overflow was built in Ruby on Rails. I consider that a compliment! This question has been covered in some detail in our podcasts, of course, but I know not everyone has time to listen to a bunch of audio footage to find the answer to their question. So, in that spirit, here’s the technology “stack” of Stack Overflow, the stuff Jarrod, Geoff, and I used to build it: framework Microsoft ASP.NET language C# development environment Visual Studio web framework ASP.NET MVC browser framework jQuery database SQL Server 2008 data access layer LINQ to SQL source control Subversion (now Mercurial through Kiln) compare tool Beyond Compare source control integration VisualSVN (now, VisualHg) We have a few other minor dependencies as well, such as ReCaptcha, DotNetOpenId, and the WMD control (which we subsequently rewrote), but that’s about it."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/09/18/podcast-22/","date":"2008-09-17T22:00:00.000Z","tags":["Company"],"title":"Podcast #22","text":"This is the twenty-second episode of the StackOverflow podcast, wherein Joel and I discuss the following: Stack Overflow is now a public beta. We went from about 2-5% CPU usage during the private beta to over 50% CPU usage, on an 8-CPU server! Some day one stats: 1,500 questions were asked, 6,000 answers provided, 1,700 comments added, there were 62,000 unique visitors and almost 700,000 page views. Miraculously, the server is still running and performance is still snappy. It was tempting to keep a closed community, but Joel and I believe the real value here is in letting Google and other web search engines in, along with the hordes of everyday average programmers. We believe programmers are a smarter breed of user, and the low-friction question and answer format will be sustainable for the greater public community if is designed properly. Hopefully. We sit down with Josh Millard of MetaFilter, who graciously agreed at very short notice to come on and talk about his role as one of the 5 member core team that helps run and maintain MetaFilter. Josh is a programmer, too: you may remember him as the creator of the weird and wonderful Garkov! It was a great honor for Stack Overflow to make MetaFilter. I remain a longtime fan of MetaFilter and it definitely influenced the building of Stack Overflow. MetaFilter is a sort of collaborative blog with an amazing and incredibly effective (and eclectic) Q&A community. MetaFilter has grown to five moderators over time. How do you decide who becomes a moderator? Does moderation scale? How much can/should the community police itself? MetaTalk is the “backchannel” of MetaFilter, analogous to the “discussion” page on Wikipedia. It turns out there are two channels of communication in any social website. The topic, and then the topic about the topic. These are two very different audiences with very different needs. “technologically assisted profiling” is how MetaFilter works; the community flags questionable things (in addition to discussion on MetaTalk) and then the moderators act on those flags. MetaFilter is extremely strict — they consider PR and blatantly promotional material spam, which rules out a huge section of what normally appears on Digg or Reddit. MetaFilter has not voting, but it does have a favorites system, which is something we have planned for Stack Overflow. I follow the Best of MetaFilter feed which I believe is determined by how many people have favorited a given MetaFilter post. In the rare event where a user goes haywire — remember that it costs $5 to even join MetaFilter — these users will be given “timeouts” of a day or two until they cool down. There are no scarlet letters or black marks that can be placed on users. The history of the user’s actions, particularly if that history is public, is usually enough to handle the problem. We definitely agree with this philosophy. We did not have time to answer any listener questions today, but please send them in and we’ll get to them on the next episode! If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. We also have a dedicated phone number you can call to leave audio questions at 646-826-3879. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/09/15/then-a-miracle-occurs-public-beta/","date":"2008-09-14T22:00:00.000Z","tags":["Beta"],"title":"Then a Miracle Occurs – Public Beta","text":"stackoverflow.com is now live and open to the public, as a public beta. Our heartfelt thanks to all the software developers who so patiently helped us test the site during the private beta. You are the true heroes of this project, contributing your time in creating over 8,500 questions in a month and a half — not to mention putting up with our bugs and errors. Your beta badges are forthcoming. We’ll see how long Stack Overflow manages to stay up now that it’s in public view. We did some last minute caching and optimizations that should help. I, for one, am keeping my fingers crossed."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/09/11/help-us-beta-test/","date":"2008-09-10T22:00:00.000Z","tags":["Beta"],"title":"Help Us Beta Test","text":"If you’d like to help us beta test Stack Overflow, in advance of the Monday launch, here’s how: Go to beta.stackoverflow.com Enter “twitter@twitter.com” and “falkensmaze” to gain access (note that this is NOT an account: it’s merely a password to gain access to the beta) Please do bear in mind the beta test guidelines. When asking questions, try to keep them on topic: Is your question about programming? We prefer questions that can be answered, not just discussed. Provide details, but write clearly and simply. I thought these guidelines were straightforward, but they haven’t stopped anyone from asking anything they damn well please. Every time I visit the site, I half expect to see “How do I make a peanut butter and jelly sandwich?” If you’re wondering what’s so special about Stack Overflow, the answer is — well, nothing, really. It’s a programming Q&A; website. The only unusual thing we do is synthesize aspects of Wikis, Blogs, Forums, and Digg/Reddit in a way that is somewhat original. Or at least we think so. Stack Overflow is that tiny asterisk in the middle, there. But hopefully you’ll see what I mean when you experience it for yourself."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/09/11/podcast-21/","date":"2008-09-10T22:00:00.000Z","tags":["Company"],"title":"Podcast #21","text":"This is the twenty-first episode of the StackOverflow podcast, wherein Joel and I discuss the following: Road trip! The Stack Overflow team will be visiting the Fog Creek offices in New York City from Wednesday, September 24th to Sunday, September 28th. Hopefully Joel and crew will be completely moved in by the time we arrive. We’re planning to launch the Stack Overflow website to the public on Monday, September 15th. As a fake plastic rock enthusiast, there is another big item launching this week: Rock Band 2! It’s scheduled to appear Sunday September 14th. We purchased a complete set of fake plastic rock equipment, centered on Rock Band 2, to outfit the new Fog Creek offices and celebrate the newly public website. An examination of Hegel’s thesis, antithesis, synthesis as applied to PC and Console gaming, and perhaps everything else. I continue to believe game programming may be the most challenging and unforgiving kind of programming — as famously documented by one spouse in 2004. How do you optimize for “fun”? Joel describes it as a “big universe of dumb programmers”, where Stack Overflow is (intended to be) an amplifier of the small bits of signal that come out of that supernova of mediocrity. We’re part of it too! On the myth of expertise: fields of expertise in programming are very narrow, and it’s remarkable how quickly you get off the beaten path, into techniques and approaches that almost nobody else is trying. How do you deal with users who set out to grief your system? Rather than outright banning or blocking, Joel proposes silently hiding that user’s content from the world, in a way that is only visible to other users. As described in our previous podcast, the silent treatment is an incredibly powerful technique. “You’ve got a bunch of people playing Chess, but certain people want to play ‘throw the chess pieces all over the park’ — and from there it becomes a sort of wrestling and fighting game.” I can’t go to sleep — someone is wrong on the internet! One of our ‘playful’ users created giant posts by entering an amusing picture of Joseph Ducreux a hundred times, so I changed the name of his account to that. Generally these kinds of posts automatically get deleted by the community when they reach the ten vote offensive threshold — or they could be edited away by trusted users — but I stepped in as a moderator. The paradox of griefing is that these users are highly engaged with the system. Most people don’t care and won’t bother. So spending a lot of time gaming the system means you must like it on some level. If you’re not careful you will turn these semi-engaged users into active and purposeful enemies. Joel proposes that users with a historical record of creating problem posts automatically get their content filtered to the bottom of the pile. He draws a comparison with bartenders not dramatically cutting off drunks, but serving them non-alcoholic drinks that look exactly like real drinks. Incentives, like the badge system we use in Stack Overflow, despite being completely arbitrary, can have actual meaning in measuring and showing off your accomplishments. On the other hand, if you’re not careful, you can end up with something like the despised Microsoft Ship-It awards. p.s. The Conversations Network, a not-for-profit organization which hosts our podcast, is looking for sponsors for their podcasts, including this one. It would be a very modest, NPR-style intro at the beginning… “The StackOverflow Podcast is brought to you by Gummy Bears, Inc., bringing fine chewy treats to grubby children everywhere.” If your company might be interested in sponsoring the podcast and becoming a hero to developers worldwide, or at least the eight developers who listen to the podcast, please email Joel. We also answered the following listener question: Clay Nichols of Bungalow Software “Did the badge idea come from Joel’s experience in the Israeli military, or from Jennifer Aniston in Office Space?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/09/03/podcast-20/","date":"2008-09-02T22:00:00.000Z","tags":["Company"],"title":"Podcast #20","text":"This is the twentieth episode of the StackOverflow podcast, wherein Joel and I discuss the following: We figured out our deadlock problem, finally. It had to do with Log4Net being called during a database operation, itself triggering another database operation and log event. This is normally OK, but the events were happening so close together that it resulted in a deadlock. Our new stackoverflow.com launch date is next week, as diagnosing the deadlock set us back at least four or five days. What’s your logging philosophy? Should all code be littered with .logthis() and .logthat() calls? Or do you inject logging after the fact somehow? Should you rely on third party libraries, or “find the dependencies and eliminate them“? Having the source can make the difference between a dependency that works for you, and one that works against you. This is the great strength of taking dependencies on JavaScript libraries from the web — you can always View Source. Perhaps this is why JavaScript is the Lingua Franca of the web, and increasingly the language young people will grow up programming. One way we know Stack Overflow is already successful — someone created a blog dedicated to hating Stack Overflow! If you can’t get people to care one way or another about what you’ve done, you’ve definitely failed. When it comes to trolling, the most powerful countering technique at your disposal is to not pay attention to it. Which we have failed to do. My favorite literary interpretation of this is “the silent treatment” from the Great Brain book series which I read and loved as a child. We have implemented the transition point between traditional discussion board post ownership and wiki-style group ownership. The transition is forced when there are (n) edits by (n) users, or if there are (n) edits by the post owner. This rule also helps discourage people from bumping their posts by continually editing them, and reduces the perception of reputation gaming from people who try to build a large, collaborative post incorporating the comments of others. Asking good questions is difficult. There’s an art to constructing a question that appeals to your target audience, yet isn’t an overt attempt to pander and farm attention. Joel’s biggest problem, besides dealing with New York City landlords, is getting people to not do what he says just because he says so as their CEO and boss. Joel, as the big picture CEO, rarely has all the information necessary to make good, tiny, local decisions. That’s your job! There are tons of existing web Q&A sites that we derive inspiration from, but we believe our more focused and directed programmer audience is what makes the difference. When the audience is very large and broad, you’ll end up with things like the baby daddy question and the Georgia tanks question. The current beta is definitely working, in that people posting questions are getting good answers and fairly quickly — as you can see from Sara Chipps’ report. Joel is in Boston at his Business of Software 2008 conference which is going on now. Joel is thinking up an introduction for Richard Stallman, who by any measure is a legendary figure in the software community. There’s a filmmaker on site at the conference, filming footage to be incorporated into a sequel to Project Aardvark in about a year or so. However, this will be a more technical look at how software is developed at Fog Creek and perhaps a primer on some tenets of good software development. We also answered the following listener questions: Trey Jackson: “Why doesn’t Jeff listen to Joel? How do you keep people interested in answering questions on Stack Overflow when the volume goes up?” Martin: “What in your experience or background has been most useful while building Stack Overflow?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/08/28/i-guess-thats-why-they-call-it-beta/","date":"2008-08-27T22:00:00.000Z","tags":["Beta"],"title":"I Guess That’s Why They Call It “Beta","text":"Just a quick note to the beta participants: We apologize for the recent spate of outages. We’re currently diagnosing a sporadic hang in the website that we haven’t quite got a handle on yet. Until we figure it out, we’re forced to restart the web service every few hours. I’ll update this post when we get it licked, but until then, expect a bit more turbulence than usual. We appreciate your patience. Edit: Problem solved; see Podcast #20 for explanation."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/08/28/podcast-19/","date":"2008-08-27T22:00:00.000Z","tags":["Company"],"title":"Podcast #19","text":"This is the nineteenth episode of the StackOverflow podcast, wherein Joel and I discuss the following: We’ve mapped our voting functionality to what you see in Digg and Reddit, but we’re a Q&A site, not a link aggregation service. Should we allow voting on questions as well as the answers? Or should questions simply be taggable as favorites, which are a de-facto vote? I believe voting and favorites are related, but not quite the same thing. How do you deal with meta-discussion about the site? Wikipedia has two distinct areas for any page: the page itself and the “behind the curtain” discussion about the page. We don’t quite have this. Joel points out that Google’s dedication to the algorithm over human intervention is on display in the Google search results for “jew”. The private beta is insular in a way that isn’t immediately apparent to the people participating. We figure a huge percentage of our audience will be the barely interested programmers who end up on a Stack Overflow page from a web search. Also, the type of developers that tend to get attracted to the beta are the best, elite developers. Once the site is public, we’ll have a far wider range of skills in play — and much less sophisticated users. I realized that Joel has zero votes because we actually had a XSS vulnerability — theoretically “friendly” hacker beta users intercepted our cookies and were able to impersonate us! We’ve fixed it now, but there was some minor collateral damage, such as the deletion of Joel’s voting history. This is one of the challenges of developing a site for skilled (but bored) developers with time and ability on their hands. Joel cites Aaron Swartz’ blog entry How To Launch Software as perhaps a model we should follow. The so-called “Hollywood Launch” tends to cause a huge, uncontrollable spike in traffic and then a massive drop as things don’t go to plan. See Cuil. We are both scared stiff about the amount of traffic we already have, so we’ll be proceeding carefully. Our SQL Server deadlock problem was solved by switching to read committed snapshot. It turns out SQL Server is not tuned very well for typical web app loads, which consist of massive numbers of reads and miniscule numbers of writes. The Stack Overflow database and webserver are currently the same machine. One easy scaling path for us is to buy another server and dedicating it to the database. I’m just unsure exactly where the transition point is for network latency versus the SQL calls staying in memory. There is a huge difference between horrible legacy code by talented programmers and horrible legacy code by, well, horrible programmers. This is frequently measured in WTFs/minute. We also answered the following listener questions: Ryan Cox: “Can you talk about backup and disaster recovery plans?” Ryan: “In developing database-centric software for multiple clients, why not use a single database rather than multiple databases for each client?” Phil Howie: “How do you balance legacy code that nobody wants to update with programmers who want to use the latest and greatest stuff?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/08/25/stack-overflow-on-herding-code/","date":"2008-08-24T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow on Herding Code","text":"I was invited to participate in the latest Herding Code podcast. This was a fun one for me because I’ve known the four hosts of the program — Jon Galloway, Kevin Dente, K. Scott Allen, and Scott Koon — through their blogs since forever, eventually meeting most of them in person. All of their blogs predate mine by years. I’d almost say we were blog buddies. If you could call people blog buddies. Which I don’t think you can. At any rate, I go into quite a bit of technical depth on Stack Overflow and some of the features that we have yet to implement, but have been hotly requested — definitely worth a listen if you want to go deep. Thanks for having me on! (oh, and listen past the end for a little audio easter egg that’s sort of fun)"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/08/21/podcast-18/","date":"2008-08-20T22:00:00.000Z","tags":["Company"],"title":"Podcast #18","text":"This is the eighteenth episode of the StackOverflow podcast, wherein Joel and I discuss the following: We finally get to meet Michael Pryor, the co-founder of Fog Creek Software, who is a special guest on this episode! Joel had good luck browsing our beta site using Opera Mini. I’m still incredibly impressed with the Mobile Safari browser on the iPhone, which renders our JavaScript-heavy site perfectly, as far as I can tell. Joel posted a Regex question on the Stack Overflow beta, and I can’t help bringing up RegexBuddy, my favorite (and still best) regular expression tool for developers. Social websites are a bit unpredictable to build — we intended Stack Overflow as a relatively straightforward question / answer site, but there’s quite a bit of demand for inter-answer discussion. Our system is designed to float the best answers to the top via voting, but this makes conversations in the answers difficult to follow. Stack Overflow is a hybrid of a discussion forum, a wiki system, and a voting/reputation system. It’s been a hit so far, but we are running into some design issues resulting from this unusual combination. I had the opportunity last week to meet Merlin Mann, who Joel and I are big fans of. Joel particularly enjoys their podcast, You Look Nice Today. Turns out Merlin is a fan of Joel’s as well. We should form a mutual admiration society! If you’d like to sign up for the Stack Overflow private beta, which will run until the end of the month, use our Google Docs signup form. We didn’t get to any listener questions this episode, but we’ll remedy that next time! If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/08/13/podcast-17/","date":"2008-08-12T22:00:00.000Z","tags":["Company"],"title":"Podcast #17","text":"This is the seventeenth episode of the StackOverflow podcast. Joel is on vacation, so this is a special podcast with the software development team: Jeff Atwood, Geoff Dalgas, and Jarrod Dixon. Our team is geographically distributed — I’m in California, Jarrod is in North Carolina, and Geoff is in Oregon. Geoff and Jarrod, like me, both grew up with BASIC programming on early computers like the Apple // and Commodore 64. Can programmers who grew up programming somehow recognize each other? The private beta is going well. We think the beta will continue through the month of August. We’ll continue to add 150 users per day until the private beta is over. This entire podcast was inspired by community comments on the Stack Overflow blog, so we proceeded quickly to the following questions: We answered the following questions left from the blog: “How do you manage collaboration on a distributed team? Is code ownership a problem?” “How do you prioritize what features you’re working on?” “How do you test new features you’re developing before you roll them out?” “What were the biggest technical challenges you had to overcome?” “What happened on the site that you didn’t anticipate?” “Are you happy with the performance of your Windows development stack on the web server?” “Will you have an API? How will you deal with spammers, griefers, and marketers?” The Stack Overflow private beta list is essentially full until the end of the month. If you’d like an invite sooner, do two minutes of transcription in the wiki and I’ll bump you so you get an invite the same day. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/08/12/special-development-team-podcast/","date":"2008-08-11T22:00:00.000Z","tags":["Company"],"title":"Special Development Team Podcast","text":"You demanded it. We’re delivering. Our special Stack Overflow development team podcast will be recorded later today. Instead of yet another scintillating hour of Jeff and Joel constantly talking over each other, in this podcast episode you’ll get to know the other two key players on the Stack Overflow team. You know, the ones that do all the real work. Jarrod Dixon (Morganton, NC) Geoff Dalgas (Corvallis, OR) Pop quiz, hotshot. If you were starting a company, who would you pick to come with you? For me, it’s these two guys. Geoff, Jarrod and I all know each other from working together at previous jobs. They are without a doubt two of the very best developers I’ve ever worked with, and it’s an honor to have them on the team. Particularly at the slave wages I’m paying them. (Actually, I’m not sure even a slave could survive on what I pay.) Let’s open the comments up — what questions do you have for the Stack Overflow development team? We’ll get to as many questions as we can fit in an hour."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/08/06/bad-news-good-news/","date":"2008-08-05T22:00:00.000Z","tags":["Beta"],"title":"Bad News, Good News","text":"I’ve got some bad news and some good news. I like to start with the bad news, and you don’t get a choice, so here goes: There will be no podcasts for the next two weeks. Joel is on an extended vacation. Our apologies, but the logistics of recording remotely are too daunting. Plus, we want Joel to enjoy his vacation, right? Me, I don’t get a vacation. I have to work frantically with Jarrod, Geoff, and Jeremy on this Stack Overflow thing. Not that I’m bitter or anything. I’ll just set my desktop background to something tropical. It’s almost the same thing as a vacation. Almost. But, I also bring you the promised good news! You can sign up for the Stack Overflow beta. Hooray! Huzzah! Because who doesn’t love using buggy, incomplete websites filled with irate users? Click here to sign up for the Beta I asked around on Twitter and got a recommendation for a Google Spreadsheet Form. I looked at Wufoo and SurveyMonkey but their limits are too low. I must say I’m impressed with the Google docs spreadsheet form solution; it’s working amazingly well. And it’s so simple. Every time someone visits the form and signs up, a new row is created in the spreadsheet. Easy!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/08/01/stack-overflow-private-beta-begins/","date":"2008-07-31T22:00:00.000Z","tags":["Beta"],"title":"Stack Overflow Private Beta Begins","text":"And then a miracle occurred. We’re beginning the Stack Overflow private beta. I am sending out emails to the first 100 people for the private Stack Overflow beta; the email contains the password necessary to log in, as well as a link to this post. I will continue to email 100 people per day until all ~500 people on the private beta list have invites. Please bear in mind the goals of this beta, as we proceed: 1. Generate REAL questions and answers Treat the beta like a real live website! Don’t put “test” or “fun” or “play” questions up — ask actual, real, bona fide honest-to-goodness programming questions! Answer other people’s programming questions! If you look some programming question up on the web and you are unsatisfied with the results, post the question and answer on Stack Overflow (yes, it is OK and even encouraged to answer your own questions, if you find a good answer before anyone else.) I want Stack Overflow to be your research notebook for every programming problem you face that you don’t immediately know the answer. Help us help you. 2. Help Us Remove the Suck We probably didn’t get everything right. In fact, I’m sure of it. The beta is private so you can help us remove all the suck before we let the general public in. I’m relying on you, the beta heroes, to tell us: What’s confusing. What’s broken. What doesn’t make sense. What could be better, and specifically how, with carefully researched examples and URLs referencing other sites that demonstrate specifically what ought to be done. I’m sure it’ll still suck at the end. But with your help, less. Much, much less! With any luck, we might even flirt with.. wait for it.. not sucking! A man’s gotta dream. 3. Be Gentle I deeply appreciate the effort that you are putting into testing our crappy newborn website. You are giving us the gift of your time, and that’s not something I (or any startup) should take lightly. So I, and the rest of the Stack Overflow team, will try to be as responsive as we possibly can to your requests during the beta. But we’re only human, and there are only three of us — and exactly one full time person (me). If you are unfortunate enough to receive the yellow screen of death, know that all these errors are automatically logged and we will be looking at them individually. You should also know that these are all, like, totally Jarrod’s fault. Because he sucks. For best results, please avoid mailing us directly, and use the stackoverflow.uservoice.com for your private beta feedback. It’s also linked from the beta site itself, right there in the header. From here, you can: list bugs you’ve found vote on the bugs you want us to fix list features you want us to add vote on the features you want us to add I will check our uservoice site religiously! Direct email, I cannot guarantee a response to, but I will do my best. Good luck and godspeed, brave beta users."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/07/30/podcast-16/","date":"2008-07-29T22:00:00.000Z","tags":["Company"],"title":"Podcast #16","text":"This is the sixteenth episode of the StackOverflow podcast, wherein Joel and Jeff discuss the following: Programmer design is scary — We now, thank goodness, have an actual designer design! Thanks to Jeremy Kratz for assisting us with our design woes. We also appreciate input from Tim Almond, Rob Allen, and Nathan Bowers. We plan to have a smooth transition from cookie to authenticated user. I thought Jan Miksovsky had a great post on login barriers. I feel a lot of sites get this wrong by throwing up an abrupt login barrier too quickly. Tear down that login wall! you have your choice of login methods: either OpenID or the traditional three “name, email, URL” input boxes. You will be able to fully participate as a non-authenticated user — both answer and ask questions. You may, however, be capped on reputation score and a few advanced abilities. We will not be seeding the site with the data from the Joel on Software .NET forum, as we feel it will bias the site too heavily towards that particular audience. Stack Overflow is intended to be non-denominational. We will be seeding the questions and answers on the site with the content generated by the private beta users. One of the great advantages of the new Web 2.0 economy is that there are so few barriers between programmers and the world — assuming you’re comfortable building a web site. Contrast this with the bad old days of distributing software on floppy disks or CDs. Can you remember the first time you used Google? When and where did you discover it? How has Google resisted succumbing the portalitis disease after so many years? It’s admirable that they’ve pursued simplicity this long. I am mightily impressed that the iPhone can render Stack Overflow, even the jQuery and WMD editor parts. Kudos to Apple for an (almost) no-compromises mobile web browser that delivers a desktop browser experience. Joel loves his new Nokia E71 phone, and he cites the physical keyboard as the primary differentiator — along with the superior third party Exchange integration. Revisiting my programming chair article. Although I loved my 1998 Aeron, I felt I could do better — and the Mirra I’m sitting in now is a distinct improvement. I’m with Jason Calacanis: [buy a cheap desk, and the best chair you can afford](http://www.calacanis.com/2008/03/07/how-to-save-money-running-a-startup-17– really-good-tips/). Joel recommends the Chadwick Chair which I didn’t get a chance to try, unfortunately. Don’t forget overall computer workstation ergonomics; Joel also recommends variable height desks. On McConnell’s cone of uncertainty, and the importance of keeping a list of what is to be done. You can’t estimate without a list of tasks — and you probably need to break the tasks down to very minute steps to really understand what those tasks entail, too. As Joel points out, there is the risk of the “Objects In Mirror Are Closer Than They Appear” illusion — your mind’s eye tends to fill in the gaps. You gloss over the details and presume things will be simpler and easier than they actually are. I believe in two principles during this project. First, having public artifacts that everyone can objectively see and judge. The team should develop a concensus opinion based on that reality. Second, have a plan — but start on that plan as soon as possible! The sooner you get started, the sooner you will discover all the details and weirdnesses you could not anticipate or plan for. Joel proposes having major plans for version two, and just getting a small version one out the door quickly. The actual usage of the app may not be at all what you imagined, and you can change your approach more rapidly to accommodate those real world uses for version two. We also answered the following listener question: Josh Parris: “Why did the Stack Overflow schedule blow out?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/07/26/stack-overflow-beta-design/","date":"2008-07-25T22:00:00.000Z","tags":["Beta"],"title":"Stack Overflow Beta Design","text":"Ever notice how most sites run by programmers have the worst designs ever? Yeah. We’re currently at the stage where we need to implement an actual design — for which I have recruited actual designers. Here’s a sneak peek at the beta design we’re furiously working on implementing at the moment. And even earlier: Trust me, you do not want to see the “programmer” design we had before this. I’ll have more details on the designer we’re working with — who will be featured in our site’s about page credits as well — later. This is by no means final, so feel free to comment, but it is definitely good enough for the beta to begin next week."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/07/24/podcast-15/","date":"2008-07-23T22:00:00.000Z","tags":["Company"],"title":"Podcast #15","text":"This is the fifteenth episode of the StackOverflow podcast, wherein Joel and Jeff discuss the following: A brief discussion of our shoestring budget, and the project schedule. The beta for Stack Overflow is close; we will likely be trickling people in by the end of the month. Strategies for handling recurring or background tasks in ASP.NET. We have a simple method that works for now. Being a stellar software developer does not necessarily equate to being a stellar manager of software developers. Promoting your best coders is not always the best strategy. We highly recommend Peopleware and Managing Humans: Biting and Humorous Tales of a Software Engineering Manager. If you’re a manager, staple these books to your face! Live it, learn it, love it! If you know someone who is a manager of software developers, staple these books to their face. They’re that important. Joel’s essential time management tip: get things done by not reading Getting Things Done. Personally, my time management is terrible, but I do have one guiding principle: produce some kind of small public artifact every day. We can recommend Merlin Mann’s excellent site 43Folders, which is sort of a long running geek love letter to that book. I argue that regions are the GOTO of code formatting. I navigate in Visual Studio using search as my metaphor. Between CTRL+I incremental search and CTRL+SHIFT+F find in project, I’m never more than a few keystrokes away from whatever code I need to see. Your code is full of highly unique keywords, just like the web is full of unique search terms. Joel and I both agree: one of the most effective coding practices you can adopt on your team is interactive, sit-down-with-your-coworker code review. 90% of the things you will learn have nothing to do with the code. I believe programming is a far more social activity than most realize. If you write code, and nobody but you ever sees that code — did you really extract all the benefit from writing that code? When it comes to interviewing software developers, it seems there are two classes of interviews: the kind where the interviewee gets to drive, and the kind where the interviewer does all the driving. Try to have a game plan for both types of interviews. Be yourself, build a portfolio, and actively study the company you’re interviewing at. For some interviews, you really do need to prepare — practice, practice, practice! If you’re on the job hunt, check out our listings for junior and senior developer jobs. We can’t talk about programming interviews without mentioning classic interview puzzles and the book How Would You Move Mount Fuji? On the amazing power of lambda expressions, delegates, and anonymous methods. Fun stuff! If ACME is in the business of developing explosive widgets, is it unreasonable for them to inevitably outsource their software development to Coders R Us? If you’re serious about software engineering as a career, you deserve to work at a company that is serious about software engineering, too. This usually means choosing to work for a company where software is at the core of their business model. See Joel’s Talk at Yale. We answered the following listener questions: Gordon Milne: “I have an opportunity to pursue a more managerial role; how do you feel about making the transition from developer to being responsible for other developers?” Jason Zimpelmann: “What sorts of time management skills do you use?” and “What about that posting on region blocks?” Aviv Ben-Yosef: “Should code review be done alone via email or in person?” David McGraw: “What advice would you give college graduates who are interviewing for programming jobs?” Adam Haile: “How do you handle pointers to functions in the .NET world?” Matias A. Bellone: “Outsourcing has been putting food on my table for the past few years. What are your feelings on this?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing. Update: if you had trouble playing back this episode (or the previous one), it may have been due to issues with the way the ID3 tags were stored on the file. The ITConversations folks are on it, and have re-rendered the episodes with a fix."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/07/21/dates-relative-or-absolute/","date":"2008-07-20T22:00:00.000Z","tags":["Company"],"title":"Dates: Relative or Absolute?","text":"Another item we’re looking at as we get closer to the Stack Overflow private beta is the issue of how to display dates on the questions and answers. We started by displaying the absolute dates as you’ll see them on Joel’s existing forum — although we do add the time as well: Monday, June 27, 2005 at 6:35 pm This works fine, assuming you’re in the same time zone as the server. (Actually, now that I think about it, maybe that’s why Joel opted to drop the time part; the odds of your time zone being in a completely different day from the server’s time zone is fairly slim.) Otherwise, you have to record the user’s time zone and translate all the server times to their local time. We noticed that some sites, like getsatisfaction, opt to display all times in relative units. So the above would be rendered as: Three years ago Granted, it lacks precision, but did you really need to know the message was originally left on June 27th? And isn’t it simpler not to have to do the “how old is this” math in your head? The other big advantage is that relative times work for every timezone, so you don’t have to tell us your timezone in your user profile, and we don’t have to be scrupulously careful to convert every date we touch. However, note that the precision of the date increases automatically as the messages get closer to “now”: Three years ago Two months ago 17 days ago 6 minutes ago We’re leaning heavily towards displaying all question and answer times in relative units now. What are your thoughts?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/07/18/easy-background-tasks-in-aspnet/","date":"2008-07-17T22:00:00.000Z","tags":["Background"],"title":"Easy Background Tasks in ASP.NET","text":"As I work on the badge implementation for Stack Overflow, I needed a way to call the code that detects and awards the badges out of band. Traditionally this is done by something like cron or scheduled tasks. I’d rather have the code stay inside our current codebase, though. I asked on Twitter and got some good responses, everything from “write a service” to “use threads”. I also got a link to Simulate a Windows Service using ASP.NET to run scheduled jobs. Now this is interesting — it’s just simple enough to work: At startup, add an item to the HttpRuntime.Cache with a fixed expiration. When cache item expires, do your work, such as WebRequest or what have you. Re-add the item to the cache with a fixed expiration. The code is quite simple, really: private static CacheItemRemovedCallback OnCacheRemove = null; protected void Application_Start(object sender, EventArgs e) { AddTask(\"DoStuff\", 60); } private void AddTask(string name, int seconds) { OnCacheRemove = new CacheItemRemovedCallback(CacheItemRemoved); HttpRuntime.Cache.Insert(name, seconds, null, DateTime.Now.AddSeconds(seconds), Cache.NoSlidingExpiration, CacheItemPriority.NotRemovable, OnCacheRemove); } public void CacheItemRemoved(string k, object v, CacheItemRemovedReason r) { // do stuff here if it matches our taskname, like WebRequest // re-add our task so it recurs AddTask(k, Convert.ToInt32(v)); } Works well in my testing; badges are awarded every 60 seconds like clockwork for all users."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/07/16/podcast-14/","date":"2008-07-15T22:00:00.000Z","tags":["Company"],"title":"Podcast #14","text":"This is the fourteenth episode of the StackOverflow podcast, wherein Joel and Jeff discuss the following: This week’s Rock Band downloadable content is epic — the best of the Who. Pointless podcast trivia: the Who song Baba O’Reily is a concatenation of two influences, one philosophical, the other musical: Meher Baba and Terry Riley. “They’re all wasted!“ On Joel’s post Don’t Hide or Disable Menu Items. Joel considers this post an experiment in minimalism, to see if it is possible to write an extremely short piece that still works. I viewed it as a mistake; surely there’s something between three tiny paragraphs and 5,000 words. There should be a common UI metaphor for things that are disabled that provides a standard bit of interface to indicate why something is disabled. The specific situation that Joel ran into that motivated his post on this was the fact that the accelerated playback mode of Windows Media Player was disabled for Joel. I believe that comments are an important avenue for clarification and course correction in blogs, which is why they are so essential. Is a blog without comments even a blog at all? It is what provides the conversational tone that makes them work. Joel feels conversational nature is “leading to the demise of blogs”. People are relying on the conversation to complete the idea, rather than writing and researching the topic and presenting it as a coherent whole. It’s more like hanging out with your friends and saying the first thing that pops into your head. Joel draws comparisons to the eternal September. So much of programming is not easily measurable or quantifiable; it is explained by anecdote. I believe it is the reader’s job to read critically and question viewpoints — and demand some form of supporting data, beyond just one example or a few anecdotes. Don’t let the most persuasive argument win; let the best data win. Joel brings up a great point — you should avoid weasel words in your writing! Or at least know when you’re using them. And try to stop. On making decisions based on data: I believe you should automatically measure the number of queries and the time they take in your software. Based on that data, decide how much to normalize your database. Joel says the older he gets, the less he knows — citing a few of his earlier posts. He plans to switch to story driven writing, free of agenda or morals. Let the reader interpret whatever message he or she wants into it. Perhaps the ideal workspace is re-configurable by the group that works in it — Microsoft’s new research building might be an example of this, or the the Patterns & Practices agile workspace. A discussion on the perils of object relational mapping — it’s not called the Vietnam of Computer Science for nothing. We use LINQ to SQL on Stack Overflow and I have been quite happy with LINQ to SQL because it is 1) flexible 2) very lightweight and 3) built into the language as a fundamental construct, not bolted on in bunch of code generation or classes. Thanks again to everyone contributing wiki transcriptions! We also answered the following listener questions: Paul D. Waite: “As a web developer going from JavaScript and Python to Objective-C, where should I start learning C?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/07/12/stack-overflow-badge-feedbac/","date":"2008-07-11T22:00:00.000Z","tags":["Company"],"title":"Stack Overflow Badge Feedback","text":"Are you familiar with the “stinking badges” quote? It’s from the 1948 movie The Treasure of the Sierra Madre. Here’s the actual clip from the movie: As I mentioned in Podcast #13 (and probably earlier), Stack Overflow will feature a system of badges. Hopefully the non-stinking type. These badges are based on my admiration — and addiction to — the Xbox 360 Achievements system. Stack Overflow badges fall into three broad tags: company Bronze badges. Bronze badges are awarded for basic use of the Stack Overflow site; they encourage people to use all the typical, routine functions of the site: posting questions, answering questions, voting up or down, tagging posts, editing, filling out your user profile, and so forth. Bronze badges are relatively easy to get and provide immediate positive feedback to new users. Silver badges. Silver badges are for experienced users who regularly use the Stack Overflow site. They encourage continued participation and returning to the site by awarding longer term goals. Silver badges are uncommon, but definitely attainable if you’re interested enough. Gold badges. Gold badges are for the hardcore and the completionists. They reward the most difficult feats; you’ll have to not only participate but be skilled and knowledgeable about topics to earn these. Gold badges are something of an accomplishment. Bear in mind that badges are (almost) never awarded arbitrarily by people; they are always earned by achieving a measurable numeric goal queried out of the site database. They are based on data! You don’t have to worry about currying a moderator or another user’s favors to earn badges; just use the site like you normally would, and the site itself will bestow these badges upon you. That said, badges are supposed to be fun, too! Here’s our current alpha list of badges: Descriptions follow: Gold Founder Founding member of stackoverflow.com Gold Hacker Thanks for contributing to stackoverflow.com in an unconventional way Gold Beta Beta tested stackoverflow.com Bronze Teacher Answered first question Bronze Student Asked first question Bronze Editor First edit Bronze Enforcer First rollback Bronze Organizer First retag Bronze Supporter First up vote Bronze Critic First down vote Bronze Citizen Patrol First flagged post Silver Librarian Retagged 100 questions Silver Strunk & White Edited 100 entries Silver Yearling Active member for a year Bronze Speedy Answered a question within 2 minutes of posting Silver Generalist Active in many different tags Silver Specialist Highly active within in a specific tag Bronze Necromancer Answered a question more than a year later Silver Guru Judged best answer by the asker Silver Enlightened First answer was also judged best answer by the asker Bronze Nice Question Question voted up more than 10 times Silver Good Question Question voted up more than 25 times Gold Great Question Question voted up more than 100 times Bronze Nice Answer Answer voted up more than 10 times Silver Good Answer Answer voted up more than 25 times Gold Great Answer Answer voted up more than 100 times Bronze Interesting Question Asked a question with 1,000 views Silver Fascinating Question Asked a question with 2,500 views Gold FAQ Worthy Question Asked a question with 10,000 views Most, but not all, badges can be awarded multiple times. This list is not by any means final. Our goal with the badges is to encourage people to a) have fun and b) use the Stack Overflow website in ways that make sense. So I want to avoid badges that encourage “gaming the system” behavior in favor of badges that encourage people to “do the right thing”. What are your thoughts on the current, tentative list of badges? Keeping in mind the goals I’ve outlined, what badges would you like to see us implement — and please, try to stick to badges based on metrics we can actually query back out of our database."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/07/10/podcast-13/","date":"2008-07-09T22:00:00.000Z","tags":["Company"],"title":"Podcast #13","text":"This is the thirteenth episode of the StackOverflow podcast, wherein Joel and Jeff discuss the following: Joel Spolsky still claims he is a New Zealander — or at least his father was — though I refuse to believe anything that is not in Joel’s Wikipedia entry can possibly be true. More evidence: FogBugz uses the Kiwi as its logo. I completely stole Yuval Tobias’ audio recording question about Spartan Programming and posted it on my blog. My apologies, but it’s a great topic, and I couldn’t resist. You may also appreciate Steve Yegge’s post Portrait of a Noob, as it covers similar ground. Marco Arment was kind enough, in My Lyrics Are Bottomless, to expand on his earlier criticism. Marco, I can’t bring myself to disagree with a fellow fan of the best two-man novelty band on the planet. I’d love to involve you in the private beta so we can benefit from your advice once you’ve experienced the code in action. Joel says that ASP.NET is like driving a Lexus, and PHP is like riding a bicycle. Note: please direct all subsequent hate mails to Mr. Joel Spolsky, c/o Fog Creek Software, NY, NY. The original schedule for Stack Overflow had us going to the private beta this month (July). Based on the current progress, I believe we need 2 extra weeks to implement editing, and that’s an essential part of the system. The key pieces need to be in place to get meaningful feedback in beta, so even if it slips a bit into August, the beta will be more useful. Stack Overflow will implement an Xbox 360 like Achievement system tied to your account. Our “Badges” system fulfills three roles: bronze badges encourage people to try all the different functions in the system, silver badges encourages continued participation, while completionists and hardcore users can strive to get the gold badges. All of this is completely optional, of course, but it is permanently visible on your Stack Overflow profile. We will also have a reputation system, which is a simple numeric score attached to your profile. It’s based on the number of upmods your questions and answers get. It bothers us that on many voting based sites, a downmod completely cancels out an upmod. On Stack Overflow, an upmod will be worth twice as much as a downmod. We hooked up CruiseControl.NET on our project, so every checkin results in a build, unit testing, and deployment to the server. We also get email notifications of what changed and whether the build broke or not. Joel’s classic 2000 article The Joel Test. How does your team fare on these 12 points? If you’re interviewing for a job, does that company pass The Joel Test? We also consider why unit tests aren’t included in Joel’s list, and whether they should be added. What version number is your website? Should websites have a version number? Our website version number will be synchronized with the Subversion revision number, so we can be sure what version we’re running. A discussion of Charles Petzold’s fantastic new book, The Annotated Turing. I cannot recommend this book highly enough; Petzold really makes the history and context of Turing and his seminal paper come alive. There’s also a Broadway play Breaking The Code based on Turing’s life. Joel has a new book, More Joel on Software. Joel shares his thoughts on the merits and pitfalls of turning your blog into a book. Joel decries the groupthink of Silicon Valley, and the flight from startup to startup. Joel thinks you can have a successful, original startup anywhere on the globe. You may want to maintain a US office, however. The principle of progressive enhancement is why AJAX is more web friendly, whereas the “rounded rectangle in a browser” model of Silverlight and Flash isn’t. Embrace and extend! There are a number of fairly mature JavaScript API libraries out there now, like jQuery, Dojo, and scriptaculous. Yahoo has some outstanding resources for web developers — make sure you check out the Yahoo Developer Network. If you live in the New York City area, Fog Creek Software is having an open house July 17th at 5 PM. It is open to all — please attend if you are in the area! We also answered the following listener questions: Isaac Moses: “How will you get people who know stuff to keep coming back to your site and answer questions?” Nicholas Kavadias: “Do you have advice for anyone who wants to get involved in a tech startup that’s not in Silicon Valley?” Stephen Bohlen: “Don’t AJAX approaches have a lot of the same problems as Flash and Silverlight?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/07/02/podcast-12/","date":"2008-07-01T22:00:00.000Z","tags":["Company"],"title":"Podcast #12","text":"This is the twelfth episode of the Stack Overflow podcast, wherein Joel and Jeff discuss the following: The difficulty of working on an airplane, even with an ultraportable laptop. I use the Dell XPS M1330, which I love, but it’s still marginal on an airplane. It’s not quite version control, but why doesn’t our IDE automatically create lightweight versions every time we save? Joel discovers the wide world of undervolting, which can dramatically reduce the power usage (and thus heat generation) of the Intel CPU inside the Macbook Air — which is notorious for overheating. The program is coolbook; look into it if you have a Macbook Air. Marco Arment provides this sage bit of advice: Don’t let Jeff Atwood lead your web project. Too late! I try to avoid becoming the web equivalent of Usenet’s James Parry (kibo), the original egosurfer, by responding to every single post that includes my name. But it does give me an opportunity to reply via the podcast using an audio clip from my very favorite two man novelty band, Flight of the Conchords. Stack Overflow is meant to replace some books, but by no means all of them. We love books! We spend the rest of the episode discussing Joel’s Fog Creek Software Management Training Program reading list. It is a fantastic list, filled with excellent reads that will broaden and inspire you as a software developer — or software entrepreneur. I would be remiss if I didn’t mention my favorite technical book title of all time: The Difference Between God and Larry Ellison: God Doesn’t Think He’s Larry Ellison. It’s not a book, exactly, but I highly recommend the 2001 documentary Startup.com which provides a sometimes disturbing look into the hysteria at the height of the original dot-com era. If you only read one book from this list, make it Peopleware: Productive Projects and Teams. And if you like that, walk the list of Demarco and Lister books and read a few more! I have read Robert X. Cringely for years. I love his older book Accidental Empires and the related three part video, Triumph of the Nerds. I was disturbed to find out from Joel that there is more than one Robert X. Cringely these days. You own a copy of How to Win Friends & Influence People — right? If not, why not? This is not a sleazy, ugly book like The Game. It’s a timeless classic, as relevant today as it was over fifty years ago when it was originally written. Don’t have time to listen to all that jibba-jabba? Here is Joel’s short list: Peopleware: Productive Projects and Teams Don’t Make Me Think: A Common Sense Approach to Web Usability The Non-Designer’s Design Book Facts and Fallacies of Software Engineering Secrets of Consulting: A Guide to Giving and Getting Advice Successfully Influence: The Psychology of Persuasion Getting to Yes: Negotiating Agreement Without Giving In How to Win Friends & Influence People Remember, most programmers don’t read books — but you should! There were no listener questions this week. Please send in your questions — the more controversial, the better! If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/30/listen-to-podcasts-in-less-time/","date":"2008-06-29T22:00:00.000Z","tags":["Company"],"title":"Listen to Podcasts in Less Time","text":"Joel may not listen to our podcasts after we record them, but I certainly do. I have to in order to put together the show notes with hyperlinks, and the episode summary. One way to speed up listening to the podcast is to use the fast playback option. In Windows Media Player, you can do this by right-clicking the play button and selecting “Fast Playback”. I’m not sure exactly how it works, but this speeds up the playback without turning us into chipmunks. So you can listen to a 60 minute show in around 40 minutes. To see more detailed options, select View | Enhancements | Play Speed Settings: The default “fast” setting is 1.4x, which I find quite listenable. You can accelerate playback by as much as 2x, but it becomes difficult to follow at that point. I typically use WinAmp, myself, but I’ve switched to Windows Media Player for accelerated playback of our podcasts. I’m sure this type of accelerated playback option is available in other audio playback software for Mac and Linux, too — if you know how, please note in the comments!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/26/podcast-11/","date":"2008-06-25T22:00:00.000Z","tags":["Company"],"title":"Podcast #11","text":"This is the eleventh episode of the StackOverflow podcast, wherein Joel and Jeff discuss the following: Addressing a few key bits of podcast feedback: we’ll try to avoid talking over each other, and the callers who are asking questions, in the future. On the value of software postmortems. On data generation through Team System Database Edition and Redgate SQL Data Generator. If you don’t have a tool to generate data, why not? Joel provided me with a drop of the Joel on Software .NET discussion forums for the purposes of data load testing. It’s up and running, but we’re not sure we will use it; it might bias stackoverflow.com too heavily towards .NET topics initially. Why not use full-text searching in SQL Server 2005 for stackoverflow.com? Joel says it’s too hard to use, the index server is too disconnected from the main database process; it just has too many gotchas overall. Joel sings the praises of Lucene.NET; it provides excellent full-text search results for the hosted FogBugz. Reginald Braithwaite’s fine essay We Have Lost Control of the Apparatus, which correctly notes that most desktop apps in the corporate world now have to compete with web apps. On rooting out assumptions in discussions, to make sure you’re actually discussing the same topic: try using the five whys technique Joel discussed. The odd story of Microsoft’s acquisition of LookOut, a popular and extremely fast indexing solution for Outlook. What happened? Why do so many large companies buy smaller software companies and then essentially kill them? stackoverflow.com will be using Markdown, but one downside of Markdown it the spec allows HTML. This opens us up to XSS exploits, so we have to be very careful here. If you do any sort of web programming whatsoever, please visit this page of XSS exploits, so you can “scroll” for yourself how dangerous and pervasive the XSS problem is today. A discussion of the complex rules for storing and rendering both Markdown and HTML in the same content. It’s part of the spec, and it gives users a lot of flexibility. We store both the Markdown and rendered HTML representations in the database. We are using prettify.js which is almost magical in the way it works. It is used on Google Code, and it infers all syntax highlighting for most languages and content without any explicit markup indicating which language is in use. Are there other, better javascript syntax highlighters we should be looking at? The difficulties of Silverlight: 1.0 versus 2.0, and the distinctly un-webbiness of the “rectangle in a browser” model. If Flash hasn’t been able to overcome these obstacles in 10 years of use and near total ubiquity on the web, how is Silverlight going to? I’m excited about the SquirrelFish project, which promises to speed up plain old JavaScript running in the browser dramatically — 1.5 times faster than Firefox 3, and 2.6 times faster than Opera. On Steve Yegge’s essay Done And Get Things Smart — is the only reliable way to identify truly great people through actually working with them? Or following the social graph of “name the greatest engineer you have worked with” chain all the way back as far as you can? Joel himself probably wouldn’t pass the current interview process at Fog Creek. Hiring is hard; it’s better to err on the side of safety, which means a lot of great programmers will get turned down. We also answered the following listener questions: Stephen Hill: “What do you think of Microsoft’s Silverlight?” Dave Roberts: “Joel, would you hire Jeff? If not, would you hire me?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/25/three-markdown-gotcha/","date":"2008-06-24T22:00:00.000Z","tags":["Company"],"title":"Three Markdown Gotchas","text":"I’ve enjoyed working with the excellent WMD “what you see is what you mean” Markdown control while building Stack Overflow. I’ve been very pleasantly surprised how easy it is to type a smattering of concise Markdown and generate rather nice-looking content. One of Markdown’s biggest advantages is its simplicity. Here’s a little Markdown test post I’ve been using that exercises the basic formatting options: ##Header## ---------- Some **bold** Some *italic* and [a link][1] A little code sample </head> <title>Web Page Title</title> </head> A picture ![alt text][2] A list - apples - oranges - eggs A numbered list 1. a 2. b 3. c A little quote > It is now time for all good men to come to the aid of their country. A final paragraph. [1]: http://www.google.com [2]: http://www.google.com/intl/en_ALL/images/logo.gif However, I’ve also noticed there are a few edge cases where Markdown syntax can get weird and produce unexpected results. I started to wonder if there were other edge conditions in advanced Markdown syntax I should know about. I figured John Fraser of AttackLab, the author of the WMD control, would be the best person to ask. He was kind enough to respond in some detail, and granted permission for me to repost his thoughts, where he outlines three gotchas to worry about when using Markdown: 1) Markdown’s single biggest flaw is its intra-word emphasis. I don’t think anybody writes: un*fricking*believable often enough to justify making it nearly impossible to talk about tokens with underscores in them: some_file_name is interpreted as: some<em>file</em>name It even works across word boundaries: file_one and file_two becomes: file<em>one and file</em> two Whenever you’re writing tokens with underscores you have to make absolutely sure you’re in a code span. The same problem will also nail you on equations like abc, but that seems to pop up less frequently. Showdown follows the reference implementation on all this, but in WMD I do a little preprocessing to hack the idiocy away: basically I just backslash-escape any underscores or asterisks that might trigger it. It’s a flagrant violation of the standard, but since it’s a pre-pass that should produce identical output with any Markdown processor, I feel justified. Unfortunately my hack did screw up one edge case (which I don’t have in front of me) and there isn’t any way to disable it. Both those things will change in the next release. 2) List items only nest if they cross a magical four-character boundary. So: - level 1 - level 2 - level 3 - level 4 - level 5 - level 6 is interpreted as: - level 1 - level 2 - level 2 - level 3 - level 3 - level 4 Which can be pretty surprising to humans. I’ve suggested an alternative algorithm a couple of times but it looks like neither of the big implementors is interested. (The mailing list’s HTML archive strips the whitespace from that first link; do “View Source” to make it make sense.) 3) Mixing HTML and Markdown has a couple of serious limitations. You can put Markdown within inline elements: <span>This *will* work.</span> but not within block elements: <div> This *won't* work. </div> I think this is a symptom of Markdown’s being designed for blog posts. You can paste in big chunks of foreign HTML verbatim without having to double-check them, but it’s pretty much impossible to write whole pages in Markdown. Again Gruber’s not interested; dunno about Fortin. In my mind, this last one is huge. If we allowed Markdown within block-level HTML, we could write a non-lossy version of html2text and make my dream of Markdown as a transient editing format a reality. Oh, also? The HTML parser is pretty broken, so what gets recognized as a complete block of HTML can sometimes be surprising. But Showdown uses an older, even-more-broken algorithm than the latest Markdown.pl beta, so I probably shouldn’t point fingers. Remember, if you don’t like Markdown, you can always fall back to HTML — at least the whitelisted HTML. And if you’re curious about how any of this works I strongly encourage you to head over to the WMD advanced demo sandbox and try it out for yourself."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/21/a-strangely-familiar-error/","date":"2008-06-20T22:00:00.000Z","tags":["Background"],"title":"A Strangely Familiar Error","text":"Geoff Dalgas, the newest member of the Stack Overflow team, shared this strangely familiar error message he ran into while working on another project recently. Ah yes, the elusive stack overflow: In software, a stack overflow occurs when too much memory is used on the call stack. In many programming languages the call stack contains a limited amount of memory, usually determined at the start of the program. The size of the call stack depends on many factors, including the programming language, machine architecture, multi-threading, and amount of available memory. When too much memory is used on the call stack the stack is said to overflow; typically resulting in a program crash. This class of software bug is usually caused by one of two types of programming errors: infinite recursion, or very large stack variables. You know what’d be really ironic, though? A stack overflow on Stack Overflow. Maybe that should be our 404 page."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/20/safe-html-and-xss/","date":"2008-06-19T22:00:00.000Z","tags":["Company"],"title":"Safe HTML and XSS","text":"As I’ve mentioned before, we are using the most excellent WMD Markdown editor, for the reasons I outlined in that post. However, Markdown, per the official spec, supports both HTML syntax and Markdown syntax. You can mix and match both syntaxes freely. This is great if you want to stick with HTML and not learn any of the Markdown syntax, something I’ve actually argued for in the past. However, I would also argue that Markdown is much less typing for the same effect, and it’s easier to read, so it’s worth learning. Markdown will save you time in the long run. Allowing HTML is great for flexibility and choice, but it’s perhaps too much of a good thing: you can use any HTML. Try it yourself — visit the advanced WMD demo and just start keying in whatever kind of wacky HTML you can dream up. Go ahead. Try it. This is bad. Very, very bad. The WMD control renders exactly the HTML you type, and submits it as-is to the server. Which means we, our webserver, our webpages, could be rendering javascript of unknown provenance. That’s cross-site-scripting (XSS) in a nutshell. In recent years XSS surpassed buffer overflows to become the most common of all publicly reported security vulnerabilities. [ed: the last time I wrote about this, in early 2007, buffer overflows were more common.] Likely at least 70% of websites are open to XSS attacks on their users. Site administrators rarely fix XSS problems and, when they do, the hole is likely to have been open for more than a month and a half. In general, cross-site scripting holes can be seen as vulnerabilities present in web pages which allow attackers to bypass security mechanisms. By finding clever ways of injecting malicious scripts into web pages, an attacker can gain elevated access privileges to sensitive page content, session cookies, and a variety of other objects. Incredibly scary stuff. And it’s all due to insufficient sanitization of user input, where HTML, or some subset of HTML, is allowed. Check out some of the standard XSS exploits for examples of clever ways hackers can exploit the tiniest of oversights in your HTML input sanitizing. Think there’s just five or six ways to build an <a> or <img> tag? Think again. There are hundreds! So that’s my challenge with the WMD editor. I have to write XSS-proof code to sanitize the HTML input on the server before I write it to the database. I’d like your feedback on how best to do this. Here’s my general approach, in pseudocode form. Given a random HTML string.. Run a regular expression to match all the HTML <tags> in the HTML string. For each individual tag match, verify that it passes our tag regular expression whitelist. If the tag match does not pass, remove the entire tag from the content. Repeat from step 2 until we’re out of tags. Return the sanitized HTML string. Update: removed unnecessary extra code; all input is processed by the HTML sanitizer. It’s slightly too much code to post here in a blog entry, so I have posted my C# SanitizeHtml routine on RefactorMyCode.com [ed. note: site is spam now, so link has been removed]. Please take a look and let me know what you think. (scroll to the bottom, however, to see the latest “refactoring”.) Help me refactor my code, because I make bad software, with bugs! I’ve been itching for an excuse to link to RefactorMyCode for a while. It’s a great site for coders, and signing up to submit code is super easy through OpenID — no redundant account creation necessary! Even if you have no interest whatsoever in my crappy SanitizeHtml function, I encourage you to visit RefactorMyCode [ed. note: Actually, don’t. URL campers have it and put something shady there] and consider the value of many internet eyes on a snippet of your code."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/19/podcast-10/","date":"2008-06-18T22:00:00.000Z","tags":["Company"],"title":"Podcast #10","text":"This is the tenth episode of the StackOverflow podcast, wherein Joel and Jeff discuss the following: We provide some background for new listeners on what Stack Overflow will be. See Joel’s post and Jeff’s post. Although we have ambivalent feelings about Expert’s Exchange, what we’re doing with Stack Overflow is similar, and they do have a sense of humor — and invited me to a conference. We will be using the cc-wiki licensing terms for content posted on Stack Overflow. Hopefully we can ship before Wine (which just hit version 1 after 15 years) and Duke Nukem Forever. Check out a list of things that have happened since Duke Nukem Forever began development. I confess that I was shocked to find out, while listening to our own podcasts, I wasn’t hearing everything Joel was saying! Listening is hard. Make sure you’re thinking about this the next time you listen to someone. Joel has fun with instantrimshot.com and I mention sadtrombone.com ; these are excellent examples of the emerging classes of single-serving websites. You crazy hackers figured out our super-secret beta website URL! I invite participation for the upcoming private beta, but our in-development site is not suitable for human consumption at this point. There is a special prize for those hardy few that “hacked” their way into the development site, though. A brief discussion of the badges that you can earn while participating in the Stack Overflow site. We don’t need no stinkin’ badges, of course, but I think they’ll be fun and complimentary to the reputation system. Stack Overflow edits will only be possibly for users who have earned a little bit of reputation on the site by actively participating. This is where we diverge a smidge from Wikipedia, which still (amazingly!) allows regular anonymous edits. But I think it’s a reasonable compromise: anonymous people can ask and answer, but not edit. Jarrod did a tremendous job of getting our one-click build set up: it deploys the database, the code, and even runs unit tests against the website before deploying it. We’re using MSBuild and nUnit. Joel references AntiPatterns: Refactoring Software, Architectures, and Projects in Crisis (Paperback), and describes a few of the anti-patterns he’s seen while developing small apps at Fog Creek for internal use. On the dangers of being an internal IT developer. This is important if you love coding. One of personal favorite bits of Joel’s writing, on cleaning the toilet. Naturally. Sometimes as a manager, it’s your job to do the grubby, ugly stuff so the sales guys can sell and the developers can develop. We use TortoiseSVN for Subversion integration as almost all other Windows developers do. But as Visual Studio developers, we’ve also adopted VisualSVN, which I highly recommend! It makes working with Subversion a pleasure instead of a chore, at least in my opinion. At Fog Creek, they’re switching to Mercurial source control, which like Git is part of the new, emerging class of distributed version control. Source control remains the bedrock of software engineering. I meet so few software developers, myself included, that really understand source control. Just avoid SourceSafe at all costs, and understand the value of branching and merging. Is there anything positive anyone can possibly say about Windows Mobile? How can something six versions old be this terrible? It should be razed to the ground and reinvented, ala Zune and Xbox 360. Can Google’s Android be like Windows Mobile, sans all the sucking? I expect Apple to dominate this closed ecosystem; it plays to all their strengths. On Ruby performance, scaling, “enterpriseyness” and whether or not this is even the right question to ask. Shouldn’t we be thinking of this in terms of the solution first, and the language as a side-effect of that? We also answered the following listener questions: Sebastian Dwornik: “Doesn’t the current mobile phone platform war remind you of the PC platform wars?” Loren Norman: “When will Ruby be ready for enterprise development?” If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/18/gravatars-identicons-and-you/","date":"2008-06-17T22:00:00.000Z","tags":["Company"],"title":"Gravatars, Identicons, and You","text":"We want Stack Overflow* users to be able to personalize their questions and answers with a small picture — even if they’ve never created an account on our site. Rather than build this functionality ourselves, we’ve decided to take advantage of Gravatars. Gravatars are small images associated with your email address. I’ve used Gravatar for a while myself, and over time I’ve really grown to appreciate their approach: They’re global. They work across every website that supports gravatars. Sign up once, benefit everywhere. They’re easy. It’s totally straightforward; you simply build a URL that contains a hash of your email address (or IP address, if you didn’t provide email) add a few mostly optional preferences in the querystring, and that’s it. They’re safe. The Gravatar service vets the images so nothing, er.. disturbing.. shows up in your browser. You can specify whether you want a maximum rating of G, PG, R, or X for gravatars displayed on your site. We’re going with PG; I hope you guys and gals can handle that kind of intensity. It does one thing. Gravatar isn’t about social networking, mp3s, news, or any mashups thereof. It’s trying to solve one tiny problem on the web with laser-like focus: providing a web-friendly Globally Recognized Avatar for you across all the websites you visit. It’s almost a single serving website, and I say that with the utmost respect. So many websites fail because they try to do everything and be everything. I highly recommend signing up for Gravatar. It’s totally painless. Once you do, your image will show up automatically in the comments here, and on any questions or answers you post to Stack Overflow, too. I think you’ll be surprised how many places on the web start to associate your Globally Recognized Avatar with the simple entry of your email address in a form. Satisfaction guaranteed, or your money back! Another neat (and recently added) feature of Gravatars is a fallback. If someone doesn’t want to sign up for Gravatar — and hey, we’re totally cool with that, we don’t judge — Gravatar will render an Identicon for them automatically. What are Identicons? Well, they’re a sort of digital fingerprint — a visual glyph that represents your IP address. Everyone stores IP addresses internally, but it’s considered borderline rude on today’s web to out someone’s IP address when they post content somewhere. The identicon is a way of showing the IP address without showing their IP address. Knowwhatimean? Plus, they’re kind of mesmerizingly beautiful. To me, anyway. If you want to be totally anonymous, don’t worry. You still are. Or as much as you can be on the web, anyway. You’ll still get a unique image (on individual websites; it’s hashed per-site) associated with your content in the form of that Identicon — so we can know it was really you, Mr. Anonymous, and not another anonymous user pretending to be you. Well, assuming you always post from the same IP address, anyway. If you’re interested in implementing Gravatars in your software or website, it’s dead easy. Here’s the code (yep, actual code! We are actually building this thing, believe it or not!) which renders the Gravatar for us. const int size = 64; const string maxrating = \"PG\"; const string gurl = \"https://www.gravatar.com/avatar/\"; var e = new UTF8Encoding(); var md5 = new MD5CryptoServiceProvider(); var sb = new StringBuilder(256); sb.Append(gurl); byte[] b; if (String.IsNullOrEmpty(this.Email)) { b = md5.ComputeHash(e.GetBytes(r.IPAddress)); } else { b = md5.ComputeHash(e.GetBytes(this.Email)); } for (int i = 0; i < b.Length; i++) { sb.Append(b[i].ToString(\"X2\").ToLower()); } sb.Append(\"?s=\" + size.ToString()); sb.Append(\"&d;=identicon\"); sb.Append(\"&r;=\" + maxrating); return sb.ToString(); See? Easy. I’ve decided “Stack Overflow” is the preferred spelling and capitalization, since someone asked in the comments. Unless you’re referring explicitly to the website URL, then use stackoverflow.com."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/14/dropping-the-www-prefix/","date":"2008-06-13T22:00:00.000Z","tags":["Company"],"title":"Dropping the WWW Prefix","text":"Where do you stand on The Great Dub-Dub-Dub Debate? Some people become very religious about whether URLs should have a www. prefix or not. Me, I’m a bit more sanguine: I think you need to choose your allegiance early in the lifecycle of your website, and stick to it. So, for stackoverflow, we’re going with plain old stackoverflow.com, and dropping the www prefix. The only downside of this choice that I can see is that setting cookies for a prefixless domain sets them across all subdomains, as noted by Stecki in the comments of my original blog post on this topic: using a non-www-version of a webpage will lead to setting cookies for the whole domain, thus making cookieless domains (for example for fast cdn-like access of static resources like css, js and images) impossible. That’s a bit of a downer, but our use of cookies should be quite minimal, so I’m OK with that tradeoff. Now that we’ve chosen, we need to enforce that choice through URL rewriting. We’re using IIS7 with the brand spanking new (and wildly overdue) official Microsoft URL rewriting add-on. The new rewrite GUI makes it fairly easy to set this stuff up; there’s even an import option where you can pull in existing Apache format .htaccess rewrite rules, which is nice. It’d be nicer still if we could just use the .htaccess format everyone already knows, but oh well. Here’s the IIS7 rule to remove the WWW prefix from all incoming URLs. Cut and paste this XML fragment into your web.config file under / / <rule name=\"Remove WWW prefix\" > <match url=\"(.*)\" ignoreCase=\"true\" /> <conditions> <add input=\"{HTTP_HOST}\" pattern=\"^www.domain.com\" /> </conditions> <action type=\"Redirect\" url=\"http://domain.com/{R:1}\" redirectType=\"Permanent\" /> </rule> Or, if you prefer to use the www prefix, you can do that too: <rule name=\"Add WWW prefix\" > <match url=\"(.*)\" ignoreCase=\"true\" /> <conditions> <add input=\"{HTTP_HOST}\" pattern=\"^domain.com\" /> </conditions> <action type=\"Redirect\" url=\"http://www.domain.com/{R:1}\" redirectType=\"Permanent\" /> </rule> You can also use the GUI to build these rewrite rules; same thing either way. For reference, here’s what the enforce-www rule looks like in .htaccess form. # Add WWW prefix RewriteCond %HTTP_HOST ^domain.com [I] RewriteRule ^/(.*) http://www.domain.com/$1 [RP] Have I mentioned how much I love XML?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/11/podcast-9/","date":"2008-06-10T22:00:00.000Z","tags":["Company"],"title":"Podcast #9","text":"This is the ninth episode of the StackOverflow podcast — the first fully hosted on itconversations — wherein Joel and Jeff discuss the following: Apple’s WWDC is going on this week, and Joel has a few Fog Creek people at the conference. at a WWDC party, I saw my friend Wil Shipley of Delicious Monster, who just so happens to be a FogBugz user. If you have a Mac, check out Delicious Monster 2! On the use of Javascript — is it OK to require JavaScript on today’s web? How to pronounce OS X. On Nicholas Carr’s excellent Atlantic article Is Google Making Us Stupid? His blog is outstanding as well and highly recommended. Many people know him from his book Does IT Matter? On the challenges of tagging and hierarchy, and the folly of attempting to define popularity before it exists. The StackOverflow private beta is still scheduled for early next month. We have to go through at least one full cycle privately with Joel first. Beyond that, we will be seeding the site with the existing content of the discuss.joelonsoftware.com .NET questions forum. On the absurdity and emotional emptiness of TechCrunch. Is it venture capital pornography? A quick reference to my friend Matt Hempey’s Here Comes Another Bubble video. It’s so good, it won a webby award! News flash: Joel adopts instant messaging technology, seven years after the fact! We did our first server deployment of the stackoverflow code, where we ran into a little ASP.NET MVC beta problem. We’re crossing our fingers and hoping ASP.NET MVC will have a “go live” license before we enter the public beta. Joel describes the way they use FinalBuilder, and I describe my brief dabblings with MSBuild. On the strange sentiment of “I agree with everything you’ve written, except..” Why does Amazon’s affiliate program work, when Fog Creek’s Fogbugz affiliate program did not? How Google Answers failed because they paid people. Is it possible to “specialize in being a generalist”? Does that even mean anything? Expressing our general affection for Seth Godin, while acknowledging that he is, after all, a marketing weasel. But a really, really good one! An example of specialization in action: how Larry O’Brien’s single post on programming Sabre generated the majority of his income. How I personally wish the “begins-with-www or doesn’t-begin-with-www” debate would just go away. Perhaps some humor will help? Probably not. A final coda on Joel’s question to our audience about password management. On the manifold evils of focus stealing, and our very favorite home page of all time: about:blank We also answered the following listener questions: John Topley: “What are your thoughts on affiliate programs, such as the new 37signals affiliate program?” Matthew Glidden: “What do you think of Seth Godin’s We specialize in everything?” Jim McKeeth: “A reproducible way of generating a secure password: passwordmaker.org“ If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/09/is-it-ok-to-require-javascript/","date":"2008-06-08T22:00:00.000Z","tags":["Company"],"title":"Is It OK to Require JavaScript?","text":"Here’s one decision we’re pondering as we build stackoverflow, and I’d like to get your feedback on it: Is it OK to require JavaScript to participate? Note that by “participate” I mean “edit, answer or ask a question”. Of course passively reading a question and the associated answers will work fine without JavaScript enabled. In addition to the aforementioned WMD editor, we’re using JQuery to build some cool interactive features into the site, most of which deal with asking and editing questions. I asked this question on Twitter and got a “mostly yes” answer, with a few objections. While we do believe in progressive enhancement, it’s possible that some of the features we’re building for asking and editing may be so dynamic that they do not degrade well, if at all. What say you? Is it OK for a website in 2008 to require JavaScript for active (not passive) participation?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/06/04/podcast-8/","date":"2008-06-03T22:00:00.000Z","tags":["Company"],"title":"Podcast #8","text":"This is the eighth episode of the StackOverflow podcast, wherein Joel and I discuss the following: As of our next podcast, we will be hosted at ITConversations — the NPR of podcasts. A good outfit to be associated with! Yes, Joel does pronounce “wav file” as “wohv file”. I have no idea. Ask him. Joel keynoted the Rails conference. Josh Susser said “If you missed it, count yourself lucky.” Apparently at least David Heinemeier Hansson liked it. It’s true that I objected to David’s attitude towards people who don’t use Macs, but it’s possible to have objections to specific statements people make, or specific beliefs they may have, and still respect them as a person. Disagreement does not mean we are mortal enemies. David has a lot of smart, interesting things to say. That just wasn’t one of them. “The programming community is larger than any one particular tribe.” But why are certain communities more insular and insecure than others? Joel relates this to cognitive dissonance. I remain a big fan of Clay Shirky and his latest book. How big a fan? It’s Clay Shirky’s Internet, We Just Live In It. I believe every working programmer who touches the web should read his latest book, Here Comes Everybody. On addressing criticism — “there arise a new, young generation of rebels who remember not when you were the young rebel, writing new things, and making no claim to authority.” I found Paulo’s thoughtful criticism of our podcast and I wanted to address it. To quote Randy Pausch: “That’s a lesson that stuck with me my whole life. When you see yourself doing something badly and nobody’s bothering to tell you anymore, that’s a very bad place to be. Your critics are your ones telling you they still love you and care.” Joel feels like he was misunderstood on the topic of exceptions. Well, if you were writing a memory allocator for an operating system, anyway. Joel and I do agree that threading is hard. It’s amazing that web apps largely get a pass on this, thanks to the architecture of the webserver model. I give a shout-out to Rick Brewster of Paint.NET who calls the (excellent) threading code he wrote in Paint.NET “easily the most complex code in Paint.NET” We’re using SQL Server 2005 as the underlying database for stackoverflow.com. We engage in a brief discussion of the pros and cons of Oracle and MySQL databases in our (limited) experience. Joel describes his frustration with the way some writers turn single anecdotes into statements of truth, both on the internet and off. Of course Joel and I are both guilty of this, too. In my better blog posts, I tend to use more of a meta-aggregation model, where I do research and summarize what I found. I point to a lot of different opinions, then offer my own — but I try to diligently avoid clinging religiously to my opinions. In the face of new, better data, I can be convinced. I firmly believe in strong opinions, weakly held. When it comes to Domain Specific Languages, we definitely prefer them to a bunch of XML. I am particularly fond of SQL and Regular Expressions as mini-DSLs — I believe in embracing the concept of languages inside languages. Joel and I are still very excited about Microsoft’s DLR (IronPython and IronRuby) as an escape route from the superficial differences between the Coke and Pepsi of C# and VB.NET. welcome Geoff Dalgas to the stackoverflow.com programming team! As usual, thank you for all the questions and for the Wiki edits! We also answered the following listener question: Tendayi Mawushe: In the enterprise Java world, you can’t do much without writing a lot of XML. In response to that, a new idea little domain specific languages is emerging. What are your thoughts on this? If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/05/28/podcast-7/","date":"2008-05-27T22:00:00.000Z","tags":["Company"],"title":"Podcast #7","text":"This is the seventh episode of the StackOverflow podcast, wherein Joel and I discuss the following: Many thanks to Stuart Cam for recording a stackoverflow theme song; a brief digression on the introductions to the Sopranos and Get Smart. How programmers know it’s a holiday: the door to the office is locked, or the Google logo changes. Tuesday is also Rock Band new song download day. This week was pretty epic — the complete album The Cars. Joel would like the 1975 song Convoy. Maybe he’s a CB radio fan? Working from home, I miss some of the camaraderie of my fellow programmers. What can I do about that? I’ve always admired Joel’s commitment to creating a good working environment for programmers. Joel has a regular column in Inc. magazine, and the June issue happens to cover this topic. Joel calls http://www.officesnapshots.com/ “office pornography”, where “pornography” is described as “looking at pictures of things you can’t have.” It’s also sort of like MTV Cribs for the IT set. Joel points out that cool office common areas are great, but what really matters is the desk where you actually do your work. I like to build my own PCs and use three monitors, so it’s difficult for me to bring my work with me without it turning into a comedy routine. Another reason I enjoy having my own office: I’m into decorating — see my old office at Vertigo. Do private offices interfere with collaboration and pair programming? Which configuration of monitors is ideal for programming? I profess my love for WinSplit Revolution, which I consider essential on any monitor larger than 22″. We also wonder why OS window managers aren’t smarter about edge snapping and using available desktop space intelligently. An extended discussion of OpenID. I encourage everyone reading this to sign up for an OpenID and try it yourself. I recommend myopenid. Joel signs up for an OpenID live on the podcast. The importance of proper OpenID attribute exchange — so you can store your avatar image, URL, birthday, address and so forth in one place and have it handed over automatically to websites from your OpenID provider. Without this, OpenID is much less attractive. A discussion of Eric Sink’s C and Morse Code — isn’t programmer time spent learning C better spent learning how to communicate and understand the business domain they’re working in? There’s a deeper topic of Systems Analyst vs. Programmer here that we’ll have to dig into. Reminder: Joel will be in Portland keynoting RailsConf later this week. Joel wants people to write in about their preferred password management solutions. As usual, thank you for all the questions and for the Wiki edits! We appreciate all the interest in the private beta signups, too. We also answered the following listener question, with a lot of peripheral discussion on related topics: John Dyer: Isn’t it better for programmers to program using standard programming frameworks and libraries rather than creating things from scratch? If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/05/22/potential-markup-and-editing-choices/","date":"2008-05-21T22:00:00.000Z","tags":["Company"],"title":"Potential Markup and Editing Choices","text":"Question and answer entry will be arguably the most crucial piece of stackoverflow. I used the post Is HTML a Humane Markup Language? as a form of collaborative research to determine what our Q&A; editor should look like. Based on the (extensive!) feedback, I’ve reached three conclusions: Most programmers want either an HTML subset or Markdown. Many prefer a formatting toolbar, although I view it as superfluous. Real-time preview of text formatting is an absolute must. Good programmers never write what they can steal or borrow. With that in mind, I did some research and found the promising but unfortunately named WMD: The Wysiwym Markdown Editor from AttackLab. I emailed AttackLab and John Fraser was kind enough to respond with a code drop. Apparently there’s going to be an open source release at http://wmd.googlecode.com/ any day now — it will also include a post-processing callback we can use to do syntax highlighting. Here’s a demo someone hacked together using WMD and a syntax highlighter: Adopting tools like these means we’d be very intimately tied to JavaScript on the client, of course, but it’s hard for me to see how that’s a problem on today’s web. What do you think of these solutions? Would they work for you when posting programming questions and answers on stackoverflow?"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/05/20/podcast-6/","date":"2008-05-19T22:00:00.000Z","tags":["Company"],"title":"Podcast #6","text":"This is the sixth episode of the StackOverflow podcast, wherein Joel and I discuss the following: A mercifully brief critique of Joel’s Skype avatar. Of course, he should be using this image. The other programmer I’m working with, Jarrod, will be visiting me this week. It’s his first visit to California! Welcome to the San Francisco Bay area — geek mecca. We will get some pair programming time in. We’ll also visit the Computer History Museum, one of my favorite places in the world. I like to refer to it as computer hardware pornography. An examination of the ASP.NET MVC development model as compared to the classic ASP.NET Form model. We’ll be using JQuery as our JavaScript and AJAX framework, and ELMAH for error handling duties. A bit on the Fog Creek philosophy of error handling: crashes are automatically entered in Fogbugz. About crashing in general. I enjoy talking about this because I think it’s incredibly important. Crash responsibly! Why you should pay people not to work at your company. Why am I so evangelical about Twitter? What should Joel talk about at the Rails Conference Keynote? Is it unfair to dismiss Java? Is the only difference between Java and COBOL that Java doesn’t require you to type keywords in all capital letters? The rare topic that Joel and I agree on: presentations should be about entertainment first and information second. What’s the best way to deal with the larger bandwidth requirements for a podcast? We’re going to use up more than 1250 GB this month. Should we be on ITConversations? We would like to support OpenID for site logins. About my $5,000 donation to open source on .NET — or more specifically, to ScrewTurn Wiki. A brief mention of Google DocType and the now defunct Google Answers. Is Google starting to have the Microsoft “big company” problem? Why can’t big companies effectively spin off smaller companies? What is the Microsoft “Strategy Tax”? The list of new features in Vista. How many did you know about? More importantly, how many of these features do you use and care about? A mention of the [Software Engineering Radio](http://se-radio.net/ ) podcast. As usual, thank you for all the questions and for the Wiki edits! We appreciate all the interest in the private beta signups, too. We also answered the following listener questions, with a lot of peripheral discussion on related topics: Warren Henning: Why custom build stackoverflow.com when you could use something off the shelf? Andrew Hay: Why did you choose to reinvent the default ASP.NET membership provider? Martin Wallace: Have you considered open sourcing the stackoverflow.com code? Daniel Thompson: What should be in the next version of Windows, and is it worth spending hundreds of dollars to upgrade? If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. You can record a question using nothing but a telephone and a web browser. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/05/19/update-your-flash-player/","date":"2008-05-18T22:00:00.000Z","tags":["Company"],"title":"Update Your Flash Player","text":"I noticed that a few people have had trouble with the embedded flash podcast player in the podcast posts. They reported that Joel and I sounded like chipmunks. I was able to duplicate this problem using a virtual machine and a stock version of Windows XP. If you’re having the chipmunk playback problem, you have an out-of-date installation of Adobe Flash. That’s the cause. I strongly recommend Updating your Flash Player to the latest version. Bear in mind, if you regularly use more than one browser, you must update Flash individually for each browser you use. If you’re wondering what version of Flash you have installed, use the official Adobe online Flash version number checker. It’s reporting I have version 9.0.115.0 installed at the moment. Updating Flash isn’t just a good idea to correct the playback issues with our podcast audio player — it’s also a good idea because there are serious security vulnerabilities in old versions of Flash, too. If your Flash is version 9.0.48.0 or earlier, you’re subject to at least 9 critical security vulnerabilities according to Adobe! And remember, these are the worst kinds of vulnerabilities — the ones that can compromise your system by simply visiting the wrong web page. Scary stuff. Let’s practice safe computing and get that Flash player updated!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/05/15/recording-podcast-questions-using-your-telephone/","date":"2008-05-14T22:00:00.000Z","tags":["Company"],"title":"Recording Podcast Questions Using Your Telephone","text":"If you want to submit a question for the next podcast, it must be in audio format. If you don’t have an easy way to record your question, here’s how. Use the BlogTalkRadio Cinch service: Call (646) 200-0000 Talk Get the RSS feed at http://cinch.blogtalkradio.com/YOURPHONENUMBER I just tried it, and it really works! I called 646-200-0000 from my cell phone, talked, hung up, then navigated to http://cinch.blogtalkradio.com/510620xxxx in my web browser: The resulting mp3 file is 32 kbps, 11 kHz. There’s a small “blog talk radio!” intro added, then whatever you said on the telephone. Listen to my sample mp3 (43kb) Just call 646-200-0000, talk, hang up, then visit the URL to download your freshly created mp3 audio file — and mail it to us at podcast@stackoverflow.com. It really is that easy! Thanks again to Tim Patterson for turning us on to this cool and free service!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/05/14/podcast-5/","date":"2008-05-13T22:00:00.000Z","tags":["Company"],"title":"Podcast #5","text":"This is the fifth episode of the StackOverflow podcast, wherein Joel and I discuss the following: Trivia clarifications from podcast #3: Leonardo DiCaprio on Growing Pains, and how the Fonz actually Jumped the Shark in Happy Days Thanks for all the offers to pitch in and help! The StackOverflow private beta should be in about 6-8 weeks. My depressing lack of project planning: Joel maintains I need a task list. In Fogbugz, of course. A discussion of the ASP.NET login provider model and NTLM, and how to enable NTLM in Firefox. A correlation between the prevalence of NTLM and Microsoft’s model of developing software for corporations versus developing software for consumers. A discussion on David Heinemeier-Hansson’s excellent Startup School talk: Is it pathetic that someone needs to stand up at a startup school and tell people that they need to charge for their product? Businesses will spend money — consumers won’t. You can’t make money selling commodities to consumers as a startup; you have to sell a luxury. The Google model: get the eyeballs, figure out how to make money later. Is that fair to startups? Can every startup make it to the necessary scale to get that revenue model to work? experiments with AdSense on fakeplasticrock.com and codinghorror.com (search) Why Joel and I feel compelled to run ad-blocking software in our browsers. Why doesn’t it block the Google search result ads? Are search result ads more task-related and thus useful? Jamie Zawinski on social networking websites: they should get you laid. I try to get Joel to use Twitter again, and he references the Penny Arcade cartoon. I still think it’s useful. Follow me on Twitter! A (very) long — but worthwhile — discussion about my recent post on XML. Revealing Notepad’s “bug”. Apps like RescueTime which track what applications you’re running over time. Discussion of an email from Michael Dorfman, wherein he is embarrassed on my behalf for my lack of computer science rigor. Joel questions the sense of humor of his readers. A brief bit of advice from Joel on washing your electronics, and how to fix your computers by dropping them. Hey, I didn’t say it was good advice. Thank you for all the questions and for the Wiki edits! There were no listener questions this week. We’d love to answer your questions on any topic! If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/05/07/podcast-4/","date":"2008-05-06T22:00:00.000Z","tags":["Company"],"title":"Podcast #4","text":"This is the fourth episode of the StackOverflow podcast, wherein Joel and I discuss the following: Why we think stackoverflow.com isn’t “reinventing the wheel”, or at least, reinventing it in a useful way. Failure, however, is always an option. We will be using ASP.NET MVC to build stackoverflow, as covered in my recent blog post. Joel and I carry on a long discussion of Model-View-Controller. A mention of CSS Zen Garden. Joel thinks it’s an unrealistic example, but I don’t. Defining “skinnability”, whether it applies to your application, or if it even matters. A mention of this year’s Maker Faire, where I met the Wikimedia Foundation’s Jay Walsh. Followed by an examination of why we admire Wikipedia and consider it a defining influence. Guests welcome! You will be able to participate fully in stackoverflow.com without ever creating an account — but there will be perks for creating an account. A bit about our reputation system — learning the lessons of PageRank. Dealing with the inevitable evil users and users who actively game the reputation system. Not you, of course. We like you. Adopting Creative Commons by-nc-sa for our podcast and CCWiki for stackoverflow.com. On the contract between Joel and Jeff to form stackoverflow.com : the difference between a C Corporation and Limited Liability Company (scintillating!) Do we need lawyers? Yes, we need lawyers. Unfortunately. The final results of our logo contest. Twitter: is it only useful for “web celebrities?” I personally love Twitter and find it quite useful. Follow me on Twitter, and see for yourself. I’ll try to convince Joel to join up. Tip of the week: Redgate SQL Compare. Thank you for all the questions and for the Wiki edits! We also answered the following listener questions, with a lot of peripheral discussion on related topics: Kyle Neumeier: How will you provide enough content to achieve a critical mass of activity on stackoverflow.com? Andrew Morrow: How will you deal with answer ordering and voting? Will it be based on votes alone? If so, how do we follow the thread of a conversation? ObviousTroll: Is it worthwhile to go back to school and get a graduate degree in computer science? If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/05/05/now-licensed-under-creative-commons/","date":"2008-05-04T22:00:00.000Z","tags":["Company"],"title":"Now Licensed Under Creative Commons","text":"The Creative Commons site defines four main clauses for licensing of content you’ve created and placed on the web: Attribution You let others copy, distribute, display, and perform your copyrighted work — and derivative works based upon it — but only if they give credit the way you request. Noncommercial You let others copy, distribute, display, and perform your work — and derivative works based upon it — but for noncommercial purposes only No Derivative Works You let others copy, distribute, display, and perform only verbatim copies of your work, not derivative works based upon it. Share Alike You allow others to distribute derivative works only under a license identical to the license that governs your work. This is, of course, assuming you want to share what you’ve created in some way. Everything you do is copyrighted by default until you say otherwise — granting no rights to anyone whatsoever. When you select a Creative Commons license, you’re consciously choosing to push aside some of your copyright and explicitly grant rights for others to do things with the audio, video, or text you’ve created and placed on the web. What that “stuff” is, of course, is up to you as the creator. According to the Wikipedia page on Creative Commons Licenses, the attribution clause proved so popular that it’s always on by default. So the Choose a License page essentially guides you through selecting the remaining three reuse clauses, with the following questions as a guide: Will you allow commercial uses of your work? Yes No Will you allow modifications of your work? Yes Yes, as long as others share alike No As simple as the licenses may seem, it’s a good idea to read through the things to think about section of the Creative Commons site before selecting one. After some consideration, I’ve licensed our podcasts under the following Creative Commons license:"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/04/30/logo-design-contest-winner/","date":"2008-04-29T22:00:00.000Z","tags":["Company"],"title":"Logo Design Contest Winner","text":"Our logo design contest has ended. The winning design is from Peter Borlace, aka pb_design. There were a whopping 253 entries in the contest; thanks to everyone who participated for your hard work. As a little bonus, Leon Bambrick has graciously offered up free licenses to his excellent TimeSnapper software to the following runners-up: Umasankar Arumugam Chahya Santoso Kamil Zadora There were many excellent entries, but it came down to a difficult decision between these four which we felt best captured the intent of stackoverflow.com. I’ll be awarding the $29 prize to Peter first thing tomorrow. Congratulations!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/04/30/podcast-3/","date":"2008-04-29T22:00:00.000Z","tags":["Company"],"title":"Podcast #3","text":"This is the third episode of the StackOverflow podcast, wherein Joel and I discuss the following: A brief, but awesome, reference to Donald Gibb in Revenge of the Nerds. We are now using Skype and Pamela to record our podcast for higher quality. Joel’s original 2002 Recommended Programmer Reading list and Jeff’s Top 5 Programming Books — and why stackoverflow.com will complement, not replace, these kinds of books. The ineffable Steve Yegge, and a digression on the philosophy of Apple and Microsoft font rendering strategies. Confirming that stackoverflow.com will be as language agnostic as we can make it. It is for programming questions, whatever the language and platform. Yes, it’s true that Joel and I have a Microsoft background, but we respect that programming is far larger than Microsoft. Why You Should Learn C (again). On our technology stack: stackoverflow.com will be built in ASP.NET running on our dedicated Windows Server 2008 x64 box — but that doesn’t mean stackoverflow.com, the site, will be about ASP.NET! On jumping the shark. An extended examination of everyone’s favorite language: Wasabi! Along with some reasons why you might actually want to build your own DSL and compiler. A discussion of our logo contest at 99designs.com. What, exactly, is a stack overflow? We also answered the following listener questions, with a lot of peripheral discussion on related topics: Dave Kauffman: On Computer Science versus Software Engineering: is there any real-world use for recursion? Nick Malaguti: How should he deal with real world programming projects as a part of college classes? Specifically, the fact that there’s no real hierarchy and an inability to move the deadline? Also, what software do you recommend to manage software projects? (Joel swears that Nick was not paid to ask this question, in case you were wondering.) David Alison: What do we think of services like the Google App Engine? Tim Patterson: How to use blogtalkradio.com to easily record a question for stackoverflow using nothing but your telephone and a web browser. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. The transcript wiki for this episode is available for public editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/04/28/our-dedicated-server/","date":"2008-04-27T22:00:00.000Z","tags":["Company"],"title":"Our Dedicated Server","text":"I’ve been hosting codinghorror.com at CrystalTech on a dedicated server for about six months now, and I’ve been quite happy with the performance and availability. Any downtime has been completely my fault, and they’ve been responsive the few times I’ve requested support. So when we needed a beefy dedicated server to host stackoverflow.com, I naturally turned to CrystalTech again. Here are the specifications for what will eventually become the dedicated stackoverflow.com server: Windows Server 2008 Standard Edition x64 Dual Quad-Core Xeon E5320 (1.8 GHz) 4 GB RAM 271GB SAS hard drive It’s amazing how cheap server hardware has gotten. I’m hoping we won’t run into scaling problems anytime soon with this dedicated server. As Ted Dziuba succinctly points out, scalability is usually the least of most startups’ worries."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/04/24/logo-design-contest/","date":"2008-04-23T22:00:00.000Z","tags":["Company"],"title":"Logo Design Contest","text":"The name stackoverflow.com was partially chosen by the community, with stackoverflow.com winning by a virtual landslide. But websites can’t survive on name alone. We also need a logo. A logo with verve. With zazz. With moxie! A dynamic logo that reflects the potential of this mythical programming community site we’re building. Rather than try out my anemic design skills — it’s always dangerous when programmers start thinking they’re designers — I thought I’d put the logo design to the community in similar fashion. We have a stackoverflow.com logo design contest at 99 designs, with a prize of $29 at stake. I’ve been quite impressed by many of the submissions so far. The contest runs for another five days, so if you’re interested, please submit a logo!"},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/04/23/podcast-2/","date":"2008-04-22T22:00:00.000Z","tags":["Company"],"title":"Podcast #2","text":"This is the second episode of the StackOverflow podcast, wherein Joel and I discuss the following: Why have a podcast at all? What’s the point? A discussion about some the podcasts Joel listens to: John Dvorak, Adam Curry. StackOverflow podcast transcription wiki courtesy of FogBugz New RSS feed at blog.stackoverflow.com, with podcast specific RSS feed courtesy of podpress. Podcast feed submitted at iTunes, PodCast Alley, Yahoo Podcasts and Podcast Ready. Sound quality concerns (we’re working on it). Why we require audio submissions for questions. We also answered the following listener questions, with a lot of peripheral discussion on related topics: Nathan Stohlmann: How do we plan to keep religious discussions from happening on stackoverflow? will we provide a way to show implementations in multiple languages? Matt Youell: How will we handle spam or reblogged content from stackoverflow? What about licensing issues with user-generated content? Andrew Davis: How will we prevent stackoverflow quality from diminishing over time as the site becomes more popular? Andre Bluehs: Should I learn C++? If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. The transcript wiki for this episode is available for editing."},{"platform":"Stack Overflow","url":"https://stackoverflow.blog/2008/04/17/podcast-1/","date":"2008-04-16T22:00:00.000Z","tags":["Company"],"title":"Podcast #1","text":"This is the inaugural episode of the StackOverflow Podcast, with your hosts Joel Spolsky and Jeff Atwood, wherein we explain what StackOverflow.com will be. We hope. If you’d like to submit a question to be answered in our next episode, record an audio file (90 seconds or less) and mail it to podcast@stackoverflow.com. The transcript wiki for this episode is available for editing. It was graciously submitted by Brian Pelton."}]